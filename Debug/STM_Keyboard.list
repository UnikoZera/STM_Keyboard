
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df30  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800e110  0800e110  0000f110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e278  0800e278  000101c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e278  0800e278  0000f278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e280  0800e280  000101c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e280  0800e280  0000f280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e284  0800e284  0000f284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  0800e288  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a2c  200001c4  0800e44c  000101c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf0  0800e44c  00010bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002865e  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060c3  00000000  00000000  00038852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002140  00000000  00000000  0003e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019b8  00000000  00000000  00040a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027961  00000000  00000000  00042410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d4ae  00000000  00000000  00069d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74d5  00000000  00000000  0009721f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093ec  00000000  00000000  0017e738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00187b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001c4 	.word	0x200001c4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e0f8 	.word	0x0800e0f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001c8 	.word	0x200001c8
 800021c:	0800e0f8 	.word	0x0800e0f8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f00c fed0 	bl	800d3aa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000614:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	481e      	ldr	r0, [pc, #120]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000676:	f001 fda9 	bl	80021cc <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 fcdf 	bl	8001042 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4818      	ldr	r0, [pc, #96]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000690:	f002 fe10 	bl	80032b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 fcd2 	bl	8001042 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_ADC1_Init+0x108>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	@ 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006bc:	f001 ffdc 	bl	8002678 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fcbc 	bl	8001042 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_ADC1_Init+0x10c>)
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ce:	230c      	movs	r3, #12
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006d8:	f001 ffce 	bl	8002678 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006e2:	f000 fcae 	bl	8001042 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	@ 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001e0 	.word	0x200001e0
 80006f4:	32601000 	.word	0x32601000
 80006f8:	3ef08000 	.word	0x3ef08000

080006fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f00c fe4e 	bl	800d3aa <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000710:	4a32      	ldr	r2, [pc, #200]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000716:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b2e      	ldr	r3, [pc, #184]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000728:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000730:	2201      	movs	r2, #1
 8000732:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000736:	2204      	movs	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000742:	2201      	movs	r2, #1
 8000744:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000748:	2202      	movs	r2, #2
 800074a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000762:	2201      	movs	r2, #1
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000776:	4818      	ldr	r0, [pc, #96]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000778:	f001 fd28 	bl	80021cc <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 fc5e 	bl	8001042 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_ADC2_Init+0xe4>)
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	@ 0x7f
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007a4:	f001 ff68 	bl	8002678 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ae:	f000 fc48 	bl	8001042 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_ADC2_Init+0xe8>)
 80007b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007b6:	230c      	movs	r3, #12
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007c0:	f001 ff5a 	bl	8002678 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80007ca:	f000 fc3a 	bl	8001042 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000024c 	.word	0x2000024c
 80007dc:	50000100 	.word	0x50000100
 80007e0:	0c900008 	.word	0x0c900008
 80007e4:	10c00010 	.word	0x10c00010

080007e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09c      	sub	sp, #112	@ 0x70
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	2244      	movs	r2, #68	@ 0x44
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00c fdce 	bl	800d3aa <memset>
  if(adcHandle->Instance==ADC1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000816:	d169      	bne.n	80008ec <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000818:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800081c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800081e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000822:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4618      	mov	r0, r3
 800082a:	f006 fbbb 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000834:	f000 fc05 	bl	8001042 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000838:	4b66      	ldr	r3, [pc, #408]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a65      	ldr	r2, [pc, #404]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000840:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000842:	4b64      	ldr	r3, [pc, #400]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800084a:	4b63      	ldr	r3, [pc, #396]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a62      	ldr	r2, [pc, #392]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000850:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b60      	ldr	r3, [pc, #384]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b5d      	ldr	r3, [pc, #372]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a5c      	ldr	r2, [pc, #368]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b5a      	ldr	r3, [pc, #360]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Key_2_Pin|Key_1_Pin;
 800087a:	2303      	movs	r3, #3
 800087c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800088a:	4619      	mov	r1, r3
 800088c:	4853      	ldr	r0, [pc, #332]	@ (80009dc <HAL_ADC_MspInit+0x1f4>)
 800088e:	f003 fa91 	bl	8003db4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000892:	4b53      	ldr	r3, [pc, #332]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 8000894:	4a53      	ldr	r2, [pc, #332]	@ (80009e4 <HAL_ADC_MspInit+0x1fc>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000898:	4b51      	ldr	r3, [pc, #324]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 800089a:	2205      	movs	r2, #5
 800089c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b4e      	ldr	r3, [pc, #312]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b4d      	ldr	r3, [pc, #308]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b8:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c0:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c2:	2220      	movs	r2, #32
 80008c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008ce:	4844      	ldr	r0, [pc, #272]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008d0:	f002 ff96 	bl	8003800 <HAL_DMA_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80008da:	f000 fbb2 	bl	8001042 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a3f      	ldr	r2, [pc, #252]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80008e4:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008ea:	e06e      	b.n	80009ca <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <HAL_ADC_MspInit+0x200>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d169      	bne.n	80009ca <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000900:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4618      	mov	r0, r3
 8000908:	f006 fb4c 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000912:	f000 fb96 	bl	8001042 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a2d      	ldr	r2, [pc, #180]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800091e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000920:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10b      	bne.n	8000940 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	4a2a      	ldr	r2, [pc, #168]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000944:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Key_3_Pin|Key_4_Pin;
 8000958:	23c0      	movs	r3, #192	@ 0xc0
 800095a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f003 fa21 	bl	8003db4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000974:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <HAL_ADC_MspInit+0x208>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800097a:	2224      	movs	r2, #36	@ 0x24
 800097c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000996:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800099a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a2:	2220      	movs	r2, #32
 80009a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009b0:	f002 ff26 	bl	8003800 <HAL_DMA_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 80009ba:	f000 fb42 	bl	8001042 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80009c4:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	@ 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000378 	.word	0x20000378
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400
 80009e0:	200002b8 	.word	0x200002b8
 80009e4:	40020008 	.word	0x40020008
 80009e8:	50000100 	.word	0x50000100
 80009ec:	20000318 	.word	0x20000318
 80009f0:	4002001c 	.word	0x4002001c

080009f4 <ADC_Init>:
    last_adc_data[2] = filter_adc_data[2];
    last_adc_data[3] = filter_adc_data[3];
}

void ADC_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80009f8:	217f      	movs	r1, #127	@ 0x7f
 80009fa:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <ADC_Init+0x24>)
 80009fc:	f002 fbf8 	bl	80031f0 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000a00:	217f      	movs	r1, #127	@ 0x7f
 8000a02:	4806      	ldr	r0, [pc, #24]	@ (8000a1c <ADC_Init+0x28>)
 8000a04:	f002 fbf4 	bl	80031f0 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(10); // 等待校准完成
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f001 f979 	bl	8001d00 <HAL_Delay>
    ADC_Start_DMA();
 8000a0e:	f000 f807 	bl	8000a20 <ADC_Start_DMA>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001e0 	.word	0x200001e0
 8000a1c:	2000024c 	.word	0x2000024c

08000a20 <ADC_Start_DMA>:


void ADC_Start_DMA(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer_adc_1, sizeof(buffer_adc_1)/sizeof(uint16_t));
 8000a24:	2202      	movs	r2, #2
 8000a26:	4905      	ldr	r1, [pc, #20]	@ (8000a3c <ADC_Start_DMA+0x1c>)
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <ADC_Start_DMA+0x20>)
 8000a2a:	f001 fd53 	bl	80024d4 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)buffer_adc_2, sizeof(buffer_adc_2)/sizeof(uint16_t));
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4904      	ldr	r1, [pc, #16]	@ (8000a44 <ADC_Start_DMA+0x24>)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <ADC_Start_DMA+0x28>)
 8000a34:	f001 fd4e 	bl	80024d4 <HAL_ADC_Start_DMA>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000037c 	.word	0x2000037c
 8000a40:	200001e0 	.word	0x200001e0
 8000a44:	20000380 	.word	0x20000380
 8000a48:	2000024c 	.word	0x2000024c

08000a4c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <MX_CRC_Init+0x3c>)
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <MX_CRC_Init+0x40>)
 8000a54:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_CRC_Init+0x3c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MX_CRC_Init+0x3c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_CRC_Init+0x3c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <MX_CRC_Init+0x3c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_CRC_Init+0x3c>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_CRC_Init+0x3c>)
 8000a76:	f002 fdd1 	bl	800361c <HAL_CRC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a80:	f000 fadf 	bl	8001042 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000038c 	.word	0x2000038c
 8000a8c:	40023000 	.word	0x40023000

08000a90 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_CRC_MspInit+0x38>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d10b      	bne.n	8000aba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_CRC_MspInit+0x3c>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa6:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <HAL_CRC_MspInit+0x3c>)
 8000aa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <HAL_CRC_MspInit+0x3c>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023000 	.word	0x40023000
 8000acc:	40021000 	.word	0x40021000

08000ad0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_DMA_Init+0x70>)
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <MX_DMA_Init+0x70>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_DMA_Init+0x70>)
 8000ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_DMA_Init+0x70>)
 8000af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000af2:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <MX_DMA_Init+0x70>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_DMA_Init+0x70>)
 8000afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	200b      	movs	r0, #11
 8000b0c:	f002 fd51 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b10:	200b      	movs	r0, #11
 8000b12:	f002 fd68 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200c      	movs	r0, #12
 8000b1c:	f002 fd49 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b20:	200c      	movs	r0, #12
 8000b22:	f002 fd60 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	200d      	movs	r0, #13
 8000b2c:	f002 fd41 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b30:	200d      	movs	r0, #13
 8000b32:	f002 fd58 	bl	80035e6 <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b72:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a24      	ldr	r2, [pc, #144]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a18      	ldr	r2, [pc, #96]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_GPIO_Init+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc0:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000bc2:	f003 fa79 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000be0:	f003 f8e8 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mode_Buttom_Pin */
  GPIO_InitStruct.Pin = Mode_Buttom_Pin;
 8000be4:	2320      	movs	r3, #32
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode_Buttom_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfa:	f003 f8db 	bl	8003db4 <HAL_GPIO_Init>

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	@ 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000800 	.word	0x48000800

08000c10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c16:	4a1e      	ldr	r2, [pc, #120]	@ (8000c90 <MX_I2C1_Init+0x80>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c94 <MX_I2C1_Init+0x84>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	4810      	ldr	r0, [pc, #64]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c4c:	f003 fa4c 	bl	80040e8 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 f9f4 	bl	8001042 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c5e:	f003 fe11 	bl	8004884 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 f9eb 	bl	8001042 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c70:	f003 fe53 	bl	800491a <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 f9e2 	bl	8001042 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000c7e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000c82:	f003 fe97 	bl	80049b4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200003b0 	.word	0x200003b0
 8000c90:	40005400 	.word	0x40005400
 8000c94:	4052060f 	.word	0x4052060f

08000c98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09c      	sub	sp, #112	@ 0x70
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	2244      	movs	r2, #68	@ 0x44
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f00c fb76 	bl	800d3aa <memset>
  if(i2cHandle->Instance==I2C1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d7c <HAL_I2C_MspInit+0xe4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d154      	bne.n	8000d72 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cc8:	2340      	movs	r3, #64	@ 0x40
 8000cca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 f965 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ce0:	f000 f9af 	bl	8001042 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b26      	ldr	r3, [pc, #152]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	4a25      	ldr	r2, [pc, #148]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf0:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d00:	4a1f      	ldr	r2, [pc, #124]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d08:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000d14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1a:	2312      	movs	r3, #18
 8000d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d26:	2304      	movs	r3, #4
 8000d28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d34:	f003 f83e 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8000d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3e:	2312      	movs	r3, #18
 8000d40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d52:	4619      	mov	r1, r3
 8000d54:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <HAL_I2C_MspInit+0xec>)
 8000d56:	f003 f82d 	bl	8003db4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000d60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_I2C_MspInit+0xe8>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d72:	bf00      	nop
 8000d74:	3770      	adds	r7, #112	@ 0x70
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000400 	.word	0x48000400

08000d88 <Keyboard_Init>:
// 第1位为保留位0x00
// 第2-6位为普通按键(0x00-0xFF) 这里做的是4key盘的协议
uint8_t hid_buffer[6] = {0};

void Keyboard_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
    ADC_Init();
 8000d8c:	f7ff fe32 	bl	80009f4 <ADC_Init>
    HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f000 ffb5 	bl	8001d00 <HAL_Delay>
    RGB_Init();
 8000d96:	f000 fa51 	bl	800123c <RGB_Init>
    HAL_Delay(100);
 8000d9a:	2064      	movs	r0, #100	@ 0x64
 8000d9c:	f000 ffb0 	bl	8001d00 <HAL_Delay>

    OLED_EnableDiffMode(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f000 fa1d 	bl	80011e0 <OLED_EnableDiffMode>
    OLED_EnableFastUpdate(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fa38 	bl	800121c <OLED_EnableFastUpdate>
    OLED_Init();
 8000dac:	f000 f9be 	bl	800112c <OLED_Init>
    // USB已经在main中初始化
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 ff30 	bl	8001c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f8f5 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f7ff febf 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc6:	f7ff fe83 	bl	8000ad0 <MX_DMA_Init>
  MX_ADC2_Init();
 8000dca:	f7ff fc97 	bl	80006fc <MX_ADC2_Init>
  MX_I2C1_Init();
 8000dce:	f7ff ff1f 	bl	8000c10 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8000dd2:	f00b fdc7 	bl	800c964 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8000dd6:	f7ff fc09 	bl	80005ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dda:	f000 fd0f 	bl	80017fc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000dde:	f000 fe51 	bl	8001a84 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000de2:	f000 fd81 	bl	80018e8 <MX_TIM6_Init>
  MX_CRC_Init();
 8000de6:	f7ff fe31 	bl	8000a4c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 8000dea:	f7ff ffcd 	bl	8000d88 <Keyboard_Init>
  HAL_Delay(100);
 8000dee:	2064      	movs	r0, #100	@ 0x64
 8000df0:	f000 ff86 	bl	8001d00 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (keyboard_settings.rgb_style == 0)
 8000df4:	4b6b      	ldr	r3, [pc, #428]	@ (8000fa4 <main+0x1f0>)
 8000df6:	7a5b      	ldrb	r3, [r3, #9]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <main+0x4e>
    {
      RGB_Clear();
 8000dfc:	f000 fa5a 	bl	80012b4 <RGB_Clear>
 8000e00:	e7f8      	b.n	8000df4 <main+0x40>
    }
    else if (keyboard_settings.rgb_style == 1)
 8000e02:	4b68      	ldr	r3, [pc, #416]	@ (8000fa4 <main+0x1f0>)
 8000e04:	7a5b      	ldrb	r3, [r3, #9]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d105      	bne.n	8000e16 <main+0x62>
    {
      RGB_RainbowCycle();
 8000e0a:	f000 fb57 	bl	80014bc <RGB_RainbowCycle>
      HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	@ 0x64
 8000e10:	f000 ff76 	bl	8001d00 <HAL_Delay>
 8000e14:	e7ee      	b.n	8000df4 <main+0x40>
    }
    else if (keyboard_settings.rgb_style == 2)
 8000e16:	4b63      	ldr	r3, [pc, #396]	@ (8000fa4 <main+0x1f0>)
 8000e18:	7a5b      	ldrb	r3, [r3, #9]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d1ea      	bne.n	8000df4 <main+0x40>
    {
      if (filter_adc_data[0] > keyboard_settings.trigger_threshold)
 8000e1e:	4b62      	ldr	r3, [pc, #392]	@ (8000fa8 <main+0x1f4>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa4 <main+0x1f0>)
 8000e2c:	edd3 7a00 	vldr	s15, [r3]
 8000e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e38:	dd21      	ble.n	8000e7e <main+0xca>
      {
        uint8_t red = rand() % 256;
 8000e3a:	f00c f973 	bl	800d124 <rand>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	425a      	negs	r2, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	bf58      	it	pl
 8000e48:	4253      	negpl	r3, r2
 8000e4a:	71bb      	strb	r3, [r7, #6]
        uint8_t green = rand() % 256;
 8000e4c:	f00c f96a 	bl	800d124 <rand>
 8000e50:	4603      	mov	r3, r0
 8000e52:	425a      	negs	r2, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	bf58      	it	pl
 8000e5a:	4253      	negpl	r3, r2
 8000e5c:	717b      	strb	r3, [r7, #5]
        uint8_t blue = rand() % 256;
 8000e5e:	f00c f961 	bl	800d124 <rand>
 8000e62:	4603      	mov	r3, r0
 8000e64:	425a      	negs	r2, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	bf58      	it	pl
 8000e6c:	4253      	negpl	r3, r2
 8000e6e:	713b      	strb	r3, [r7, #4]
        RGB_SetColor(0, red, green, blue);
 8000e70:	793b      	ldrb	r3, [r7, #4]
 8000e72:	797a      	ldrb	r2, [r7, #5]
 8000e74:	79b9      	ldrb	r1, [r7, #6]
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f9e8 	bl	800124c <RGB_SetColor>
 8000e7c:	e08e      	b.n	8000f9c <main+0x1e8>
      }
      else if (filter_adc_data[1] > keyboard_settings.trigger_threshold)
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <main+0x1f4>)
 8000e80:	885b      	ldrh	r3, [r3, #2]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8a:	4b46      	ldr	r3, [pc, #280]	@ (8000fa4 <main+0x1f0>)
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e98:	dd21      	ble.n	8000ede <main+0x12a>
      {
        uint8_t red = rand() % 256;
 8000e9a:	f00c f943 	bl	800d124 <rand>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	425a      	negs	r2, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	bf58      	it	pl
 8000ea8:	4253      	negpl	r3, r2
 8000eaa:	727b      	strb	r3, [r7, #9]
        uint8_t green = rand() % 256;
 8000eac:	f00c f93a 	bl	800d124 <rand>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	425a      	negs	r2, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	bf58      	it	pl
 8000eba:	4253      	negpl	r3, r2
 8000ebc:	723b      	strb	r3, [r7, #8]
        uint8_t blue = rand() % 256;
 8000ebe:	f00c f931 	bl	800d124 <rand>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	425a      	negs	r2, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	bf58      	it	pl
 8000ecc:	4253      	negpl	r3, r2
 8000ece:	71fb      	strb	r3, [r7, #7]
        RGB_SetColor(1, red, green, blue);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	7a3a      	ldrb	r2, [r7, #8]
 8000ed4:	7a79      	ldrb	r1, [r7, #9]
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 f9b8 	bl	800124c <RGB_SetColor>
 8000edc:	e05e      	b.n	8000f9c <main+0x1e8>
      }
      else if (filter_adc_data[2] > keyboard_settings.trigger_threshold)
 8000ede:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <main+0x1f4>)
 8000ee0:	889b      	ldrh	r3, [r3, #4]
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <main+0x1f0>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	dd21      	ble.n	8000f3e <main+0x18a>
      {
        uint8_t red = rand() % 256;
 8000efa:	f00c f913 	bl	800d124 <rand>
 8000efe:	4603      	mov	r3, r0
 8000f00:	425a      	negs	r2, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	bf58      	it	pl
 8000f08:	4253      	negpl	r3, r2
 8000f0a:	733b      	strb	r3, [r7, #12]
        uint8_t green = rand() % 256;
 8000f0c:	f00c f90a 	bl	800d124 <rand>
 8000f10:	4603      	mov	r3, r0
 8000f12:	425a      	negs	r2, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	bf58      	it	pl
 8000f1a:	4253      	negpl	r3, r2
 8000f1c:	72fb      	strb	r3, [r7, #11]
        uint8_t blue = rand() % 256;
 8000f1e:	f00c f901 	bl	800d124 <rand>
 8000f22:	4603      	mov	r3, r0
 8000f24:	425a      	negs	r2, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	bf58      	it	pl
 8000f2c:	4253      	negpl	r3, r2
 8000f2e:	72bb      	strb	r3, [r7, #10]
        RGB_SetColor(2, red, green, blue);
 8000f30:	7abb      	ldrb	r3, [r7, #10]
 8000f32:	7afa      	ldrb	r2, [r7, #11]
 8000f34:	7b39      	ldrb	r1, [r7, #12]
 8000f36:	2002      	movs	r0, #2
 8000f38:	f000 f988 	bl	800124c <RGB_SetColor>
 8000f3c:	e02e      	b.n	8000f9c <main+0x1e8>
      }
      else if (filter_adc_data[3] > keyboard_settings.trigger_threshold)
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <main+0x1f4>)
 8000f40:	88db      	ldrh	r3, [r3, #6]
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <main+0x1f0>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	dd20      	ble.n	8000f9c <main+0x1e8>
      {
        uint8_t red = rand() % 256;
 8000f5a:	f00c f8e3 	bl	800d124 <rand>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	425a      	negs	r2, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	bf58      	it	pl
 8000f68:	4253      	negpl	r3, r2
 8000f6a:	73fb      	strb	r3, [r7, #15]
        uint8_t green = rand() % 256;
 8000f6c:	f00c f8da 	bl	800d124 <rand>
 8000f70:	4603      	mov	r3, r0
 8000f72:	425a      	negs	r2, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	bf58      	it	pl
 8000f7a:	4253      	negpl	r3, r2
 8000f7c:	73bb      	strb	r3, [r7, #14]
        uint8_t blue = rand() % 256;
 8000f7e:	f00c f8d1 	bl	800d124 <rand>
 8000f82:	4603      	mov	r3, r0
 8000f84:	425a      	negs	r2, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	bf58      	it	pl
 8000f8c:	4253      	negpl	r3, r2
 8000f8e:	737b      	strb	r3, [r7, #13]
        RGB_SetColor(3, red, green, blue);
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	7bba      	ldrb	r2, [r7, #14]
 8000f94:	7bf9      	ldrb	r1, [r7, #15]
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f958 	bl	800124c <RGB_SetColor>
      }
      RGB_Update();
 8000f9c:	f000 f9a2 	bl	80012e4 <RGB_Update>
    if (keyboard_settings.rgb_style == 0)
 8000fa0:	e728      	b.n	8000df4 <main+0x40>
 8000fa2:	bf00      	nop
 8000fa4:	20000404 	.word	0x20000404
 8000fa8:	20000384 	.word	0x20000384

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2238      	movs	r2, #56	@ 0x38
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00c f9f5 	bl	800d3aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f005 fa06 	bl	80063e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000fd4:	2321      	movs	r3, #33	@ 0x21
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fdc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fee:	2355      	movs	r3, #85	@ 0x55
 8000ff0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4618      	mov	r0, r3
 8001004:	f005 faa0 	bl	8006548 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800100e:	f000 f818 	bl	8001042 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2303      	movs	r3, #3
 8001018:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f005 fd9e 	bl	8006b6c <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001036:	f000 f804 	bl	8001042 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	@ 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001046:	b672      	cpsid	i
}
 8001048:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104a:	bf00      	nop
 800104c:	e7fd      	b.n	800104a <Error_Handler+0x8>
	...

08001050 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105a:	2100      	movs	r1, #0
 800105c:	4811      	ldr	r0, [pc, #68]	@ (80010a4 <OLED_InitBuffer+0x54>)
 800105e:	f00c f9a4 	bl	800d3aa <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001062:	f240 4201 	movw	r2, #1025	@ 0x401
 8001066:	2100      	movs	r1, #0
 8001068:	480f      	ldr	r0, [pc, #60]	@ (80010a8 <OLED_InitBuffer+0x58>)
 800106a:	f00c f99e 	bl	800d3aa <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <OLED_InitBuffer+0x58>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <OLED_InitBuffer+0x5c>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <OLED_InitBuffer+0x60>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	e006      	b.n	8001094 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <OLED_InitBuffer+0x64>)
 800108a:	2101      	movs	r1, #1
 800108c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	3301      	adds	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b07      	cmp	r3, #7
 8001098:	d9f5      	bls.n	8001086 <OLED_InitBuffer+0x36>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000420 	.word	0x20000420
 80010a8:	20000820 	.word	0x20000820
 80010ac:	20000414 	.word	0x20000414
 80010b0:	20000415 	.word	0x20000415
 80010b4:	20000418 	.word	0x20000418

080010b8 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80010be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c2:	2100      	movs	r1, #0
 80010c4:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <OLED_ClearBuffer+0x38>)
 80010c6:	f00c f970 	bl	800d3aa <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	e006      	b.n	80010de <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <OLED_ClearBuffer+0x3c>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	3301      	adds	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d9f5      	bls.n	80010d0 <OLED_ClearBuffer+0x18>
    }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000420 	.word	0x20000420
 80010f4:	20000418 	.word	0x20000418

080010f8 <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001102:	2300      	movs	r3, #0
 8001104:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800110a:	f107 020c 	add.w	r2, r7, #12
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	2178      	movs	r1, #120	@ 0x78
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <OLED_SendCommand+0x30>)
 800111a:	f003 f881 	bl	8004220 <HAL_I2C_Master_Transmit>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003b0 	.word	0x200003b0

0800112c <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001130:	2064      	movs	r0, #100	@ 0x64
 8001132:	f000 fde5 	bl	8001d00 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001136:	20ae      	movs	r0, #174	@ 0xae
 8001138:	f7ff ffde 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 800113c:	20d5      	movs	r0, #213	@ 0xd5
 800113e:	f7ff ffdb 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001142:	2080      	movs	r0, #128	@ 0x80
 8001144:	f7ff ffd8 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001148:	20a8      	movs	r0, #168	@ 0xa8
 800114a:	f7ff ffd5 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 800114e:	203f      	movs	r0, #63	@ 0x3f
 8001150:	f7ff ffd2 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001154:	20d3      	movs	r0, #211	@ 0xd3
 8001156:	f7ff ffcf 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ffcc 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001160:	2040      	movs	r0, #64	@ 0x40
 8001162:	f7ff ffc9 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001166:	208d      	movs	r0, #141	@ 0x8d
 8001168:	f7ff ffc6 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 800116c:	2014      	movs	r0, #20
 800116e:	f7ff ffc3 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001172:	2020      	movs	r0, #32
 8001174:	f7ff ffc0 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ffbd 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 800117e:	20a1      	movs	r0, #161	@ 0xa1
 8001180:	f7ff ffba 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001184:	20c8      	movs	r0, #200	@ 0xc8
 8001186:	f7ff ffb7 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 800118a:	20da      	movs	r0, #218	@ 0xda
 800118c:	f7ff ffb4 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001190:	2012      	movs	r0, #18
 8001192:	f7ff ffb1 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8001196:	2081      	movs	r0, #129	@ 0x81
 8001198:	f7ff ffae 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 800119c:	20cf      	movs	r0, #207	@ 0xcf
 800119e:	f7ff ffab 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 80011a2:	20d9      	movs	r0, #217	@ 0xd9
 80011a4:	f7ff ffa8 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 80011a8:	20f1      	movs	r0, #241	@ 0xf1
 80011aa:	f7ff ffa5 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 80011ae:	20db      	movs	r0, #219	@ 0xdb
 80011b0:	f7ff ffa2 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 80011b4:	2030      	movs	r0, #48	@ 0x30
 80011b6:	f7ff ff9f 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 80011ba:	20a4      	movs	r0, #164	@ 0xa4
 80011bc:	f7ff ff9c 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 80011c0:	20a6      	movs	r0, #166	@ 0xa6
 80011c2:	f7ff ff99 	bl	80010f8 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 80011c6:	202e      	movs	r0, #46	@ 0x2e
 80011c8:	f7ff ff96 	bl	80010f8 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 80011cc:	f7ff ff40 	bl	8001050 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 80011d0:	f7ff ff72 	bl	80010b8 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 80011d4:	20af      	movs	r0, #175	@ 0xaf
 80011d6:	f7ff ff8f 	bl	80010f8 <OLED_SendCommand>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 80011ea:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <OLED_EnableDiffMode+0x30>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	7013      	strb	r3, [r2, #0]
    if (enable)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d008      	beq.n	8001208 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 80011f6:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <OLED_EnableDiffMode+0x34>)
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <OLED_EnableDiffMode+0x38>)
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001202:	461a      	mov	r2, r3
 8001204:	f00c f94d 	bl	800d4a2 <memcpy>
    }
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20001024 	.word	0x20001024
 8001214:	20000c24 	.word	0x20000c24
 8001218:	20000420 	.word	0x20000420

0800121c <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <OLED_EnableFastUpdate+0x1c>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	7013      	strb	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000000 	.word	0x20000000

0800123c <RGB_Init>:
#define PWM_BUFFER_LEN (NUM_LEDS * 24 + RESET_PULSE_LEN) // GRB order, both need 24 bits
static uint8_t led_colors[NUM_LEDS][3];
static uint16_t pwm_buffer[PWM_BUFFER_LEN];

void RGB_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    RGB_Clear();
 8001240:	f000 f838 	bl	80012b4 <RGB_Clear>
    RGB_Update();
 8001244:	f000 f84e 	bl	80012e4 <RGB_Update>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <RGB_SetColor>:

// RGB范围是0-255
// led_index: 0-3
void RGB_SetColor(uint8_t led_index, uint8_t red, uint8_t green, uint8_t blue)
{
 800124c:	b490      	push	{r4, r7}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	4603      	mov	r3, r0
 8001260:	71bb      	strb	r3, [r7, #6]
 8001262:	460b      	mov	r3, r1
 8001264:	717b      	strb	r3, [r7, #5]
 8001266:	4613      	mov	r3, r2
 8001268:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d819      	bhi.n	80012a4 <RGB_SetColor+0x58>
    {
        led_colors[led_index][0] = red;
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	490f      	ldr	r1, [pc, #60]	@ (80012b0 <RGB_SetColor+0x64>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	440b      	add	r3, r1
 800127c:	79ba      	ldrb	r2, [r7, #6]
 800127e:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][1] = green;
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	490b      	ldr	r1, [pc, #44]	@ (80012b0 <RGB_SetColor+0x64>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	440b      	add	r3, r1
 800128c:	3301      	adds	r3, #1
 800128e:	797a      	ldrb	r2, [r7, #5]
 8001290:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][2] = blue;
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <RGB_SetColor+0x64>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	440b      	add	r3, r1
 800129e:	3302      	adds	r3, #2
 80012a0:	793a      	ldrb	r2, [r7, #4]
 80012a2:	701a      	strb	r2, [r3, #0]
    }
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc90      	pop	{r4, r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20001028 	.word	0x20001028

080012b4 <RGB_Clear>:

void RGB_Clear(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e009      	b.n	80012d4 <RGB_Clear+0x20>
    {
        RGB_SetColor(i, 0, 0, 0);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	b2d8      	uxtb	r0, r3
 80012c4:	2300      	movs	r3, #0
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	f7ff ffbf 	bl	800124c <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3301      	adds	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	ddf2      	ble.n	80012c0 <RGB_Clear+0xc>
    }
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <RGB_Update>:

//! setColor之后请直接调用这个来更新LED颜色
void RGB_Update(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	e067      	b.n	80013c4 <RGB_Update+0xe0>
    {
        // Green
        for (int j = 7; j >= 0; j--)
 80012f4:	2307      	movs	r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e01b      	b.n	8001332 <RGB_Update+0x4e>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][1] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 80012fa:	4941      	ldr	r1, [pc, #260]	@ (8001400 <RGB_Update+0x11c>)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	440b      	add	r3, r1
 8001306:	3301      	adds	r3, #1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	fa42 f303 	asr.w	r3, r2, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <RGB_Update+0x3a>
 800131a:	2188      	movs	r1, #136	@ 0x88
 800131c:	e000      	b.n	8001320 <RGB_Update+0x3c>
 800131e:	2144      	movs	r1, #68	@ 0x44
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	617a      	str	r2, [r7, #20]
 8001326:	4a37      	ldr	r2, [pc, #220]	@ (8001404 <RGB_Update+0x120>)
 8001328:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b01      	subs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dae0      	bge.n	80012fa <RGB_Update+0x16>
        }
        // Red
        for (int j = 7; j >= 0; j--)
 8001338:	2307      	movs	r3, #7
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	e01a      	b.n	8001374 <RGB_Update+0x90>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][0] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 800133e:	4930      	ldr	r1, [pc, #192]	@ (8001400 <RGB_Update+0x11c>)
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	440b      	add	r3, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	fa42 f303 	asr.w	r3, r2, r3
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <RGB_Update+0x7c>
 800135c:	2188      	movs	r1, #136	@ 0x88
 800135e:	e000      	b.n	8001362 <RGB_Update+0x7e>
 8001360:	2144      	movs	r1, #68	@ 0x44
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	617a      	str	r2, [r7, #20]
 8001368:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <RGB_Update+0x120>)
 800136a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	dae1      	bge.n	800133e <RGB_Update+0x5a>
        }
        // Blue
        for (int j = 7; j >= 0; j--)
 800137a:	2307      	movs	r3, #7
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	e01b      	b.n	80013b8 <RGB_Update+0xd4>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][2] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001380:	491f      	ldr	r1, [pc, #124]	@ (8001400 <RGB_Update+0x11c>)
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	440b      	add	r3, r1
 800138c:	3302      	adds	r3, #2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	fa42 f303 	asr.w	r3, r2, r3
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <RGB_Update+0xc0>
 80013a0:	2188      	movs	r1, #136	@ 0x88
 80013a2:	e000      	b.n	80013a6 <RGB_Update+0xc2>
 80013a4:	2144      	movs	r1, #68	@ 0x44
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	617a      	str	r2, [r7, #20]
 80013ac:	4a15      	ldr	r2, [pc, #84]	@ (8001404 <RGB_Update+0x120>)
 80013ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dae0      	bge.n	8001380 <RGB_Update+0x9c>
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	3301      	adds	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	dd94      	ble.n	80012f4 <RGB_Update+0x10>
        }
    }

    // Reset pulse
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	e009      	b.n	80013e4 <RGB_Update+0x100>
    {
        pwm_buffer[buffer_index++] = 0;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	617a      	str	r2, [r7, #20]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <RGB_Update+0x120>)
 80013d8:	2100      	movs	r1, #0
 80013da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2b29      	cmp	r3, #41	@ 0x29
 80013e8:	ddf2      	ble.n	80013d0 <RGB_Update+0xec>
    }

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwm_buffer, PWM_BUFFER_LEN);
 80013ea:	238a      	movs	r3, #138	@ 0x8a
 80013ec:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <RGB_Update+0x120>)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <RGB_Update+0x124>)
 80013f2:	f006 f87f 	bl	80074f4 <HAL_TIM_PWM_Start_DMA>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20001028 	.word	0x20001028
 8001404:	20001034 	.word	0x20001034
 8001408:	20001150 	.word	0x20001150

0800140c <Hue_To_RGB>:

// --- Helper function for rainbow effect ---
// Converts a hue value (0-255) to an RGB color.
static void Hue_To_RGB(uint8_t hue, uint8_t *r, uint8_t *g, uint8_t *b)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]
    if (hue < 85)
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b54      	cmp	r3, #84	@ 0x54
 8001420:	d814      	bhi.n	800144c <Hue_To_RGB+0x40>
    { // Red -> Green
        *r = (85 - hue) * 3;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	0052      	lsls	r2, r2, #1
 800142e:	4413      	add	r3, r2
 8001430:	b2da      	uxtb	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	701a      	strb	r2, [r3, #0]
        *g = hue * 3;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	461a      	mov	r2, r3
 800143a:	0052      	lsls	r2, r2, #1
 800143c:	4413      	add	r3, r2
 800143e:	b2da      	uxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
        hue -= 170;
        *r = hue * 3;
        *g = 0;
        *b = (85 - hue) * 3;
    }
}
 800144a:	e031      	b.n	80014b0 <Hue_To_RGB+0xa4>
    else if (hue < 170)
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2ba9      	cmp	r3, #169	@ 0xa9
 8001450:	d817      	bhi.n	8001482 <Hue_To_RGB+0x76>
        hue -= 85;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3b55      	subs	r3, #85	@ 0x55
 8001456:	73fb      	strb	r3, [r7, #15]
        *r = 0;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
        *g = (85 - hue) * 3;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	0052      	lsls	r2, r2, #1
 800146a:	4413      	add	r3, r2
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	701a      	strb	r2, [r3, #0]
        *b = hue * 3;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	461a      	mov	r2, r3
 8001476:	0052      	lsls	r2, r2, #1
 8001478:	4413      	add	r3, r2
 800147a:	b2da      	uxtb	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	701a      	strb	r2, [r3, #0]
}
 8001480:	e016      	b.n	80014b0 <Hue_To_RGB+0xa4>
        hue -= 170;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	3356      	adds	r3, #86	@ 0x56
 8001486:	73fb      	strb	r3, [r7, #15]
        *r = hue * 3;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	461a      	mov	r2, r3
 800148c:	0052      	lsls	r2, r2, #1
 800148e:	4413      	add	r3, r2
 8001490:	b2da      	uxtb	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
        *b = (85 - hue) * 3;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	0052      	lsls	r2, r2, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <RGB_RainbowCycle>:

static uint16_t rainbow_hue = 0;

void RGB_RainbowCycle(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
    uint8_t r, g, b;
    for (int i = 0; i < NUM_LEDS; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	e018      	b.n	80014fa <RGB_RainbowCycle+0x3e>
    {
        // Calculate the hue for each LED, offset by its position to create the rainbow.
        uint8_t hue = (rainbow_hue + (i * 256 / NUM_LEDS)) & 0xFF;
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <RGB_RainbowCycle+0x6c>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	019b      	lsls	r3, r3, #6
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	70fb      	strb	r3, [r7, #3]
        Hue_To_RGB(hue, &r, &g, &b);
 80014da:	463b      	mov	r3, r7
 80014dc:	1c7a      	adds	r2, r7, #1
 80014de:	1cb9      	adds	r1, r7, #2
 80014e0:	78f8      	ldrb	r0, [r7, #3]
 80014e2:	f7ff ff93 	bl	800140c <Hue_To_RGB>
        RGB_SetColor(i, r, g, b);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	b2d8      	uxtb	r0, r3
 80014ea:	78b9      	ldrb	r1, [r7, #2]
 80014ec:	787a      	ldrb	r2, [r7, #1]
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	f7ff feac 	bl	800124c <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3301      	adds	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	dde3      	ble.n	80014c8 <RGB_RainbowCycle+0xc>
    }
    RGB_Update();
 8001500:	f7ff fef0 	bl	80012e4 <RGB_Update>

    // Increment the hue for the next cycle to make the rainbow move.
    rainbow_hue++;
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <RGB_RainbowCycle+0x6c>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <RGB_RainbowCycle+0x6c>)
 800150e:	801a      	strh	r2, [r3, #0]
    if (rainbow_hue >= 256)
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <RGB_RainbowCycle+0x6c>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	2bff      	cmp	r3, #255	@ 0xff
 8001516:	d902      	bls.n	800151e <RGB_RainbowCycle+0x62>
    {
        rainbow_hue = 0;
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <RGB_RainbowCycle+0x6c>)
 800151a:	2200      	movs	r2, #0
 800151c:	801a      	strh	r2, [r3, #0]
    }
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20001148 	.word	0x20001148

0800152c <HAL_TIM_PWM_PulseFinishedCallback>:

// 自动回调函数停止DMA
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d103      	bne.n	8001546 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f006 f9ef 	bl	8007924 <HAL_TIM_PWM_Stop_DMA>
    }
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40000400 	.word	0x40000400

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_MspInit+0x44>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <HAL_MspInit+0x44>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6613      	str	r3, [r2, #96]	@ 0x60
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <HAL_MspInit+0x44>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <HAL_MspInit+0x44>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	@ 0x58
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800158a:	f004 ffcd 	bl	8006528 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 fb67 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <DMA1_Channel1_IRQHandler+0x10>)
 8001602:	f002 fa87 	bl	8003b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002b8 	.word	0x200002b8

08001610 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <DMA1_Channel2_IRQHandler+0x10>)
 8001616:	f002 fa7d 	bl	8003b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000318 	.word	0x20000318

08001624 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Channel3_IRQHandler+0x10>)
 800162a:	f002 fa73 	bl	8003b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200011e8 	.word	0x200011e8

08001638 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <USB_LP_IRQHandler+0x10>)
 800163e:	f003 fac9 	bl	8004bd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200017b4 	.word	0x200017b4

0800164c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_kill>:

int _kill(int pid, int sig)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001666:	f00b feef 	bl	800d448 <__errno>
 800166a:	4603      	mov	r3, r0
 800166c:	2216      	movs	r2, #22
 800166e:	601a      	str	r2, [r3, #0]
  return -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_exit>:

void _exit (int status)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffe7 	bl	800165c <_kill>
  while (1) {}    /* Make sure we hang here */
 800168e:	bf00      	nop
 8001690:	e7fd      	b.n	800168e <_exit+0x12>

08001692 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e00a      	b.n	80016ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a4:	f3af 8000 	nop.w
 80016a8:	4601      	mov	r1, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	60ba      	str	r2, [r7, #8]
 80016b0:	b2ca      	uxtb	r2, r1
 80016b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbf0      	blt.n	80016a4 <_read+0x12>
  }

  return len;
 80016c2:	687b      	ldr	r3, [r7, #4]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e009      	b.n	80016f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	60ba      	str	r2, [r7, #8]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbf1      	blt.n	80016de <_write+0x12>
  }
  return len;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_close>:

int _close(int file)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800172c:	605a      	str	r2, [r3, #4]
  return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_isatty>:

int _isatty(int file)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f00b fe54 	bl	800d448 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20008000 	.word	0x20008000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	2000114c 	.word	0x2000114c
 80017d4:	20001bf0 	.word	0x20001bf0

080017d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	@ 0x38
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800182e:	4b2c      	ldr	r3, [pc, #176]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 8001830:	4a2c      	ldr	r2, [pc, #176]	@ (80018e4 <MX_TIM3_Init+0xe8>)
 8001832:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 8001842:	22d4      	movs	r2, #212	@ 0xd4
 8001844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001852:	4823      	ldr	r0, [pc, #140]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 8001854:	f005 fd96 	bl	8007384 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800185e:	f7ff fbf0 	bl	8001042 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001868:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186c:	4619      	mov	r1, r3
 800186e:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 8001870:	f006 fa64 	bl	8007d3c <HAL_TIM_ConfigClockSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800187a:	f7ff fbe2 	bl	8001042 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800187e:	4818      	ldr	r0, [pc, #96]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 8001880:	f005 fdd7 	bl	8007432 <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800188a:	f7ff fbda 	bl	8001042 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 800189e:	f007 f881 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018a8:	f7ff fbcb 	bl	8001042 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ac:	2360      	movs	r3, #96	@ 0x60
 80018ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 80018c4:	f006 f926 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018ce:	f7ff fbb8 	bl	8001042 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018d2:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <MX_TIM3_Init+0xe4>)
 80018d4:	f000 f89e 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 80018d8:	bf00      	nop
 80018da:	3738      	adds	r7, #56	@ 0x38
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20001150 	.word	0x20001150
 80018e4:	40000400 	.word	0x40000400

080018e8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <MX_TIM6_Init+0x64>)
 80018fa:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <MX_TIM6_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <MX_TIM6_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <MX_TIM6_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <MX_TIM6_Init+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MX_TIM6_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001916:	480d      	ldr	r0, [pc, #52]	@ (800194c <MX_TIM6_Init+0x64>)
 8001918:	f005 fd34 	bl	8007384 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001922:	f7ff fb8e 	bl	8001042 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	@ (800194c <MX_TIM6_Init+0x64>)
 8001934:	f007 f836 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800193e:	f7ff fb80 	bl	8001042 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000119c 	.word	0x2000119c
 8001950:	40001000 	.word	0x40001000

08001954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a27      	ldr	r2, [pc, #156]	@ (8001a00 <HAL_TIM_Base_MspInit+0xac>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d137      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001966:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <HAL_TIM_Base_MspInit+0xb0>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	4a26      	ldr	r2, [pc, #152]	@ (8001a04 <HAL_TIM_Base_MspInit+0xb0>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6593      	str	r3, [r2, #88]	@ 0x58
 8001972:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <HAL_TIM_Base_MspInit+0xb0>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel3;
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 8001980:	4a22      	ldr	r2, [pc, #136]	@ (8001a0c <HAL_TIM_Base_MspInit+0xb8>)
 8001982:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 8001986:	223d      	movs	r2, #61	@ 0x3d
 8001988:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800198a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 800198c:	2210      	movs	r2, #16
 800198e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 8001998:	2280      	movs	r2, #128	@ 0x80
 800199a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 800199e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019aa:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80019b8:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 80019ba:	f001 ff21 	bl	8003800 <HAL_DMA_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80019c4:	f7ff fb3d 	bl	8001042 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80019ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <HAL_TIM_Base_MspInit+0xb4>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80019d4:	e010      	b.n	80019f8 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM6)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <HAL_TIM_Base_MspInit+0xbc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d10b      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_TIM_Base_MspInit+0xb0>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_TIM_Base_MspInit+0xb0>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_TIM_Base_MspInit+0xb0>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40021000 	.word	0x40021000
 8001a08:	200011e8 	.word	0x200011e8
 8001a0c:	40020030 	.word	0x40020030
 8001a10:	40001000 	.word	0x40001000

08001a14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <HAL_TIM_MspPostInit+0x64>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d11b      	bne.n	8001a6e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_TIM_MspPostInit+0x68>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_TIM_MspPostInit+0x68>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_TIM_MspPostInit+0x68>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RGB_PWM_Pin;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <HAL_TIM_MspPostInit+0x6c>)
 8001a6a:	f002 f9a3 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400

08001a84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a8a:	4a23      	ldr	r2, [pc, #140]	@ (8001b18 <MX_USART2_UART_Init+0x94>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001acc:	4811      	ldr	r0, [pc, #68]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ace:	f006 ffeb 	bl	8008aa8 <HAL_UART_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ad8:	f7ff fab3 	bl	8001042 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001adc:	2100      	movs	r1, #0
 8001ade:	480d      	ldr	r0, [pc, #52]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ae0:	f007 fd56 	bl	8009590 <HAL_UARTEx_SetTxFifoThreshold>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001aea:	f7ff faaa 	bl	8001042 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aee:	2100      	movs	r1, #0
 8001af0:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001af2:	f007 fd8b 	bl	800960c <HAL_UARTEx_SetRxFifoThreshold>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001afc:	f7ff faa1 	bl	8001042 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001b02:	f007 fd0c 	bl	800951e <HAL_UARTEx_DisableFifoMode>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b0c:	f7ff fa99 	bl	8001042 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20001248 	.word	0x20001248
 8001b18:	40004400 	.word	0x40004400

08001b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b09a      	sub	sp, #104	@ 0x68
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	2244      	movs	r2, #68	@ 0x44
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f00b fc34 	bl	800d3aa <memset>
  if(uartHandle->Instance==USART2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <HAL_UART_MspInit+0xa8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d136      	bne.n	8001bba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f005 fa23 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b64:	f7ff fa6d 	bl	8001042 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_UART_MspInit+0xac>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	4a16      	ldr	r2, [pc, #88]	@ (8001bc8 <HAL_UART_MspInit+0xac>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_UART_MspInit+0xac>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_UART_MspInit+0xac>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <HAL_UART_MspInit+0xac>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_UART_MspInit+0xac>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb6:	f002 f8fd 	bl	8003db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3768      	adds	r7, #104	@ 0x68
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40021000 	.word	0x40021000

08001bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd0:	f7ff fe02 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopForever+0xe>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopForever+0x16>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f00b fc2b 	bl	800d454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfe:	f7ff f8d9 	bl	8000db4 <main>

08001c02 <LoopForever>:

LoopForever:
    b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   r0, =_estack
 8001c04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8001c10:	0800e288 	.word	0x0800e288
  ldr r2, =_sbss
 8001c14:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8001c18:	20001bf0 	.word	0x20001bf0

08001c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_2_IRQHandler>

08001c1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f001 fcb7 	bl	800359c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 f80e 	bl	8001c50 <HAL_InitTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	71fb      	strb	r3, [r7, #7]
 8001c3e:	e001      	b.n	8001c44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c40:	f7ff fc88 	bl	8001554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c44:	79fb      	ldrb	r3, [r7, #7]

}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c5c:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <HAL_InitTick+0x68>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d022      	beq.n	8001caa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_InitTick+0x6c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_InitTick+0x68>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fcc2 	bl	8003602 <HAL_SYSTICK_Config>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10f      	bne.n	8001ca4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	d809      	bhi.n	8001c9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c92:	f001 fc8e 	bl	80035b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_InitTick+0x70>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e007      	b.n	8001cae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	e004      	b.n	8001cae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e001      	b.n	8001cae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	20000004 	.word	0x20000004
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_IncTick+0x1c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_IncTick+0x20>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a03      	ldr	r2, [pc, #12]	@ (8001ce0 <HAL_IncTick+0x1c>)
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	200012dc 	.word	0x200012dc
 8001ce4:	2000000c 	.word	0x2000000c

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200012dc 	.word	0x200012dc

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d004      	beq.n	8001d24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_Delay+0x40>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d24:	bf00      	nop
 8001d26:	f7ff ffdf 	bl	8001ce8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d8f7      	bhi.n	8001d26 <HAL_Delay+0x26>
  {
  }
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000000c 	.word	0x2000000c

08001d44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3360      	adds	r3, #96	@ 0x60
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <LL_ADC_SetOffset+0x44>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	03fff000 	.word	0x03fff000

08001df4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3360      	adds	r3, #96	@ 0x60
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3360      	adds	r3, #96	@ 0x60
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b087      	sub	sp, #28
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3360      	adds	r3, #96	@ 0x60
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3360      	adds	r3, #96	@ 0x60
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	615a      	str	r2, [r3, #20]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b087      	sub	sp, #28
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3330      	adds	r3, #48	@ 0x30
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	4413      	add	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	211f      	movs	r1, #31
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	401a      	ands	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	f003 011f 	and.w	r1, r3, #31
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b087      	sub	sp, #28
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3314      	adds	r3, #20
 8001f76:	461a      	mov	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	0e5b      	lsrs	r3, r3, #25
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	4413      	add	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	0d1b      	lsrs	r3, r3, #20
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2107      	movs	r1, #7
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	0d1b      	lsrs	r3, r3, #20
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	431a      	orrs	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0318 	and.w	r3, r3, #24
 8001fde:	4908      	ldr	r1, [pc, #32]	@ (8002000 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fe0:	40d9      	lsrs	r1, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	0007ffff 	.word	0x0007ffff

08002004 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 031f 	and.w	r3, r3, #31
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6093      	str	r3, [r2, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002080:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020a8:	d101      	bne.n	80020ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f8:	f043 0202 	orr.w	r2, r3, #2
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <LL_ADC_IsEnabled+0x18>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <LL_ADC_IsEnabled+0x1a>
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d101      	bne.n	800214a <LL_ADC_IsDisableOngoing+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_IsDisableOngoing+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002168:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b04      	cmp	r3, #4
 8002192:	d101      	bne.n	8002198 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d101      	bne.n	80021be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e167      	b.n	80024b6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7fe faf7 	bl	80007e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff19 	bl	8002044 <LL_ADC_IsDeepPowerDownEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff feff 	bl	8002020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff34 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d115      	bne.n	800225e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff18 	bl	800206c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800223c:	4ba0      	ldr	r3, [pc, #640]	@ (80024c0 <HAL_ADC_Init+0x2f4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	4aa0      	ldr	r2, [pc, #640]	@ (80024c4 <HAL_ADC_Init+0x2f8>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	3301      	adds	r3, #1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002250:	e002      	b.n	8002258 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3b01      	subs	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f9      	bne.n	8002252 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff16 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002272:	f043 0210 	orr.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff76 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 8002294:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 8100 	bne.w	80024a4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 80fc 	bne.w	80024a4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022b4:	f043 0202 	orr.w	r2, r3, #2
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff23 	bl	800210c <LL_ADC_IsEnabled>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022d0:	f7ff ff1c 	bl	800210c <LL_ADC_IsEnabled>
 80022d4:	4604      	mov	r4, r0
 80022d6:	487c      	ldr	r0, [pc, #496]	@ (80024c8 <HAL_ADC_Init+0x2fc>)
 80022d8:	f7ff ff18 	bl	800210c <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	4323      	orrs	r3, r4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4619      	mov	r1, r3
 80022ea:	4878      	ldr	r0, [pc, #480]	@ (80024cc <HAL_ADC_Init+0x300>)
 80022ec:	f7ff fd2a 	bl	8001d44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7f5b      	ldrb	r3, [r3, #29]
 80022f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002300:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002306:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800230e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800231a:	2b01      	cmp	r3, #1
 800231c:	d106      	bne.n	800232c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002322:	3b01      	subs	r3, #1
 8002324:	045b      	lsls	r3, r3, #17
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b60      	ldr	r3, [pc, #384]	@ (80024d0 <HAL_ADC_Init+0x304>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	430b      	orrs	r3, r1
 800235a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff15 	bl	80021a6 <LL_ADC_INJ_IsConversionOngoing>
 800237c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d16d      	bne.n	8002460 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d16a      	bne.n	8002460 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800238e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002396:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023a6:	f023 0302 	bic.w	r3, r3, #2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d017      	beq.n	80023ec <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6911      	ldr	r1, [r2, #16]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80023ea:	e013      	b.n	8002414 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800240c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002410:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800241a:	2b01      	cmp	r3, #1
 800241c:	d118      	bne.n	8002450 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002434:	4311      	orrs	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002440:	430a      	orrs	r2, r1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	e007      	b.n	8002460 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10c      	bne.n	8002482 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f023 010f 	bic.w	r1, r3, #15
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	1e5a      	subs	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002480:	e007      	b.n	8002492 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 020f 	bic.w	r2, r2, #15
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024a2:	e007      	b.n	80024b4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	f043 0210 	orr.w	r2, r3, #16
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	@ 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000004 	.word	0x20000004
 80024c4:	053e2d63 	.word	0x053e2d63
 80024c8:	50000100 	.word	0x50000100
 80024cc:	50000300 	.word	0x50000300
 80024d0:	fff04007 	.word	0xfff04007

080024d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	4851      	ldr	r0, [pc, #324]	@ (8002628 <HAL_ADC_Start_DMA+0x154>)
 80024e2:	f7ff fd8f 	bl	8002004 <LL_ADC_GetMultimode>
 80024e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fe47 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 808f 	bne.w	8002618 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_ADC_Start_DMA+0x34>
 8002504:	2302      	movs	r3, #2
 8002506:	e08a      	b.n	800261e <HAL_ADC_Start_DMA+0x14a>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d002      	beq.n	8002522 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b09      	cmp	r3, #9
 8002520:	d173      	bne.n	800260a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fc98 	bl	8002e58 <ADC_Enable>
 8002528:	4603      	mov	r3, r0
 800252a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d166      	bne.n	8002600 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a38      	ldr	r2, [pc, #224]	@ (800262c <HAL_ADC_Start_DMA+0x158>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d002      	beq.n	8002556 <HAL_ADC_Start_DMA+0x82>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e001      	b.n	800255a <HAL_ADC_Start_DMA+0x86>
 8002556:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4293      	cmp	r3, r2
 8002560:	d002      	beq.n	8002568 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002584:	f023 0206 	bic.w	r2, r3, #6
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	661a      	str	r2, [r3, #96]	@ 0x60
 800258c:	e002      	b.n	8002594 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002598:	4a25      	ldr	r2, [pc, #148]	@ (8002630 <HAL_ADC_Start_DMA+0x15c>)
 800259a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	4a24      	ldr	r2, [pc, #144]	@ (8002634 <HAL_ADC_Start_DMA+0x160>)
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a8:	4a23      	ldr	r2, [pc, #140]	@ (8002638 <HAL_ADC_Start_DMA+0x164>)
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	221c      	movs	r2, #28
 80025b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0210 	orr.w	r2, r2, #16
 80025ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3340      	adds	r3, #64	@ 0x40
 80025e6:	4619      	mov	r1, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f001 f9b0 	bl	8003950 <HAL_DMA_Start_IT>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fdad 	bl	8002158 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025fe:	e00d      	b.n	800261c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002608:	e008      	b.n	800261c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002616:	e001      	b.n	800261c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002618:	2302      	movs	r3, #2
 800261a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800261c:	7dfb      	ldrb	r3, [r7, #23]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	50000300 	.word	0x50000300
 800262c:	50000100 	.word	0x50000100
 8002630:	08003023 	.word	0x08003023
 8002634:	080030fb 	.word	0x080030fb
 8002638:	08003117 	.word	0x08003117

0800263c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0b6      	sub	sp, #216	@ 0xd8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x22>
 8002696:	2302      	movs	r3, #2
 8002698:	e3c8      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x7b4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fd6a 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 83ad 	bne.w	8002e0e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f7ff fc24 	bl	8001f0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fd58 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 80026d0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fd64 	bl	80021a6 <LL_ADC_INJ_IsConversionOngoing>
 80026de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 81d9 	bne.w	8002a9e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 81d4 	bne.w	8002a9e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026fe:	d10f      	bne.n	8002720 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2200      	movs	r2, #0
 800270a:	4619      	mov	r1, r3
 800270c:	f7ff fc2b 	bl	8001f66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fbd2 	bl	8001ec2 <LL_ADC_SetSamplingTimeCommonConfig>
 800271e:	e00e      	b.n	800273e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	461a      	mov	r2, r3
 800272e:	f7ff fc1a 	bl	8001f66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fbc2 	bl	8001ec2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d022      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6919      	ldr	r1, [r3, #16]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002770:	f7ff fb1c 	bl	8001dac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6919      	ldr	r1, [r3, #16]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	461a      	mov	r2, r3
 8002782:	f7ff fb68 	bl	8001e56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002792:	2b01      	cmp	r3, #1
 8002794:	d102      	bne.n	800279c <HAL_ADC_ConfigChannel+0x124>
 8002796:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800279a:	e000      	b.n	800279e <HAL_ADC_ConfigChannel+0x126>
 800279c:	2300      	movs	r3, #0
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff fb74 	bl	8001e8c <LL_ADC_SetOffsetSaturation>
 80027a4:	e17b      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fb21 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x15a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fb16 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	e01e      	b.n	8002810 <HAL_ADC_ConfigChannel+0x198>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fb0b 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e004      	b.n	800280e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1b0>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	e018      	b.n	800285a <HAL_ADC_ConfigChannel+0x1e2>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800283c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e004      	b.n	800285a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002850:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800285a:	429a      	cmp	r2, r3
 800285c:	d106      	bne.n	800286c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fada 	bl	8001e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fabe 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x220>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fab3 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 021f 	and.w	r2, r3, #31
 8002896:	e01e      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x25e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff faa8 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e004      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80028ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x276>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	e018      	b.n	8002920 <HAL_ADC_ConfigChannel+0x2a8>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002902:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800290a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e004      	b.n	8002920 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002916:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002920:	429a      	cmp	r2, r3
 8002922:	d106      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2200      	movs	r2, #0
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fa77 	bl	8001e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fa5b 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_ADC_ConfigChannel+0x2e6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2102      	movs	r1, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fa50 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	e01e      	b.n	800299c <HAL_ADC_ConfigChannel+0x324>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2102      	movs	r1, #2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fa45 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 800296a:	4603      	mov	r3, r0
 800296c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800297c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002984:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e004      	b.n	800299a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002990:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x33c>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	e016      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x36a>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e004      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2102      	movs	r1, #2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fa16 	bl	8001e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2103      	movs	r1, #3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f9fa 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x3a8>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2103      	movs	r1, #3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f9ef 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 021f 	and.w	r2, r3, #31
 8002a1e:	e017      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x3d8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2103      	movs	r1, #3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f9e4 	bl	8001df4 <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a42:	2320      	movs	r3, #32
 8002a44:	e003      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x3f0>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	e011      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x414>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d106      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2103      	movs	r1, #3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f9c1 	bl	8001e20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fb32 	bl	800210c <LL_ADC_IsEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8140 	bne.w	8002d30 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f7ff fa7d 	bl	8001fbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4a8f      	ldr	r2, [pc, #572]	@ (8002d04 <HAL_ADC_ConfigChannel+0x68c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	f040 8131 	bne.w	8002d30 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x47e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2b09      	cmp	r3, #9
 8002aec:	bf94      	ite	ls
 8002aee:	2301      	movls	r3, #1
 8002af0:	2300      	movhi	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e019      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x4b2>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b06:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d079      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x4d2>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	3301      	adds	r3, #1
 8002b42:	069b      	lsls	r3, r3, #26
 8002b44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b48:	e015      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x4fe>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b5a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e003      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	069b      	lsls	r3, r3, #26
 8002b72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x51e>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	e017      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x54e>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e003      	b.n	8002bba <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x574>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f003 021f 	and.w	r2, r3, #31
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	051b      	lsls	r3, r3, #20
 8002bea:	e018      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x5a6>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	e081      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x5c6>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	0e9b      	lsrs	r3, r3, #26
 8002c34:	3301      	adds	r3, #1
 8002c36:	069b      	lsls	r3, r3, #26
 8002c38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c3c:	e015      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x5f2>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e003      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	069b      	lsls	r3, r3, #26
 8002c66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x612>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	e017      	b.n	8002cba <HAL_ADC_ConfigChannel+0x642>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	61fb      	str	r3, [r7, #28]
  return result;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	ea42 0103 	orr.w	r1, r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10d      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x66e>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f003 021f 	and.w	r2, r3, #31
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b1e      	subs	r3, #30
 8002cde:	051b      	lsls	r3, r3, #20
 8002ce0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ce4:	e01e      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x6ac>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	613b      	str	r3, [r7, #16]
  return result;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e006      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x698>
 8002d02:	bf00      	nop
 8002d04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3b1e      	subs	r3, #30
 8002d1e:	051b      	lsls	r3, r3, #20
 8002d20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d24:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f7ff f91b 	bl	8001f66 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b3f      	ldr	r3, [pc, #252]	@ (8002e34 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d071      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d3c:	483e      	ldr	r0, [pc, #248]	@ (8002e38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d3e:	f7ff f827 	bl	8001d90 <LL_ADC_GetCommonPathInternalCh>
 8002d42:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e3c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_ADC_ConfigChannel+0x6e2>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3a      	ldr	r2, [pc, #232]	@ (8002e40 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d127      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d121      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6e:	d157      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d78:	4619      	mov	r1, r3
 8002d7a:	482f      	ldr	r0, [pc, #188]	@ (8002e38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d7c:	f7fe fff5 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d80:	4b30      	ldr	r3, [pc, #192]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	4a30      	ldr	r2, [pc, #192]	@ (8002e48 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d9a:	e002      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da8:	e03a      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a27      	ldr	r2, [pc, #156]	@ (8002e4c <HAL_ADC_ConfigChannel+0x7d4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d113      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10d      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d02a      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4818      	ldr	r0, [pc, #96]	@ (8002e38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dd6:	f7fe ffc8 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dda:	e021      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d11c      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d116      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_ADC_ConfigChannel+0x7d8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d011      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e04:	4619      	mov	r1, r3
 8002e06:	480c      	ldr	r0, [pc, #48]	@ (8002e38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e08:	f7fe ffaf 	bl	8001d6a <LL_ADC_SetCommonPathInternalCh>
 8002e0c:	e008      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e28:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	37d8      	adds	r7, #216	@ 0xd8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	80080000 	.word	0x80080000
 8002e38:	50000300 	.word	0x50000300
 8002e3c:	c3210000 	.word	0xc3210000
 8002e40:	90c00010 	.word	0x90c00010
 8002e44:	20000004 	.word	0x20000004
 8002e48:	053e2d63 	.word	0x053e2d63
 8002e4c:	c7520000 	.word	0xc7520000
 8002e50:	50000100 	.word	0x50000100
 8002e54:	cb840000 	.word	0xcb840000

08002e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f94f 	bl	800210c <LL_ADC_IsEnabled>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d169      	bne.n	8002f48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <ADC_Enable+0xfc>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e86:	f043 0210 	orr.w	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e055      	b.n	8002f4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f90a 	bl	80020bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ea8:	482b      	ldr	r0, [pc, #172]	@ (8002f58 <ADC_Enable+0x100>)
 8002eaa:	f7fe ff71 	bl	8001d90 <LL_ADC_GetCommonPathInternalCh>
 8002eae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002eb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb8:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <ADC_Enable+0x104>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	4a28      	ldr	r2, [pc, #160]	@ (8002f60 <ADC_Enable+0x108>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ed2:	e002      	b.n	8002eda <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f9      	bne.n	8002ed4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe ff02 	bl	8001ce8 <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ee6:	e028      	b.n	8002f3a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff f90d 	bl	800210c <LL_ADC_IsEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f8dd 	bl	80020bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f02:	f7fe fef1 	bl	8001ce8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d914      	bls.n	8002f3a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d00d      	beq.n	8002f3a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e007      	b.n	8002f4a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d1cf      	bne.n	8002ee8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	8000003f 	.word	0x8000003f
 8002f58:	50000300 	.word	0x50000300
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	053e2d63 	.word	0x053e2d63

08002f64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f8de 	bl	8002132 <LL_ADC_IsDisableOngoing>
 8002f76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f8c5 	bl	800210c <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d047      	beq.n	8003018 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d144      	bne.n	8003018 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030d 	and.w	r3, r3, #13
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f89f 	bl	80020e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2203      	movs	r2, #3
 8002fac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fe9b 	bl	8001ce8 <HAL_GetTick>
 8002fb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fb4:	e029      	b.n	800300a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	f043 0210 	orr.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e023      	b.n	800301a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fd2:	f7fe fe89 	bl	8001ce8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d914      	bls.n	800300a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1dc      	bne.n	8002fd2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003038:	2b00      	cmp	r3, #0
 800303a:	d14b      	bne.n	80030d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d021      	beq.n	800309a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe ff44 	bl	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d032      	beq.n	80030cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12b      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11f      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003098:	e018      	b.n	80030cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d111      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fab5 	bl	800263c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030d2:	e00e      	b.n	80030f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fabf 	bl	8002664 <HAL_ADC_ErrorCallback>
}
 80030e6:	e004      	b.n	80030f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003106:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff faa1 	bl	8002650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff fa91 	bl	8002664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <LL_ADC_IsEnabled>:
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <LL_ADC_IsEnabled+0x18>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_ADC_IsEnabled+0x1a>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_StartCalibration>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003182:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800318c:	4313      	orrs	r3, r2
 800318e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_ADC_IsCalibrationOnGoing>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031b6:	d101      	bne.n	80031bc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <LL_ADC_REG_IsConversionOngoing>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d101      	bne.n	80031e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_ADCEx_Calibration_Start+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e04d      	b.n	80032a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fea5 	bl	8002f64 <ADC_Disable>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d136      	bne.n	8003292 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff96 	bl	8003170 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003244:	e014      	b.n	8003270 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3301      	adds	r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d90d      	bls.n	8003270 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	f023 0312 	bic.w	r3, r3, #18
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e01b      	b.n	80032a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff94 	bl	80031a2 <LL_ADC_IsCalibrationOnGoing>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e2      	bne.n	8003246 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	f023 0303 	bic.w	r3, r3, #3
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003290:	e005      	b.n	800329e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	0004de01 	.word	0x0004de01

080032b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b0a1      	sub	sp, #132	@ 0x84
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e08b      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80032da:	2300      	movs	r3, #0
 80032dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80032de:	2300      	movs	r3, #0
 80032e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ea:	d102      	bne.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032ec:	4b41      	ldr	r3, [pc, #260]	@ (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	e001      	b.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e06a      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff57 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 800331c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff51 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d14c      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800332e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003330:	2b00      	cmp	r3, #0
 8003332:	d149      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003334:	4b30      	ldr	r3, [pc, #192]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003336:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d028      	beq.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003340:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003352:	035b      	lsls	r3, r3, #13
 8003354:	430b      	orrs	r3, r1
 8003356:	431a      	orrs	r2, r3
 8003358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800335a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800335c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003360:	f7ff fef3 	bl	800314a <LL_ADC_IsEnabled>
 8003364:	4604      	mov	r4, r0
 8003366:	4823      	ldr	r0, [pc, #140]	@ (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003368:	f7ff feef 	bl	800314a <LL_ADC_IsEnabled>
 800336c:	4603      	mov	r3, r0
 800336e:	4323      	orrs	r3, r4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d133      	bne.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003374:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800337c:	f023 030f 	bic.w	r3, r3, #15
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	6811      	ldr	r1, [r2, #0]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	430a      	orrs	r2, r1
 800338a:	431a      	orrs	r2, r3
 800338c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800338e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003390:	e024      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800339a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800339c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800339e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033a2:	f7ff fed2 	bl	800314a <LL_ADC_IsEnabled>
 80033a6:	4604      	mov	r4, r0
 80033a8:	4812      	ldr	r0, [pc, #72]	@ (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033aa:	f7ff fece 	bl	800314a <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4323      	orrs	r3, r4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d112      	bne.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033be:	f023 030f 	bic.w	r3, r3, #15
 80033c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033c6:	e009      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80033da:	e000      	b.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3784      	adds	r7, #132	@ 0x84
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	50000100 	.word	0x50000100
 80033f8:	50000300 	.word	0x50000300

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0b      	blt.n	800348a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	@ (8003498 <__NVIC_EnableIRQ+0x38>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db0a      	blt.n	80034c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	490c      	ldr	r1, [pc, #48]	@ (80034e8 <__NVIC_SetPriority+0x4c>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	440b      	add	r3, r1
 80034c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c4:	e00a      	b.n	80034dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4908      	ldr	r1, [pc, #32]	@ (80034ec <__NVIC_SetPriority+0x50>)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	3b04      	subs	r3, #4
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	440b      	add	r3, r1
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	@ 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2b04      	cmp	r3, #4
 800350c:	bf28      	it	cs
 800350e:	2304      	movcs	r3, #4
 8003510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3304      	adds	r3, #4
 8003516:	2b06      	cmp	r3, #6
 8003518:	d902      	bls.n	8003520 <NVIC_EncodePriority+0x30>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3b03      	subs	r3, #3
 800351e:	e000      	b.n	8003522 <NVIC_EncodePriority+0x32>
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43d9      	mvns	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	4313      	orrs	r3, r2
         );
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	@ 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003568:	d301      	bcc.n	800356e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356a:	2301      	movs	r3, #1
 800356c:	e00f      	b.n	800358e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356e:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <SysTick_Config+0x40>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3b01      	subs	r3, #1
 8003574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003576:	210f      	movs	r1, #15
 8003578:	f04f 30ff 	mov.w	r0, #4294967295
 800357c:	f7ff ff8e 	bl	800349c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003580:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <SysTick_Config+0x40>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003586:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <SysTick_Config+0x40>)
 8003588:	2207      	movs	r2, #7
 800358a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	e000e010 	.word	0xe000e010

0800359c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff29 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c0:	f7ff ff40 	bl	8003444 <__NVIC_GetPriorityGrouping>
 80035c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff90 	bl	80034f0 <NVIC_EncodePriority>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff5f 	bl	800349c <__NVIC_SetPriority>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff33 	bl	8003460 <__NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffa4 	bl	8003558 <SysTick_Config>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e054      	b.n	80036d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7f5b      	ldrb	r3, [r3, #29]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fa26 	bl	8000a90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	791b      	ldrb	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a22      	ldr	r2, [pc, #136]	@ (80036e0 <HAL_CRC_Init+0xc4>)
 8003658:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0218 	bic.w	r2, r2, #24
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	e00c      	b.n	8003686 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6899      	ldr	r1, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	461a      	mov	r2, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f834 	bl	80036e4 <HAL_CRCEx_Polynomial_Set>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e028      	b.n	80036d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	795b      	ldrb	r3, [r3, #5]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	611a      	str	r2, [r3, #16]
 8003698:	e004      	b.n	80036a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6912      	ldr	r2, [r2, #16]
 80036a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	04c11db7 	.word	0x04c11db7

080036e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80036f4:	231f      	movs	r3, #31
 80036f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
 8003706:	e063      	b.n	80037d0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003708:	bf00      	nop
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	613a      	str	r2, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <HAL_CRCEx_Polynomial_Set+0x44>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b18      	cmp	r3, #24
 800372c:	d846      	bhi.n	80037bc <HAL_CRCEx_Polynomial_Set+0xd8>
 800372e:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	080037c3 	.word	0x080037c3
 8003738:	080037bd 	.word	0x080037bd
 800373c:	080037bd 	.word	0x080037bd
 8003740:	080037bd 	.word	0x080037bd
 8003744:	080037bd 	.word	0x080037bd
 8003748:	080037bd 	.word	0x080037bd
 800374c:	080037bd 	.word	0x080037bd
 8003750:	080037bd 	.word	0x080037bd
 8003754:	080037b1 	.word	0x080037b1
 8003758:	080037bd 	.word	0x080037bd
 800375c:	080037bd 	.word	0x080037bd
 8003760:	080037bd 	.word	0x080037bd
 8003764:	080037bd 	.word	0x080037bd
 8003768:	080037bd 	.word	0x080037bd
 800376c:	080037bd 	.word	0x080037bd
 8003770:	080037bd 	.word	0x080037bd
 8003774:	080037a5 	.word	0x080037a5
 8003778:	080037bd 	.word	0x080037bd
 800377c:	080037bd 	.word	0x080037bd
 8003780:	080037bd 	.word	0x080037bd
 8003784:	080037bd 	.word	0x080037bd
 8003788:	080037bd 	.word	0x080037bd
 800378c:	080037bd 	.word	0x080037bd
 8003790:	080037bd 	.word	0x080037bd
 8003794:	08003799 	.word	0x08003799
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b06      	cmp	r3, #6
 800379c:	d913      	bls.n	80037c6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80037a2:	e010      	b.n	80037c6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	d90f      	bls.n	80037ca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80037ae:	e00c      	b.n	80037ca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	d90b      	bls.n	80037ce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80037ba:	e008      	b.n	80037ce <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
        break;
 80037c0:	e006      	b.n	80037d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037c2:	bf00      	nop
 80037c4:	e004      	b.n	80037d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037c6:	bf00      	nop
 80037c8:	e002      	b.n	80037d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80037ce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 0118 	bic.w	r1, r3, #24
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e08d      	b.n	800392e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <HAL_DMA_Init+0x138>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d80f      	bhi.n	800383e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	4b45      	ldr	r3, [pc, #276]	@ (800393c <HAL_DMA_Init+0x13c>)
 8003826:	4413      	add	r3, r2
 8003828:	4a45      	ldr	r2, [pc, #276]	@ (8003940 <HAL_DMA_Init+0x140>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	009a      	lsls	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a42      	ldr	r2, [pc, #264]	@ (8003944 <HAL_DMA_Init+0x144>)
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
 800383c:	e00e      	b.n	800385c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_DMA_Init+0x148>)
 8003846:	4413      	add	r3, r2
 8003848:	4a3d      	ldr	r2, [pc, #244]	@ (8003940 <HAL_DMA_Init+0x140>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a3c      	ldr	r2, [pc, #240]	@ (800394c <HAL_DMA_Init+0x14c>)
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa1e 	bl	8003cf0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038bc:	d102      	bne.n	80038c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_DMA_Init+0x104>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d80c      	bhi.n	8003904 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fa3e 	bl	8003d6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	e008      	b.n	8003916 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40020407 	.word	0x40020407
 800393c:	bffdfff8 	.word	0xbffdfff8
 8003940:	cccccccd 	.word	0xcccccccd
 8003944:	40020000 	.word	0x40020000
 8003948:	bffdfbf8 	.word	0xbffdfbf8
 800394c:	40020400 	.word	0x40020400

08003950 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_DMA_Start_IT+0x20>
 800396c:	2302      	movs	r3, #2
 800396e:	e066      	b.n	8003a3e <HAL_DMA_Start_IT+0xee>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d155      	bne.n	8003a30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f962 	bl	8003c72 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 020e 	orr.w	r2, r2, #14
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e00f      	b.n	80039e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 020a 	orr.w	r2, r2, #10
 80039e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e005      	b.n	8003a3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d00d      	beq.n	8003a7a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2204      	movs	r2, #4
 8003a62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	e047      	b.n	8003b0a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 020e 	bic.w	r2, r2, #14
 8003a88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	f003 021f 	and.w	r2, r3, #31
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ac6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ada:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ade:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ae8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
    }
  }
  return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2204      	movs	r2, #4
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d026      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x7a>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d021      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	f003 021f 	and.w	r2, r3, #31
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	2104      	movs	r1, #4
 8003b76:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d071      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b8c:	e06c      	b.n	8003c68 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	2202      	movs	r2, #2
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02e      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d029      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 020a 	bic.w	r2, r2, #10
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f003 021f 	and.w	r2, r3, #31
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2102      	movs	r1, #2
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d038      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bfe:	e033      	b.n	8003c68 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2208      	movs	r2, #8
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d02a      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d025      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 020e 	bic.w	r2, r2, #14
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f003 021f 	and.w	r2, r3, #31
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
}
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c88:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d108      	bne.n	8003cd2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cd0:	e007      	b.n	8003ce2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	60da      	str	r2, [r3, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d802      	bhi.n	8003d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d04:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e001      	b.n	8003d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d0c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	3b08      	subs	r3, #8
 8003d1a:	4a12      	ldr	r2, [pc, #72]	@ (8003d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	009a      	lsls	r2, r3, #2
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a0b      	ldr	r2, [pc, #44]	@ (8003d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2201      	movs	r2, #1
 8003d44:	409a      	lsls	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40020407 	.word	0x40020407
 8003d5c:	40020800 	.word	0x40020800
 8003d60:	40020820 	.word	0x40020820
 8003d64:	cccccccd 	.word	0xcccccccd
 8003d68:	40020880 	.word	0x40020880

08003d6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a08      	ldr	r2, [pc, #32]	@ (8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	1000823f 	.word	0x1000823f
 8003db0:	40020940 	.word	0x40020940

08003db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dc2:	e15a      	b.n	800407a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 814c 	beq.w	8004074 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d005      	beq.n	8003df4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d130      	bne.n	8003e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0201 	and.w	r2, r3, #1
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d017      	beq.n	8003e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d123      	bne.n	8003ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	08da      	lsrs	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3208      	adds	r2, #8
 8003ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	08da      	lsrs	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0203 	and.w	r2, r3, #3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80a6 	beq.w	8004074 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f28:	4b5b      	ldr	r3, [pc, #364]	@ (8004098 <HAL_GPIO_Init+0x2e4>)
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2c:	4a5a      	ldr	r2, [pc, #360]	@ (8004098 <HAL_GPIO_Init+0x2e4>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f34:	4b58      	ldr	r3, [pc, #352]	@ (8004098 <HAL_GPIO_Init+0x2e4>)
 8003f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f40:	4a56      	ldr	r2, [pc, #344]	@ (800409c <HAL_GPIO_Init+0x2e8>)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	3302      	adds	r3, #2
 8003f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	220f      	movs	r2, #15
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f6a:	d01f      	beq.n	8003fac <HAL_GPIO_Init+0x1f8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a4c      	ldr	r2, [pc, #304]	@ (80040a0 <HAL_GPIO_Init+0x2ec>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d019      	beq.n	8003fa8 <HAL_GPIO_Init+0x1f4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a4b      	ldr	r2, [pc, #300]	@ (80040a4 <HAL_GPIO_Init+0x2f0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <HAL_GPIO_Init+0x1f0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80040a8 <HAL_GPIO_Init+0x2f4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00d      	beq.n	8003fa0 <HAL_GPIO_Init+0x1ec>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a49      	ldr	r2, [pc, #292]	@ (80040ac <HAL_GPIO_Init+0x2f8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <HAL_GPIO_Init+0x1e8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a48      	ldr	r2, [pc, #288]	@ (80040b0 <HAL_GPIO_Init+0x2fc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <HAL_GPIO_Init+0x1e4>
 8003f94:	2305      	movs	r3, #5
 8003f96:	e00a      	b.n	8003fae <HAL_GPIO_Init+0x1fa>
 8003f98:	2306      	movs	r3, #6
 8003f9a:	e008      	b.n	8003fae <HAL_GPIO_Init+0x1fa>
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	e006      	b.n	8003fae <HAL_GPIO_Init+0x1fa>
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e004      	b.n	8003fae <HAL_GPIO_Init+0x1fa>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e002      	b.n	8003fae <HAL_GPIO_Init+0x1fa>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_GPIO_Init+0x1fa>
 8003fac:	2300      	movs	r3, #0
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	f002 0203 	and.w	r2, r2, #3
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	4093      	lsls	r3, r2
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fbe:	4937      	ldr	r1, [pc, #220]	@ (800409c <HAL_GPIO_Init+0x2e8>)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fcc:	4b39      	ldr	r3, [pc, #228]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ff0:	4a30      	ldr	r2, [pc, #192]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800401a:	4a26      	ldr	r2, [pc, #152]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004020:	4b24      	ldr	r3, [pc, #144]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004044:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800404a:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43db      	mvns	r3, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800406e:	4a11      	ldr	r2, [pc, #68]	@ (80040b4 <HAL_GPIO_Init+0x300>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	3301      	adds	r3, #1
 8004078:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	f47f ae9d 	bne.w	8003dc4 <HAL_GPIO_Init+0x10>
  }
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40021000 	.word	0x40021000
 800409c:	40010000 	.word	0x40010000
 80040a0:	48000400 	.word	0x48000400
 80040a4:	48000800 	.word	0x48000800
 80040a8:	48000c00 	.word	0x48000c00
 80040ac:	48001000 	.word	0x48001000
 80040b0:	48001400 	.word	0x48001400
 80040b4:	40010400 	.word	0x40010400

080040b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
 80040c4:	4613      	mov	r3, r2
 80040c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040c8:	787b      	ldrb	r3, [r7, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040d4:	e002      	b.n	80040dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040d6:	887a      	ldrh	r2, [r7, #2]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e08d      	b.n	8004216 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fdc2 	bl	8000c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	@ 0x24
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004138:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004148:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d107      	bne.n	8004162 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	e006      	b.n	8004170 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800416e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d108      	bne.n	800418a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	e007      	b.n	800419a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004198:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69d9      	ldr	r1, [r3, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	461a      	mov	r2, r3
 800422c:	460b      	mov	r3, r1
 800422e:	817b      	strh	r3, [r7, #10]
 8004230:	4613      	mov	r3, r2
 8004232:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	f040 80fd 	bne.w	800443c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_I2C_Master_Transmit+0x30>
 800424c:	2302      	movs	r3, #2
 800424e:	e0f6      	b.n	800443e <HAL_I2C_Master_Transmit+0x21e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004258:	f7fd fd46 	bl	8001ce8 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2319      	movs	r3, #25
 8004264:	2201      	movs	r2, #1
 8004266:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f914 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0e1      	b.n	800443e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2221      	movs	r2, #33	@ 0x21
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2210      	movs	r2, #16
 8004286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	893a      	ldrh	r2, [r7, #8]
 800429a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2bff      	cmp	r3, #255	@ 0xff
 80042aa:	d906      	bls.n	80042ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	22ff      	movs	r2, #255	@ 0xff
 80042b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80042b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e007      	b.n	80042ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80042c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d024      	beq.n	800431c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	781a      	ldrb	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	8979      	ldrh	r1, [r7, #10]
 800430e:	4b4e      	ldr	r3, [pc, #312]	@ (8004448 <HAL_I2C_Master_Transmit+0x228>)
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fa83 	bl	8004820 <I2C_TransferConfig>
 800431a:	e066      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	b2da      	uxtb	r2, r3
 8004322:	8979      	ldrh	r1, [r7, #10]
 8004324:	4b48      	ldr	r3, [pc, #288]	@ (8004448 <HAL_I2C_Master_Transmit+0x228>)
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fa78 	bl	8004820 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004330:	e05b      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	6a39      	ldr	r1, [r7, #32]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f907 	bl	800454a <I2C_WaitOnTXISFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07b      	b.n	800443e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d034      	beq.n	80043ea <HAL_I2C_Master_Transmit+0x1ca>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d130      	bne.n	80043ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2200      	movs	r2, #0
 8004390:	2180      	movs	r1, #128	@ 0x80
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f880 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e04d      	b.n	800443e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2bff      	cmp	r3, #255	@ 0xff
 80043aa:	d90e      	bls.n	80043ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	22ff      	movs	r2, #255	@ 0xff
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	8979      	ldrh	r1, [r7, #10]
 80043ba:	2300      	movs	r3, #0
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa2c 	bl	8004820 <I2C_TransferConfig>
 80043c8:	e00f      	b.n	80043ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	8979      	ldrh	r1, [r7, #10]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fa1b 	bl	8004820 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d19e      	bne.n	8004332 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	6a39      	ldr	r1, [r7, #32]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f8ed 	bl	80045d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e01a      	b.n	800443e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2220      	movs	r2, #32
 800440e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <HAL_I2C_Master_Transmit+0x22c>)
 800441c:	400b      	ands	r3, r1
 800441e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e000      	b.n	800443e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800443c:	2302      	movs	r3, #2
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	80002000 	.word	0x80002000
 800444c:	fe00e800 	.word	0xfe00e800

08004450 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d103      	bne.n	800446e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d007      	beq.n	800448c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	619a      	str	r2, [r3, #24]
  }
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a8:	e03b      	b.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8d6 	bl	8004660 <I2C_IsErrorOccurred>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e041      	b.n	8004542 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d02d      	beq.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fd fc0f 	bl	8001ce8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d122      	bne.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d113      	bne.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e00f      	b.n	8004542 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	429a      	cmp	r2, r3
 800453e:	d0b4      	beq.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004556:	e033      	b.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f87f 	bl	8004660 <I2C_IsErrorOccurred>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e031      	b.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004572:	d025      	beq.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004574:	f7fd fbb8 	bl	8001ce8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11a      	bne.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b02      	cmp	r3, #2
 8004596:	d013      	beq.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e007      	b.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d1c4      	bne.n	8004558 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e4:	e02f      	b.n	8004646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f838 	bl	8004660 <I2C_IsErrorOccurred>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e02d      	b.n	8004656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fd fb75 	bl	8001ce8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d11a      	bne.n	8004646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d013      	beq.n	8004646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e007      	b.n	8004656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b20      	cmp	r3, #32
 8004652:	d1c8      	bne.n	80045e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	@ 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	d068      	beq.n	800475e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2210      	movs	r2, #16
 8004692:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004694:	e049      	b.n	800472a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d045      	beq.n	800472a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fd fb23 	bl	8001ce8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <I2C_IsErrorOccurred+0x54>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d13a      	bne.n	800472a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046d6:	d121      	bne.n	800471c <I2C_IsErrorOccurred+0xbc>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046de:	d01d      	beq.n	800471c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d01a      	beq.n	800471c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046f6:	f7fd faf7 	bl	8001ce8 <HAL_GetTick>
 80046fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046fc:	e00e      	b.n	800471c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046fe:	f7fd faf3 	bl	8001ce8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b19      	cmp	r3, #25
 800470a:	d907      	bls.n	800471c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f043 0320 	orr.w	r3, r3, #32
 8004712:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800471a:	e006      	b.n	800472a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b20      	cmp	r3, #32
 8004728:	d1e9      	bne.n	80046fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b20      	cmp	r3, #32
 8004736:	d003      	beq.n	8004740 <I2C_IsErrorOccurred+0xe0>
 8004738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0aa      	beq.n	8004696 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2220      	movs	r2, #32
 800474e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f043 0304 	orr.w	r3, r3, #4
 8004756:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	f043 0308 	orr.w	r3, r3, #8
 8004798:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80047cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01c      	beq.n	800480e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff fe3b 	bl	8004450 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6859      	ldr	r1, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b0d      	ldr	r3, [pc, #52]	@ (800481c <I2C_IsErrorOccurred+0x1bc>)
 80047e6:	400b      	ands	r3, r1
 80047e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800480e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004812:	4618      	mov	r0, r3
 8004814:	3728      	adds	r7, #40	@ 0x28
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	fe00e800 	.word	0xfe00e800

08004820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	817b      	strh	r3, [r7, #10]
 800482e:	4613      	mov	r3, r2
 8004830:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004838:	7a7b      	ldrb	r3, [r7, #9]
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004840:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	4313      	orrs	r3, r2
 800484a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800484e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	0d5b      	lsrs	r3, r3, #21
 800485a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800485e:	4b08      	ldr	r3, [pc, #32]	@ (8004880 <I2C_TransferConfig+0x60>)
 8004860:	430b      	orrs	r3, r1
 8004862:	43db      	mvns	r3, r3
 8004864:	ea02 0103 	and.w	r1, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	03ff63ff 	.word	0x03ff63ff

08004884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b20      	cmp	r3, #32
 8004898:	d138      	bne.n	800490c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e032      	b.n	800490e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	@ 0x24
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6819      	ldr	r1, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b20      	cmp	r3, #32
 800492e:	d139      	bne.n	80049a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800493a:	2302      	movs	r3, #2
 800493c:	e033      	b.n	80049a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2224      	movs	r2, #36	@ 0x24
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800496c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c0:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80049c8:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4905      	ldr	r1, [pc, #20]	@ (80049f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	604b      	str	r3, [r1, #4]
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40010000 	.word	0x40010000

080049f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0c0      	b.n	8004b88 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f008 f8d8 	bl	800cbd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2203      	movs	r2, #3
 8004a24:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f004 fe90 	bl	8009752 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
 8004a36:	e03e      	b.n	8004ab6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	440b      	add	r3, r1
 8004a46:	3311      	adds	r3, #17
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	440b      	add	r3, r1
 8004a5a:	3310      	adds	r3, #16
 8004a5c:	7bfa      	ldrb	r2, [r7, #15]
 8004a5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3313      	adds	r3, #19
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	440b      	add	r3, r1
 8004a82:	3320      	adds	r3, #32
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	440b      	add	r3, r1
 8004a96:	3324      	adds	r3, #36	@ 0x24
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	440b      	add	r3, r1
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	791b      	ldrb	r3, [r3, #4]
 8004aba:	7bfa      	ldrb	r2, [r7, #15]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3bb      	bcc.n	8004a38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]
 8004ac4:	e044      	b.n	8004b50 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ac6:	7bfa      	ldrb	r2, [r7, #15]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	440b      	add	r3, r1
 8004ad4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004adc:	7bfa      	ldrb	r2, [r7, #15]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	440b      	add	r3, r1
 8004aea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004aee:	7bfa      	ldrb	r2, [r7, #15]
 8004af0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004af2:	7bfa      	ldrb	r2, [r7, #15]
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b08:	7bfa      	ldrb	r2, [r7, #15]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	440b      	add	r3, r1
 8004b16:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	791b      	ldrb	r3, [r3, #4]
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d3b5      	bcc.n	8004ac6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004b66:	f004 fe0f 	bl	8009788 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	7a9b      	ldrb	r3, [r3, #10]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d102      	bne.n	8004b86 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f001 fbf6 	bl	8006372 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_PCD_Start+0x16>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e012      	b.n	8004bcc <HAL_PCD_Start+0x3c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f004 fdb6 	bl	8009724 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f006 fb93 	bl	800b2e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f006 fb98 	bl	800b316 <USB_ReadInterrupts>
 8004be6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 faee 	bl	80051d4 <PCD_EP_ISR_Handler>

    return;
 8004bf8:	e110      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c16:	b292      	uxth	r2, r2
 8004c18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f008 f868 	bl	800ccf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c22:	2100      	movs	r1, #0
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8fc 	bl	8004e22 <HAL_PCD_SetAddress>

    return;
 8004c2a:	e0f7      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004c4e:	e0e5      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004c72:	e0d3      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d034      	beq.n	8004ce8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0204 	bic.w	r2, r2, #4
 8004c90:	b292      	uxth	r2, r2
 8004c92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0208 	bic.w	r2, r2, #8
 8004ca8:	b292      	uxth	r2, r2
 8004caa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 fb7f 	bl	80063c6 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f008 f84b 	bl	800cd64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ce0:	b292      	uxth	r2, r2
 8004ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004ce6:	e099      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d027      	beq.n	8004d42 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0208 	orr.w	r2, r2, #8
 8004d04:	b292      	uxth	r2, r2
 8004d06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0204 	orr.w	r2, r2, #4
 8004d34:	b292      	uxth	r2, r2
 8004d36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f007 fff8 	bl	800cd30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d40:	e06c      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d040      	beq.n	8004dce <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d5e:	b292      	uxth	r2, r2
 8004d60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d12b      	bne.n	8004dc6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0204 	orr.w	r2, r2, #4
 8004d80:	b292      	uxth	r2, r2
 8004d82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0208 	orr.w	r2, r2, #8
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fb01 	bl	80063c6 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004dc4:	e02a      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f007 ffb2 	bl	800cd30 <HAL_PCD_SuspendCallback>
    return;
 8004dcc:	e026      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004dea:	b292      	uxth	r2, r2
 8004dec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f007 ff70 	bl	800ccd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004df6:	e011      	b.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e14:	b292      	uxth	r2, r2
 8004e16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e1a:	bf00      	nop
  }
}
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_PCD_SetAddress+0x1a>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e012      	b.n	8004e62 <HAL_PCD_SetAddress+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f006 fa34 	bl	800b2c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	4608      	mov	r0, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	461a      	mov	r2, r3
 8004e78:	4603      	mov	r3, r0
 8004e7a:	70fb      	strb	r3, [r7, #3]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	803b      	strh	r3, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	da0e      	bge.n	8004eae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	f003 0207 	and.w	r2, r3, #7
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	705a      	strb	r2, [r3, #1]
 8004eac:	e00e      	b.n	8004ecc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 0207 	and.w	r2, r3, #7
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004ed8:	883b      	ldrh	r3, [r7, #0]
 8004eda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	78ba      	ldrb	r2, [r7, #2]
 8004ee6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ee8:	78bb      	ldrb	r3, [r7, #2]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d102      	bne.n	8004ef4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_PCD_EP_Open+0x98>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e00e      	b.n	8004f20 <HAL_PCD_EP_Open+0xb6>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f004 fc57 	bl	80097c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	da0e      	bge.n	8004f5a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	f003 0207 	and.w	r2, r3, #7
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	3310      	adds	r3, #16
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	705a      	strb	r2, [r3, #1]
 8004f58:	e00e      	b.n	8004f78 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 0207 	and.w	r2, r3, #7
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_PCD_EP_Close+0x6a>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e00e      	b.n	8004fb0 <HAL_PCD_EP_Close+0x88>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f005 f8f7 	bl	800a194 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fc8:	7afb      	ldrb	r3, [r7, #11]
 8004fca:	f003 0207 	and.w	r2, r3, #7
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6979      	ldr	r1, [r7, #20]
 800500a:	4618      	mov	r0, r3
 800500c:	f005 faaf 	bl	800a56e <USB_EPStartXfer>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	460b      	mov	r3, r1
 8005028:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	f003 0207 	and.w	r2, r3, #7
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3310      	adds	r3, #16
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2201      	movs	r2, #1
 8005064:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	b2da      	uxtb	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	4618      	mov	r0, r3
 800507a:	f005 fa78 	bl	800a56e <USB_EPStartXfer>

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	7912      	ldrb	r2, [r2, #4]
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e03e      	b.n	8005124 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da0e      	bge.n	80050cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	f003 0207 	and.w	r2, r3, #7
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	3310      	adds	r3, #16
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	705a      	strb	r2, [r3, #1]
 80050ca:	e00c      	b.n	80050e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_PCD_EP_SetStall+0x7e>
 8005102:	2302      	movs	r3, #2
 8005104:	e00e      	b.n	8005124 <HAL_PCD_EP_SetStall+0x9c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	4618      	mov	r0, r3
 8005116:	f005 ffd9 	bl	800b0cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	7912      	ldrb	r2, [r2, #4]
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e040      	b.n	80051cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800514a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800514e:	2b00      	cmp	r3, #0
 8005150:	da0e      	bge.n	8005170 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	f003 0207 	and.w	r2, r3, #7
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	3310      	adds	r3, #16
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	705a      	strb	r2, [r3, #1]
 800516e:	e00e      	b.n	800518e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	f003 0207 	and.w	r2, r3, #7
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_PCD_EP_ClrStall+0x82>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e00e      	b.n	80051cc <HAL_PCD_EP_ClrStall+0xa0>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	4618      	mov	r0, r3
 80051be:	f005 ffd6 	bl	800b16e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b092      	sub	sp, #72	@ 0x48
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051dc:	e333      	b.n	8005846 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051e6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80051e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80051f4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 8108 	bne.w	800540e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80051fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d14c      	bne.n	80052a2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3310      	adds	r3, #16
 8005230:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	4413      	add	r3, r2
 800524c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005258:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800525a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	441a      	add	r2, r3
 8005264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005266:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005268:	2100      	movs	r1, #0
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f007 fd19 	bl	800cca2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7b1b      	ldrb	r3, [r3, #12]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 82e5 	beq.w	8005846 <PCD_EP_ISR_Handler+0x672>
 800527c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f040 82e0 	bne.w	8005846 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	7b1b      	ldrb	r3, [r3, #12]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005290:	b2da      	uxtb	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	731a      	strb	r2, [r3, #12]
 80052a0:	e2d1      	b.n	8005846 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052a8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80052b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d032      	beq.n	8005322 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	4413      	add	r3, r2
 80052d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80052ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f006 f860 	bl	800b3bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29a      	uxth	r2, r3
 8005304:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005308:	4013      	ands	r3, r2
 800530a:	817b      	strh	r3, [r7, #10]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	897a      	ldrh	r2, [r7, #10]
 8005312:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005316:	b292      	uxth	r2, r2
 8005318:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f007 fc94 	bl	800cc48 <HAL_PCD_SetupStageCallback>
 8005320:	e291      	b.n	8005846 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005322:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005326:	2b00      	cmp	r3, #0
 8005328:	f280 828d 	bge.w	8005846 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29a      	uxth	r2, r3
 8005334:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005338:	4013      	ands	r3, r2
 800533a:	81fb      	strh	r3, [r7, #14]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	89fa      	ldrh	r2, [r7, #14]
 8005342:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005346:	b292      	uxth	r2, r2
 8005348:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	4413      	add	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	4413      	add	r3, r2
 8005364:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800536e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005370:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d019      	beq.n	80053ae <PCD_EP_ISR_Handler+0x1da>
 800537a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d015      	beq.n	80053ae <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005388:	6959      	ldr	r1, [r3, #20]
 800538a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800538c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800538e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005390:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005392:	b29b      	uxth	r3, r3
 8005394:	f006 f812 	bl	800b3bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	441a      	add	r2, r3
 80053a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80053a6:	2100      	movs	r1, #0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f007 fc5f 	bl	800cc6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80053b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 8242 	bne.w	8005846 <PCD_EP_ISR_Handler+0x672>
 80053c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053c4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053cc:	f000 823b 	beq.w	8005846 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e0:	81bb      	strh	r3, [r7, #12]
 80053e2:	89bb      	ldrh	r3, [r7, #12]
 80053e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053e8:	81bb      	strh	r3, [r7, #12]
 80053ea:	89bb      	ldrh	r3, [r7, #12]
 80053ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053f0:	81bb      	strh	r3, [r7, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	89bb      	ldrh	r3, [r7, #12]
 80053f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005408:	b29b      	uxth	r3, r3
 800540a:	8013      	strh	r3, [r2, #0]
 800540c:	e21b      	b.n	8005846 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005420:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005424:	2b00      	cmp	r3, #0
 8005426:	f280 80f1 	bge.w	800560c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29a      	uxth	r2, r3
 800543c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005440:	4013      	ands	r3, r2
 8005442:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005454:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005458:	b292      	uxth	r2, r2
 800545a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800545c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005474:	7b1b      	ldrb	r3, [r3, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d123      	bne.n	80054c2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	4413      	add	r3, r2
 8005494:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80054a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 808b 	beq.w	80055c2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b2:	6959      	ldr	r1, [r3, #20]
 80054b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b6:	88da      	ldrh	r2, [r3, #6]
 80054b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054bc:	f005 ff7e 	bl	800b3bc <USB_ReadPMA>
 80054c0:	e07f      	b.n	80055c2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054c4:	78db      	ldrb	r3, [r3, #3]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d109      	bne.n	80054de <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054cc:	461a      	mov	r2, r3
 80054ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f9c6 	bl	8005862 <HAL_PCD_EP_DB_Receive>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80054dc:	e071      	b.n	80055c2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005516:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d022      	beq.n	800557e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	4413      	add	r3, r2
 8005552:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800555c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005560:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005564:	2b00      	cmp	r3, #0
 8005566:	d02c      	beq.n	80055c2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800556e:	6959      	ldr	r1, [r3, #20]
 8005570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005572:	891a      	ldrh	r2, [r3, #8]
 8005574:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005578:	f005 ff20 	bl	800b3bc <USB_ReadPMA>
 800557c:	e021      	b.n	80055c2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6812      	ldr	r2, [r2, #0]
 8005596:	4413      	add	r3, r2
 8005598:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80055a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055b4:	6959      	ldr	r1, [r3, #20]
 80055b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055b8:	895a      	ldrh	r2, [r3, #10]
 80055ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055be:	f005 fefd 	bl	800b3bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055ca:	441a      	add	r2, r3
 80055cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055d8:	441a      	add	r2, r3
 80055da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <PCD_EP_ISR_Handler+0x41e>
 80055e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80055ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d206      	bcs.n	8005600 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f007 fb37 	bl	800cc6c <HAL_PCD_DataOutStageCallback>
 80055fe:	e005      	b.n	800560c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005606:	4618      	mov	r0, r3
 8005608:	f004 ffb1 	bl	800a56e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800560c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800560e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8117 	beq.w	8005846 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005618:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	3310      	adds	r3, #16
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4413      	add	r3, r2
 800562a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005646:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005666:	78db      	ldrb	r3, [r3, #3]
 8005668:	2b01      	cmp	r3, #1
 800566a:	f040 80a1 	bne.w	80057b0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800566e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005670:	2200      	movs	r2, #0
 8005672:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005676:	7b1b      	ldrb	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8092 	beq.w	80057a2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800567e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d046      	beq.n	8005716 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d126      	bne.n	80056de <PCD_EP_ISR_Handler+0x50a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800569e:	b29b      	uxth	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	4413      	add	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	00da      	lsls	r2, r3, #3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	801a      	strh	r2, [r3, #0]
 80056dc:	e061      	b.n	80057a2 <PCD_EP_ISR_Handler+0x5ce>
 80056de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d15d      	bne.n	80057a2 <PCD_EP_ISR_Handler+0x5ce>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	00da      	lsls	r2, r3, #3
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2200      	movs	r2, #0
 8005712:	801a      	strh	r2, [r3, #0]
 8005714:	e045      	b.n	80057a2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800571c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d126      	bne.n	8005772 <PCD_EP_ISR_Handler+0x59e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	4413      	add	r3, r2
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
 800573c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	00da      	lsls	r2, r3, #3
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	4413      	add	r3, r2
 8005746:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005756:	b29a      	uxth	r2, r3
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576a:	b29a      	uxth	r2, r3
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	e017      	b.n	80057a2 <PCD_EP_ISR_Handler+0x5ce>
 8005772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d113      	bne.n	80057a2 <PCD_EP_ISR_Handler+0x5ce>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005782:	b29b      	uxth	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	4413      	add	r3, r2
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800578c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	00da      	lsls	r2, r3, #3
 8005792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005794:	4413      	add	r3, r2
 8005796:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	2200      	movs	r2, #0
 80057a0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f007 fa7a 	bl	800cca2 <HAL_PCD_DataInStageCallback>
 80057ae:	e04a      	b.n	8005846 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80057b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d13f      	bne.n	800583a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057de:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80057e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d906      	bls.n	80057f8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80057ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80057f0:	1ad2      	subs	r2, r2, r3
 80057f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f4:	619a      	str	r2, [r3, #24]
 80057f6:	e002      	b.n	80057fe <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80057f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057fa:	2200      	movs	r2, #0
 80057fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80057fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f007 fa48 	bl	800cca2 <HAL_PCD_DataInStageCallback>
 8005812:	e018      	b.n	8005846 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005816:	695a      	ldr	r2, [r3, #20]
 8005818:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800581a:	441a      	add	r2, r3
 800581c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800581e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005826:	441a      	add	r2, r3
 8005828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800582a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005832:	4618      	mov	r0, r3
 8005834:	f004 fe9b 	bl	800a56e <USB_EPStartXfer>
 8005838:	e005      	b.n	8005846 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800583a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800583c:	461a      	mov	r2, r3
 800583e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f917 	bl	8005a74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800584e:	b29b      	uxth	r3, r3
 8005850:	b21b      	sxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	f6ff acc3 	blt.w	80051de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3748      	adds	r7, #72	@ 0x48
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b088      	sub	sp, #32
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d07c      	beq.n	8005974 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	4413      	add	r3, r2
 8005894:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	8b7b      	ldrh	r3, [r7, #26]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d306      	bcc.n	80058b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	8b7b      	ldrh	r3, [r7, #26]
 80058b0:	1ad2      	subs	r2, r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	619a      	str	r2, [r3, #24]
 80058b6:	e002      	b.n	80058be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2200      	movs	r2, #0
 80058bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d123      	bne.n	800590e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e0:	833b      	strh	r3, [r7, #24]
 80058e2:	8b3b      	ldrh	r3, [r7, #24]
 80058e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058e8:	833b      	strh	r3, [r7, #24]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	441a      	add	r2, r3
 80058f8:	8b3b      	ldrh	r3, [r7, #24]
 80058fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590a:	b29b      	uxth	r3, r3
 800590c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01f      	beq.n	8005958 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	82fb      	strh	r3, [r7, #22]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	441a      	add	r2, r3
 8005942:	8afb      	ldrh	r3, [r7, #22]
 8005944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800594c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005950:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005954:	b29b      	uxth	r3, r3
 8005956:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005958:	8b7b      	ldrh	r3, [r7, #26]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8085 	beq.w	8005a6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6959      	ldr	r1, [r3, #20]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	891a      	ldrh	r2, [r3, #8]
 800596c:	8b7b      	ldrh	r3, [r7, #26]
 800596e:	f005 fd25 	bl	800b3bc <USB_ReadPMA>
 8005972:	e07a      	b.n	8005a6a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4413      	add	r3, r2
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	4413      	add	r3, r2
 800598e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005998:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	8b7b      	ldrh	r3, [r7, #26]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d306      	bcc.n	80059b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	8b7b      	ldrh	r3, [r7, #26]
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	619a      	str	r2, [r3, #24]
 80059b0:	e002      	b.n	80059b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d123      	bne.n	8005a08 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059da:	83fb      	strh	r3, [r7, #30]
 80059dc:	8bfb      	ldrh	r3, [r7, #30]
 80059de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059e2:	83fb      	strh	r3, [r7, #30]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	8bfb      	ldrh	r3, [r7, #30]
 80059f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11f      	bne.n	8005a52 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2c:	83bb      	strh	r3, [r7, #28]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	441a      	add	r2, r3
 8005a3c:	8bbb      	ldrh	r3, [r7, #28]
 8005a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a52:	8b7b      	ldrh	r3, [r7, #26]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6959      	ldr	r1, [r3, #20]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	895a      	ldrh	r2, [r3, #10]
 8005a64:	8b7b      	ldrh	r3, [r7, #26]
 8005a66:	f005 fca9 	bl	800b3bc <USB_ReadPMA>
    }
  }

  return count;
 8005a6a:	8b7b      	ldrh	r3, [r7, #26]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b0a6      	sub	sp, #152	@ 0x98
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 81f7 	beq.w	8005e7c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d907      	bls.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	619a      	str	r2, [r3, #24]
 8005ad0:	e002      	b.n	8005ad8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 80e1 	bne.w	8005ca4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d126      	bne.n	8005b38 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	4413      	add	r3, r2
 8005b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	00da      	lsls	r2, r3, #3
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e01a      	b.n	8005b6e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d116      	bne.n	8005b6e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	4413      	add	r3, r2
 8005b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	00da      	lsls	r2, r3, #3
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	4413      	add	r3, r2
 8005b62:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d126      	bne.n	8005bca <HAL_PCD_EP_DB_Transmit+0x156>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	4413      	add	r3, r2
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	00da      	lsls	r2, r3, #3
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	e017      	b.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x186>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d113      	bne.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x186>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	4413      	add	r3, r2
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	00da      	lsls	r2, r3, #3
 8005bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d123      	bne.n	8005c4a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1c:	837b      	strh	r3, [r7, #26]
 8005c1e:	8b7b      	ldrh	r3, [r7, #26]
 8005c20:	f083 0320 	eor.w	r3, r3, #32
 8005c24:	837b      	strh	r3, [r7, #26]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	8b7b      	ldrh	r3, [r7, #26]
 8005c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f007 f826 	bl	800cca2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01f      	beq.n	8005ca0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	833b      	strh	r3, [r7, #24]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	8b3b      	ldrh	r3, [r7, #24]
 8005c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e31f      	b.n	80062e4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d021      	beq.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	f040 82ca 	bne.w	8006292 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d06:	441a      	add	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d14:	441a      	add	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6a1a      	ldr	r2, [r3, #32]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d309      	bcc.n	8005d3a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d32:	1ad2      	subs	r2, r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	621a      	str	r2, [r3, #32]
 8005d38:	e015      	b.n	8005d66 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d107      	bne.n	8005d52 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005d42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d46:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005d50:	e009      	b.n	8005d66 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d15f      	bne.n	8005e2e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d82:	4413      	add	r3, r2
 8005d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	00da      	lsls	r2, r3, #3
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d8e:	4413      	add	r3, r2
 8005d90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <HAL_PCD_EP_DB_Transmit+0x34e>
 8005dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	e051      	b.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dc6:	d816      	bhi.n	8005df6 <HAL_PCD_EP_DB_Transmit+0x382>
 8005dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_PCD_EP_DB_Transmit+0x36a>
 8005dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dda:	3301      	adds	r3, #1
 8005ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	4313      	orrs	r3, r2
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e037      	b.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x398>
 8005e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	029b      	lsls	r3, r3, #10
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e2a:	801a      	strh	r2, [r3, #0]
 8005e2c:	e01b      	b.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d117      	bne.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4a:	4413      	add	r3, r2
 8005e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	00da      	lsls	r2, r3, #3
 8005e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e56:	4413      	add	r3, r2
 8005e58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e64:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6959      	ldr	r1, [r3, #20]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	891a      	ldrh	r2, [r3, #8]
 8005e72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f005 fa5e 	bl	800b336 <USB_WritePMA>
 8005e7a:	e20a      	b.n	8006292 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4413      	add	r3, r2
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ea0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	699a      	ldr	r2, [r3, #24]
 8005ea8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d307      	bcc.n	8005ec0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005eb8:	1ad2      	subs	r2, r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	619a      	str	r2, [r3, #24]
 8005ebe:	e002      	b.n	8005ec6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 80f6 	bne.w	80060bc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d126      	bne.n	8005f26 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eec:	4413      	add	r3, r2
 8005eee:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	00da      	lsls	r2, r3, #3
 8005ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ef8:	4413      	add	r3, r2
 8005efa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005efe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	e01a      	b.n	8005f5c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d116      	bne.n	8005f5c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f42:	4413      	add	r3, r2
 8005f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	00da      	lsls	r2, r3, #3
 8005f4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f4e:	4413      	add	r3, r2
 8005f50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f58:	2200      	movs	r2, #0
 8005f5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d12f      	bne.n	8005fcc <HAL_PCD_EP_DB_Transmit+0x558>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f84:	4413      	add	r3, r2
 8005f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	00da      	lsls	r2, r3, #3
 8005f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	e01c      	b.n	8006006 <HAL_PCD_EP_DB_Transmit+0x592>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d118      	bne.n	8006006 <HAL_PCD_EP_DB_Transmit+0x592>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	00da      	lsls	r2, r3, #3
 8005ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ffa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006002:	2200      	movs	r2, #0
 8006004:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	78db      	ldrb	r3, [r3, #3]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d127      	bne.n	800605e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006028:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800602c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006030:	f083 0320 	eor.w	r3, r3, #32
 8006034:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	441a      	add	r2, r3
 8006046:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f006 fe1c 	bl	800cca2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d121      	bne.n	80060b8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	e113      	b.n	80062e4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d121      	bne.n	800610a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 80be 	bne.w	8006292 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800611e:	441a      	add	r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800612c:	441a      	add	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6a1a      	ldr	r2, [r3, #32]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	429a      	cmp	r2, r3
 800613c:	d309      	bcc.n	8006152 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6a1a      	ldr	r2, [r3, #32]
 8006148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	621a      	str	r2, [r3, #32]
 8006150:	e015      	b.n	800617e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800615a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800615e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006168:	e009      	b.n	800617e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d15f      	bne.n	800624c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619a:	b29b      	uxth	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061a0:	4413      	add	r3, r2
 80061a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	00da      	lsls	r2, r3, #3
 80061aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80061b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <HAL_PCD_EP_DB_Transmit+0x76c>
 80061ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e04e      	b.n	800627e <HAL_PCD_EP_DB_Transmit+0x80a>
 80061e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80061e4:	d816      	bhi.n	8006214 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80061e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_PCD_EP_DB_Transmit+0x788>
 80061f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061f8:	3301      	adds	r3, #1
 80061fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80061fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29a      	uxth	r2, r3
 8006202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006204:	b29b      	uxth	r3, r3
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b29b      	uxth	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b29a      	uxth	r2, r3
 800620e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	e034      	b.n	800627e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	663b      	str	r3, [r7, #96]	@ 0x60
 800621a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006224:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006226:	3b01      	subs	r3, #1
 8006228:	663b      	str	r3, [r7, #96]	@ 0x60
 800622a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29a      	uxth	r2, r3
 8006230:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006232:	b29b      	uxth	r3, r3
 8006234:	029b      	lsls	r3, r3, #10
 8006236:	b29b      	uxth	r3, r3
 8006238:	4313      	orrs	r3, r2
 800623a:	b29b      	uxth	r3, r3
 800623c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006244:	b29a      	uxth	r2, r3
 8006246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e018      	b.n	800627e <HAL_PCD_EP_DB_Transmit+0x80a>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d114      	bne.n	800627e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006262:	4413      	add	r3, r2
 8006264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	00da      	lsls	r2, r3, #3
 800626c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800626e:	4413      	add	r3, r2
 8006270:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006274:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006278:	b29a      	uxth	r2, r3
 800627a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800627c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6959      	ldr	r1, [r3, #20]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	895a      	ldrh	r2, [r3, #10]
 800628a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800628c:	b29b      	uxth	r3, r3
 800628e:	f005 f852 	bl	800b336 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ac:	82fb      	strh	r3, [r7, #22]
 80062ae:	8afb      	ldrh	r3, [r7, #22]
 80062b0:	f083 0310 	eor.w	r3, r3, #16
 80062b4:	82fb      	strh	r3, [r7, #22]
 80062b6:	8afb      	ldrh	r3, [r7, #22]
 80062b8:	f083 0320 	eor.w	r3, r3, #32
 80062bc:	82fb      	strh	r3, [r7, #22]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8afb      	ldrh	r3, [r7, #22]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3798      	adds	r7, #152	@ 0x98
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	817b      	strh	r3, [r7, #10]
 80062fa:	4613      	mov	r3, r2
 80062fc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80062fe:	897b      	ldrh	r3, [r7, #10]
 8006300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630a:	897b      	ldrh	r3, [r7, #10]
 800630c:	f003 0207 	and.w	r2, r3, #7
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3310      	adds	r3, #16
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e009      	b.n	8006336 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006322:	897a      	ldrh	r2, [r7, #10]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006336:	893b      	ldrh	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2200      	movs	r2, #0
 8006340:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	b29a      	uxth	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	80da      	strh	r2, [r3, #6]
 800634a:	e00b      	b.n	8006364 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2201      	movs	r2, #1
 8006350:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	b29a      	uxth	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	b29a      	uxth	r2, r3
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006396:	b29b      	uxth	r3, r3
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d141      	bne.n	8006472 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ee:	4b4b      	ldr	r3, [pc, #300]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063fa:	d131      	bne.n	8006460 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063fc:	4b47      	ldr	r3, [pc, #284]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006402:	4a46      	ldr	r2, [pc, #280]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800640c:	4b43      	ldr	r3, [pc, #268]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006414:	4a41      	ldr	r2, [pc, #260]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800641a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800641c:	4b40      	ldr	r3, [pc, #256]	@ (8006520 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2232      	movs	r2, #50	@ 0x32
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	4a3f      	ldr	r2, [pc, #252]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	0c9b      	lsrs	r3, r3, #18
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006432:	e002      	b.n	800643a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3b01      	subs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800643a:	4b38      	ldr	r3, [pc, #224]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006446:	d102      	bne.n	800644e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f2      	bne.n	8006434 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800644e:	4b33      	ldr	r3, [pc, #204]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645a:	d158      	bne.n	800650e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e057      	b.n	8006510 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006460:	4b2e      	ldr	r3, [pc, #184]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006466:	4a2d      	ldr	r2, [pc, #180]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800646c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006470:	e04d      	b.n	800650e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006478:	d141      	bne.n	80064fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800647a:	4b28      	ldr	r3, [pc, #160]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006486:	d131      	bne.n	80064ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006488:	4b24      	ldr	r3, [pc, #144]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800648a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648e:	4a23      	ldr	r2, [pc, #140]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006494:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006498:	4b20      	ldr	r3, [pc, #128]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064a0:	4a1e      	ldr	r2, [pc, #120]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006520 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2232      	movs	r2, #50	@ 0x32
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006524 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064b4:	fba2 2303 	umull	r2, r3, r2, r3
 80064b8:	0c9b      	lsrs	r3, r3, #18
 80064ba:	3301      	adds	r3, #1
 80064bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064be:	e002      	b.n	80064c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064c6:	4b15      	ldr	r3, [pc, #84]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d2:	d102      	bne.n	80064da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f2      	bne.n	80064c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064da:	4b10      	ldr	r3, [pc, #64]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e6:	d112      	bne.n	800650e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e011      	b.n	8006510 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064ec:	4b0b      	ldr	r3, [pc, #44]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064f2:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80064fc:	e007      	b.n	800650e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80064fe:	4b07      	ldr	r3, [pc, #28]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006506:	4a05      	ldr	r2, [pc, #20]	@ (800651c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006508:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800650c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40007000 	.word	0x40007000
 8006520:	20000004 	.word	0x20000004
 8006524:	431bde83 	.word	0x431bde83

08006528 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800652c:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a04      	ldr	r2, [pc, #16]	@ (8006544 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006536:	6093      	str	r3, [r2, #8]
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40007000 	.word	0x40007000

08006548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e2fe      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d075      	beq.n	8006652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006566:	4b97      	ldr	r3, [pc, #604]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006570:	4b94      	ldr	r3, [pc, #592]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b0c      	cmp	r3, #12
 800657e:	d102      	bne.n	8006586 <HAL_RCC_OscConfig+0x3e>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b03      	cmp	r3, #3
 8006584:	d002      	beq.n	800658c <HAL_RCC_OscConfig+0x44>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d10b      	bne.n	80065a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658c:	4b8d      	ldr	r3, [pc, #564]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05b      	beq.n	8006650 <HAL_RCC_OscConfig+0x108>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d157      	bne.n	8006650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e2d9      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ac:	d106      	bne.n	80065bc <HAL_RCC_OscConfig+0x74>
 80065ae:	4b85      	ldr	r3, [pc, #532]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a84      	ldr	r2, [pc, #528]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e01d      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x98>
 80065c6:	4b7f      	ldr	r3, [pc, #508]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a7e      	ldr	r2, [pc, #504]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4b7c      	ldr	r3, [pc, #496]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7b      	ldr	r2, [pc, #492]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065e0:	4b78      	ldr	r3, [pc, #480]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a77      	ldr	r2, [pc, #476]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4b75      	ldr	r3, [pc, #468]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a74      	ldr	r2, [pc, #464]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80065f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006600:	f7fb fb72 	bl	8001ce8 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006608:	f7fb fb6e 	bl	8001ce8 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	@ 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e29e      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800661a:	4b6a      	ldr	r3, [pc, #424]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0xc0>
 8006626:	e014      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fb fb5e 	bl	8001ce8 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006630:	f7fb fb5a 	bl	8001ce8 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	@ 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e28a      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006642:	4b60      	ldr	r3, [pc, #384]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0xe8>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d075      	beq.n	800674a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800665e:	4b59      	ldr	r3, [pc, #356]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006668:	4b56      	ldr	r3, [pc, #344]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d102      	bne.n	800667e <HAL_RCC_OscConfig+0x136>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d002      	beq.n	8006684 <HAL_RCC_OscConfig+0x13c>
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b04      	cmp	r3, #4
 8006682:	d11f      	bne.n	80066c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006684:	4b4f      	ldr	r3, [pc, #316]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCC_OscConfig+0x154>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e25d      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669c:	4b49      	ldr	r3, [pc, #292]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	061b      	lsls	r3, r3, #24
 80066aa:	4946      	ldr	r1, [pc, #280]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80066b0:	4b45      	ldr	r3, [pc, #276]	@ (80067c8 <HAL_RCC_OscConfig+0x280>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fb facb 	bl	8001c50 <HAL_InitTick>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d043      	beq.n	8006748 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e249      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d023      	beq.n	8006714 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066cc:	4b3d      	ldr	r3, [pc, #244]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a3c      	ldr	r2, [pc, #240]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80066d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fb fb06 	bl	8001ce8 <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e0:	f7fb fb02 	bl	8001ce8 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e232      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066f2:	4b34      	ldr	r3, [pc, #208]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fe:	4b31      	ldr	r3, [pc, #196]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	492d      	ldr	r1, [pc, #180]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800670e:	4313      	orrs	r3, r2
 8006710:	604b      	str	r3, [r1, #4]
 8006712:	e01a      	b.n	800674a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006714:	4b2b      	ldr	r3, [pc, #172]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2a      	ldr	r2, [pc, #168]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800671a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800671e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7fb fae2 	bl	8001ce8 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006728:	f7fb fade 	bl	8001ce8 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e20e      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800673a:	4b22      	ldr	r3, [pc, #136]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0x1e0>
 8006746:	e000      	b.n	800674a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006748:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d041      	beq.n	80067da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01c      	beq.n	8006798 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800675e:	4b19      	ldr	r3, [pc, #100]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006764:	4a17      	ldr	r2, [pc, #92]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fb fabb 	bl	8001ce8 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7fb fab7 	bl	8001ce8 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e1e7      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006788:	4b0e      	ldr	r3, [pc, #56]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800678a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0ef      	beq.n	8006776 <HAL_RCC_OscConfig+0x22e>
 8006796:	e020      	b.n	80067da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006798:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800679a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800679e:	4a09      	ldr	r2, [pc, #36]	@ (80067c4 <HAL_RCC_OscConfig+0x27c>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fb fa9e 	bl	8001ce8 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067ae:	e00d      	b.n	80067cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b0:	f7fb fa9a 	bl	8001ce8 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d906      	bls.n	80067cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e1ca      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
 80067c2:	bf00      	nop
 80067c4:	40021000 	.word	0x40021000
 80067c8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80067ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1ea      	bne.n	80067b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80a6 	beq.w	8006934 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067e8:	2300      	movs	r3, #0
 80067ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067ec:	4b84      	ldr	r3, [pc, #528]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80067ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_RCC_OscConfig+0x2b4>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <HAL_RCC_OscConfig+0x2b6>
 80067fc:	2300      	movs	r3, #0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	4b7f      	ldr	r3, [pc, #508]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006806:	4a7e      	ldr	r2, [pc, #504]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800680c:	6593      	str	r3, [r2, #88]	@ 0x58
 800680e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800681a:	2301      	movs	r3, #1
 800681c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800681e:	4b79      	ldr	r3, [pc, #484]	@ (8006a04 <HAL_RCC_OscConfig+0x4bc>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006826:	2b00      	cmp	r3, #0
 8006828:	d118      	bne.n	800685c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800682a:	4b76      	ldr	r3, [pc, #472]	@ (8006a04 <HAL_RCC_OscConfig+0x4bc>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a75      	ldr	r2, [pc, #468]	@ (8006a04 <HAL_RCC_OscConfig+0x4bc>)
 8006830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006836:	f7fb fa57 	bl	8001ce8 <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683e:	f7fb fa53 	bl	8001ce8 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e183      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006850:	4b6c      	ldr	r3, [pc, #432]	@ (8006a04 <HAL_RCC_OscConfig+0x4bc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0f0      	beq.n	800683e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d108      	bne.n	8006876 <HAL_RCC_OscConfig+0x32e>
 8006864:	4b66      	ldr	r3, [pc, #408]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686a:	4a65      	ldr	r2, [pc, #404]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006874:	e024      	b.n	80068c0 <HAL_RCC_OscConfig+0x378>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b05      	cmp	r3, #5
 800687c:	d110      	bne.n	80068a0 <HAL_RCC_OscConfig+0x358>
 800687e:	4b60      	ldr	r3, [pc, #384]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006884:	4a5e      	ldr	r2, [pc, #376]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006886:	f043 0304 	orr.w	r3, r3, #4
 800688a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800688e:	4b5c      	ldr	r3, [pc, #368]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006894:	4a5a      	ldr	r2, [pc, #360]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800689e:	e00f      	b.n	80068c0 <HAL_RCC_OscConfig+0x378>
 80068a0:	4b57      	ldr	r3, [pc, #348]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a6:	4a56      	ldr	r2, [pc, #344]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068b0:	4b53      	ldr	r3, [pc, #332]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b6:	4a52      	ldr	r2, [pc, #328]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80068b8:	f023 0304 	bic.w	r3, r3, #4
 80068bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d016      	beq.n	80068f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c8:	f7fb fa0e 	bl	8001ce8 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ce:	e00a      	b.n	80068e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d0:	f7fb fa0a 	bl	8001ce8 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e138      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068e6:	4b46      	ldr	r3, [pc, #280]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ed      	beq.n	80068d0 <HAL_RCC_OscConfig+0x388>
 80068f4:	e015      	b.n	8006922 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fb f9f7 	bl	8001ce8 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fb f9f3 	bl	8001ce8 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e121      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006914:	4b3a      	ldr	r3, [pc, #232]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1ed      	bne.n	80068fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006922:	7ffb      	ldrb	r3, [r7, #31]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d105      	bne.n	8006934 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006928:	4b35      	ldr	r3, [pc, #212]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 800692a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692c:	4a34      	ldr	r2, [pc, #208]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 800692e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006932:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d03c      	beq.n	80069ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01c      	beq.n	8006982 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006948:	4b2d      	ldr	r3, [pc, #180]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 800694a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800694e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006950:	f043 0301 	orr.w	r3, r3, #1
 8006954:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006958:	f7fb f9c6 	bl	8001ce8 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006960:	f7fb f9c2 	bl	8001ce8 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e0f2      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006972:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006974:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ef      	beq.n	8006960 <HAL_RCC_OscConfig+0x418>
 8006980:	e01b      	b.n	80069ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006982:	4b1f      	ldr	r3, [pc, #124]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 8006984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006988:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006992:	f7fb f9a9 	bl	8001ce8 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800699a:	f7fb f9a5 	bl	8001ce8 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e0d5      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069ac:	4b14      	ldr	r3, [pc, #80]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80069ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1ef      	bne.n	800699a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80c9 	beq.w	8006b56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 030c 	and.w	r3, r3, #12
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	f000 8083 	beq.w	8006ad8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d15e      	bne.n	8006a98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069da:	4b09      	ldr	r3, [pc, #36]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a08      	ldr	r2, [pc, #32]	@ (8006a00 <HAL_RCC_OscConfig+0x4b8>)
 80069e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e6:	f7fb f97f 	bl	8001ce8 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ec:	e00c      	b.n	8006a08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ee:	f7fb f97b 	bl	8001ce8 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d905      	bls.n	8006a08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e0ab      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
 8006a00:	40021000 	.word	0x40021000
 8006a04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a08:	4b55      	ldr	r3, [pc, #340]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1ec      	bne.n	80069ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a14:	4b52      	ldr	r3, [pc, #328]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	4b52      	ldr	r3, [pc, #328]	@ (8006b64 <HAL_RCC_OscConfig+0x61c>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6a11      	ldr	r1, [r2, #32]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a24:	3a01      	subs	r2, #1
 8006a26:	0112      	lsls	r2, r2, #4
 8006a28:	4311      	orrs	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006a2e:	0212      	lsls	r2, r2, #8
 8006a30:	4311      	orrs	r1, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a36:	0852      	lsrs	r2, r2, #1
 8006a38:	3a01      	subs	r2, #1
 8006a3a:	0552      	lsls	r2, r2, #21
 8006a3c:	4311      	orrs	r1, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a42:	0852      	lsrs	r2, r2, #1
 8006a44:	3a01      	subs	r2, #1
 8006a46:	0652      	lsls	r2, r2, #25
 8006a48:	4311      	orrs	r1, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a4e:	06d2      	lsls	r2, r2, #27
 8006a50:	430a      	orrs	r2, r1
 8006a52:	4943      	ldr	r1, [pc, #268]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a58:	4b41      	ldr	r3, [pc, #260]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a40      	ldr	r2, [pc, #256]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a64:	4b3e      	ldr	r3, [pc, #248]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4a3d      	ldr	r2, [pc, #244]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fb f93a 	bl	8001ce8 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a78:	f7fb f936 	bl	8001ce8 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e066      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a8a:	4b35      	ldr	r3, [pc, #212]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f0      	beq.n	8006a78 <HAL_RCC_OscConfig+0x530>
 8006a96:	e05e      	b.n	8006b56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a98:	4b31      	ldr	r3, [pc, #196]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a30      	ldr	r2, [pc, #192]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa4:	f7fb f920 	bl	8001ce8 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fb f91c 	bl	8001ce8 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e04c      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006abe:	4b28      	ldr	r3, [pc, #160]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006aca:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	4924      	ldr	r1, [pc, #144]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006ad0:	4b25      	ldr	r3, [pc, #148]	@ (8006b68 <HAL_RCC_OscConfig+0x620>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	60cb      	str	r3, [r1, #12]
 8006ad6:	e03e      	b.n	8006b56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e039      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8006b60 <HAL_RCC_OscConfig+0x618>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f003 0203 	and.w	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d12c      	bne.n	8006b52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b02:	3b01      	subs	r3, #1
 8006b04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d123      	bne.n	8006b52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d11b      	bne.n	8006b52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d113      	bne.n	8006b52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	3b01      	subs	r3, #1
 8006b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d001      	beq.n	8006b56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40021000 	.word	0x40021000
 8006b64:	019f800c 	.word	0x019f800c
 8006b68:	feeefffc 	.word	0xfeeefffc

08006b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e11e      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b84:	4b91      	ldr	r3, [pc, #580]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d910      	bls.n	8006bb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b8e      	ldr	r3, [pc, #568]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f023 020f 	bic.w	r2, r3, #15
 8006b9a:	498c      	ldr	r1, [pc, #560]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba2:	4b8a      	ldr	r3, [pc, #552]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e106      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d073      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d129      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc8:	4b81      	ldr	r3, [pc, #516]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0f4      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006bd8:	f000 f99e 	bl	8006f18 <RCC_GetSysClockFreqFromPLLSource>
 8006bdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4a7c      	ldr	r2, [pc, #496]	@ (8006dd4 <HAL_RCC_ClockConfig+0x268>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d93f      	bls.n	8006c66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006be6:	4b7a      	ldr	r3, [pc, #488]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d033      	beq.n	8006c66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d12f      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c06:	4b72      	ldr	r3, [pc, #456]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c0e:	4a70      	ldr	r2, [pc, #448]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c16:	2380      	movs	r3, #128	@ 0x80
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e024      	b.n	8006c66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d107      	bne.n	8006c34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c24:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0c6      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c34:	4b66      	ldr	r3, [pc, #408]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0be      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006c44:	f000 f8ce 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006c48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4a61      	ldr	r2, [pc, #388]	@ (8006dd4 <HAL_RCC_ClockConfig+0x268>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d909      	bls.n	8006c66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c52:	4b5f      	ldr	r3, [pc, #380]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c5a:	4a5d      	ldr	r2, [pc, #372]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006c62:	2380      	movs	r3, #128	@ 0x80
 8006c64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c66:	4b5a      	ldr	r3, [pc, #360]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f023 0203 	bic.w	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4957      	ldr	r1, [pc, #348]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c78:	f7fb f836 	bl	8001ce8 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c7e:	e00a      	b.n	8006c96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c80:	f7fb f832 	bl	8001ce8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e095      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c96:	4b4e      	ldr	r3, [pc, #312]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 020c 	and.w	r2, r3, #12
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d1eb      	bne.n	8006c80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d023      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cc0:	4b43      	ldr	r3, [pc, #268]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4a42      	ldr	r2, [pc, #264]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006cc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006cca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d007      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006ce2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce8:	4b39      	ldr	r3, [pc, #228]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	4936      	ldr	r1, [pc, #216]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b80      	cmp	r3, #128	@ 0x80
 8006d00:	d105      	bne.n	8006d0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006d02:	4b33      	ldr	r3, [pc, #204]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	4a32      	ldr	r2, [pc, #200]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006d08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d21d      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f023 020f 	bic.w	r2, r3, #15
 8006d24:	4929      	ldr	r1, [pc, #164]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d2c:	f7fa ffdc 	bl	8001ce8 <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d32:	e00a      	b.n	8006d4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d34:	f7fa ffd8 	bl	8001ce8 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e03b      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b20      	ldr	r3, [pc, #128]	@ (8006dcc <HAL_RCC_ClockConfig+0x260>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d1ed      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d64:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4917      	ldr	r1, [pc, #92]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d82:	4b13      	ldr	r3, [pc, #76]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	490f      	ldr	r1, [pc, #60]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d96:	f000 f825 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <HAL_RCC_ClockConfig+0x264>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	490c      	ldr	r1, [pc, #48]	@ (8006dd8 <HAL_RCC_ClockConfig+0x26c>)
 8006da8:	5ccb      	ldrb	r3, [r1, r3]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	fa22 f303 	lsr.w	r3, r2, r3
 8006db2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ddc <HAL_RCC_ClockConfig+0x270>)
 8006db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006db6:	4b0a      	ldr	r3, [pc, #40]	@ (8006de0 <HAL_RCC_ClockConfig+0x274>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fa ff48 	bl	8001c50 <HAL_InitTick>
 8006dc0:	4603      	mov	r3, r0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40022000 	.word	0x40022000
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	04c4b400 	.word	0x04c4b400
 8006dd8:	0800e158 	.word	0x0800e158
 8006ddc:	20000004 	.word	0x20000004
 8006de0:	20000008 	.word	0x20000008

08006de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006dea:	4b2c      	ldr	r3, [pc, #176]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 030c 	and.w	r3, r3, #12
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d102      	bne.n	8006dfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006df6:	4b2a      	ldr	r3, [pc, #168]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	e047      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006dfc:	4b27      	ldr	r3, [pc, #156]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 030c 	and.w	r3, r3, #12
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d102      	bne.n	8006e0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e08:	4b26      	ldr	r3, [pc, #152]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	e03e      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006e0e:	4b23      	ldr	r3, [pc, #140]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 030c 	and.w	r3, r3, #12
 8006e16:	2b0c      	cmp	r3, #12
 8006e18:	d136      	bne.n	8006e88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e1a:	4b20      	ldr	r3, [pc, #128]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e24:	4b1d      	ldr	r3, [pc, #116]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d10c      	bne.n	8006e52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e38:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e40:	4a16      	ldr	r2, [pc, #88]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e42:	68d2      	ldr	r2, [r2, #12]
 8006e44:	0a12      	lsrs	r2, r2, #8
 8006e46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	617b      	str	r3, [r7, #20]
      break;
 8006e50:	e00c      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e52:	4a13      	ldr	r2, [pc, #76]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	4a10      	ldr	r2, [pc, #64]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e5c:	68d2      	ldr	r2, [r2, #12]
 8006e5e:	0a12      	lsrs	r2, r2, #8
 8006e60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e64:	fb02 f303 	mul.w	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]
      break;
 8006e6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	0e5b      	lsrs	r3, r3, #25
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	3301      	adds	r3, #1
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e001      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e8c:	693b      	ldr	r3, [r7, #16]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	00f42400 	.word	0x00f42400
 8006ea4:	007a1200 	.word	0x007a1200

08006ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eac:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8006eae:	681b      	ldr	r3, [r3, #0]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000004 	.word	0x20000004

08006ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ec4:	f7ff fff0 	bl	8006ea8 <HAL_RCC_GetHCLKFreq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	4904      	ldr	r1, [pc, #16]	@ (8006ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	0800e168 	.word	0x0800e168

08006eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ef0:	f7ff ffda 	bl	8006ea8 <HAL_RCC_GetHCLKFreq>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	0adb      	lsrs	r3, r3, #11
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	4904      	ldr	r1, [pc, #16]	@ (8006f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f02:	5ccb      	ldrb	r3, [r1, r3]
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40021000 	.word	0x40021000
 8006f14:	0800e168 	.word	0x0800e168

08006f18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f28:	4b1b      	ldr	r3, [pc, #108]	@ (8006f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d10c      	bne.n	8006f56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f3c:	4a17      	ldr	r2, [pc, #92]	@ (8006f9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	4a14      	ldr	r2, [pc, #80]	@ (8006f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f46:	68d2      	ldr	r2, [r2, #12]
 8006f48:	0a12      	lsrs	r2, r2, #8
 8006f4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
 8006f52:	617b      	str	r3, [r7, #20]
    break;
 8006f54:	e00c      	b.n	8006f70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f56:	4a12      	ldr	r2, [pc, #72]	@ (8006fa0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f60:	68d2      	ldr	r2, [r2, #12]
 8006f62:	0a12      	lsrs	r2, r2, #8
 8006f64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	617b      	str	r3, [r7, #20]
    break;
 8006f6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f70:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	0e5b      	lsrs	r3, r3, #25
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f8a:	687b      	ldr	r3, [r7, #4]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	007a1200 	.word	0x007a1200
 8006fa0:	00f42400 	.word	0x00f42400

08006fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fac:	2300      	movs	r3, #0
 8006fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8098 	beq.w	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fc6:	4b43      	ldr	r3, [pc, #268]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd2:	4b40      	ldr	r3, [pc, #256]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd6:	4a3f      	ldr	r2, [pc, #252]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fde:	4b3d      	ldr	r3, [pc, #244]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fe6:	60bb      	str	r3, [r7, #8]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fea:	2301      	movs	r3, #1
 8006fec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fee:	4b3a      	ldr	r3, [pc, #232]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a39      	ldr	r2, [pc, #228]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ffa:	f7fa fe75 	bl	8001ce8 <HAL_GetTick>
 8006ffe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007000:	e009      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007002:	f7fa fe71 	bl	8001ce8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d902      	bls.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	74fb      	strb	r3, [r7, #19]
        break;
 8007014:	e005      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007016:	4b30      	ldr	r3, [pc, #192]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0ef      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007022:	7cfb      	ldrb	r3, [r7, #19]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d159      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007028:	4b2a      	ldr	r3, [pc, #168]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007032:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d01e      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	429a      	cmp	r2, r3
 8007042:	d019      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007044:	4b23      	ldr	r3, [pc, #140]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800704e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007050:	4b20      	ldr	r3, [pc, #128]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007056:	4a1f      	ldr	r2, [pc, #124]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800705c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007060:	4b1c      	ldr	r3, [pc, #112]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007066:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800706c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007070:	4a18      	ldr	r2, [pc, #96]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007082:	f7fa fe31 	bl	8001ce8 <HAL_GetTick>
 8007086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007088:	e00b      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708a:	f7fa fe2d 	bl	8001ce8 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007098:	4293      	cmp	r3, r2
 800709a:	d902      	bls.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	74fb      	strb	r3, [r7, #19]
            break;
 80070a0:	e006      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070a2:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0ec      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80070b0:	7cfb      	ldrb	r3, [r7, #19]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070b6:	4b07      	ldr	r3, [pc, #28]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c4:	4903      	ldr	r1, [pc, #12]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070cc:	e008      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070ce:	7cfb      	ldrb	r3, [r7, #19]
 80070d0:	74bb      	strb	r3, [r7, #18]
 80070d2:	e005      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070dc:	7cfb      	ldrb	r3, [r7, #19]
 80070de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070e0:	7c7b      	ldrb	r3, [r7, #17]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d105      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070e6:	4ba6      	ldr	r3, [pc, #664]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	4aa5      	ldr	r2, [pc, #660]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070fe:	4ba0      	ldr	r3, [pc, #640]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007104:	f023 0203 	bic.w	r2, r3, #3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	499c      	ldr	r1, [pc, #624]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007120:	4b97      	ldr	r3, [pc, #604]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007126:	f023 020c 	bic.w	r2, r3, #12
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	4994      	ldr	r1, [pc, #592]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007142:	4b8f      	ldr	r3, [pc, #572]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007148:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	498b      	ldr	r1, [pc, #556]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007164:	4b86      	ldr	r3, [pc, #536]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	4983      	ldr	r1, [pc, #524]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007186:	4b7e      	ldr	r3, [pc, #504]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	497a      	ldr	r1, [pc, #488]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071a8:	4b75      	ldr	r3, [pc, #468]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	4972      	ldr	r1, [pc, #456]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	4969      	ldr	r1, [pc, #420]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ec:	4b64      	ldr	r3, [pc, #400]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	4961      	ldr	r1, [pc, #388]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800720e:	4b5c      	ldr	r3, [pc, #368]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	4958      	ldr	r1, [pc, #352]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800722c:	2b00      	cmp	r3, #0
 800722e:	d015      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007230:	4b53      	ldr	r3, [pc, #332]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007236:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	4950      	ldr	r1, [pc, #320]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007250:	4b4b      	ldr	r3, [pc, #300]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4a4a      	ldr	r2, [pc, #296]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800725a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007268:	4b45      	ldr	r3, [pc, #276]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007276:	4942      	ldr	r1, [pc, #264]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007286:	d105      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007288:	4b3d      	ldr	r3, [pc, #244]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	4a3c      	ldr	r2, [pc, #240]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800728e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007292:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d015      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072a0:	4b37      	ldr	r3, [pc, #220]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	4934      	ldr	r1, [pc, #208]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072be:	d105      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072c0:	4b2f      	ldr	r3, [pc, #188]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d015      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072d8:	4b29      	ldr	r3, [pc, #164]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e6:	4926      	ldr	r1, [pc, #152]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072f6:	d105      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072f8:	4b21      	ldr	r3, [pc, #132]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	4a20      	ldr	r2, [pc, #128]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007302:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d015      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007310:	4b1b      	ldr	r3, [pc, #108]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731e:	4918      	ldr	r1, [pc, #96]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800732e:	d105      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007330:	4b13      	ldr	r3, [pc, #76]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	4a12      	ldr	r2, [pc, #72]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800733a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d015      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007348:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	490a      	ldr	r1, [pc, #40]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007366:	d105      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007368:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	4a04      	ldr	r2, [pc, #16]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800736e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007372:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007374:	7cbb      	ldrb	r3, [r7, #18]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40021000 	.word	0x40021000

08007384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e049      	b.n	800742a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fa fad2 	bl	8001954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f000 fe9a 	bl	80080fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e049      	b.n	80074d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d106      	bne.n	800745e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f841 	bl	80074e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f000 fe43 	bl	80080fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <HAL_TIM_PWM_Start_DMA+0x2c>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	bf0c      	ite	eq
 8007518:	2301      	moveq	r3, #1
 800751a:	2300      	movne	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	e03c      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b04      	cmp	r3, #4
 8007524:	d109      	bne.n	800753a <HAL_TIM_PWM_Start_DMA+0x46>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	bf0c      	ite	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	2300      	movne	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	e02f      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0xa6>
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b08      	cmp	r3, #8
 800753e:	d109      	bne.n	8007554 <HAL_TIM_PWM_Start_DMA+0x60>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	e022      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b0c      	cmp	r3, #12
 8007558:	d109      	bne.n	800756e <HAL_TIM_PWM_Start_DMA+0x7a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	bf0c      	ite	eq
 8007566:	2301      	moveq	r3, #1
 8007568:	2300      	movne	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	e015      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0xa6>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b10      	cmp	r3, #16
 8007572:	d109      	bne.n	8007588 <HAL_TIM_PWM_Start_DMA+0x94>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	bf0c      	ite	eq
 8007580:	2301      	moveq	r3, #1
 8007582:	2300      	movne	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	e008      	b.n	800759a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
 80075a0:	e1a6      	b.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d109      	bne.n	80075bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf0c      	ite	eq
 80075b4:	2301      	moveq	r3, #1
 80075b6:	2300      	movne	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	e03c      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x142>
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d109      	bne.n	80075d6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	e02f      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x142>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d109      	bne.n	80075f0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	bf0c      	ite	eq
 80075e8:	2301      	moveq	r3, #1
 80075ea:	2300      	movne	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	e022      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x142>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b0c      	cmp	r3, #12
 80075f4:	d109      	bne.n	800760a <HAL_TIM_PWM_Start_DMA+0x116>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	bf0c      	ite	eq
 8007602:	2301      	moveq	r3, #1
 8007604:	2300      	movne	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e015      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x142>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start_DMA+0x130>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	bf0c      	ite	eq
 800761c:	2301      	moveq	r3, #1
 800761e:	2300      	movne	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e008      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x142>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b01      	cmp	r3, #1
 800762e:	bf0c      	ite	eq
 8007630:	2301      	moveq	r3, #1
 8007632:	2300      	movne	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d034      	beq.n	80076a4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <HAL_TIM_PWM_Start_DMA+0x152>
 8007640:	887b      	ldrh	r3, [r7, #2]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e152      	b.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_TIM_PWM_Start_DMA+0x166>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007658:	e026      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b04      	cmp	r3, #4
 800765e:	d104      	bne.n	800766a <HAL_TIM_PWM_Start_DMA+0x176>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007668:	e01e      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d104      	bne.n	800767a <HAL_TIM_PWM_Start_DMA+0x186>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007678:	e016      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b0c      	cmp	r3, #12
 800767e:	d104      	bne.n	800768a <HAL_TIM_PWM_Start_DMA+0x196>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007688:	e00e      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b10      	cmp	r3, #16
 800768e:	d104      	bne.n	800769a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007698:	e006      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076a2:	e001      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e123      	b.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b0c      	cmp	r3, #12
 80076ac:	f200 80ae 	bhi.w	800780c <HAL_TIM_PWM_Start_DMA+0x318>
 80076b0:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	0800780d 	.word	0x0800780d
 80076c0:	0800780d 	.word	0x0800780d
 80076c4:	0800780d 	.word	0x0800780d
 80076c8:	08007735 	.word	0x08007735
 80076cc:	0800780d 	.word	0x0800780d
 80076d0:	0800780d 	.word	0x0800780d
 80076d4:	0800780d 	.word	0x0800780d
 80076d8:	0800777d 	.word	0x0800777d
 80076dc:	0800780d 	.word	0x0800780d
 80076e0:	0800780d 	.word	0x0800780d
 80076e4:	0800780d 	.word	0x0800780d
 80076e8:	080077c5 	.word	0x080077c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f0:	4a81      	ldr	r2, [pc, #516]	@ (80078f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 80076f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	4a80      	ldr	r2, [pc, #512]	@ (80078fc <HAL_TIM_PWM_Start_DMA+0x408>)
 80076fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	4a7f      	ldr	r2, [pc, #508]	@ (8007900 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007702:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3334      	adds	r3, #52	@ 0x34
 8007710:	461a      	mov	r2, r3
 8007712:	887b      	ldrh	r3, [r7, #2]
 8007714:	f7fc f91c 	bl	8003950 <HAL_DMA_Start_IT>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e0e6      	b.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007730:	60da      	str	r2, [r3, #12]
      break;
 8007732:	e06e      	b.n	8007812 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	4a6f      	ldr	r2, [pc, #444]	@ (80078f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800773a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007740:	4a6e      	ldr	r2, [pc, #440]	@ (80078fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8007742:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	4a6d      	ldr	r2, [pc, #436]	@ (8007900 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800774a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3338      	adds	r3, #56	@ 0x38
 8007758:	461a      	mov	r2, r3
 800775a:	887b      	ldrh	r3, [r7, #2]
 800775c:	f7fc f8f8 	bl	8003950 <HAL_DMA_Start_IT>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0c2      	b.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007778:	60da      	str	r2, [r3, #12]
      break;
 800777a:	e04a      	b.n	8007812 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	4a5d      	ldr	r2, [pc, #372]	@ (80078f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007782:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	4a5c      	ldr	r2, [pc, #368]	@ (80078fc <HAL_TIM_PWM_Start_DMA+0x408>)
 800778a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	4a5b      	ldr	r2, [pc, #364]	@ (8007900 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007792:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	333c      	adds	r3, #60	@ 0x3c
 80077a0:	461a      	mov	r2, r3
 80077a2:	887b      	ldrh	r3, [r7, #2]
 80077a4:	f7fc f8d4 	bl	8003950 <HAL_DMA_Start_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e09e      	b.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077c0:	60da      	str	r2, [r3, #12]
      break;
 80077c2:	e026      	b.n	8007812 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c8:	4a4b      	ldr	r2, [pc, #300]	@ (80078f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 80077ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d0:	4a4a      	ldr	r2, [pc, #296]	@ (80078fc <HAL_TIM_PWM_Start_DMA+0x408>)
 80077d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d8:	4a49      	ldr	r2, [pc, #292]	@ (8007900 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80077da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3340      	adds	r3, #64	@ 0x40
 80077e8:	461a      	mov	r2, r3
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	f7fc f8b0 	bl	8003950 <HAL_DMA_Start_IT>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e07a      	b.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007808:	60da      	str	r2, [r3, #12]
      break;
 800780a:	e002      	b.n	8007812 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	bf00      	nop
  }

  if (status == HAL_OK)
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d16a      	bne.n	80078ee <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2201      	movs	r2, #1
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f001 f899 	bl	8008958 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a36      	ldr	r2, [pc, #216]	@ (8007904 <HAL_TIM_PWM_Start_DMA+0x410>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <HAL_TIM_PWM_Start_DMA+0x364>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a34      	ldr	r2, [pc, #208]	@ (8007908 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00e      	beq.n	8007858 <HAL_TIM_PWM_Start_DMA+0x364>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a33      	ldr	r2, [pc, #204]	@ (800790c <HAL_TIM_PWM_Start_DMA+0x418>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_TIM_PWM_Start_DMA+0x364>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a31      	ldr	r2, [pc, #196]	@ (8007910 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIM_PWM_Start_DMA+0x364>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a30      	ldr	r2, [pc, #192]	@ (8007914 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d101      	bne.n	800785c <HAL_TIM_PWM_Start_DMA+0x368>
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <HAL_TIM_PWM_Start_DMA+0x36a>
 800785c:	2300      	movs	r3, #0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a23      	ldr	r2, [pc, #140]	@ (8007904 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d018      	beq.n	80078ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007884:	d013      	beq.n	80078ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a23      	ldr	r2, [pc, #140]	@ (8007918 <HAL_TIM_PWM_Start_DMA+0x424>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a21      	ldr	r2, [pc, #132]	@ (800791c <HAL_TIM_PWM_Start_DMA+0x428>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1a      	ldr	r2, [pc, #104]	@ (8007908 <HAL_TIM_PWM_Start_DMA+0x414>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a18      	ldr	r2, [pc, #96]	@ (800790c <HAL_TIM_PWM_Start_DMA+0x418>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d115      	bne.n	80078da <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007920 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b06      	cmp	r3, #6
 80078be:	d015      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x3f8>
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c6:	d011      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d8:	e008      	b.n	80078ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0201 	orr.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e000      	b.n	80078ee <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	08007feb 	.word	0x08007feb
 80078fc:	08008093 	.word	0x08008093
 8007900:	08007f59 	.word	0x08007f59
 8007904:	40012c00 	.word	0x40012c00
 8007908:	40013400 	.word	0x40013400
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800
 8007920:	00010007 	.word	0x00010007

08007924 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b0c      	cmp	r3, #12
 8007936:	d855      	bhi.n	80079e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007975 	.word	0x08007975
 8007944:	080079e5 	.word	0x080079e5
 8007948:	080079e5 	.word	0x080079e5
 800794c:	080079e5 	.word	0x080079e5
 8007950:	08007991 	.word	0x08007991
 8007954:	080079e5 	.word	0x080079e5
 8007958:	080079e5 	.word	0x080079e5
 800795c:	080079e5 	.word	0x080079e5
 8007960:	080079ad 	.word	0x080079ad
 8007964:	080079e5 	.word	0x080079e5
 8007968:	080079e5 	.word	0x080079e5
 800796c:	080079e5 	.word	0x080079e5
 8007970:	080079c9 	.word	0x080079c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007982:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007988:	4618      	mov	r0, r3
 800798a:	f7fc f85c 	bl	8003a46 <HAL_DMA_Abort_IT>
      break;
 800798e:	e02c      	b.n	80079ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fc f84e 	bl	8003a46 <HAL_DMA_Abort_IT>
      break;
 80079aa:	e01e      	b.n	80079ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fc f840 	bl	8003a46 <HAL_DMA_Abort_IT>
      break;
 80079c6:	e010      	b.n	80079ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fc f832 	bl	8003a46 <HAL_DMA_Abort_IT>
      break;
 80079e2:	e002      	b.n	80079ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73fb      	strb	r3, [r7, #15]
      break;
 80079e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f040 8081 	bne.w	8007af4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 ffac 	bl	8008958 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a3e      	ldr	r2, [pc, #248]	@ (8007b00 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d013      	beq.n	8007a32 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8007b04 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00e      	beq.n	8007a32 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a3b      	ldr	r2, [pc, #236]	@ (8007b08 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d009      	beq.n	8007a32 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a3a      	ldr	r2, [pc, #232]	@ (8007b0c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d004      	beq.n	8007a32 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a38      	ldr	r2, [pc, #224]	@ (8007b10 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d101      	bne.n	8007a36 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6a1a      	ldr	r2, [r3, #32]
 8007a42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10f      	bne.n	8007a6c <HAL_TIM_PWM_Stop_DMA+0x148>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007a56:	4013      	ands	r3, r2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <HAL_TIM_PWM_Stop_DMA+0x148>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a6a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6a1a      	ldr	r2, [r3, #32]
 8007a72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a76:	4013      	ands	r3, r2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10f      	bne.n	8007a9c <HAL_TIM_PWM_Stop_DMA+0x178>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_TIM_PWM_Stop_DMA+0x178>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0201 	bic.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <HAL_TIM_PWM_Stop_DMA+0x188>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aaa:	e023      	b.n	8007af4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d104      	bne.n	8007abc <HAL_TIM_PWM_Stop_DMA+0x198>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aba:	e01b      	b.n	8007af4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d104      	bne.n	8007acc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aca:	e013      	b.n	8007af4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b0c      	cmp	r3, #12
 8007ad0:	d104      	bne.n	8007adc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ada:	e00b      	b.n	8007af4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b10      	cmp	r3, #16
 8007ae0:	d104      	bne.n	8007aec <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aea:	e003      	b.n	8007af4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40013400 	.word	0x40013400
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40014400 	.word	0x40014400
 8007b10:	40014800 	.word	0x40014800

08007b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e0ff      	b.n	8007d32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b14      	cmp	r3, #20
 8007b3e:	f200 80f0 	bhi.w	8007d22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007d23 	.word	0x08007d23
 8007b50:	08007d23 	.word	0x08007d23
 8007b54:	08007d23 	.word	0x08007d23
 8007b58:	08007bdd 	.word	0x08007bdd
 8007b5c:	08007d23 	.word	0x08007d23
 8007b60:	08007d23 	.word	0x08007d23
 8007b64:	08007d23 	.word	0x08007d23
 8007b68:	08007c1f 	.word	0x08007c1f
 8007b6c:	08007d23 	.word	0x08007d23
 8007b70:	08007d23 	.word	0x08007d23
 8007b74:	08007d23 	.word	0x08007d23
 8007b78:	08007c5f 	.word	0x08007c5f
 8007b7c:	08007d23 	.word	0x08007d23
 8007b80:	08007d23 	.word	0x08007d23
 8007b84:	08007d23 	.word	0x08007d23
 8007b88:	08007ca1 	.word	0x08007ca1
 8007b8c:	08007d23 	.word	0x08007d23
 8007b90:	08007d23 	.word	0x08007d23
 8007b94:	08007d23 	.word	0x08007d23
 8007b98:	08007ce1 	.word	0x08007ce1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb46 	bl	8008234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0208 	orr.w	r2, r2, #8
 8007bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0204 	bic.w	r2, r2, #4
 8007bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6999      	ldr	r1, [r3, #24]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	619a      	str	r2, [r3, #24]
      break;
 8007bda:	e0a5      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fbb6 	bl	8008354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6999      	ldr	r1, [r3, #24]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	021a      	lsls	r2, r3, #8
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	619a      	str	r2, [r3, #24]
      break;
 8007c1c:	e084      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fc1f 	bl	8008468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69da      	ldr	r2, [r3, #28]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0208 	orr.w	r2, r2, #8
 8007c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0204 	bic.w	r2, r2, #4
 8007c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69d9      	ldr	r1, [r3, #28]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	61da      	str	r2, [r3, #28]
      break;
 8007c5c:	e064      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fc87 	bl	8008578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69da      	ldr	r2, [r3, #28]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69d9      	ldr	r1, [r3, #28]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	021a      	lsls	r2, r3, #8
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	61da      	str	r2, [r3, #28]
      break;
 8007c9e:	e043      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fcf0 	bl	800868c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0208 	orr.w	r2, r2, #8
 8007cba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0204 	bic.w	r2, r2, #4
 8007cca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	691a      	ldr	r2, [r3, #16]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007cde:	e023      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fd34 	bl	8008754 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cfa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d20:	e002      	b.n	8007d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
      break;
 8007d26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop

08007d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e0de      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x1da>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007d76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a63      	ldr	r2, [pc, #396]	@ (8007f20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	f000 80a9 	beq.w	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007d98:	4a61      	ldr	r2, [pc, #388]	@ (8007f20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	f200 80ae 	bhi.w	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007da0:	4a60      	ldr	r2, [pc, #384]	@ (8007f24 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	f000 80a1 	beq.w	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007da8:	4a5e      	ldr	r2, [pc, #376]	@ (8007f24 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	f200 80a6 	bhi.w	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007db0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f28 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	f000 8099 	beq.w	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007db8:	4a5b      	ldr	r2, [pc, #364]	@ (8007f28 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	f200 809e 	bhi.w	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8007f2c <HAL_TIM_ConfigClockSource+0x1f0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	f000 8091 	beq.w	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007dc8:	4a58      	ldr	r2, [pc, #352]	@ (8007f2c <HAL_TIM_ConfigClockSource+0x1f0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	f200 8096 	bhi.w	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007dd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007dd4:	f000 8089 	beq.w	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007dd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ddc:	f200 808e 	bhi.w	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007de4:	d03e      	beq.n	8007e64 <HAL_TIM_ConfigClockSource+0x128>
 8007de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dea:	f200 8087 	bhi.w	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df2:	f000 8086 	beq.w	8007f02 <HAL_TIM_ConfigClockSource+0x1c6>
 8007df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dfa:	d87f      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007dfc:	2b70      	cmp	r3, #112	@ 0x70
 8007dfe:	d01a      	beq.n	8007e36 <HAL_TIM_ConfigClockSource+0xfa>
 8007e00:	2b70      	cmp	r3, #112	@ 0x70
 8007e02:	d87b      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007e04:	2b60      	cmp	r3, #96	@ 0x60
 8007e06:	d050      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x16e>
 8007e08:	2b60      	cmp	r3, #96	@ 0x60
 8007e0a:	d877      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007e0c:	2b50      	cmp	r3, #80	@ 0x50
 8007e0e:	d03c      	beq.n	8007e8a <HAL_TIM_ConfigClockSource+0x14e>
 8007e10:	2b50      	cmp	r3, #80	@ 0x50
 8007e12:	d873      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007e14:	2b40      	cmp	r3, #64	@ 0x40
 8007e16:	d058      	beq.n	8007eca <HAL_TIM_ConfigClockSource+0x18e>
 8007e18:	2b40      	cmp	r3, #64	@ 0x40
 8007e1a:	d86f      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007e1c:	2b30      	cmp	r3, #48	@ 0x30
 8007e1e:	d064      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007e20:	2b30      	cmp	r3, #48	@ 0x30
 8007e22:	d86b      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d060      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d867      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d05c      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d05a      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x1ae>
 8007e34:	e062      	b.n	8007efc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e46:	f000 fd67 	bl	8008918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	609a      	str	r2, [r3, #8]
      break;
 8007e62:	e04f      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e74:	f000 fd50 	bl	8008918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e86:	609a      	str	r2, [r3, #8]
      break;
 8007e88:	e03c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e96:	461a      	mov	r2, r3
 8007e98:	f000 fcc2 	bl	8008820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2150      	movs	r1, #80	@ 0x50
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fd1b 	bl	80088de <TIM_ITRx_SetConfig>
      break;
 8007ea8:	e02c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f000 fce1 	bl	800887e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2160      	movs	r1, #96	@ 0x60
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fd0b 	bl	80088de <TIM_ITRx_SetConfig>
      break;
 8007ec8:	e01c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f000 fca2 	bl	8008820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2140      	movs	r1, #64	@ 0x40
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fcfb 	bl	80088de <TIM_ITRx_SetConfig>
      break;
 8007ee8:	e00c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f000 fcf2 	bl	80088de <TIM_ITRx_SetConfig>
      break;
 8007efa:	e003      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
      break;
 8007f00:	e000      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	00100070 	.word	0x00100070
 8007f24:	00100040 	.word	0x00100040
 8007f28:	00100030 	.word	0x00100030
 8007f2c:	00100020 	.word	0x00100020

08007f30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d107      	bne.n	8007f80 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f7e:	e02a      	b.n	8007fd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d107      	bne.n	8007f9a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f98:	e01d      	b.n	8007fd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d107      	bne.n	8007fb4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2204      	movs	r2, #4
 8007fa8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fb2:	e010      	b.n	8007fd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d107      	bne.n	8007fce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fcc:	e003      	b.n	8007fd6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f7ff ffb4 	bl	8007f44 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	771a      	strb	r2, [r3, #28]
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d10b      	bne.n	800801a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d136      	bne.n	800807e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008018:	e031      	b.n	800807e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d10b      	bne.n	800803c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2202      	movs	r2, #2
 8008028:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d125      	bne.n	800807e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800803a:	e020      	b.n	800807e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d10b      	bne.n	800805e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2204      	movs	r2, #4
 800804a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d114      	bne.n	800807e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800805c:	e00f      	b.n	800807e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d10a      	bne.n	800807e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2208      	movs	r2, #8
 800806c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7f9 fa54 	bl	800152c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	771a      	strb	r2, [r3, #28]
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d103      	bne.n	80080b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	771a      	strb	r2, [r3, #28]
 80080b0:	e019      	b.n	80080e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d103      	bne.n	80080c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2202      	movs	r2, #2
 80080c0:	771a      	strb	r2, [r3, #28]
 80080c2:	e010      	b.n	80080e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d103      	bne.n	80080d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2204      	movs	r2, #4
 80080d2:	771a      	strb	r2, [r3, #28]
 80080d4:	e007      	b.n	80080e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d102      	bne.n	80080e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2208      	movs	r2, #8
 80080e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff ff22 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	771a      	strb	r2, [r3, #28]
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a42      	ldr	r2, [pc, #264]	@ (8008218 <TIM_Base_SetConfig+0x11c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00f      	beq.n	8008134 <TIM_Base_SetConfig+0x38>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811a:	d00b      	beq.n	8008134 <TIM_Base_SetConfig+0x38>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a3f      	ldr	r2, [pc, #252]	@ (800821c <TIM_Base_SetConfig+0x120>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d007      	beq.n	8008134 <TIM_Base_SetConfig+0x38>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a3e      	ldr	r2, [pc, #248]	@ (8008220 <TIM_Base_SetConfig+0x124>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d003      	beq.n	8008134 <TIM_Base_SetConfig+0x38>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a3d      	ldr	r2, [pc, #244]	@ (8008224 <TIM_Base_SetConfig+0x128>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d108      	bne.n	8008146 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800813a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a33      	ldr	r2, [pc, #204]	@ (8008218 <TIM_Base_SetConfig+0x11c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d01b      	beq.n	8008186 <TIM_Base_SetConfig+0x8a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008154:	d017      	beq.n	8008186 <TIM_Base_SetConfig+0x8a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a30      	ldr	r2, [pc, #192]	@ (800821c <TIM_Base_SetConfig+0x120>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d013      	beq.n	8008186 <TIM_Base_SetConfig+0x8a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a2f      	ldr	r2, [pc, #188]	@ (8008220 <TIM_Base_SetConfig+0x124>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00f      	beq.n	8008186 <TIM_Base_SetConfig+0x8a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a2e      	ldr	r2, [pc, #184]	@ (8008224 <TIM_Base_SetConfig+0x128>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00b      	beq.n	8008186 <TIM_Base_SetConfig+0x8a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a2d      	ldr	r2, [pc, #180]	@ (8008228 <TIM_Base_SetConfig+0x12c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d007      	beq.n	8008186 <TIM_Base_SetConfig+0x8a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a2c      	ldr	r2, [pc, #176]	@ (800822c <TIM_Base_SetConfig+0x130>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d003      	beq.n	8008186 <TIM_Base_SetConfig+0x8a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a2b      	ldr	r2, [pc, #172]	@ (8008230 <TIM_Base_SetConfig+0x134>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d108      	bne.n	8008198 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800818c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4313      	orrs	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a16      	ldr	r2, [pc, #88]	@ (8008218 <TIM_Base_SetConfig+0x11c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00f      	beq.n	80081e4 <TIM_Base_SetConfig+0xe8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a17      	ldr	r2, [pc, #92]	@ (8008224 <TIM_Base_SetConfig+0x128>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <TIM_Base_SetConfig+0xe8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a16      	ldr	r2, [pc, #88]	@ (8008228 <TIM_Base_SetConfig+0x12c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_Base_SetConfig+0xe8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a15      	ldr	r2, [pc, #84]	@ (800822c <TIM_Base_SetConfig+0x130>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_Base_SetConfig+0xe8>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a14      	ldr	r2, [pc, #80]	@ (8008230 <TIM_Base_SetConfig+0x134>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d103      	bne.n	80081ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d105      	bne.n	800820a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f023 0201 	bic.w	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	611a      	str	r2, [r3, #16]
  }
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800
 8008224:	40013400 	.word	0x40013400
 8008228:	40014000 	.word	0x40014000
 800822c:	40014400 	.word	0x40014400
 8008230:	40014800 	.word	0x40014800

08008234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	f023 0201 	bic.w	r2, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0303 	bic.w	r3, r3, #3
 800826e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f023 0302 	bic.w	r3, r3, #2
 8008280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	4313      	orrs	r3, r2
 800828a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a2c      	ldr	r2, [pc, #176]	@ (8008340 <TIM_OC1_SetConfig+0x10c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00f      	beq.n	80082b4 <TIM_OC1_SetConfig+0x80>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a2b      	ldr	r2, [pc, #172]	@ (8008344 <TIM_OC1_SetConfig+0x110>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d00b      	beq.n	80082b4 <TIM_OC1_SetConfig+0x80>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a2a      	ldr	r2, [pc, #168]	@ (8008348 <TIM_OC1_SetConfig+0x114>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d007      	beq.n	80082b4 <TIM_OC1_SetConfig+0x80>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a29      	ldr	r2, [pc, #164]	@ (800834c <TIM_OC1_SetConfig+0x118>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d003      	beq.n	80082b4 <TIM_OC1_SetConfig+0x80>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a28      	ldr	r2, [pc, #160]	@ (8008350 <TIM_OC1_SetConfig+0x11c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d10c      	bne.n	80082ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f023 0308 	bic.w	r3, r3, #8
 80082ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f023 0304 	bic.w	r3, r3, #4
 80082cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008340 <TIM_OC1_SetConfig+0x10c>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00f      	beq.n	80082f6 <TIM_OC1_SetConfig+0xc2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008344 <TIM_OC1_SetConfig+0x110>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <TIM_OC1_SetConfig+0xc2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a19      	ldr	r2, [pc, #100]	@ (8008348 <TIM_OC1_SetConfig+0x114>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_OC1_SetConfig+0xc2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a18      	ldr	r2, [pc, #96]	@ (800834c <TIM_OC1_SetConfig+0x118>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC1_SetConfig+0xc2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a17      	ldr	r2, [pc, #92]	@ (8008350 <TIM_OC1_SetConfig+0x11c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d111      	bne.n	800831a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	621a      	str	r2, [r3, #32]
}
 8008334:	bf00      	nop
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	40012c00 	.word	0x40012c00
 8008344:	40013400 	.word	0x40013400
 8008348:	40014000 	.word	0x40014000
 800834c:	40014400 	.word	0x40014400
 8008350:	40014800 	.word	0x40014800

08008354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	f023 0210 	bic.w	r2, r3, #16
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800838e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f023 0320 	bic.w	r3, r3, #32
 80083a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a28      	ldr	r2, [pc, #160]	@ (8008454 <TIM_OC2_SetConfig+0x100>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC2_SetConfig+0x6c>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a27      	ldr	r2, [pc, #156]	@ (8008458 <TIM_OC2_SetConfig+0x104>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d10d      	bne.n	80083dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a1d      	ldr	r2, [pc, #116]	@ (8008454 <TIM_OC2_SetConfig+0x100>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00f      	beq.n	8008404 <TIM_OC2_SetConfig+0xb0>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008458 <TIM_OC2_SetConfig+0x104>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00b      	beq.n	8008404 <TIM_OC2_SetConfig+0xb0>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a1b      	ldr	r2, [pc, #108]	@ (800845c <TIM_OC2_SetConfig+0x108>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d007      	beq.n	8008404 <TIM_OC2_SetConfig+0xb0>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008460 <TIM_OC2_SetConfig+0x10c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_OC2_SetConfig+0xb0>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a19      	ldr	r2, [pc, #100]	@ (8008464 <TIM_OC2_SetConfig+0x110>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d113      	bne.n	800842c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800840a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	4313      	orrs	r3, r2
 800841e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40012c00 	.word	0x40012c00
 8008458:	40013400 	.word	0x40013400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800

08008468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a27      	ldr	r2, [pc, #156]	@ (8008564 <TIM_OC3_SetConfig+0xfc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_OC3_SetConfig+0x6a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a26      	ldr	r2, [pc, #152]	@ (8008568 <TIM_OC3_SetConfig+0x100>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d10d      	bne.n	80084ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008564 <TIM_OC3_SetConfig+0xfc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00f      	beq.n	8008516 <TIM_OC3_SetConfig+0xae>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008568 <TIM_OC3_SetConfig+0x100>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00b      	beq.n	8008516 <TIM_OC3_SetConfig+0xae>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a1a      	ldr	r2, [pc, #104]	@ (800856c <TIM_OC3_SetConfig+0x104>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d007      	beq.n	8008516 <TIM_OC3_SetConfig+0xae>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a19      	ldr	r2, [pc, #100]	@ (8008570 <TIM_OC3_SetConfig+0x108>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d003      	beq.n	8008516 <TIM_OC3_SetConfig+0xae>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a18      	ldr	r2, [pc, #96]	@ (8008574 <TIM_OC3_SetConfig+0x10c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d113      	bne.n	800853e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800851c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	011b      	lsls	r3, r3, #4
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	621a      	str	r2, [r3, #32]
}
 8008558:	bf00      	nop
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	40012c00 	.word	0x40012c00
 8008568:	40013400 	.word	0x40013400
 800856c:	40014000 	.word	0x40014000
 8008570:	40014400 	.word	0x40014400
 8008574:	40014800 	.word	0x40014800

08008578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	031b      	lsls	r3, r3, #12
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a28      	ldr	r2, [pc, #160]	@ (8008678 <TIM_OC4_SetConfig+0x100>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC4_SetConfig+0x6c>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a27      	ldr	r2, [pc, #156]	@ (800867c <TIM_OC4_SetConfig+0x104>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d10d      	bne.n	8008600 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	031b      	lsls	r3, r3, #12
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a1d      	ldr	r2, [pc, #116]	@ (8008678 <TIM_OC4_SetConfig+0x100>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00f      	beq.n	8008628 <TIM_OC4_SetConfig+0xb0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a1c      	ldr	r2, [pc, #112]	@ (800867c <TIM_OC4_SetConfig+0x104>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00b      	beq.n	8008628 <TIM_OC4_SetConfig+0xb0>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a1b      	ldr	r2, [pc, #108]	@ (8008680 <TIM_OC4_SetConfig+0x108>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d007      	beq.n	8008628 <TIM_OC4_SetConfig+0xb0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a1a      	ldr	r2, [pc, #104]	@ (8008684 <TIM_OC4_SetConfig+0x10c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_OC4_SetConfig+0xb0>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a19      	ldr	r2, [pc, #100]	@ (8008688 <TIM_OC4_SetConfig+0x110>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d113      	bne.n	8008650 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800862e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008636:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	019b      	lsls	r3, r3, #6
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	019b      	lsls	r3, r3, #6
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	4313      	orrs	r3, r2
 800864e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	621a      	str	r2, [r3, #32]
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40012c00 	.word	0x40012c00
 800867c:	40013400 	.word	0x40013400
 8008680:	40014000 	.word	0x40014000
 8008684:	40014400 	.word	0x40014400
 8008688:	40014800 	.word	0x40014800

0800868c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80086d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a17      	ldr	r2, [pc, #92]	@ (8008740 <TIM_OC5_SetConfig+0xb4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00f      	beq.n	8008706 <TIM_OC5_SetConfig+0x7a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a16      	ldr	r2, [pc, #88]	@ (8008744 <TIM_OC5_SetConfig+0xb8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d00b      	beq.n	8008706 <TIM_OC5_SetConfig+0x7a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a15      	ldr	r2, [pc, #84]	@ (8008748 <TIM_OC5_SetConfig+0xbc>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d007      	beq.n	8008706 <TIM_OC5_SetConfig+0x7a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a14      	ldr	r2, [pc, #80]	@ (800874c <TIM_OC5_SetConfig+0xc0>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d003      	beq.n	8008706 <TIM_OC5_SetConfig+0x7a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a13      	ldr	r2, [pc, #76]	@ (8008750 <TIM_OC5_SetConfig+0xc4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d109      	bne.n	800871a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800870c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	621a      	str	r2, [r3, #32]
}
 8008734:	bf00      	nop
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	40012c00 	.word	0x40012c00
 8008744:	40013400 	.word	0x40013400
 8008748:	40014000 	.word	0x40014000
 800874c:	40014400 	.word	0x40014400
 8008750:	40014800 	.word	0x40014800

08008754 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800877a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	021b      	lsls	r3, r3, #8
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800879a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	051b      	lsls	r3, r3, #20
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <TIM_OC6_SetConfig+0xb8>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00f      	beq.n	80087d0 <TIM_OC6_SetConfig+0x7c>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <TIM_OC6_SetConfig+0xbc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00b      	beq.n	80087d0 <TIM_OC6_SetConfig+0x7c>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a16      	ldr	r2, [pc, #88]	@ (8008814 <TIM_OC6_SetConfig+0xc0>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d007      	beq.n	80087d0 <TIM_OC6_SetConfig+0x7c>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a15      	ldr	r2, [pc, #84]	@ (8008818 <TIM_OC6_SetConfig+0xc4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_OC6_SetConfig+0x7c>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a14      	ldr	r2, [pc, #80]	@ (800881c <TIM_OC6_SetConfig+0xc8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d109      	bne.n	80087e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	029b      	lsls	r3, r3, #10
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	621a      	str	r2, [r3, #32]
}
 80087fe:	bf00      	nop
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40012c00 	.word	0x40012c00
 8008810:	40013400 	.word	0x40013400
 8008814:	40014000 	.word	0x40014000
 8008818:	40014400 	.word	0x40014400
 800881c:	40014800 	.word	0x40014800

08008820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	f023 0201 	bic.w	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800884a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f023 030a 	bic.w	r3, r3, #10
 800885c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800887e:	b480      	push	{r7}
 8008880:	b087      	sub	sp, #28
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	f023 0210 	bic.w	r2, r3, #16
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	031b      	lsls	r3, r3, #12
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
}
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80088f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	f043 0307 	orr.w	r3, r3, #7
 8008904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	609a      	str	r2, [r3, #8]
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	021a      	lsls	r2, r3, #8
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	431a      	orrs	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4313      	orrs	r3, r2
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	609a      	str	r2, [r3, #8]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	2201      	movs	r2, #1
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a1a      	ldr	r2, [r3, #32]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	43db      	mvns	r3, r3
 800897a:	401a      	ands	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a1a      	ldr	r2, [r3, #32]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f003 031f 	and.w	r3, r3, #31
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	fa01 f303 	lsl.w	r3, r1, r3
 8008990:	431a      	orrs	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
	...

080089a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e065      	b.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d004      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a2b      	ldr	r2, [pc, #172]	@ (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d108      	bne.n	8008a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80089f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a1b      	ldr	r2, [pc, #108]	@ (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d018      	beq.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a32:	d013      	beq.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a18      	ldr	r2, [pc, #96]	@ (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00e      	beq.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a17      	ldr	r2, [pc, #92]	@ (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d009      	beq.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a12      	ldr	r2, [pc, #72]	@ (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d004      	beq.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a13      	ldr	r2, [pc, #76]	@ (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d10c      	bne.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	40012c00 	.word	0x40012c00
 8008a98:	40013400 	.word	0x40013400
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40014000 	.word	0x40014000

08008aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e042      	b.n	8008b40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7f9 f825 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2224      	movs	r2, #36	@ 0x24
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0201 	bic.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 faf4 	bl	80090e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f825 	bl	8008b48 <UART_SetConfig>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e01b      	b.n	8008b40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0201 	orr.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fb73 	bl	8009224 <UART_CheckIdleState>
 8008b3e:	4603      	mov	r3, r0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b4c:	b08c      	sub	sp, #48	@ 0x30
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	431a      	orrs	r2, r3
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4bab      	ldr	r3, [pc, #684]	@ (8008e24 <UART_SetConfig+0x2dc>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b80:	430b      	orrs	r3, r1
 8008b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4aa0      	ldr	r2, [pc, #640]	@ (8008e28 <UART_SetConfig+0x2e0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d004      	beq.n	8008bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008bbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	f023 010f 	bic.w	r1, r3, #15
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a91      	ldr	r2, [pc, #580]	@ (8008e2c <UART_SetConfig+0x2e4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d125      	bne.n	8008c38 <UART_SetConfig+0xf0>
 8008bec:	4b90      	ldr	r3, [pc, #576]	@ (8008e30 <UART_SetConfig+0x2e8>)
 8008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d81a      	bhi.n	8008c30 <UART_SetConfig+0xe8>
 8008bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <UART_SetConfig+0xb8>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c11 	.word	0x08008c11
 8008c04:	08008c21 	.word	0x08008c21
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	2301      	movs	r3, #1
 8008c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c16:	e0d6      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008c18:	2302      	movs	r3, #2
 8008c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c1e:	e0d2      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008c20:	2304      	movs	r3, #4
 8008c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c26:	e0ce      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2e:	e0ca      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008c30:	2310      	movs	r3, #16
 8008c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c36:	e0c6      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a7d      	ldr	r2, [pc, #500]	@ (8008e34 <UART_SetConfig+0x2ec>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d138      	bne.n	8008cb4 <UART_SetConfig+0x16c>
 8008c42:	4b7b      	ldr	r3, [pc, #492]	@ (8008e30 <UART_SetConfig+0x2e8>)
 8008c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c48:	f003 030c 	and.w	r3, r3, #12
 8008c4c:	2b0c      	cmp	r3, #12
 8008c4e:	d82d      	bhi.n	8008cac <UART_SetConfig+0x164>
 8008c50:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <UART_SetConfig+0x110>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008c8d 	.word	0x08008c8d
 8008c5c:	08008cad 	.word	0x08008cad
 8008c60:	08008cad 	.word	0x08008cad
 8008c64:	08008cad 	.word	0x08008cad
 8008c68:	08008c9d 	.word	0x08008c9d
 8008c6c:	08008cad 	.word	0x08008cad
 8008c70:	08008cad 	.word	0x08008cad
 8008c74:	08008cad 	.word	0x08008cad
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008cad 	.word	0x08008cad
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008ca5 	.word	0x08008ca5
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c92:	e098      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008c94:	2302      	movs	r3, #2
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c9a:	e094      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ca2:	e090      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008caa:	e08c      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008cac:	2310      	movs	r3, #16
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb2:	e088      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8008e38 <UART_SetConfig+0x2f0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d125      	bne.n	8008d0a <UART_SetConfig+0x1c2>
 8008cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8008e30 <UART_SetConfig+0x2e8>)
 8008cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008cc8:	2b30      	cmp	r3, #48	@ 0x30
 8008cca:	d016      	beq.n	8008cfa <UART_SetConfig+0x1b2>
 8008ccc:	2b30      	cmp	r3, #48	@ 0x30
 8008cce:	d818      	bhi.n	8008d02 <UART_SetConfig+0x1ba>
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d00a      	beq.n	8008cea <UART_SetConfig+0x1a2>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d814      	bhi.n	8008d02 <UART_SetConfig+0x1ba>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <UART_SetConfig+0x19a>
 8008cdc:	2b10      	cmp	r3, #16
 8008cde:	d008      	beq.n	8008cf2 <UART_SetConfig+0x1aa>
 8008ce0:	e00f      	b.n	8008d02 <UART_SetConfig+0x1ba>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ce8:	e06d      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008cea:	2302      	movs	r3, #2
 8008cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf0:	e069      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008cf2:	2304      	movs	r3, #4
 8008cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf8:	e065      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d00:	e061      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008d02:	2310      	movs	r3, #16
 8008d04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d08:	e05d      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a4b      	ldr	r2, [pc, #300]	@ (8008e3c <UART_SetConfig+0x2f4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d125      	bne.n	8008d60 <UART_SetConfig+0x218>
 8008d14:	4b46      	ldr	r3, [pc, #280]	@ (8008e30 <UART_SetConfig+0x2e8>)
 8008d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d20:	d016      	beq.n	8008d50 <UART_SetConfig+0x208>
 8008d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d24:	d818      	bhi.n	8008d58 <UART_SetConfig+0x210>
 8008d26:	2b80      	cmp	r3, #128	@ 0x80
 8008d28:	d00a      	beq.n	8008d40 <UART_SetConfig+0x1f8>
 8008d2a:	2b80      	cmp	r3, #128	@ 0x80
 8008d2c:	d814      	bhi.n	8008d58 <UART_SetConfig+0x210>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <UART_SetConfig+0x1f0>
 8008d32:	2b40      	cmp	r3, #64	@ 0x40
 8008d34:	d008      	beq.n	8008d48 <UART_SetConfig+0x200>
 8008d36:	e00f      	b.n	8008d58 <UART_SetConfig+0x210>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d3e:	e042      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008d40:	2302      	movs	r3, #2
 8008d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d46:	e03e      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008d48:	2304      	movs	r3, #4
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d4e:	e03a      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008d50:	2308      	movs	r3, #8
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d56:	e036      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008d58:	2310      	movs	r3, #16
 8008d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d5e:	e032      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a30      	ldr	r2, [pc, #192]	@ (8008e28 <UART_SetConfig+0x2e0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d12a      	bne.n	8008dc0 <UART_SetConfig+0x278>
 8008d6a:	4b31      	ldr	r3, [pc, #196]	@ (8008e30 <UART_SetConfig+0x2e8>)
 8008d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d78:	d01a      	beq.n	8008db0 <UART_SetConfig+0x268>
 8008d7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d7e:	d81b      	bhi.n	8008db8 <UART_SetConfig+0x270>
 8008d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d84:	d00c      	beq.n	8008da0 <UART_SetConfig+0x258>
 8008d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d8a:	d815      	bhi.n	8008db8 <UART_SetConfig+0x270>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <UART_SetConfig+0x250>
 8008d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d94:	d008      	beq.n	8008da8 <UART_SetConfig+0x260>
 8008d96:	e00f      	b.n	8008db8 <UART_SetConfig+0x270>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d9e:	e012      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008da0:	2302      	movs	r3, #2
 8008da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008da6:	e00e      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008da8:	2304      	movs	r3, #4
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dae:	e00a      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008db0:	2308      	movs	r3, #8
 8008db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008db6:	e006      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008db8:	2310      	movs	r3, #16
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dbe:	e002      	b.n	8008dc6 <UART_SetConfig+0x27e>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a17      	ldr	r2, [pc, #92]	@ (8008e28 <UART_SetConfig+0x2e0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	f040 80a8 	bne.w	8008f22 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008dd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008dd6:	2b08      	cmp	r3, #8
 8008dd8:	d834      	bhi.n	8008e44 <UART_SetConfig+0x2fc>
 8008dda:	a201      	add	r2, pc, #4	@ (adr r2, 8008de0 <UART_SetConfig+0x298>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008e05 	.word	0x08008e05
 8008de4:	08008e45 	.word	0x08008e45
 8008de8:	08008e0d 	.word	0x08008e0d
 8008dec:	08008e45 	.word	0x08008e45
 8008df0:	08008e13 	.word	0x08008e13
 8008df4:	08008e45 	.word	0x08008e45
 8008df8:	08008e45 	.word	0x08008e45
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e1b 	.word	0x08008e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e04:	f7fe f85c 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 8008e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e0a:	e021      	b.n	8008e50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e40 <UART_SetConfig+0x2f8>)
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e10:	e01e      	b.n	8008e50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e12:	f7fd ffe7 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8008e16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e18:	e01a      	b.n	8008e50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e20:	e016      	b.n	8008e50 <UART_SetConfig+0x308>
 8008e22:	bf00      	nop
 8008e24:	cfff69f3 	.word	0xcfff69f3
 8008e28:	40008000 	.word	0x40008000
 8008e2c:	40013800 	.word	0x40013800
 8008e30:	40021000 	.word	0x40021000
 8008e34:	40004400 	.word	0x40004400
 8008e38:	40004800 	.word	0x40004800
 8008e3c:	40004c00 	.word	0x40004c00
 8008e40:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 812a 	beq.w	80090ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	4a9e      	ldr	r2, [pc, #632]	@ (80090d8 <UART_SetConfig+0x590>)
 8008e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e62:	461a      	mov	r2, r3
 8008e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e6a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	4613      	mov	r3, r2
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	4413      	add	r3, r2
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d305      	bcc.n	8008e88 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d903      	bls.n	8008e90 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e8e:	e10d      	b.n	80090ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	2200      	movs	r2, #0
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	60fa      	str	r2, [r7, #12]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9c:	4a8e      	ldr	r2, [pc, #568]	@ (80090d8 <UART_SetConfig+0x590>)
 8008e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008eb2:	f7f7 fa05 	bl	80002c0 <__aeabi_uldivmod>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	020b      	lsls	r3, r1, #8
 8008ec8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ecc:	0202      	lsls	r2, r0, #8
 8008ece:	6979      	ldr	r1, [r7, #20]
 8008ed0:	6849      	ldr	r1, [r1, #4]
 8008ed2:	0849      	lsrs	r1, r1, #1
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	4605      	mov	r5, r0
 8008eda:	eb12 0804 	adds.w	r8, r2, r4
 8008ede:	eb43 0905 	adc.w	r9, r3, r5
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	469a      	mov	sl, r3
 8008eea:	4693      	mov	fp, r2
 8008eec:	4652      	mov	r2, sl
 8008eee:	465b      	mov	r3, fp
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 f9e4 	bl	80002c0 <__aeabi_uldivmod>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4613      	mov	r3, r2
 8008efe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f06:	d308      	bcc.n	8008f1a <UART_SetConfig+0x3d2>
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f0e:	d204      	bcs.n	8008f1a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6a3a      	ldr	r2, [r7, #32]
 8008f16:	60da      	str	r2, [r3, #12]
 8008f18:	e0c8      	b.n	80090ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f20:	e0c4      	b.n	80090ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f2a:	d167      	bne.n	8008ffc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d828      	bhi.n	8008f86 <UART_SetConfig+0x43e>
 8008f34:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <UART_SetConfig+0x3f4>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f61 	.word	0x08008f61
 8008f40:	08008f69 	.word	0x08008f69
 8008f44:	08008f71 	.word	0x08008f71
 8008f48:	08008f87 	.word	0x08008f87
 8008f4c:	08008f77 	.word	0x08008f77
 8008f50:	08008f87 	.word	0x08008f87
 8008f54:	08008f87 	.word	0x08008f87
 8008f58:	08008f87 	.word	0x08008f87
 8008f5c:	08008f7f 	.word	0x08008f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f60:	f7fd ffae 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 8008f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f66:	e014      	b.n	8008f92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f68:	f7fd ffc0 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 8008f6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f6e:	e010      	b.n	8008f92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f70:	4b5a      	ldr	r3, [pc, #360]	@ (80090dc <UART_SetConfig+0x594>)
 8008f72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f74:	e00d      	b.n	8008f92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f76:	f7fd ff35 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8008f7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f7c:	e009      	b.n	8008f92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f84:	e005      	b.n	8008f92 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8089 	beq.w	80090ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9e:	4a4e      	ldr	r2, [pc, #312]	@ (80090d8 <UART_SetConfig+0x590>)
 8008fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fac:	005a      	lsls	r2, r3, #1
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	085b      	lsrs	r3, r3, #1
 8008fb4:	441a      	add	r2, r3
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	2b0f      	cmp	r3, #15
 8008fc4:	d916      	bls.n	8008ff4 <UART_SetConfig+0x4ac>
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fcc:	d212      	bcs.n	8008ff4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f023 030f 	bic.w	r3, r3, #15
 8008fd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	085b      	lsrs	r3, r3, #1
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	f003 0307 	and.w	r3, r3, #7
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	8bfb      	ldrh	r3, [r7, #30]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	8bfa      	ldrh	r2, [r7, #30]
 8008ff0:	60da      	str	r2, [r3, #12]
 8008ff2:	e05b      	b.n	80090ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ffa:	e057      	b.n	80090ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009000:	2b08      	cmp	r3, #8
 8009002:	d828      	bhi.n	8009056 <UART_SetConfig+0x50e>
 8009004:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <UART_SetConfig+0x4c4>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	08009031 	.word	0x08009031
 8009010:	08009039 	.word	0x08009039
 8009014:	08009041 	.word	0x08009041
 8009018:	08009057 	.word	0x08009057
 800901c:	08009047 	.word	0x08009047
 8009020:	08009057 	.word	0x08009057
 8009024:	08009057 	.word	0x08009057
 8009028:	08009057 	.word	0x08009057
 800902c:	0800904f 	.word	0x0800904f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009030:	f7fd ff46 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 8009034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009036:	e014      	b.n	8009062 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009038:	f7fd ff58 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 800903c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800903e:	e010      	b.n	8009062 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009040:	4b26      	ldr	r3, [pc, #152]	@ (80090dc <UART_SetConfig+0x594>)
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009044:	e00d      	b.n	8009062 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009046:	f7fd fecd 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 800904a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800904c:	e009      	b.n	8009062 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800904e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009054:	e005      	b.n	8009062 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009060:	bf00      	nop
    }

    if (pclk != 0U)
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	d021      	beq.n	80090ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906c:	4a1a      	ldr	r2, [pc, #104]	@ (80090d8 <UART_SetConfig+0x590>)
 800906e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009072:	461a      	mov	r2, r3
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	fbb3 f2f2 	udiv	r2, r3, r2
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	441a      	add	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	fbb2 f3f3 	udiv	r3, r2, r3
 800908a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2b0f      	cmp	r3, #15
 8009090:	d909      	bls.n	80090a6 <UART_SetConfig+0x55e>
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009098:	d205      	bcs.n	80090a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	b29a      	uxth	r2, r3
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60da      	str	r2, [r3, #12]
 80090a4:	e002      	b.n	80090ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2200      	movs	r2, #0
 80090c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2200      	movs	r2, #0
 80090c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80090c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3730      	adds	r7, #48	@ 0x30
 80090d0:	46bd      	mov	sp, r7
 80090d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090d6:	bf00      	nop
 80090d8:	0800e170 	.word	0x0800e170
 80090dc:	00f42400 	.word	0x00f42400

080090e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ec:	f003 0308 	and.w	r3, r3, #8
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01a      	beq.n	80091f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091de:	d10a      	bne.n	80091f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	605a      	str	r2, [r3, #4]
  }
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b098      	sub	sp, #96	@ 0x60
 8009228:	af02      	add	r7, sp, #8
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009234:	f7f8 fd58 	bl	8001ce8 <HAL_GetTick>
 8009238:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b08      	cmp	r3, #8
 8009246:	d12f      	bne.n	80092a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009250:	2200      	movs	r2, #0
 8009252:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f88e 	bl	8009378 <UART_WaitOnFlagUntilTimeout>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d022      	beq.n	80092a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009276:	653b      	str	r3, [r7, #80]	@ 0x50
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009280:	647b      	str	r3, [r7, #68]	@ 0x44
 8009282:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800928e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e6      	bne.n	8009262 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2220      	movs	r2, #32
 8009298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e063      	b.n	8009370 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0304 	and.w	r3, r3, #4
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d149      	bne.n	800934a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092be:	2200      	movs	r2, #0
 80092c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f857 	bl	8009378 <UART_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d03c      	beq.n	800934a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	623b      	str	r3, [r7, #32]
   return(result);
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80092f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e6      	bne.n	80092d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	60fb      	str	r3, [r7, #12]
   return(result);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009322:	61fa      	str	r2, [r7, #28]
 8009324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	69b9      	ldr	r1, [r7, #24]
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	617b      	str	r3, [r7, #20]
   return(result);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e012      	b.n	8009370 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2220      	movs	r2, #32
 800934e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3758      	adds	r7, #88	@ 0x58
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	4613      	mov	r3, r2
 8009386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009388:	e04f      	b.n	800942a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009390:	d04b      	beq.n	800942a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009392:	f7f8 fca9 	bl	8001ce8 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d302      	bcc.n	80093a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e04e      	b.n	800944a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0304 	and.w	r3, r3, #4
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d037      	beq.n	800942a <UART_WaitOnFlagUntilTimeout+0xb2>
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2b80      	cmp	r3, #128	@ 0x80
 80093be:	d034      	beq.n	800942a <UART_WaitOnFlagUntilTimeout+0xb2>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b40      	cmp	r3, #64	@ 0x40
 80093c4:	d031      	beq.n	800942a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d110      	bne.n	80093f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2208      	movs	r2, #8
 80093da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 f838 	bl	8009452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2208      	movs	r2, #8
 80093e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e029      	b.n	800944a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009404:	d111      	bne.n	800942a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800940e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f81e 	bl	8009452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e00f      	b.n	800944a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69da      	ldr	r2, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4013      	ands	r3, r2
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	429a      	cmp	r2, r3
 8009438:	bf0c      	ite	eq
 800943a:	2301      	moveq	r3, #1
 800943c:	2300      	movne	r3, #0
 800943e:	b2db      	uxtb	r3, r3
 8009440:	461a      	mov	r2, r3
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	429a      	cmp	r2, r3
 8009446:	d0a0      	beq.n	800938a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009452:	b480      	push	{r7}
 8009454:	b095      	sub	sp, #84	@ 0x54
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800946e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009478:	643b      	str	r3, [r7, #64]	@ 0x40
 800947a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800947e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3308      	adds	r3, #8
 8009492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	61fb      	str	r3, [r7, #28]
   return(result);
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094a2:	f023 0301 	bic.w	r3, r3, #1
 80094a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3308      	adds	r3, #8
 80094ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094b8:	e841 2300 	strex	r3, r2, [r1]
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1e3      	bne.n	800948c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d118      	bne.n	80094fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f023 0310 	bic.w	r3, r3, #16
 80094e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ea:	61bb      	str	r3, [r7, #24]
 80094ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6979      	ldr	r1, [r7, #20]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	613b      	str	r3, [r7, #16]
   return(result);
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e6      	bne.n	80094cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009512:	bf00      	nop
 8009514:	3754      	adds	r7, #84	@ 0x54
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_UARTEx_DisableFifoMode+0x16>
 8009530:	2302      	movs	r3, #2
 8009532:	e027      	b.n	8009584 <HAL_UARTEx_DisableFifoMode+0x66>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2224      	movs	r2, #36	@ 0x24
 8009540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0201 	bic.w	r2, r2, #1
 800955a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009562:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2220      	movs	r2, #32
 8009576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095a4:	2302      	movs	r3, #2
 80095a6:	e02d      	b.n	8009604 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2224      	movs	r2, #36	@ 0x24
 80095b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0201 	bic.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	430a      	orrs	r2, r1
 80095e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f84f 	bl	8009688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009620:	2302      	movs	r3, #2
 8009622:	e02d      	b.n	8009680 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2224      	movs	r2, #36	@ 0x24
 8009630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0201 	bic.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	430a      	orrs	r2, r1
 800965e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f811 	bl	8009688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2220      	movs	r2, #32
 8009672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009694:	2b00      	cmp	r3, #0
 8009696:	d108      	bne.n	80096aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096a8:	e031      	b.n	800970e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096aa:	2308      	movs	r3, #8
 80096ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096ae:	2308      	movs	r3, #8
 80096b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	0e5b      	lsrs	r3, r3, #25
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	0f5b      	lsrs	r3, r3, #29
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f003 0307 	and.w	r3, r3, #7
 80096d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	7b3a      	ldrb	r2, [r7, #12]
 80096d6:	4911      	ldr	r1, [pc, #68]	@ (800971c <UARTEx_SetNbDataToProcess+0x94>)
 80096d8:	5c8a      	ldrb	r2, [r1, r2]
 80096da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096de:	7b3a      	ldrb	r2, [r7, #12]
 80096e0:	490f      	ldr	r1, [pc, #60]	@ (8009720 <UARTEx_SetNbDataToProcess+0x98>)
 80096e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	7b7a      	ldrb	r2, [r7, #13]
 80096f4:	4909      	ldr	r1, [pc, #36]	@ (800971c <UARTEx_SetNbDataToProcess+0x94>)
 80096f6:	5c8a      	ldrb	r2, [r1, r2]
 80096f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096fc:	7b7a      	ldrb	r2, [r7, #13]
 80096fe:	4908      	ldr	r1, [pc, #32]	@ (8009720 <UARTEx_SetNbDataToProcess+0x98>)
 8009700:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009702:	fb93 f3f2 	sdiv	r3, r3, r2
 8009706:	b29a      	uxth	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800970e:	bf00      	nop
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	0800e188 	.word	0x0800e188
 8009720:	0800e190 	.word	0x0800e190

08009724 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009734:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009738:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800975a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800975e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	b29b      	uxth	r3, r3
 800976c:	43db      	mvns	r3, r3
 800976e:	b29b      	uxth	r3, r3
 8009770:	4013      	ands	r3, r2
 8009772:	b29a      	uxth	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	1d3b      	adds	r3, r7, #4
 8009792:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b0a7      	sub	sp, #156	@ 0x9c
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80097e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	78db      	ldrb	r3, [r3, #3]
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d81f      	bhi.n	8009836 <USB_ActivateEndpoint+0x72>
 80097f6:	a201      	add	r2, pc, #4	@ (adr r2, 80097fc <USB_ActivateEndpoint+0x38>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	0800980d 	.word	0x0800980d
 8009800:	08009829 	.word	0x08009829
 8009804:	0800983f 	.word	0x0800983f
 8009808:	0800981b 	.word	0x0800981b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800980c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009810:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009814:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009818:	e012      	b.n	8009840 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800981a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800981e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009822:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009826:	e00b      	b.n	8009840 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009828:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800982c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009830:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009834:	e004      	b.n	8009840 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800983c:	e000      	b.n	8009840 <USB_ActivateEndpoint+0x7c>
      break;
 800983e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	441a      	add	r2, r3
 800984a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800984e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800985a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985e:	b29b      	uxth	r3, r3
 8009860:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	b21b      	sxth	r3, r3
 8009872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800987a:	b21a      	sxth	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	b21b      	sxth	r3, r3
 8009882:	4313      	orrs	r3, r2
 8009884:	b21b      	sxth	r3, r3
 8009886:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	441a      	add	r2, r3
 8009894:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800989c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	7b1b      	ldrb	r3, [r3, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f040 8180 	bne.w	8009bb6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	785b      	ldrb	r3, [r3, #1]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 8084 	beq.w	80099c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	61bb      	str	r3, [r7, #24]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	461a      	mov	r2, r3
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	4413      	add	r3, r2
 80098d2:	61bb      	str	r3, [r7, #24]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	00da      	lsls	r2, r3, #3
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	88db      	ldrh	r3, [r3, #6]
 80098e8:	085b      	lsrs	r3, r3, #1
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	827b      	strh	r3, [r7, #18]
 8009902:	8a7b      	ldrh	r3, [r7, #18]
 8009904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01b      	beq.n	8009944 <USB_ActivateEndpoint+0x180>
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29b      	uxth	r3, r3
 800991a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800991e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009922:	823b      	strh	r3, [r7, #16]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	441a      	add	r2, r3
 800992e:	8a3b      	ldrh	r3, [r7, #16]
 8009930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800993c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009940:	b29b      	uxth	r3, r3
 8009942:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	78db      	ldrb	r3, [r3, #3]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d020      	beq.n	800998e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	b29b      	uxth	r3, r3
 800995a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800995e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009962:	81bb      	strh	r3, [r7, #12]
 8009964:	89bb      	ldrh	r3, [r7, #12]
 8009966:	f083 0320 	eor.w	r3, r3, #32
 800996a:	81bb      	strh	r3, [r7, #12]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	441a      	add	r2, r3
 8009976:	89bb      	ldrh	r3, [r7, #12]
 8009978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800997c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009988:	b29b      	uxth	r3, r3
 800998a:	8013      	strh	r3, [r2, #0]
 800998c:	e3f9      	b.n	800a182 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a4:	81fb      	strh	r3, [r7, #14]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	441a      	add	r2, r3
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	8013      	strh	r3, [r2, #0]
 80099c6:	e3dc      	b.n	800a182 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	4413      	add	r3, r2
 80099da:	633b      	str	r3, [r7, #48]	@ 0x30
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	00da      	lsls	r2, r3, #3
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	4413      	add	r3, r2
 80099e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	88db      	ldrh	r3, [r3, #6]
 80099f0:	085b      	lsrs	r3, r3, #1
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	461a      	mov	r2, r3
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	4413      	add	r3, r2
 8009a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	00da      	lsls	r2, r3, #3
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	4413      	add	r3, r2
 8009a1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	801a      	strh	r2, [r3, #0]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <USB_ActivateEndpoint+0x28a>
 8009a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	e041      	b.n	8009ad2 <USB_ActivateEndpoint+0x30e>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a54:	d81c      	bhi.n	8009a90 <USB_ActivateEndpoint+0x2cc>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	085b      	lsrs	r3, r3, #1
 8009a5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <USB_ActivateEndpoint+0x2b2>
 8009a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a70:	3301      	adds	r3, #1
 8009a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	029b      	lsls	r3, r3, #10
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	4313      	orrs	r3, r2
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	e020      	b.n	8009ad2 <USB_ActivateEndpoint+0x30e>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	f003 031f 	and.w	r3, r3, #31
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d104      	bne.n	8009ab0 <USB_ActivateEndpoint+0x2ec>
 8009aa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	029b      	lsls	r3, r3, #10
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009ae0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01b      	beq.n	8009b22 <USB_ActivateEndpoint+0x35e>
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b00:	843b      	strh	r3, [r7, #32]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	441a      	add	r2, r3
 8009b0c:	8c3b      	ldrh	r3, [r7, #32]
 8009b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d124      	bne.n	8009b74 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b40:	83bb      	strh	r3, [r7, #28]
 8009b42:	8bbb      	ldrh	r3, [r7, #28]
 8009b44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b48:	83bb      	strh	r3, [r7, #28]
 8009b4a:	8bbb      	ldrh	r3, [r7, #28]
 8009b4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b50:	83bb      	strh	r3, [r7, #28]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	441a      	add	r2, r3
 8009b5c:	8bbb      	ldrh	r3, [r7, #28]
 8009b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	8013      	strh	r3, [r2, #0]
 8009b72:	e306      	b.n	800a182 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b8a:	83fb      	strh	r3, [r7, #30]
 8009b8c:	8bfb      	ldrh	r3, [r7, #30]
 8009b8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b92:	83fb      	strh	r3, [r7, #30]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	441a      	add	r2, r3
 8009b9e:	8bfb      	ldrh	r3, [r7, #30]
 8009ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	8013      	strh	r3, [r2, #0]
 8009bb4:	e2e5      	b.n	800a182 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	78db      	ldrb	r3, [r3, #3]
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d11e      	bne.n	8009bfc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	441a      	add	r2, r3
 8009be2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	8013      	strh	r3, [r2, #0]
 8009bfa:	e01d      	b.n	8009c38 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c12:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	441a      	add	r2, r3
 8009c20:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	461a      	mov	r2, r3
 8009c46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c48:	4413      	add	r3, r2
 8009c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	00da      	lsls	r2, r3, #3
 8009c52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	891b      	ldrh	r3, [r3, #8]
 8009c60:	085b      	lsrs	r3, r3, #1
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c6a:	801a      	strh	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	461a      	mov	r2, r3
 8009c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c7c:	4413      	add	r3, r2
 8009c7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	00da      	lsls	r2, r3, #3
 8009c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c88:	4413      	add	r3, r2
 8009c8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	895b      	ldrh	r3, [r3, #10]
 8009c94:	085b      	lsrs	r3, r3, #1
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	785b      	ldrb	r3, [r3, #1]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f040 81af 	bne.w	800a008 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8009cba:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01d      	beq.n	8009d02 <USB_ActivateEndpoint+0x53e>
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cdc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	441a      	add	r2, r3
 8009cea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009d12:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d01d      	beq.n	8009d5a <USB_ActivateEndpoint+0x596>
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d34:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	441a      	add	r2, r3
 8009d42:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	785b      	ldrb	r3, [r3, #1]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d16b      	bne.n	8009e3a <USB_ActivateEndpoint+0x676>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d72:	4413      	add	r3, r2
 8009d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	00da      	lsls	r2, r3, #3
 8009d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d7e:	4413      	add	r3, r2
 8009d80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d94:	801a      	strh	r2, [r3, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10a      	bne.n	8009db4 <USB_ActivateEndpoint+0x5f0>
 8009d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db0:	801a      	strh	r2, [r3, #0]
 8009db2:	e05d      	b.n	8009e70 <USB_ActivateEndpoint+0x6ac>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dba:	d81c      	bhi.n	8009df6 <USB_ActivateEndpoint+0x632>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	085b      	lsrs	r3, r3, #1
 8009dc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <USB_ActivateEndpoint+0x618>
 8009dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	029b      	lsls	r3, r3, #10
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009df2:	801a      	strh	r2, [r3, #0]
 8009df4:	e03c      	b.n	8009e70 <USB_ActivateEndpoint+0x6ac>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	095b      	lsrs	r3, r3, #5
 8009dfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d104      	bne.n	8009e16 <USB_ActivateEndpoint+0x652>
 8009e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e10:	3b01      	subs	r3, #1
 8009e12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	029b      	lsls	r3, r3, #10
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e01a      	b.n	8009e70 <USB_ActivateEndpoint+0x6ac>
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d116      	bne.n	8009e70 <USB_ActivateEndpoint+0x6ac>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e52:	4413      	add	r3, r2
 8009e54:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	00da      	lsls	r2, r3, #3
 8009e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e5e:	4413      	add	r3, r2
 8009e60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e6e:	801a      	strh	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d16b      	bne.n	8009f54 <USB_ActivateEndpoint+0x790>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	461a      	mov	r2, r3
 8009e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e8c:	4413      	add	r3, r2
 8009e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	00da      	lsls	r2, r3, #3
 8009e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e98:	4413      	add	r3, r2
 8009e9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eae:	801a      	strh	r2, [r3, #0]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <USB_ActivateEndpoint+0x70a>
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	801a      	strh	r2, [r3, #0]
 8009ecc:	e05b      	b.n	8009f86 <USB_ActivateEndpoint+0x7c2>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ed4:	d81c      	bhi.n	8009f10 <USB_ActivateEndpoint+0x74c>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	085b      	lsrs	r3, r3, #1
 8009edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <USB_ActivateEndpoint+0x732>
 8009eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	029b      	lsls	r3, r3, #10
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	801a      	strh	r2, [r3, #0]
 8009f0e:	e03a      	b.n	8009f86 <USB_ActivateEndpoint+0x7c2>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	095b      	lsrs	r3, r3, #5
 8009f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	f003 031f 	and.w	r3, r3, #31
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d104      	bne.n	8009f30 <USB_ActivateEndpoint+0x76c>
 8009f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	029b      	lsls	r3, r3, #10
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	4313      	orrs	r3, r2
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f50:	801a      	strh	r2, [r3, #0]
 8009f52:	e018      	b.n	8009f86 <USB_ActivateEndpoint+0x7c2>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	785b      	ldrb	r3, [r3, #1]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d114      	bne.n	8009f86 <USB_ActivateEndpoint+0x7c2>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	461a      	mov	r2, r3
 8009f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f68:	4413      	add	r3, r2
 8009f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	00da      	lsls	r2, r3, #3
 8009f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f74:	4413      	add	r3, r2
 8009f76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f84:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009f9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009fa0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009fa4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009fa6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009fa8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009fac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	441a      	add	r2, r3
 8009fb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fe4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	441a      	add	r2, r3
 8009ff0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a002:	b29b      	uxth	r3, r3
 800a004:	8013      	strh	r3, [r2, #0]
 800a006:	e0bc      	b.n	800a182 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800a018:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a01c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d01d      	beq.n	800a060 <USB_ActivateEndpoint+0x89c>
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	b29b      	uxth	r3, r3
 800a032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a03a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	441a      	add	r2, r3
 800a048:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a04c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a054:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a070:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01d      	beq.n	800a0b8 <USB_ActivateEndpoint+0x8f4>
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a08e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a092:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	441a      	add	r2, r3
 800a0a0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	78db      	ldrb	r3, [r3, #3]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d024      	beq.n	800a10a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0d6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a0da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a0de:	f083 0320 	eor.w	r3, r3, #32
 800a0e2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	441a      	add	r2, r3
 800a0f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a0f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a104:	b29b      	uxth	r3, r3
 800a106:	8013      	strh	r3, [r2, #0]
 800a108:	e01d      	b.n	800a146 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	b29b      	uxth	r3, r3
 800a118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a11c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a120:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	441a      	add	r2, r3
 800a12e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a13a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a142:	b29b      	uxth	r3, r3
 800a144:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	b29b      	uxth	r3, r3
 800a154:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a15c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	441a      	add	r2, r3
 800a16a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a16e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a17e:	b29b      	uxth	r3, r3
 800a180:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a182:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800a186:	4618      	mov	r0, r3
 800a188:	379c      	adds	r7, #156	@ 0x9c
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop

0800a194 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a194:	b480      	push	{r7}
 800a196:	b08d      	sub	sp, #52	@ 0x34
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	7b1b      	ldrb	r3, [r3, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f040 808e 	bne.w	800a2c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d044      	beq.n	800a23a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	81bb      	strh	r3, [r7, #12]
 800a1be:	89bb      	ldrh	r3, [r7, #12]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01b      	beq.n	800a200 <USB_DeactivateEndpoint+0x6c>
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1de:	817b      	strh	r3, [r7, #10]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	441a      	add	r2, r3
 800a1ea:	897b      	ldrh	r3, [r7, #10]
 800a1ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a216:	813b      	strh	r3, [r7, #8]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	441a      	add	r2, r3
 800a222:	893b      	ldrh	r3, [r7, #8]
 800a224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a22c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a234:	b29b      	uxth	r3, r3
 800a236:	8013      	strh	r3, [r2, #0]
 800a238:	e192      	b.n	800a560 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	827b      	strh	r3, [r7, #18]
 800a248:	8a7b      	ldrh	r3, [r7, #18]
 800a24a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d01b      	beq.n	800a28a <USB_DeactivateEndpoint+0xf6>
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a268:	823b      	strh	r3, [r7, #16]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	441a      	add	r2, r3
 800a274:	8a3b      	ldrh	r3, [r7, #16]
 800a276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a27a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a27e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a286:	b29b      	uxth	r3, r3
 800a288:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a29c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a0:	81fb      	strh	r3, [r7, #14]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	441a      	add	r2, r3
 800a2ac:	89fb      	ldrh	r3, [r7, #14]
 800a2ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	8013      	strh	r3, [r2, #0]
 800a2c2:	e14d      	b.n	800a560 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	785b      	ldrb	r3, [r3, #1]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f040 80a5 	bne.w	800a418 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	843b      	strh	r3, [r7, #32]
 800a2dc:	8c3b      	ldrh	r3, [r7, #32]
 800a2de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d01b      	beq.n	800a31e <USB_DeactivateEndpoint+0x18a>
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2fc:	83fb      	strh	r3, [r7, #30]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	441a      	add	r2, r3
 800a308:	8bfb      	ldrh	r3, [r7, #30]
 800a30a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a30e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a312:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	83bb      	strh	r3, [r7, #28]
 800a32c:	8bbb      	ldrh	r3, [r7, #28]
 800a32e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	d01b      	beq.n	800a36e <USB_DeactivateEndpoint+0x1da>
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	b29b      	uxth	r3, r3
 800a344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a34c:	837b      	strh	r3, [r7, #26]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	441a      	add	r2, r3
 800a358:	8b7b      	ldrh	r3, [r7, #26]
 800a35a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a35e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a366:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a384:	833b      	strh	r3, [r7, #24]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	441a      	add	r2, r3
 800a390:	8b3b      	ldrh	r3, [r7, #24]
 800a392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a39a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a39e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3bc:	82fb      	strh	r3, [r7, #22]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	441a      	add	r2, r3
 800a3c8:	8afb      	ldrh	r3, [r7, #22]
 800a3ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3f4:	82bb      	strh	r3, [r7, #20]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	441a      	add	r2, r3
 800a400:	8abb      	ldrh	r3, [r7, #20]
 800a402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a40a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a40e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a412:	b29b      	uxth	r3, r3
 800a414:	8013      	strh	r3, [r2, #0]
 800a416:	e0a3      	b.n	800a560 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4413      	add	r3, r2
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a426:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d01b      	beq.n	800a468 <USB_DeactivateEndpoint+0x2d4>
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a446:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	441a      	add	r2, r3
 800a452:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a45c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a464:	b29b      	uxth	r3, r3
 800a466:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a476:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01b      	beq.n	800a4b8 <USB_DeactivateEndpoint+0x324>
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a496:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	441a      	add	r2, r3
 800a4a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a4a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	441a      	add	r2, r3
 800a4da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a4dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a506:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	441a      	add	r2, r3
 800a512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a51c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a524:	b29b      	uxth	r3, r3
 800a526:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	b29b      	uxth	r3, r3
 800a536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a53a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a53e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	441a      	add	r2, r3
 800a54a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a54c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3734      	adds	r7, #52	@ 0x34
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b0ac      	sub	sp, #176	@ 0xb0
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	f040 84ca 	bne.w	800af16 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d904      	bls.n	800a598 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a596:	e003      	b.n	800a5a0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	7b1b      	ldrb	r3, [r3, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d122      	bne.n	800a5ee <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	6959      	ldr	r1, [r3, #20]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	88da      	ldrh	r2, [r3, #6]
 800a5b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 febd 	bl	800b336 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	00da      	lsls	r2, r3, #3
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	801a      	strh	r2, [r3, #0]
 800a5ea:	f000 bc6f 	b.w	800aecc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	78db      	ldrb	r3, [r3, #3]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	f040 831e 	bne.w	800ac34 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	6a1a      	ldr	r2, [r3, #32]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	429a      	cmp	r2, r3
 800a602:	f240 82cf 	bls.w	800aba4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4413      	add	r3, r2
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	b29b      	uxth	r3, r3
 800a614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a61c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	441a      	add	r2, r3
 800a62a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a62e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a636:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a63e:	b29b      	uxth	r3, r3
 800a640:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	6a1a      	ldr	r2, [r3, #32]
 800a646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a64a:	1ad2      	subs	r2, r2, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 814f 	beq.w	800a906 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	785b      	ldrb	r3, [r3, #1]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d16b      	bne.n	800a74c <USB_EPStartXfer+0x1de>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a67e:	b29b      	uxth	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a684:	4413      	add	r3, r2
 800a686:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	00da      	lsls	r2, r3, #3
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	4413      	add	r3, r2
 800a692:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a696:	627b      	str	r3, [r7, #36]	@ 0x24
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a6:	801a      	strh	r2, [r3, #0]
 800a6a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <USB_EPStartXfer+0x158>
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	801a      	strh	r2, [r3, #0]
 800a6c4:	e05b      	b.n	800a77e <USB_EPStartXfer+0x210>
 800a6c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6cc:	d81c      	bhi.n	800a708 <USB_EPStartXfer+0x19a>
 800a6ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6d2:	085b      	lsrs	r3, r3, #1
 800a6d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d004      	beq.n	800a6ee <USB_EPStartXfer+0x180>
 800a6e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	029b      	lsls	r3, r3, #10
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	4313      	orrs	r3, r2
 800a700:	b29a      	uxth	r2, r3
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	e03a      	b.n	800a77e <USB_EPStartXfer+0x210>
 800a708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a70c:	095b      	lsrs	r3, r3, #5
 800a70e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a716:	f003 031f 	and.w	r3, r3, #31
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d104      	bne.n	800a728 <USB_EPStartXfer+0x1ba>
 800a71e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a722:	3b01      	subs	r3, #1
 800a724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a732:	b29b      	uxth	r3, r3
 800a734:	029b      	lsls	r3, r3, #10
 800a736:	b29b      	uxth	r3, r3
 800a738:	4313      	orrs	r3, r2
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a744:	b29a      	uxth	r2, r3
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	801a      	strh	r2, [r3, #0]
 800a74a:	e018      	b.n	800a77e <USB_EPStartXfer+0x210>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	785b      	ldrb	r3, [r3, #1]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d114      	bne.n	800a77e <USB_EPStartXfer+0x210>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	461a      	mov	r2, r3
 800a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a760:	4413      	add	r3, r2
 800a762:	633b      	str	r3, [r7, #48]	@ 0x30
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	00da      	lsls	r2, r3, #3
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	4413      	add	r3, r2
 800a76e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a778:	b29a      	uxth	r2, r3
 800a77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a77c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	895b      	ldrh	r3, [r3, #10]
 800a782:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	6959      	ldr	r1, [r3, #20]
 800a78a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a78e:	b29b      	uxth	r3, r3
 800a790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fdce 	bl	800b336 <USB_WritePMA>
            ep->xfer_buff += len;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	695a      	ldr	r2, [r3, #20]
 800a79e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7a2:	441a      	add	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	6a1a      	ldr	r2, [r3, #32]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d907      	bls.n	800a7c4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	6a1a      	ldr	r2, [r3, #32]
 800a7b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7bc:	1ad2      	subs	r2, r2, r3
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	621a      	str	r2, [r3, #32]
 800a7c2:	e006      	b.n	800a7d2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d16b      	bne.n	800a8b2 <USB_EPStartXfer+0x344>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	61bb      	str	r3, [r7, #24]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	61bb      	str	r3, [r7, #24]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	00da      	lsls	r2, r3, #3
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a808:	b29a      	uxth	r2, r3
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	801a      	strh	r2, [r3, #0]
 800a80e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <USB_EPStartXfer+0x2be>
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a824:	b29a      	uxth	r2, r3
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	e05d      	b.n	800a8e8 <USB_EPStartXfer+0x37a>
 800a82c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a830:	2b3e      	cmp	r3, #62	@ 0x3e
 800a832:	d81c      	bhi.n	800a86e <USB_EPStartXfer+0x300>
 800a834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a838:	085b      	lsrs	r3, r3, #1
 800a83a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a83e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d004      	beq.n	800a854 <USB_EPStartXfer+0x2e6>
 800a84a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a84e:	3301      	adds	r3, #1
 800a850:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	b29a      	uxth	r2, r3
 800a85a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a85e:	b29b      	uxth	r3, r3
 800a860:	029b      	lsls	r3, r3, #10
 800a862:	b29b      	uxth	r3, r3
 800a864:	4313      	orrs	r3, r2
 800a866:	b29a      	uxth	r2, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	e03c      	b.n	800a8e8 <USB_EPStartXfer+0x37a>
 800a86e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a872:	095b      	lsrs	r3, r3, #5
 800a874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a87c:	f003 031f 	and.w	r3, r3, #31
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <USB_EPStartXfer+0x320>
 800a884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a888:	3b01      	subs	r3, #1
 800a88a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	b29a      	uxth	r2, r3
 800a894:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a898:	b29b      	uxth	r3, r3
 800a89a:	029b      	lsls	r3, r3, #10
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	e01a      	b.n	800a8e8 <USB_EPStartXfer+0x37a>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d116      	bne.n	800a8e8 <USB_EPStartXfer+0x37a>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	623b      	str	r3, [r7, #32]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	623b      	str	r3, [r7, #32]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	00da      	lsls	r2, r3, #3
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	891b      	ldrh	r3, [r3, #8]
 800a8ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	6959      	ldr	r1, [r3, #20]
 800a8f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fd19 	bl	800b336 <USB_WritePMA>
 800a904:	e2e2      	b.n	800aecc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d16b      	bne.n	800a9e6 <USB_EPStartXfer+0x478>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a918:	b29b      	uxth	r3, r3
 800a91a:	461a      	mov	r2, r3
 800a91c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a91e:	4413      	add	r3, r2
 800a920:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	00da      	lsls	r2, r3, #3
 800a928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a92a:	4413      	add	r3, r2
 800a92c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a930:	647b      	str	r3, [r7, #68]	@ 0x44
 800a932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	b29b      	uxth	r3, r3
 800a938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a940:	801a      	strh	r2, [r3, #0]
 800a942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10a      	bne.n	800a960 <USB_EPStartXfer+0x3f2>
 800a94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a94c:	881b      	ldrh	r3, [r3, #0]
 800a94e:	b29b      	uxth	r3, r3
 800a950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a958:	b29a      	uxth	r2, r3
 800a95a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a95c:	801a      	strh	r2, [r3, #0]
 800a95e:	e05d      	b.n	800aa1c <USB_EPStartXfer+0x4ae>
 800a960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a964:	2b3e      	cmp	r3, #62	@ 0x3e
 800a966:	d81c      	bhi.n	800a9a2 <USB_EPStartXfer+0x434>
 800a968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a96c:	085b      	lsrs	r3, r3, #1
 800a96e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d004      	beq.n	800a988 <USB_EPStartXfer+0x41a>
 800a97e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a982:	3301      	adds	r3, #1
 800a984:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a992:	b29b      	uxth	r3, r3
 800a994:	029b      	lsls	r3, r3, #10
 800a996:	b29b      	uxth	r3, r3
 800a998:	4313      	orrs	r3, r2
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a99e:	801a      	strh	r2, [r3, #0]
 800a9a0:	e03c      	b.n	800aa1c <USB_EPStartXfer+0x4ae>
 800a9a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9a6:	095b      	lsrs	r3, r3, #5
 800a9a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9b0:	f003 031f 	and.w	r3, r3, #31
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d104      	bne.n	800a9c2 <USB_EPStartXfer+0x454>
 800a9b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	029b      	lsls	r3, r3, #10
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9e2:	801a      	strh	r2, [r3, #0]
 800a9e4:	e01a      	b.n	800aa1c <USB_EPStartXfer+0x4ae>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d116      	bne.n	800aa1c <USB_EPStartXfer+0x4ae>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9fe:	4413      	add	r3, r2
 800aa00:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	00da      	lsls	r2, r3, #3
 800aa08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	891b      	ldrh	r3, [r3, #8]
 800aa20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	6959      	ldr	r1, [r3, #20]
 800aa28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fc7f 	bl	800b336 <USB_WritePMA>
            ep->xfer_buff += len;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	695a      	ldr	r2, [r3, #20]
 800aa3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa40:	441a      	add	r2, r3
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	6a1a      	ldr	r2, [r3, #32]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d907      	bls.n	800aa62 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6a1a      	ldr	r2, [r3, #32]
 800aa56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa5a:	1ad2      	subs	r2, r2, r3
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	621a      	str	r2, [r3, #32]
 800aa60:	e006      	b.n	800aa70 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d16b      	bne.n	800ab54 <USB_EPStartXfer+0x5e6>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	461a      	mov	r2, r3
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8c:	4413      	add	r3, r2
 800aa8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	00da      	lsls	r2, r3, #3
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	4413      	add	r3, r2
 800aa9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaae:	801a      	strh	r2, [r3, #0]
 800aab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <USB_EPStartXfer+0x560>
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	881b      	ldrh	r3, [r3, #0]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	801a      	strh	r2, [r3, #0]
 800aacc:	e05b      	b.n	800ab86 <USB_EPStartXfer+0x618>
 800aace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aad2:	2b3e      	cmp	r3, #62	@ 0x3e
 800aad4:	d81c      	bhi.n	800ab10 <USB_EPStartXfer+0x5a2>
 800aad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aada:	085b      	lsrs	r3, r3, #1
 800aadc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d004      	beq.n	800aaf6 <USB_EPStartXfer+0x588>
 800aaec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aaf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	029b      	lsls	r3, r3, #10
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	4313      	orrs	r3, r2
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0c:	801a      	strh	r2, [r3, #0]
 800ab0e:	e03a      	b.n	800ab86 <USB_EPStartXfer+0x618>
 800ab10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab1e:	f003 031f 	and.w	r3, r3, #31
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <USB_EPStartXfer+0x5c2>
 800ab26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	029b      	lsls	r3, r3, #10
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	4313      	orrs	r3, r2
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab50:	801a      	strh	r2, [r3, #0]
 800ab52:	e018      	b.n	800ab86 <USB_EPStartXfer+0x618>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	785b      	ldrb	r3, [r3, #1]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d114      	bne.n	800ab86 <USB_EPStartXfer+0x618>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	461a      	mov	r2, r3
 800ab66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab68:	4413      	add	r3, r2
 800ab6a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	00da      	lsls	r2, r3, #3
 800ab72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab74:	4413      	add	r3, r2
 800ab76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	895b      	ldrh	r3, [r3, #10]
 800ab8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	6959      	ldr	r1, [r3, #20]
 800ab92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fbca 	bl	800b336 <USB_WritePMA>
 800aba2:	e193      	b.n	800aecc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	6a1b      	ldr	r3, [r3, #32]
 800aba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	881b      	ldrh	r3, [r3, #0]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800abbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abc2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	441a      	add	r2, r3
 800abd0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800abd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abf8:	4413      	add	r3, r2
 800abfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	00da      	lsls	r2, r3, #3
 800ac02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac04:	4413      	add	r3, r2
 800ac06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	891b      	ldrh	r3, [r3, #8]
 800ac1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	6959      	ldr	r1, [r3, #20]
 800ac22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fb82 	bl	800b336 <USB_WritePMA>
 800ac32:	e14b      	b.n	800aecc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	6a1a      	ldr	r2, [r3, #32]
 800ac38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 809a 	beq.w	800ad8e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	785b      	ldrb	r3, [r3, #1]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d16b      	bne.n	800ad3e <USB_EPStartXfer+0x7d0>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	461a      	mov	r2, r3
 800ac74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac76:	4413      	add	r3, r2
 800ac78:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	00da      	lsls	r2, r3, #3
 800ac80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac82:	4413      	add	r3, r2
 800ac84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac88:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <USB_EPStartXfer+0x74a>
 800aca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acb4:	801a      	strh	r2, [r3, #0]
 800acb6:	e05b      	b.n	800ad70 <USB_EPStartXfer+0x802>
 800acb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acbc:	2b3e      	cmp	r3, #62	@ 0x3e
 800acbe:	d81c      	bhi.n	800acfa <USB_EPStartXfer+0x78c>
 800acc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acc4:	085b      	lsrs	r3, r3, #1
 800acc6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800acca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d004      	beq.n	800ace0 <USB_EPStartXfer+0x772>
 800acd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acda:	3301      	adds	r3, #1
 800acdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ace0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acea:	b29b      	uxth	r3, r3
 800acec:	029b      	lsls	r3, r3, #10
 800acee:	b29b      	uxth	r3, r3
 800acf0:	4313      	orrs	r3, r2
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acf6:	801a      	strh	r2, [r3, #0]
 800acf8:	e03a      	b.n	800ad70 <USB_EPStartXfer+0x802>
 800acfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acfe:	095b      	lsrs	r3, r3, #5
 800ad00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad08:	f003 031f 	and.w	r3, r3, #31
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d104      	bne.n	800ad1a <USB_EPStartXfer+0x7ac>
 800ad10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad14:	3b01      	subs	r3, #1
 800ad16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	029b      	lsls	r3, r3, #10
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad3a:	801a      	strh	r2, [r3, #0]
 800ad3c:	e018      	b.n	800ad70 <USB_EPStartXfer+0x802>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d114      	bne.n	800ad70 <USB_EPStartXfer+0x802>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad52:	4413      	add	r3, r2
 800ad54:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	00da      	lsls	r2, r3, #3
 800ad5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad5e:	4413      	add	r3, r2
 800ad60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	895b      	ldrh	r3, [r3, #10]
 800ad74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	6959      	ldr	r1, [r3, #20]
 800ad7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fad5 	bl	800b336 <USB_WritePMA>
 800ad8c:	e09e      	b.n	800aecc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d16b      	bne.n	800ae6e <USB_EPStartXfer+0x900>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	461a      	mov	r2, r3
 800ada4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ada6:	4413      	add	r3, r2
 800ada8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	00da      	lsls	r2, r3, #3
 800adb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800adb2:	4413      	add	r3, r2
 800adb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800adb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800adba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adc8:	801a      	strh	r2, [r3, #0]
 800adca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <USB_EPStartXfer+0x87a>
 800add2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800addc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ade4:	801a      	strh	r2, [r3, #0]
 800ade6:	e063      	b.n	800aeb0 <USB_EPStartXfer+0x942>
 800ade8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adec:	2b3e      	cmp	r3, #62	@ 0x3e
 800adee:	d81c      	bhi.n	800ae2a <USB_EPStartXfer+0x8bc>
 800adf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adf4:	085b      	lsrs	r3, r3, #1
 800adf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800adfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d004      	beq.n	800ae10 <USB_EPStartXfer+0x8a2>
 800ae06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	029b      	lsls	r3, r3, #10
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	4313      	orrs	r3, r2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae26:	801a      	strh	r2, [r3, #0]
 800ae28:	e042      	b.n	800aeb0 <USB_EPStartXfer+0x942>
 800ae2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae2e:	095b      	lsrs	r3, r3, #5
 800ae30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae38:	f003 031f 	and.w	r3, r3, #31
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d104      	bne.n	800ae4a <USB_EPStartXfer+0x8dc>
 800ae40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae44:	3b01      	subs	r3, #1
 800ae46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	029b      	lsls	r3, r3, #10
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	e020      	b.n	800aeb0 <USB_EPStartXfer+0x942>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d11c      	bne.n	800aeb0 <USB_EPStartXfer+0x942>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	461a      	mov	r2, r3
 800ae86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	00da      	lsls	r2, r3, #3
 800ae96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aeae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	891b      	ldrh	r3, [r3, #8]
 800aeb4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	6959      	ldr	r1, [r3, #20]
 800aebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fa35 	bl	800b336 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aee2:	817b      	strh	r3, [r7, #10]
 800aee4:	897b      	ldrh	r3, [r7, #10]
 800aee6:	f083 0310 	eor.w	r3, r3, #16
 800aeea:	817b      	strh	r3, [r7, #10]
 800aeec:	897b      	ldrh	r3, [r7, #10]
 800aeee:	f083 0320 	eor.w	r3, r3, #32
 800aef2:	817b      	strh	r3, [r7, #10]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	441a      	add	r2, r3
 800aefe:	897b      	ldrh	r3, [r7, #10]
 800af00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af10:	b29b      	uxth	r3, r3
 800af12:	8013      	strh	r3, [r2, #0]
 800af14:	e0d5      	b.n	800b0c2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	7b1b      	ldrb	r3, [r3, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d156      	bne.n	800afcc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d122      	bne.n	800af6c <USB_EPStartXfer+0x9fe>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d11e      	bne.n	800af6c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af44:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	441a      	add	r2, r3
 800af52:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af5e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800af62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af66:	b29b      	uxth	r3, r3
 800af68:	8013      	strh	r3, [r2, #0]
 800af6a:	e01d      	b.n	800afa8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800af7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af82:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	441a      	add	r2, r3
 800af90:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800af94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	699a      	ldr	r2, [r3, #24]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d907      	bls.n	800afc4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	699a      	ldr	r2, [r3, #24]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	1ad2      	subs	r2, r2, r3
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	619a      	str	r2, [r3, #24]
 800afc2:	e054      	b.n	800b06e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2200      	movs	r2, #0
 800afc8:	619a      	str	r2, [r3, #24]
 800afca:	e050      	b.n	800b06e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	78db      	ldrb	r3, [r3, #3]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d142      	bne.n	800b05a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d048      	beq.n	800b06e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800afec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d005      	beq.n	800b004 <USB_EPStartXfer+0xa96>
 800aff8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800affc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10b      	bne.n	800b01c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b004:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d12e      	bne.n	800b06e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b010:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d128      	bne.n	800b06e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b02e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b032:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	441a      	add	r2, r3
 800b040:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800b044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b04c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b050:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b054:	b29b      	uxth	r3, r3
 800b056:	8013      	strh	r3, [r2, #0]
 800b058:	e009      	b.n	800b06e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	78db      	ldrb	r3, [r3, #3]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d103      	bne.n	800b06a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2200      	movs	r2, #0
 800b066:	619a      	str	r2, [r3, #24]
 800b068:	e001      	b.n	800b06e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e02a      	b.n	800b0c4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b084:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b088:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b08c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b090:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b094:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b098:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b09c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	441a      	add	r2, r3
 800b0aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b0ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	37b0      	adds	r7, #176	@ 0xb0
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d020      	beq.n	800b120 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0f4:	81bb      	strh	r3, [r7, #12]
 800b0f6:	89bb      	ldrh	r3, [r7, #12]
 800b0f8:	f083 0310 	eor.w	r3, r3, #16
 800b0fc:	81bb      	strh	r3, [r7, #12]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	441a      	add	r2, r3
 800b108:	89bb      	ldrh	r3, [r7, #12]
 800b10a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b10e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	8013      	strh	r3, [r2, #0]
 800b11e:	e01f      	b.n	800b160 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b136:	81fb      	strh	r3, [r7, #14]
 800b138:	89fb      	ldrh	r3, [r7, #14]
 800b13a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b13e:	81fb      	strh	r3, [r7, #14]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	441a      	add	r2, r3
 800b14a:	89fb      	ldrh	r3, [r7, #14]
 800b14c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b16e:	b480      	push	{r7}
 800b170:	b087      	sub	sp, #28
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	785b      	ldrb	r3, [r3, #1]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d04c      	beq.n	800b21a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	823b      	strh	r3, [r7, #16]
 800b18e:	8a3b      	ldrh	r3, [r7, #16]
 800b190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01b      	beq.n	800b1d0 <USB_EPClearStall+0x62>
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ae:	81fb      	strh	r3, [r7, #14]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	441a      	add	r2, r3
 800b1ba:	89fb      	ldrh	r3, [r7, #14]
 800b1bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	78db      	ldrb	r3, [r3, #3]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d06c      	beq.n	800b2b2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1ee:	81bb      	strh	r3, [r7, #12]
 800b1f0:	89bb      	ldrh	r3, [r7, #12]
 800b1f2:	f083 0320 	eor.w	r3, r3, #32
 800b1f6:	81bb      	strh	r3, [r7, #12]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	441a      	add	r2, r3
 800b202:	89bb      	ldrh	r3, [r7, #12]
 800b204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b20c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b214:	b29b      	uxth	r3, r3
 800b216:	8013      	strh	r3, [r2, #0]
 800b218:	e04b      	b.n	800b2b2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	82fb      	strh	r3, [r7, #22]
 800b228:	8afb      	ldrh	r3, [r7, #22]
 800b22a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01b      	beq.n	800b26a <USB_EPClearStall+0xfc>
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b248:	82bb      	strh	r3, [r7, #20]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	441a      	add	r2, r3
 800b254:	8abb      	ldrh	r3, [r7, #20]
 800b256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b25a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b25e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b266:	b29b      	uxth	r3, r3
 800b268:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b27c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b280:	827b      	strh	r3, [r7, #18]
 800b282:	8a7b      	ldrh	r3, [r7, #18]
 800b284:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b288:	827b      	strh	r3, [r7, #18]
 800b28a:	8a7b      	ldrh	r3, [r7, #18]
 800b28c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b290:	827b      	strh	r3, [r7, #18]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	441a      	add	r2, r3
 800b29c:	8a7b      	ldrh	r3, [r7, #18]
 800b29e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	371c      	adds	r7, #28
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b2cc:	78fb      	ldrb	r3, [r7, #3]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d103      	bne.n	800b2da <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2280      	movs	r2, #128	@ 0x80
 800b2d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b300:	b29a      	uxth	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b324:	b29b      	uxth	r3, r3
 800b326:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b328:	68fb      	ldr	r3, [r7, #12]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b336:	b480      	push	{r7}
 800b338:	b08b      	sub	sp, #44	@ 0x2c
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	4611      	mov	r1, r2
 800b342:	461a      	mov	r2, r3
 800b344:	460b      	mov	r3, r1
 800b346:	80fb      	strh	r3, [r7, #6]
 800b348:	4613      	mov	r3, r2
 800b34a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b34c:	88bb      	ldrh	r3, [r7, #4]
 800b34e:	3301      	adds	r3, #1
 800b350:	085b      	lsrs	r3, r3, #1
 800b352:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b35c:	88fa      	ldrh	r2, [r7, #6]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	4413      	add	r3, r2
 800b362:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b366:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b36c:	e01c      	b.n	800b3a8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	3301      	adds	r3, #1
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	b21b      	sxth	r3, r3
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	b21a      	sxth	r2, r3
 800b380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b384:	4313      	orrs	r3, r2
 800b386:	b21b      	sxth	r3, r3
 800b388:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	8a7a      	ldrh	r2, [r7, #18]
 800b38e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	3302      	adds	r3, #2
 800b394:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	3301      	adds	r3, #1
 800b39a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1df      	bne.n	800b36e <USB_WritePMA+0x38>
  }
}
 800b3ae:	bf00      	nop
 800b3b0:	bf00      	nop
 800b3b2:	372c      	adds	r7, #44	@ 0x2c
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b08b      	sub	sp, #44	@ 0x2c
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	80fb      	strh	r3, [r7, #6]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b3d2:	88bb      	ldrh	r3, [r7, #4]
 800b3d4:	085b      	lsrs	r3, r3, #1
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b3e2:	88fa      	ldrh	r2, [r7, #6]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3f2:	e018      	b.n	800b426 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	3302      	adds	r3, #2
 800b400:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	b2da      	uxtb	r2, r3
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	3301      	adds	r3, #1
 800b40e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	0a1b      	lsrs	r3, r3, #8
 800b414:	b2da      	uxtb	r2, r3
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	3301      	adds	r3, #1
 800b41e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b422:	3b01      	subs	r3, #1
 800b424:	627b      	str	r3, [r7, #36]	@ 0x24
 800b426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e3      	bne.n	800b3f4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b42c:	88bb      	ldrh	r3, [r7, #4]
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	b29b      	uxth	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d007      	beq.n	800b448 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	b2da      	uxtb	r2, r3
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	701a      	strb	r2, [r3, #0]
  }
}
 800b448:	bf00      	nop
 800b44a:	372c      	adds	r7, #44	@ 0x2c
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800b460:	2010      	movs	r0, #16
 800b462:	f001 fe15 	bl	800d090 <USBD_static_malloc>
 800b466:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d105      	bne.n	800b47a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b476:	2302      	movs	r3, #2
 800b478:	e01b      	b.n	800b4b2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	7c1b      	ldrb	r3, [r3, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d103      	bne.n	800b492 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2207      	movs	r2, #7
 800b48e:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800b490:	e002      	b.n	800b498 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800b498:	2304      	movs	r3, #4
 800b49a:	2203      	movs	r2, #3
 800b49c:	2181      	movs	r1, #129	@ 0x81
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f001 fce5 	bl	800ce6e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800b4c6:	2181      	movs	r1, #129	@ 0x81
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 fcf6 	bl	800ceba <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d009      	beq.n	800b4f8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f001 fdde 	bl	800d0ac <USBD_static_free>
    pdev->pClassData = NULL;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b514:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	e0e8      	b.n	800b6fa <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b530:	2b00      	cmp	r3, #0
 800b532:	d046      	beq.n	800b5c2 <USBD_HID_Setup+0xbe>
 800b534:	2b20      	cmp	r3, #32
 800b536:	f040 80d8 	bne.w	800b6ea <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	3b02      	subs	r3, #2
 800b540:	2b09      	cmp	r3, #9
 800b542:	d836      	bhi.n	800b5b2 <USBD_HID_Setup+0xae>
 800b544:	a201      	add	r2, pc, #4	@ (adr r2, 800b54c <USBD_HID_Setup+0x48>)
 800b546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54a:	bf00      	nop
 800b54c:	0800b5a3 	.word	0x0800b5a3
 800b550:	0800b583 	.word	0x0800b583
 800b554:	0800b5b3 	.word	0x0800b5b3
 800b558:	0800b5b3 	.word	0x0800b5b3
 800b55c:	0800b5b3 	.word	0x0800b5b3
 800b560:	0800b5b3 	.word	0x0800b5b3
 800b564:	0800b5b3 	.word	0x0800b5b3
 800b568:	0800b5b3 	.word	0x0800b5b3
 800b56c:	0800b591 	.word	0x0800b591
 800b570:	0800b575 	.word	0x0800b575
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	885b      	ldrh	r3, [r3, #2]
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	461a      	mov	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	601a      	str	r2, [r3, #0]
          break;
 800b580:	e01e      	b.n	800b5c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2201      	movs	r2, #1
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f988 	bl	800c89e <USBD_CtlSendData>
          break;
 800b58e:	e017      	b.n	800b5c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	885b      	ldrh	r3, [r3, #2]
 800b594:	0a1b      	lsrs	r3, r3, #8
 800b596:	b29b      	uxth	r3, r3
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	461a      	mov	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	605a      	str	r2, [r3, #4]
          break;
 800b5a0:	e00e      	b.n	800b5c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f001 f977 	bl	800c89e <USBD_CtlSendData>
          break;
 800b5b0:	e006      	b.n	800b5c0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 f901 	bl	800c7bc <USBD_CtlError>
          ret = USBD_FAIL;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	75fb      	strb	r3, [r7, #23]
          break;
 800b5be:	bf00      	nop
      }
      break;
 800b5c0:	e09a      	b.n	800b6f8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	785b      	ldrb	r3, [r3, #1]
 800b5c6:	2b0b      	cmp	r3, #11
 800b5c8:	f200 8086 	bhi.w	800b6d8 <USBD_HID_Setup+0x1d4>
 800b5cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b5d4 <USBD_HID_Setup+0xd0>)
 800b5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d2:	bf00      	nop
 800b5d4:	0800b605 	.word	0x0800b605
 800b5d8:	0800b6e7 	.word	0x0800b6e7
 800b5dc:	0800b6d9 	.word	0x0800b6d9
 800b5e0:	0800b6d9 	.word	0x0800b6d9
 800b5e4:	0800b6d9 	.word	0x0800b6d9
 800b5e8:	0800b6d9 	.word	0x0800b6d9
 800b5ec:	0800b62f 	.word	0x0800b62f
 800b5f0:	0800b6d9 	.word	0x0800b6d9
 800b5f4:	0800b6d9 	.word	0x0800b6d9
 800b5f8:	0800b6d9 	.word	0x0800b6d9
 800b5fc:	0800b687 	.word	0x0800b687
 800b600:	0800b6b1 	.word	0x0800b6b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d107      	bne.n	800b620 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b610:	f107 030a 	add.w	r3, r7, #10
 800b614:	2202      	movs	r2, #2
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 f940 	bl	800c89e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b61e:	e063      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 f8ca 	bl	800c7bc <USBD_CtlError>
            ret = USBD_FAIL;
 800b628:	2303      	movs	r3, #3
 800b62a:	75fb      	strb	r3, [r7, #23]
          break;
 800b62c:	e05c      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	885b      	ldrh	r3, [r3, #2]
 800b632:	0a1b      	lsrs	r3, r3, #8
 800b634:	b29b      	uxth	r3, r3
 800b636:	2b22      	cmp	r3, #34	@ 0x22
 800b638:	d108      	bne.n	800b64c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	2b4a      	cmp	r3, #74	@ 0x4a
 800b640:	bf28      	it	cs
 800b642:	234a      	movcs	r3, #74	@ 0x4a
 800b644:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800b646:	4b2f      	ldr	r3, [pc, #188]	@ (800b704 <USBD_HID_Setup+0x200>)
 800b648:	613b      	str	r3, [r7, #16]
 800b64a:	e015      	b.n	800b678 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	885b      	ldrh	r3, [r3, #2]
 800b650:	0a1b      	lsrs	r3, r3, #8
 800b652:	b29b      	uxth	r3, r3
 800b654:	2b21      	cmp	r3, #33	@ 0x21
 800b656:	d108      	bne.n	800b66a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800b658:	4b2b      	ldr	r3, [pc, #172]	@ (800b708 <USBD_HID_Setup+0x204>)
 800b65a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	88db      	ldrh	r3, [r3, #6]
 800b660:	2b09      	cmp	r3, #9
 800b662:	bf28      	it	cs
 800b664:	2309      	movcs	r3, #9
 800b666:	82bb      	strh	r3, [r7, #20]
 800b668:	e006      	b.n	800b678 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 f8a5 	bl	800c7bc <USBD_CtlError>
            ret = USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	75fb      	strb	r3, [r7, #23]
            break;
 800b676:	e037      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800b678:	8abb      	ldrh	r3, [r7, #20]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6939      	ldr	r1, [r7, #16]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 f90d 	bl	800c89e <USBD_CtlSendData>
          break;
 800b684:	e030      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d107      	bne.n	800b6a2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3308      	adds	r3, #8
 800b696:	2201      	movs	r2, #1
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f001 f8ff 	bl	800c89e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6a0:	e022      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 f889 	bl	800c7bc <USBD_CtlError>
            ret = USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b6ae:	e01b      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d106      	bne.n	800b6ca <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	885b      	ldrh	r3, [r3, #2]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6c8:	e00e      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 f875 	bl	800c7bc <USBD_CtlError>
            ret = USBD_FAIL;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800b6d6:	e007      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f001 f86e 	bl	800c7bc <USBD_CtlError>
          ret = USBD_FAIL;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	75fb      	strb	r3, [r7, #23]
          break;
 800b6e4:	e000      	b.n	800b6e8 <USBD_HID_Setup+0x1e4>
          break;
 800b6e6:	bf00      	nop
      }
      break;
 800b6e8:	e006      	b.n	800b6f8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f001 f865 	bl	800c7bc <USBD_CtlError>
      ret = USBD_FAIL;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f6:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	200000cc 	.word	0x200000cc
 800b708:	200000b4 	.word	0x200000b4

0800b70c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2222      	movs	r2, #34	@ 0x22
 800b718:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800b71a:	4b03      	ldr	r3, [pc, #12]	@ (800b728 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	20000048 	.word	0x20000048

0800b72c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2222      	movs	r2, #34	@ 0x22
 800b738:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800b73a:	4b03      	ldr	r3, [pc, #12]	@ (800b748 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	2000006c 	.word	0x2000006c

0800b74c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2222      	movs	r2, #34	@ 0x22
 800b758:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800b75a:	4b03      	ldr	r3, [pc, #12]	@ (800b768 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	20000090 	.word	0x20000090

0800b76c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b77e:	2200      	movs	r2, #0
 800b780:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	220a      	movs	r2, #10
 800b79c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800b79e:	4b03      	ldr	r3, [pc, #12]	@ (800b7ac <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	200000c0 	.word	0x200000c0

0800b7b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e01f      	b.n	800b808 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	79fa      	ldrb	r2, [r7, #7]
 800b7fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f001 facd 	bl	800cd9c <USBD_LL_Init>
 800b802:	4603      	mov	r3, r0
 800b804:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b806:	7dfb      	ldrb	r3, [r7, #23]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b824:	2303      	movs	r3, #3
 800b826:	e016      	b.n	800b856 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00b      	beq.n	800b854 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b844:	f107 020e 	add.w	r2, r7, #14
 800b848:	4610      	mov	r0, r2
 800b84a:	4798      	blx	r3
 800b84c:	4602      	mov	r2, r0
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 fae6 	bl	800ce38 <USBD_LL_Start>
 800b86c:	4603      	mov	r3, r0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b876:	b480      	push	{r7}
 800b878:	b083      	sub	sp, #12
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b898:	2303      	movs	r3, #3
 800b89a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d009      	beq.n	800b8ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	78fa      	ldrb	r2, [r7, #3]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	4798      	blx	r3
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	78fa      	ldrb	r2, [r7, #3]
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	4798      	blx	r3
  }

  return USBD_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	4618      	mov	r0, r3
 800b908:	f000 ff1e 	bl	800c748 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b91a:	461a      	mov	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b928:	f003 031f 	and.w	r3, r3, #31
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d01a      	beq.n	800b966 <USBD_LL_SetupStage+0x72>
 800b930:	2b02      	cmp	r3, #2
 800b932:	d822      	bhi.n	800b97a <USBD_LL_SetupStage+0x86>
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <USBD_LL_SetupStage+0x4a>
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d00a      	beq.n	800b952 <USBD_LL_SetupStage+0x5e>
 800b93c:	e01d      	b.n	800b97a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f9f0 	bl	800bd2c <USBD_StdDevReq>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
      break;
 800b950:	e020      	b.n	800b994 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b958:	4619      	mov	r1, r3
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fa54 	bl	800be08 <USBD_StdItfReq>
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]
      break;
 800b964:	e016      	b.n	800b994 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa93 	bl	800be9a <USBD_StdEPReq>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]
      break;
 800b978:	e00c      	b.n	800b994 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b980:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b984:	b2db      	uxtb	r3, r3
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f001 fab5 	bl	800cef8 <USBD_LL_StallEP>
 800b98e:	4603      	mov	r3, r0
 800b990:	73fb      	strb	r3, [r7, #15]
      break;
 800b992:	bf00      	nop
  }

  return ret;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b086      	sub	sp, #24
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	607a      	str	r2, [r7, #4]
 800b9aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9ac:	7afb      	ldrb	r3, [r7, #11]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d138      	bne.n	800ba24 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b9b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d14a      	bne.n	800ba5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d913      	bls.n	800b9f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	1ad2      	subs	r2, r2, r3
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	bf28      	it	cs
 800b9ea:	4613      	movcs	r3, r2
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6879      	ldr	r1, [r7, #4]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 ff80 	bl	800c8f6 <USBD_CtlContinueRx>
 800b9f6:	e030      	b.n	800ba5a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d10b      	bne.n	800ba1c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d005      	beq.n	800ba1c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 ff7b 	bl	800c918 <USBD_CtlSendStatus>
 800ba22:	e01a      	b.n	800ba5a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d114      	bne.n	800ba5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00e      	beq.n	800ba5a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	7afa      	ldrb	r2, [r7, #11]
 800ba46:	4611      	mov	r1, r2
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	4798      	blx	r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	e000      	b.n	800ba5c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d16b      	bne.n	800bb50 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3314      	adds	r3, #20
 800ba7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d156      	bne.n	800bb36 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d914      	bls.n	800babe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	689a      	ldr	r2, [r3, #8]
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	1ad2      	subs	r2, r2, r3
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	461a      	mov	r2, r3
 800baa8:	6879      	ldr	r1, [r7, #4]
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 ff12 	bl	800c8d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bab0:	2300      	movs	r3, #0
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f001 fac8 	bl	800d04c <USBD_LL_PrepareReceive>
 800babc:	e03b      	b.n	800bb36 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d11c      	bne.n	800bb04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d316      	bcc.n	800bb04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d20f      	bcs.n	800bb04 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bae4:	2200      	movs	r2, #0
 800bae6:	2100      	movs	r1, #0
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f000 fef3 	bl	800c8d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baf6:	2300      	movs	r3, #0
 800baf8:	2200      	movs	r2, #0
 800bafa:	2100      	movs	r1, #0
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f001 faa5 	bl	800d04c <USBD_LL_PrepareReceive>
 800bb02:	e018      	b.n	800bb36 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d10b      	bne.n	800bb28 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d005      	beq.n	800bb28 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb28:	2180      	movs	r1, #128	@ 0x80
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f001 f9e4 	bl	800cef8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 ff04 	bl	800c93e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d122      	bne.n	800bb86 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff fe98 	bl	800b876 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bb4e:	e01a      	b.n	800bb86 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d114      	bne.n	800bb86 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00e      	beq.n	800bb86 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	7afa      	ldrb	r2, [r7, #11]
 800bb72:	4611      	mov	r1, r2
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	4798      	blx	r3
 800bb78:	4603      	mov	r3, r0
 800bb7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
 800bb84:	e000      	b.n	800bb88 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e02f      	b.n	800bc24 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00f      	beq.n	800bbee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d009      	beq.n	800bbee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	6852      	ldr	r2, [r2, #4]
 800bbe6:	b2d2      	uxtb	r2, r2
 800bbe8:	4611      	mov	r1, r2
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbee:	2340      	movs	r3, #64	@ 0x40
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f001 f93a 	bl	800ce6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2240      	movs	r2, #64	@ 0x40
 800bc06:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc0a:	2340      	movs	r3, #64	@ 0x40
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2180      	movs	r1, #128	@ 0x80
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 f92c 	bl	800ce6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2240      	movs	r2, #64	@ 0x40
 800bc20:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	460b      	mov	r3, r1
 800bc36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	78fa      	ldrb	r2, [r7, #3]
 800bc3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2204      	movs	r2, #4
 800bc66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	d106      	bne.n	800bc9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e012      	b.n	800bce4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b03      	cmp	r3, #3
 800bcc8:	d10b      	bne.n	800bce2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	3301      	adds	r3, #1
 800bd02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	b21a      	sxth	r2, r3
 800bd12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	b21b      	sxth	r3, r3
 800bd1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd1c:	89fb      	ldrh	r3, [r7, #14]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
	...

0800bd2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd42:	2b40      	cmp	r3, #64	@ 0x40
 800bd44:	d005      	beq.n	800bd52 <USBD_StdDevReq+0x26>
 800bd46:	2b40      	cmp	r3, #64	@ 0x40
 800bd48:	d853      	bhi.n	800bdf2 <USBD_StdDevReq+0xc6>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00b      	beq.n	800bd66 <USBD_StdDevReq+0x3a>
 800bd4e:	2b20      	cmp	r3, #32
 800bd50:	d14f      	bne.n	800bdf2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	4798      	blx	r3
 800bd60:	4603      	mov	r3, r0
 800bd62:	73fb      	strb	r3, [r7, #15]
      break;
 800bd64:	e04a      	b.n	800bdfc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	785b      	ldrb	r3, [r3, #1]
 800bd6a:	2b09      	cmp	r3, #9
 800bd6c:	d83b      	bhi.n	800bde6 <USBD_StdDevReq+0xba>
 800bd6e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd74 <USBD_StdDevReq+0x48>)
 800bd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd74:	0800bdc9 	.word	0x0800bdc9
 800bd78:	0800bddd 	.word	0x0800bddd
 800bd7c:	0800bde7 	.word	0x0800bde7
 800bd80:	0800bdd3 	.word	0x0800bdd3
 800bd84:	0800bde7 	.word	0x0800bde7
 800bd88:	0800bda7 	.word	0x0800bda7
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800bde7 	.word	0x0800bde7
 800bd94:	0800bdbf 	.word	0x0800bdbf
 800bd98:	0800bdb1 	.word	0x0800bdb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f9de 	bl	800c160 <USBD_GetDescriptor>
          break;
 800bda4:	e024      	b.n	800bdf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fb43 	bl	800c434 <USBD_SetAddress>
          break;
 800bdae:	e01f      	b.n	800bdf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fb82 	bl	800c4bc <USBD_SetConfig>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]
          break;
 800bdbc:	e018      	b.n	800bdf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fc21 	bl	800c608 <USBD_GetConfig>
          break;
 800bdc6:	e013      	b.n	800bdf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fc52 	bl	800c674 <USBD_GetStatus>
          break;
 800bdd0:	e00e      	b.n	800bdf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bdd2:	6839      	ldr	r1, [r7, #0]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fc81 	bl	800c6dc <USBD_SetFeature>
          break;
 800bdda:	e009      	b.n	800bdf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fc90 	bl	800c704 <USBD_ClrFeature>
          break;
 800bde4:	e004      	b.n	800bdf0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fce7 	bl	800c7bc <USBD_CtlError>
          break;
 800bdee:	bf00      	nop
      }
      break;
 800bdf0:	e004      	b.n	800bdfc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fce1 	bl	800c7bc <USBD_CtlError>
      break;
 800bdfa:	bf00      	nop
  }

  return ret;
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop

0800be08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be1e:	2b40      	cmp	r3, #64	@ 0x40
 800be20:	d005      	beq.n	800be2e <USBD_StdItfReq+0x26>
 800be22:	2b40      	cmp	r3, #64	@ 0x40
 800be24:	d82f      	bhi.n	800be86 <USBD_StdItfReq+0x7e>
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <USBD_StdItfReq+0x26>
 800be2a:	2b20      	cmp	r3, #32
 800be2c:	d12b      	bne.n	800be86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be34:	b2db      	uxtb	r3, r3
 800be36:	3b01      	subs	r3, #1
 800be38:	2b02      	cmp	r3, #2
 800be3a:	d81d      	bhi.n	800be78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	889b      	ldrh	r3, [r3, #4]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b01      	cmp	r3, #1
 800be44:	d813      	bhi.n	800be6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	4798      	blx	r3
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	88db      	ldrh	r3, [r3, #6]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d110      	bne.n	800be82 <USBD_StdItfReq+0x7a>
 800be60:	7bfb      	ldrb	r3, [r7, #15]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10d      	bne.n	800be82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fd56 	bl	800c918 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be6c:	e009      	b.n	800be82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fca3 	bl	800c7bc <USBD_CtlError>
          break;
 800be76:	e004      	b.n	800be82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fc9e 	bl	800c7bc <USBD_CtlError>
          break;
 800be80:	e000      	b.n	800be84 <USBD_StdItfReq+0x7c>
          break;
 800be82:	bf00      	nop
      }
      break;
 800be84:	e004      	b.n	800be90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fc97 	bl	800c7bc <USBD_CtlError>
      break;
 800be8e:	bf00      	nop
  }

  return ret;
 800be90:	7bfb      	ldrb	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	889b      	ldrh	r3, [r3, #4]
 800beac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800beb6:	2b40      	cmp	r3, #64	@ 0x40
 800beb8:	d007      	beq.n	800beca <USBD_StdEPReq+0x30>
 800beba:	2b40      	cmp	r3, #64	@ 0x40
 800bebc:	f200 8145 	bhi.w	800c14a <USBD_StdEPReq+0x2b0>
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00c      	beq.n	800bede <USBD_StdEPReq+0x44>
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	f040 8140 	bne.w	800c14a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	4798      	blx	r3
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]
      break;
 800bedc:	e13a      	b.n	800c154 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	785b      	ldrb	r3, [r3, #1]
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d007      	beq.n	800bef6 <USBD_StdEPReq+0x5c>
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	f300 8129 	bgt.w	800c13e <USBD_StdEPReq+0x2a4>
 800beec:	2b00      	cmp	r3, #0
 800beee:	d07f      	beq.n	800bff0 <USBD_StdEPReq+0x156>
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d03c      	beq.n	800bf6e <USBD_StdEPReq+0xd4>
 800bef4:	e123      	b.n	800c13e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b02      	cmp	r3, #2
 800bf00:	d002      	beq.n	800bf08 <USBD_StdEPReq+0x6e>
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d016      	beq.n	800bf34 <USBD_StdEPReq+0x9a>
 800bf06:	e02c      	b.n	800bf62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf08:	7bbb      	ldrb	r3, [r7, #14]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00d      	beq.n	800bf2a <USBD_StdEPReq+0x90>
 800bf0e:	7bbb      	ldrb	r3, [r7, #14]
 800bf10:	2b80      	cmp	r3, #128	@ 0x80
 800bf12:	d00a      	beq.n	800bf2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf14:	7bbb      	ldrb	r3, [r7, #14]
 800bf16:	4619      	mov	r1, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 ffed 	bl	800cef8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf1e:	2180      	movs	r1, #128	@ 0x80
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 ffe9 	bl	800cef8 <USBD_LL_StallEP>
 800bf26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf28:	e020      	b.n	800bf6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fc45 	bl	800c7bc <USBD_CtlError>
              break;
 800bf32:	e01b      	b.n	800bf6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	885b      	ldrh	r3, [r3, #2]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10e      	bne.n	800bf5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00b      	beq.n	800bf5a <USBD_StdEPReq+0xc0>
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	2b80      	cmp	r3, #128	@ 0x80
 800bf46:	d008      	beq.n	800bf5a <USBD_StdEPReq+0xc0>
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	88db      	ldrh	r3, [r3, #6]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 ffcf 	bl	800cef8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fcdc 	bl	800c918 <USBD_CtlSendStatus>

              break;
 800bf60:	e004      	b.n	800bf6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bf62:	6839      	ldr	r1, [r7, #0]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fc29 	bl	800c7bc <USBD_CtlError>
              break;
 800bf6a:	bf00      	nop
          }
          break;
 800bf6c:	e0ec      	b.n	800c148 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d002      	beq.n	800bf80 <USBD_StdEPReq+0xe6>
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d016      	beq.n	800bfac <USBD_StdEPReq+0x112>
 800bf7e:	e030      	b.n	800bfe2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00d      	beq.n	800bfa2 <USBD_StdEPReq+0x108>
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b80      	cmp	r3, #128	@ 0x80
 800bf8a:	d00a      	beq.n	800bfa2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 ffb1 	bl	800cef8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf96:	2180      	movs	r1, #128	@ 0x80
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 ffad 	bl	800cef8 <USBD_LL_StallEP>
 800bf9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfa0:	e025      	b.n	800bfee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fc09 	bl	800c7bc <USBD_CtlError>
              break;
 800bfaa:	e020      	b.n	800bfee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	885b      	ldrh	r3, [r3, #2]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d11b      	bne.n	800bfec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bfb4:	7bbb      	ldrb	r3, [r7, #14]
 800bfb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d004      	beq.n	800bfc8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 ffb7 	bl	800cf36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fca5 	bl	800c918 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	4798      	blx	r3
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bfe0:	e004      	b.n	800bfec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fbe9 	bl	800c7bc <USBD_CtlError>
              break;
 800bfea:	e000      	b.n	800bfee <USBD_StdEPReq+0x154>
              break;
 800bfec:	bf00      	nop
          }
          break;
 800bfee:	e0ab      	b.n	800c148 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d002      	beq.n	800c002 <USBD_StdEPReq+0x168>
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d032      	beq.n	800c066 <USBD_StdEPReq+0x1cc>
 800c000:	e097      	b.n	800c132 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d007      	beq.n	800c018 <USBD_StdEPReq+0x17e>
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	2b80      	cmp	r3, #128	@ 0x80
 800c00c:	d004      	beq.n	800c018 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fbd3 	bl	800c7bc <USBD_CtlError>
                break;
 800c016:	e091      	b.n	800c13c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	da0b      	bge.n	800c038 <USBD_StdEPReq+0x19e>
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c026:	4613      	mov	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	3310      	adds	r3, #16
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	4413      	add	r3, r2
 800c034:	3304      	adds	r3, #4
 800c036:	e00b      	b.n	800c050 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c03e:	4613      	mov	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	3304      	adds	r3, #4
 800c050:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2200      	movs	r2, #0
 800c056:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2202      	movs	r2, #2
 800c05c:	4619      	mov	r1, r3
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fc1d 	bl	800c89e <USBD_CtlSendData>
              break;
 800c064:	e06a      	b.n	800c13c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da11      	bge.n	800c092 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
 800c070:	f003 020f 	and.w	r2, r3, #15
 800c074:	6879      	ldr	r1, [r7, #4]
 800c076:	4613      	mov	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	440b      	add	r3, r1
 800c080:	3324      	adds	r3, #36	@ 0x24
 800c082:	881b      	ldrh	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d117      	bne.n	800c0b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fb96 	bl	800c7bc <USBD_CtlError>
                  break;
 800c090:	e054      	b.n	800c13c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c092:	7bbb      	ldrb	r3, [r7, #14]
 800c094:	f003 020f 	and.w	r2, r3, #15
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	440b      	add	r3, r1
 800c0a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d104      	bne.n	800c0b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fb83 	bl	800c7bc <USBD_CtlError>
                  break;
 800c0b6:	e041      	b.n	800c13c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	da0b      	bge.n	800c0d8 <USBD_StdEPReq+0x23e>
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	3310      	adds	r3, #16
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	e00b      	b.n	800c0f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
 800c0da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0de:	4613      	mov	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <USBD_StdEPReq+0x264>
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	2b80      	cmp	r3, #128	@ 0x80
 800c0fc:	d103      	bne.n	800c106 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	e00e      	b.n	800c124 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 ff32 	bl	800cf74 <USBD_LL_IsStallEP>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	2201      	movs	r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	e002      	b.n	800c124 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2202      	movs	r2, #2
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fbb7 	bl	800c89e <USBD_CtlSendData>
              break;
 800c130:	e004      	b.n	800c13c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fb41 	bl	800c7bc <USBD_CtlError>
              break;
 800c13a:	bf00      	nop
          }
          break;
 800c13c:	e004      	b.n	800c148 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fb3b 	bl	800c7bc <USBD_CtlError>
          break;
 800c146:	bf00      	nop
      }
      break;
 800c148:	e004      	b.n	800c154 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fb35 	bl	800c7bc <USBD_CtlError>
      break;
 800c152:	bf00      	nop
  }

  return ret;
 800c154:	7bfb      	ldrb	r3, [r7, #15]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c16a:	2300      	movs	r3, #0
 800c16c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	885b      	ldrh	r3, [r3, #2]
 800c17a:	0a1b      	lsrs	r3, r3, #8
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	3b01      	subs	r3, #1
 800c180:	2b06      	cmp	r3, #6
 800c182:	f200 8128 	bhi.w	800c3d6 <USBD_GetDescriptor+0x276>
 800c186:	a201      	add	r2, pc, #4	@ (adr r2, 800c18c <USBD_GetDescriptor+0x2c>)
 800c188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18c:	0800c1a9 	.word	0x0800c1a9
 800c190:	0800c1c1 	.word	0x0800c1c1
 800c194:	0800c201 	.word	0x0800c201
 800c198:	0800c3d7 	.word	0x0800c3d7
 800c19c:	0800c3d7 	.word	0x0800c3d7
 800c1a0:	0800c377 	.word	0x0800c377
 800c1a4:	0800c3a3 	.word	0x0800c3a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	7c12      	ldrb	r2, [r2, #16]
 800c1b4:	f107 0108 	add.w	r1, r7, #8
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	60f8      	str	r0, [r7, #12]
      break;
 800c1be:	e112      	b.n	800c3e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7c1b      	ldrb	r3, [r3, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10d      	bne.n	800c1e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1d0:	f107 0208 	add.w	r2, r7, #8
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4798      	blx	r3
 800c1d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	2202      	movs	r2, #2
 800c1e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c1e2:	e100      	b.n	800c3e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ec:	f107 0208 	add.w	r2, r7, #8
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	4798      	blx	r3
 800c1f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	701a      	strb	r2, [r3, #0]
      break;
 800c1fe:	e0f2      	b.n	800c3e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	885b      	ldrh	r3, [r3, #2]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b05      	cmp	r3, #5
 800c208:	f200 80ac 	bhi.w	800c364 <USBD_GetDescriptor+0x204>
 800c20c:	a201      	add	r2, pc, #4	@ (adr r2, 800c214 <USBD_GetDescriptor+0xb4>)
 800c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c212:	bf00      	nop
 800c214:	0800c22d 	.word	0x0800c22d
 800c218:	0800c261 	.word	0x0800c261
 800c21c:	0800c295 	.word	0x0800c295
 800c220:	0800c2c9 	.word	0x0800c2c9
 800c224:	0800c2fd 	.word	0x0800c2fd
 800c228:	0800c331 	.word	0x0800c331
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	7c12      	ldrb	r2, [r2, #16]
 800c244:	f107 0108 	add.w	r1, r7, #8
 800c248:	4610      	mov	r0, r2
 800c24a:	4798      	blx	r3
 800c24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c24e:	e091      	b.n	800c374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fab2 	bl	800c7bc <USBD_CtlError>
            err++;
 800c258:	7afb      	ldrb	r3, [r7, #11]
 800c25a:	3301      	adds	r3, #1
 800c25c:	72fb      	strb	r3, [r7, #11]
          break;
 800c25e:	e089      	b.n	800c374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00b      	beq.n	800c284 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	7c12      	ldrb	r2, [r2, #16]
 800c278:	f107 0108 	add.w	r1, r7, #8
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c282:	e077      	b.n	800c374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fa98 	bl	800c7bc <USBD_CtlError>
            err++;
 800c28c:	7afb      	ldrb	r3, [r7, #11]
 800c28e:	3301      	adds	r3, #1
 800c290:	72fb      	strb	r3, [r7, #11]
          break;
 800c292:	e06f      	b.n	800c374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	7c12      	ldrb	r2, [r2, #16]
 800c2ac:	f107 0108 	add.w	r1, r7, #8
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4798      	blx	r3
 800c2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b6:	e05d      	b.n	800c374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa7e 	bl	800c7bc <USBD_CtlError>
            err++;
 800c2c0:	7afb      	ldrb	r3, [r7, #11]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2c6:	e055      	b.n	800c374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ea:	e043      	b.n	800c374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa64 	bl	800c7bc <USBD_CtlError>
            err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fa:	e03b      	b.n	800c374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c302:	695b      	ldr	r3, [r3, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31e:	e029      	b.n	800c374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa4a 	bl	800c7bc <USBD_CtlError>
            err++;
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	3301      	adds	r3, #1
 800c32c:	72fb      	strb	r3, [r7, #11]
          break;
 800c32e:	e021      	b.n	800c374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c352:	e00f      	b.n	800c374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fa30 	bl	800c7bc <USBD_CtlError>
            err++;
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	3301      	adds	r3, #1
 800c360:	72fb      	strb	r3, [r7, #11]
          break;
 800c362:	e007      	b.n	800c374 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fa28 	bl	800c7bc <USBD_CtlError>
          err++;
 800c36c:	7afb      	ldrb	r3, [r7, #11]
 800c36e:	3301      	adds	r3, #1
 800c370:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c372:	bf00      	nop
      }
      break;
 800c374:	e037      	b.n	800c3e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7c1b      	ldrb	r3, [r3, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d109      	bne.n	800c392 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c386:	f107 0208 	add.w	r2, r7, #8
 800c38a:	4610      	mov	r0, r2
 800c38c:	4798      	blx	r3
 800c38e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c390:	e029      	b.n	800c3e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fa11 	bl	800c7bc <USBD_CtlError>
        err++;
 800c39a:	7afb      	ldrb	r3, [r7, #11]
 800c39c:	3301      	adds	r3, #1
 800c39e:	72fb      	strb	r3, [r7, #11]
      break;
 800c3a0:	e021      	b.n	800c3e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	7c1b      	ldrb	r3, [r3, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10d      	bne.n	800c3c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b2:	f107 0208 	add.w	r2, r7, #8
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	4798      	blx	r3
 800c3ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	2207      	movs	r2, #7
 800c3c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3c4:	e00f      	b.n	800c3e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f9f7 	bl	800c7bc <USBD_CtlError>
        err++;
 800c3ce:	7afb      	ldrb	r3, [r7, #11]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c3d4:	e007      	b.n	800c3e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c3d6:	6839      	ldr	r1, [r7, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f9ef 	bl	800c7bc <USBD_CtlError>
      err++;
 800c3de:	7afb      	ldrb	r3, [r7, #11]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	72fb      	strb	r3, [r7, #11]
      break;
 800c3e4:	bf00      	nop
  }

  if (err != 0U)
 800c3e6:	7afb      	ldrb	r3, [r7, #11]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d11e      	bne.n	800c42a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	88db      	ldrh	r3, [r3, #6]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d016      	beq.n	800c422 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c3f4:	893b      	ldrh	r3, [r7, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00e      	beq.n	800c418 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	88da      	ldrh	r2, [r3, #6]
 800c3fe:	893b      	ldrh	r3, [r7, #8]
 800c400:	4293      	cmp	r3, r2
 800c402:	bf28      	it	cs
 800c404:	4613      	movcs	r3, r2
 800c406:	b29b      	uxth	r3, r3
 800c408:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c40a:	893b      	ldrh	r3, [r7, #8]
 800c40c:	461a      	mov	r2, r3
 800c40e:	68f9      	ldr	r1, [r7, #12]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fa44 	bl	800c89e <USBD_CtlSendData>
 800c416:	e009      	b.n	800c42c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f9ce 	bl	800c7bc <USBD_CtlError>
 800c420:	e004      	b.n	800c42c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa78 	bl	800c918 <USBD_CtlSendStatus>
 800c428:	e000      	b.n	800c42c <USBD_GetDescriptor+0x2cc>
    return;
 800c42a:	bf00      	nop
  }
}
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop

0800c434 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	889b      	ldrh	r3, [r3, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d131      	bne.n	800c4aa <USBD_SetAddress+0x76>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	88db      	ldrh	r3, [r3, #6]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d12d      	bne.n	800c4aa <USBD_SetAddress+0x76>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	885b      	ldrh	r3, [r3, #2]
 800c452:	2b7f      	cmp	r3, #127	@ 0x7f
 800c454:	d829      	bhi.n	800c4aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	885b      	ldrh	r3, [r3, #2]
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d104      	bne.n	800c478 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f9a3 	bl	800c7bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c476:	e01d      	b.n	800c4b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7bfa      	ldrb	r2, [r7, #15]
 800c47c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	4619      	mov	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fda1 	bl	800cfcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fa44 	bl	800c918 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d004      	beq.n	800c4a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2202      	movs	r2, #2
 800c49a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49e:	e009      	b.n	800c4b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4a8:	e004      	b.n	800c4b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f985 	bl	800c7bc <USBD_CtlError>
  }
}
 800c4b2:	bf00      	nop
 800c4b4:	bf00      	nop
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	885b      	ldrh	r3, [r3, #2]
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	4b4c      	ldr	r3, [pc, #304]	@ (800c604 <USBD_SetConfig+0x148>)
 800c4d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4d4:	4b4b      	ldr	r3, [pc, #300]	@ (800c604 <USBD_SetConfig+0x148>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d905      	bls.n	800c4e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f96c 	bl	800c7bc <USBD_CtlError>
    return USBD_FAIL;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e088      	b.n	800c5fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d002      	beq.n	800c4fa <USBD_SetConfig+0x3e>
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	d025      	beq.n	800c544 <USBD_SetConfig+0x88>
 800c4f8:	e071      	b.n	800c5de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c4fa:	4b42      	ldr	r3, [pc, #264]	@ (800c604 <USBD_SetConfig+0x148>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d01c      	beq.n	800c53c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c502:	4b40      	ldr	r3, [pc, #256]	@ (800c604 <USBD_SetConfig+0x148>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c50c:	4b3d      	ldr	r3, [pc, #244]	@ (800c604 <USBD_SetConfig+0x148>)
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff f9ba 	bl	800b88c <USBD_SetClassConfig>
 800c518:	4603      	mov	r3, r0
 800c51a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d004      	beq.n	800c52c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 f949 	bl	800c7bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c52a:	e065      	b.n	800c5f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f9f3 	bl	800c918 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2203      	movs	r2, #3
 800c536:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c53a:	e05d      	b.n	800c5f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f9eb 	bl	800c918 <USBD_CtlSendStatus>
      break;
 800c542:	e059      	b.n	800c5f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c544:	4b2f      	ldr	r3, [pc, #188]	@ (800c604 <USBD_SetConfig+0x148>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d112      	bne.n	800c572 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2202      	movs	r2, #2
 800c550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c554:	4b2b      	ldr	r3, [pc, #172]	@ (800c604 <USBD_SetConfig+0x148>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c55e:	4b29      	ldr	r3, [pc, #164]	@ (800c604 <USBD_SetConfig+0x148>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff f9ad 	bl	800b8c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f9d4 	bl	800c918 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c570:	e042      	b.n	800c5f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c572:	4b24      	ldr	r3, [pc, #144]	@ (800c604 <USBD_SetConfig+0x148>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d02a      	beq.n	800c5d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	b2db      	uxtb	r3, r3
 800c586:	4619      	mov	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7ff f99b 	bl	800b8c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c58e:	4b1d      	ldr	r3, [pc, #116]	@ (800c604 <USBD_SetConfig+0x148>)
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	461a      	mov	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c598:	4b1a      	ldr	r3, [pc, #104]	@ (800c604 <USBD_SetConfig+0x148>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7ff f974 	bl	800b88c <USBD_SetClassConfig>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00f      	beq.n	800c5ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f903 	bl	800c7bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff f980 	bl	800b8c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5cc:	e014      	b.n	800c5f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f9a2 	bl	800c918 <USBD_CtlSendStatus>
      break;
 800c5d4:	e010      	b.n	800c5f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f99e 	bl	800c918 <USBD_CtlSendStatus>
      break;
 800c5dc:	e00c      	b.n	800c5f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f8eb 	bl	800c7bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5e6:	4b07      	ldr	r3, [pc, #28]	@ (800c604 <USBD_SetConfig+0x148>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff f969 	bl	800b8c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f6:	bf00      	nop
  }

  return ret;
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	200012e0 	.word	0x200012e0

0800c608 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88db      	ldrh	r3, [r3, #6]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d004      	beq.n	800c624 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f8cd 	bl	800c7bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c622:	e023      	b.n	800c66c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	dc02      	bgt.n	800c636 <USBD_GetConfig+0x2e>
 800c630:	2b00      	cmp	r3, #0
 800c632:	dc03      	bgt.n	800c63c <USBD_GetConfig+0x34>
 800c634:	e015      	b.n	800c662 <USBD_GetConfig+0x5a>
 800c636:	2b03      	cmp	r3, #3
 800c638:	d00b      	beq.n	800c652 <USBD_GetConfig+0x4a>
 800c63a:	e012      	b.n	800c662 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	3308      	adds	r3, #8
 800c646:	2201      	movs	r2, #1
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f927 	bl	800c89e <USBD_CtlSendData>
        break;
 800c650:	e00c      	b.n	800c66c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	3304      	adds	r3, #4
 800c656:	2201      	movs	r2, #1
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f91f 	bl	800c89e <USBD_CtlSendData>
        break;
 800c660:	e004      	b.n	800c66c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f8a9 	bl	800c7bc <USBD_CtlError>
        break;
 800c66a:	bf00      	nop
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c684:	b2db      	uxtb	r3, r3
 800c686:	3b01      	subs	r3, #1
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d81e      	bhi.n	800c6ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	88db      	ldrh	r3, [r3, #6]
 800c690:	2b02      	cmp	r3, #2
 800c692:	d004      	beq.n	800c69e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f890 	bl	800c7bc <USBD_CtlError>
        break;
 800c69c:	e01a      	b.n	800c6d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d005      	beq.n	800c6ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	f043 0202 	orr.w	r2, r3, #2
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	330c      	adds	r3, #12
 800c6be:	2202      	movs	r2, #2
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f8eb 	bl	800c89e <USBD_CtlSendData>
      break;
 800c6c8:	e004      	b.n	800c6d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f875 	bl	800c7bc <USBD_CtlError>
      break;
 800c6d2:	bf00      	nop
  }
}
 800c6d4:	bf00      	nop
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	885b      	ldrh	r3, [r3, #2]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d106      	bne.n	800c6fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f90e 	bl	800c918 <USBD_CtlSendStatus>
  }
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	3b01      	subs	r3, #1
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d80b      	bhi.n	800c734 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	885b      	ldrh	r3, [r3, #2]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d10c      	bne.n	800c73e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f8f3 	bl	800c918 <USBD_CtlSendStatus>
      }
      break;
 800c732:	e004      	b.n	800c73e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f840 	bl	800c7bc <USBD_CtlError>
      break;
 800c73c:	e000      	b.n	800c740 <USBD_ClrFeature+0x3c>
      break;
 800c73e:	bf00      	nop
  }
}
 800c740:	bf00      	nop
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	781a      	ldrb	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3301      	adds	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	781a      	ldrb	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	3301      	adds	r3, #1
 800c770:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff faba 	bl	800bcec <SWAPBYTE>
 800c778:	4603      	mov	r3, r0
 800c77a:	461a      	mov	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3301      	adds	r3, #1
 800c784:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3301      	adds	r3, #1
 800c78a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7ff faad 	bl	800bcec <SWAPBYTE>
 800c792:	4603      	mov	r3, r0
 800c794:	461a      	mov	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3301      	adds	r3, #1
 800c79e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f7ff faa0 	bl	800bcec <SWAPBYTE>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	80da      	strh	r2, [r3, #6]
}
 800c7b4:	bf00      	nop
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7c6:	2180      	movs	r1, #128	@ 0x80
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fb95 	bl	800cef8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fb91 	bl	800cef8 <USBD_LL_StallEP>
}
 800c7d6:	bf00      	nop
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b086      	sub	sp, #24
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	60f8      	str	r0, [r7, #12]
 800c7e6:	60b9      	str	r1, [r7, #8]
 800c7e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d036      	beq.n	800c862 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7f8:	6938      	ldr	r0, [r7, #16]
 800c7fa:	f000 f836 	bl	800c86a <USBD_GetLen>
 800c7fe:	4603      	mov	r3, r0
 800c800:	3301      	adds	r3, #1
 800c802:	b29b      	uxth	r3, r3
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	b29a      	uxth	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	4413      	add	r3, r2
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	7812      	ldrb	r2, [r2, #0]
 800c816:	701a      	strb	r2, [r3, #0]
  idx++;
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	3301      	adds	r3, #1
 800c81c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	4413      	add	r3, r2
 800c824:	2203      	movs	r2, #3
 800c826:	701a      	strb	r2, [r3, #0]
  idx++;
 800c828:	7dfb      	ldrb	r3, [r7, #23]
 800c82a:	3301      	adds	r3, #1
 800c82c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c82e:	e013      	b.n	800c858 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	4413      	add	r3, r2
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	7812      	ldrb	r2, [r2, #0]
 800c83a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	3301      	adds	r3, #1
 800c840:	613b      	str	r3, [r7, #16]
    idx++;
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	3301      	adds	r3, #1
 800c846:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	4413      	add	r3, r2
 800c84e:	2200      	movs	r2, #0
 800c850:	701a      	strb	r2, [r3, #0]
    idx++;
 800c852:	7dfb      	ldrb	r3, [r7, #23]
 800c854:	3301      	adds	r3, #1
 800c856:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e7      	bne.n	800c830 <USBD_GetString+0x52>
 800c860:	e000      	b.n	800c864 <USBD_GetString+0x86>
    return;
 800c862:	bf00      	nop
  }
}
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b085      	sub	sp, #20
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c87a:	e005      	b.n	800c888 <USBD_GetLen+0x1e>
  {
    len++;
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	3301      	adds	r3, #1
 800c880:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	3301      	adds	r3, #1
 800c886:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1f5      	bne.n	800c87c <USBD_GetLen+0x12>
  }

  return len;
 800c890:	7bfb      	ldrb	r3, [r7, #15]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 fba0 	bl	800d00a <USBD_LL_Transmit>

  return USBD_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f000 fb8f 	bl	800d00a <USBD_LL_Transmit>

  return USBD_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	60f8      	str	r0, [r7, #12]
 800c8fe:	60b9      	str	r1, [r7, #8]
 800c900:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	2100      	movs	r1, #0
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 fb9f 	bl	800d04c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2204      	movs	r2, #4
 800c924:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c928:	2300      	movs	r3, #0
 800c92a:	2200      	movs	r2, #0
 800c92c:	2100      	movs	r1, #0
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fb6b 	bl	800d00a <USBD_LL_Transmit>

  return USBD_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2205      	movs	r2, #5
 800c94a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c94e:	2300      	movs	r3, #0
 800c950:	2200      	movs	r2, #0
 800c952:	2100      	movs	r1, #0
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fb79 	bl	800d04c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800c968:	2200      	movs	r2, #0
 800c96a:	490e      	ldr	r1, [pc, #56]	@ (800c9a4 <MX_USB_Device_Init+0x40>)
 800c96c:	480e      	ldr	r0, [pc, #56]	@ (800c9a8 <MX_USB_Device_Init+0x44>)
 800c96e:	f7fe ff1f 	bl	800b7b0 <USBD_Init>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c978:	f7f4 fb63 	bl	8001042 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800c97c:	490b      	ldr	r1, [pc, #44]	@ (800c9ac <MX_USB_Device_Init+0x48>)
 800c97e:	480a      	ldr	r0, [pc, #40]	@ (800c9a8 <MX_USB_Device_Init+0x44>)
 800c980:	f7fe ff46 	bl	800b810 <USBD_RegisterClass>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c98a:	f7f4 fb5a 	bl	8001042 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c98e:	4806      	ldr	r0, [pc, #24]	@ (800c9a8 <MX_USB_Device_Init+0x44>)
 800c990:	f7fe ff65 	bl	800b85e <USBD_Start>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800c99a:	f7f4 fb52 	bl	8001042 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c99e:	bf00      	nop
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20000118 	.word	0x20000118
 800c9a8:	200012e4 	.word	0x200012e4
 800c9ac:	20000010 	.word	0x20000010

0800c9b0 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	6039      	str	r1, [r7, #0]
 800c9ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	2212      	movs	r2, #18
 800c9c0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800c9c2:	4b03      	ldr	r3, [pc, #12]	@ (800c9d0 <USBD_HID_DeviceDescriptor+0x20>)
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	20000134 	.word	0x20000134

0800c9d4 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	6039      	str	r1, [r7, #0]
 800c9de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9e6:	4b03      	ldr	r3, [pc, #12]	@ (800c9f4 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	20000148 	.word	0x20000148

0800c9f8 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	6039      	str	r1, [r7, #0]
 800ca02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d105      	bne.n	800ca16 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	4907      	ldr	r1, [pc, #28]	@ (800ca2c <USBD_HID_ProductStrDescriptor+0x34>)
 800ca0e:	4808      	ldr	r0, [pc, #32]	@ (800ca30 <USBD_HID_ProductStrDescriptor+0x38>)
 800ca10:	f7ff fee5 	bl	800c7de <USBD_GetString>
 800ca14:	e004      	b.n	800ca20 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	4904      	ldr	r1, [pc, #16]	@ (800ca2c <USBD_HID_ProductStrDescriptor+0x34>)
 800ca1a:	4805      	ldr	r0, [pc, #20]	@ (800ca30 <USBD_HID_ProductStrDescriptor+0x38>)
 800ca1c:	f7ff fedf 	bl	800c7de <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca20:	4b02      	ldr	r3, [pc, #8]	@ (800ca2c <USBD_HID_ProductStrDescriptor+0x34>)
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200015b4 	.word	0x200015b4
 800ca30:	0800e110 	.word	0x0800e110

0800ca34 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	6039      	str	r1, [r7, #0]
 800ca3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	4904      	ldr	r1, [pc, #16]	@ (800ca54 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800ca44:	4804      	ldr	r0, [pc, #16]	@ (800ca58 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800ca46:	f7ff feca 	bl	800c7de <USBD_GetString>
  return USBD_StrDesc;
 800ca4a:	4b02      	ldr	r3, [pc, #8]	@ (800ca54 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	200015b4 	.word	0x200015b4
 800ca58:	0800e128 	.word	0x0800e128

0800ca5c <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	4603      	mov	r3, r0
 800ca64:	6039      	str	r1, [r7, #0]
 800ca66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	221a      	movs	r2, #26
 800ca6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca6e:	f000 f843 	bl	800caf8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ca72:	4b02      	ldr	r3, [pc, #8]	@ (800ca7c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	2000014c 	.word	0x2000014c

0800ca80 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	6039      	str	r1, [r7, #0]
 800ca8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	4907      	ldr	r1, [pc, #28]	@ (800cab4 <USBD_HID_ConfigStrDescriptor+0x34>)
 800ca96:	4808      	ldr	r0, [pc, #32]	@ (800cab8 <USBD_HID_ConfigStrDescriptor+0x38>)
 800ca98:	f7ff fea1 	bl	800c7de <USBD_GetString>
 800ca9c:	e004      	b.n	800caa8 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	4904      	ldr	r1, [pc, #16]	@ (800cab4 <USBD_HID_ConfigStrDescriptor+0x34>)
 800caa2:	4805      	ldr	r0, [pc, #20]	@ (800cab8 <USBD_HID_ConfigStrDescriptor+0x38>)
 800caa4:	f7ff fe9b 	bl	800c7de <USBD_GetString>
  }
  return USBD_StrDesc;
 800caa8:	4b02      	ldr	r3, [pc, #8]	@ (800cab4 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	200015b4 	.word	0x200015b4
 800cab8:	0800e13c 	.word	0x0800e13c

0800cabc <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	4603      	mov	r3, r0
 800cac4:	6039      	str	r1, [r7, #0]
 800cac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d105      	bne.n	800cada <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	4907      	ldr	r1, [pc, #28]	@ (800caf0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800cad2:	4808      	ldr	r0, [pc, #32]	@ (800caf4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800cad4:	f7ff fe83 	bl	800c7de <USBD_GetString>
 800cad8:	e004      	b.n	800cae4 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	4904      	ldr	r1, [pc, #16]	@ (800caf0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800cade:	4805      	ldr	r0, [pc, #20]	@ (800caf4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800cae0:	f7ff fe7d 	bl	800c7de <USBD_GetString>
  }
  return USBD_StrDesc;
 800cae4:	4b02      	ldr	r3, [pc, #8]	@ (800caf0 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	200015b4 	.word	0x200015b4
 800caf4:	0800e148 	.word	0x0800e148

0800caf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cafe:	4b0f      	ldr	r3, [pc, #60]	@ (800cb3c <Get_SerialNum+0x44>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb04:	4b0e      	ldr	r3, [pc, #56]	@ (800cb40 <Get_SerialNum+0x48>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb0a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb44 <Get_SerialNum+0x4c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4413      	add	r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d009      	beq.n	800cb32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb1e:	2208      	movs	r2, #8
 800cb20:	4909      	ldr	r1, [pc, #36]	@ (800cb48 <Get_SerialNum+0x50>)
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 f814 	bl	800cb50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb28:	2204      	movs	r2, #4
 800cb2a:	4908      	ldr	r1, [pc, #32]	@ (800cb4c <Get_SerialNum+0x54>)
 800cb2c:	68b8      	ldr	r0, [r7, #8]
 800cb2e:	f000 f80f 	bl	800cb50 <IntToUnicode>
  }
}
 800cb32:	bf00      	nop
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	1fff7590 	.word	0x1fff7590
 800cb40:	1fff7594 	.word	0x1fff7594
 800cb44:	1fff7598 	.word	0x1fff7598
 800cb48:	2000014e 	.word	0x2000014e
 800cb4c:	2000015e 	.word	0x2000015e

0800cb50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b087      	sub	sp, #28
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb62:	2300      	movs	r3, #0
 800cb64:	75fb      	strb	r3, [r7, #23]
 800cb66:	e027      	b.n	800cbb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	0f1b      	lsrs	r3, r3, #28
 800cb6c:	2b09      	cmp	r3, #9
 800cb6e:	d80b      	bhi.n	800cb88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	0f1b      	lsrs	r3, r3, #28
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	440b      	add	r3, r1
 800cb80:	3230      	adds	r2, #48	@ 0x30
 800cb82:	b2d2      	uxtb	r2, r2
 800cb84:	701a      	strb	r2, [r3, #0]
 800cb86:	e00a      	b.n	800cb9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	0f1b      	lsrs	r3, r3, #28
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	4619      	mov	r1, r3
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	440b      	add	r3, r1
 800cb98:	3237      	adds	r2, #55	@ 0x37
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	011b      	lsls	r3, r3, #4
 800cba2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	3301      	adds	r3, #1
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	4413      	add	r3, r2
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	75fb      	strb	r3, [r7, #23]
 800cbb8:	7dfa      	ldrb	r2, [r7, #23]
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d3d3      	bcc.n	800cb68 <IntToUnicode+0x18>
  }
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	371c      	adds	r7, #28
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b094      	sub	sp, #80	@ 0x50
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cbd8:	f107 030c 	add.w	r3, r7, #12
 800cbdc:	2244      	movs	r2, #68	@ 0x44
 800cbde:	2100      	movs	r1, #0
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 fbe2 	bl	800d3aa <memset>
  if(pcdHandle->Instance==USB)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a15      	ldr	r2, [pc, #84]	@ (800cc40 <HAL_PCD_MspInit+0x70>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d122      	bne.n	800cc36 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cbf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbf4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cbfa:	f107 030c 	add.w	r3, r7, #12
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fa f9d0 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800cc0a:	f7f4 fa1a 	bl	8001042 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc44 <HAL_PCD_MspInit+0x74>)
 800cc10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc12:	4a0c      	ldr	r2, [pc, #48]	@ (800cc44 <HAL_PCD_MspInit+0x74>)
 800cc14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cc18:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc1a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc44 <HAL_PCD_MspInit+0x74>)
 800cc1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc22:	60bb      	str	r3, [r7, #8]
 800cc24:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cc26:	2200      	movs	r2, #0
 800cc28:	2100      	movs	r1, #0
 800cc2a:	2014      	movs	r0, #20
 800cc2c:	f7f6 fcc1 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cc30:	2014      	movs	r0, #20
 800cc32:	f7f6 fcd8 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cc36:	bf00      	nop
 800cc38:	3750      	adds	r7, #80	@ 0x50
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	40005c00 	.word	0x40005c00
 800cc44:	40021000 	.word	0x40021000

0800cc48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	4610      	mov	r0, r2
 800cc60:	f7fe fe48 	bl	800b8f4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	460b      	mov	r3, r1
 800cc76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cc7e:	78fa      	ldrb	r2, [r7, #3]
 800cc80:	6879      	ldr	r1, [r7, #4]
 800cc82:	4613      	mov	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	00db      	lsls	r3, r3, #3
 800cc8a:	440b      	add	r3, r1
 800cc8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	78fb      	ldrb	r3, [r7, #3]
 800cc94:	4619      	mov	r1, r3
 800cc96:	f7fe fe82 	bl	800b99e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cc9a:	bf00      	nop
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b082      	sub	sp, #8
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
 800ccaa:	460b      	mov	r3, r1
 800ccac:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	6879      	ldr	r1, [r7, #4]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	440b      	add	r3, r1
 800ccc2:	3324      	adds	r3, #36	@ 0x24
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	78fb      	ldrb	r3, [r7, #3]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	f7fe fecb 	bl	800ba64 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ccce:	bf00      	nop
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fe ffdf 	bl	800bca8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ccea:	bf00      	nop
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b084      	sub	sp, #16
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	795b      	ldrb	r3, [r3, #5]
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d001      	beq.n	800cd0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd06:	f7f4 f99c 	bl	8001042 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd10:	7bfa      	ldrb	r2, [r7, #15]
 800cd12:	4611      	mov	r1, r2
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fe ff89 	bl	800bc2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe ff35 	bl	800bb90 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe ff84 	bl	800bc4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	7a5b      	ldrb	r3, [r3, #9]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d005      	beq.n	800cd58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <HAL_PCD_SuspendCallback+0x30>)
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	4a03      	ldr	r2, [pc, #12]	@ (800cd60 <HAL_PCD_SuspendCallback+0x30>)
 800cd52:	f043 0306 	orr.w	r3, r3, #6
 800cd56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cd58:	bf00      	nop
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	e000ed00 	.word	0xe000ed00

0800cd64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7a5b      	ldrb	r3, [r3, #9]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd74:	4b08      	ldr	r3, [pc, #32]	@ (800cd98 <HAL_PCD_ResumeCallback+0x34>)
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	4a07      	ldr	r2, [pc, #28]	@ (800cd98 <HAL_PCD_ResumeCallback+0x34>)
 800cd7a:	f023 0306 	bic.w	r3, r3, #6
 800cd7e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cd80:	f000 f99e 	bl	800d0c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe ff74 	bl	800bc78 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cd90:	bf00      	nop
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	e000ed00 	.word	0xe000ed00

0800cd9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cda4:	4a22      	ldr	r2, [pc, #136]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4a20      	ldr	r2, [pc, #128]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cdb4:	4b1e      	ldr	r3, [pc, #120]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdb6:	4a1f      	ldr	r2, [pc, #124]	@ (800ce34 <USBD_LL_Init+0x98>)
 800cdb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cdba:	4b1d      	ldr	r3, [pc, #116]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdbc:	2208      	movs	r2, #8
 800cdbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cdc0:	4b1b      	ldr	r3, [pc, #108]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdc6:	4b1a      	ldr	r3, [pc, #104]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdc8:	2202      	movs	r2, #2
 800cdca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cdcc:	4b18      	ldr	r3, [pc, #96]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cdd2:	4b17      	ldr	r3, [pc, #92]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cdd8:	4b15      	ldr	r3, [pc, #84]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cdda:	2200      	movs	r2, #0
 800cddc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cdde:	4b14      	ldr	r3, [pc, #80]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cde4:	4812      	ldr	r0, [pc, #72]	@ (800ce30 <USBD_LL_Init+0x94>)
 800cde6:	f7f7 fe05 	bl	80049f4 <HAL_PCD_Init>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cdf0:	f7f4 f927 	bl	8001042 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdfa:	2318      	movs	r3, #24
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2100      	movs	r1, #0
 800ce00:	f7f9 fa74 	bl	80062ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce0a:	2358      	movs	r3, #88	@ 0x58
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	2180      	movs	r1, #128	@ 0x80
 800ce10:	f7f9 fa6c 	bl	80062ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce1e:	2200      	movs	r2, #0
 800ce20:	2181      	movs	r1, #129	@ 0x81
 800ce22:	f7f9 fa63 	bl	80062ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	200017b4 	.word	0x200017b4
 800ce34:	40005c00 	.word	0x40005c00

0800ce38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7f7 fe9e 	bl	8004b90 <HAL_PCD_Start>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 f936 	bl	800d0cc <USBD_Get_USB_Status>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	4608      	mov	r0, r1
 800ce78:	4611      	mov	r1, r2
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	70fb      	strb	r3, [r7, #3]
 800ce80:	460b      	mov	r3, r1
 800ce82:	70bb      	strb	r3, [r7, #2]
 800ce84:	4613      	mov	r3, r2
 800ce86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce96:	78bb      	ldrb	r3, [r7, #2]
 800ce98:	883a      	ldrh	r2, [r7, #0]
 800ce9a:	78f9      	ldrb	r1, [r7, #3]
 800ce9c:	f7f7 ffe5 	bl	8004e6a <HAL_PCD_EP_Open>
 800cea0:	4603      	mov	r3, r0
 800cea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 f910 	bl	800d0cc <USBD_Get_USB_Status>
 800ceac:	4603      	mov	r3, r0
 800ceae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b084      	sub	sp, #16
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	460b      	mov	r3, r1
 800cec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ced4:	78fa      	ldrb	r2, [r7, #3]
 800ced6:	4611      	mov	r1, r2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7f8 f825 	bl	8004f28 <HAL_PCD_EP_Close>
 800cede:	4603      	mov	r3, r0
 800cee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 f8f1 	bl	800d0cc <USBD_Get_USB_Status>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	460b      	mov	r3, r1
 800cf02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf12:	78fa      	ldrb	r2, [r7, #3]
 800cf14:	4611      	mov	r1, r2
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f8 f8b6 	bl	8005088 <HAL_PCD_EP_SetStall>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f000 f8d2 	bl	800d0cc <USBD_Get_USB_Status>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf50:	78fa      	ldrb	r2, [r7, #3]
 800cf52:	4611      	mov	r1, r2
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7f8 f8e9 	bl	800512c <HAL_PCD_EP_ClrStall>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 f8b3 	bl	800d0cc <USBD_Get_USB_Status>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	da0b      	bge.n	800cfa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf90:	78fb      	ldrb	r3, [r7, #3]
 800cf92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf96:	68f9      	ldr	r1, [r7, #12]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4413      	add	r3, r2
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	440b      	add	r3, r1
 800cfa2:	3312      	adds	r3, #18
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	e00b      	b.n	800cfc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cfa8:	78fb      	ldrb	r3, [r7, #3]
 800cfaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfae:	68f9      	ldr	r1, [r7, #12]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4413      	add	r3, r2
 800cfb6:	00db      	lsls	r3, r3, #3
 800cfb8:	440b      	add	r3, r1
 800cfba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cfbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3714      	adds	r7, #20
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cfe6:	78fa      	ldrb	r2, [r7, #3]
 800cfe8:	4611      	mov	r1, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f7 ff19 	bl	8004e22 <HAL_PCD_SetAddress>
 800cff0:	4603      	mov	r3, r0
 800cff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 f868 	bl	800d0cc <USBD_Get_USB_Status>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d000:	7bbb      	ldrb	r3, [r7, #14]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b086      	sub	sp, #24
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	603b      	str	r3, [r7, #0]
 800d016:	460b      	mov	r3, r1
 800d018:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d028:	7af9      	ldrb	r1, [r7, #11]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	f7f7 fff4 	bl	800501a <HAL_PCD_EP_Transmit>
 800d032:	4603      	mov	r3, r0
 800d034:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d036:	7dfb      	ldrb	r3, [r7, #23]
 800d038:	4618      	mov	r0, r3
 800d03a:	f000 f847 	bl	800d0cc <USBD_Get_USB_Status>
 800d03e:	4603      	mov	r3, r0
 800d040:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d042:	7dbb      	ldrb	r3, [r7, #22]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3718      	adds	r7, #24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	607a      	str	r2, [r7, #4]
 800d056:	603b      	str	r3, [r7, #0]
 800d058:	460b      	mov	r3, r1
 800d05a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d06a:	7af9      	ldrb	r1, [r7, #11]
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	f7f7 ffa2 	bl	8004fb8 <HAL_PCD_EP_Receive>
 800d074:	4603      	mov	r3, r0
 800d076:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	4618      	mov	r0, r3
 800d07c:	f000 f826 	bl	800d0cc <USBD_Get_USB_Status>
 800d080:	4603      	mov	r3, r0
 800d082:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d084:	7dbb      	ldrb	r3, [r7, #22]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
	...

0800d090 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d098:	4b03      	ldr	r3, [pc, #12]	@ (800d0a8 <USBD_static_malloc+0x18>)
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	370c      	adds	r7, #12
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	20001a90 	.word	0x20001a90

0800d0ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]

}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d0c4:	f7f3 ff72 	bl	8000fac <SystemClock_Config>
}
 800d0c8:	bf00      	nop
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	2b03      	cmp	r3, #3
 800d0de:	d817      	bhi.n	800d110 <USBD_Get_USB_Status+0x44>
 800d0e0:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e8 <USBD_Get_USB_Status+0x1c>)
 800d0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e6:	bf00      	nop
 800d0e8:	0800d0f9 	.word	0x0800d0f9
 800d0ec:	0800d0ff 	.word	0x0800d0ff
 800d0f0:	0800d105 	.word	0x0800d105
 800d0f4:	0800d10b 	.word	0x0800d10b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d0fc:	e00b      	b.n	800d116 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0fe:	2303      	movs	r3, #3
 800d100:	73fb      	strb	r3, [r7, #15]
    break;
 800d102:	e008      	b.n	800d116 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d104:	2301      	movs	r3, #1
 800d106:	73fb      	strb	r3, [r7, #15]
    break;
 800d108:	e005      	b.n	800d116 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d10a:	2303      	movs	r3, #3
 800d10c:	73fb      	strb	r3, [r7, #15]
    break;
 800d10e:	e002      	b.n	800d116 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d110:	2303      	movs	r3, #3
 800d112:	73fb      	strb	r3, [r7, #15]
    break;
 800d114:	bf00      	nop
  }
  return usb_status;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <rand>:
 800d124:	4b16      	ldr	r3, [pc, #88]	@ (800d180 <rand+0x5c>)
 800d126:	b510      	push	{r4, lr}
 800d128:	681c      	ldr	r4, [r3, #0]
 800d12a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d12c:	b9b3      	cbnz	r3, 800d15c <rand+0x38>
 800d12e:	2018      	movs	r0, #24
 800d130:	f000 fa2e 	bl	800d590 <malloc>
 800d134:	4602      	mov	r2, r0
 800d136:	6320      	str	r0, [r4, #48]	@ 0x30
 800d138:	b920      	cbnz	r0, 800d144 <rand+0x20>
 800d13a:	4b12      	ldr	r3, [pc, #72]	@ (800d184 <rand+0x60>)
 800d13c:	4812      	ldr	r0, [pc, #72]	@ (800d188 <rand+0x64>)
 800d13e:	2152      	movs	r1, #82	@ 0x52
 800d140:	f000 f9be 	bl	800d4c0 <__assert_func>
 800d144:	4911      	ldr	r1, [pc, #68]	@ (800d18c <rand+0x68>)
 800d146:	4b12      	ldr	r3, [pc, #72]	@ (800d190 <rand+0x6c>)
 800d148:	e9c0 1300 	strd	r1, r3, [r0]
 800d14c:	4b11      	ldr	r3, [pc, #68]	@ (800d194 <rand+0x70>)
 800d14e:	6083      	str	r3, [r0, #8]
 800d150:	230b      	movs	r3, #11
 800d152:	8183      	strh	r3, [r0, #12]
 800d154:	2100      	movs	r1, #0
 800d156:	2001      	movs	r0, #1
 800d158:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d15c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d15e:	480e      	ldr	r0, [pc, #56]	@ (800d198 <rand+0x74>)
 800d160:	690b      	ldr	r3, [r1, #16]
 800d162:	694c      	ldr	r4, [r1, #20]
 800d164:	4a0d      	ldr	r2, [pc, #52]	@ (800d19c <rand+0x78>)
 800d166:	4358      	muls	r0, r3
 800d168:	fb02 0004 	mla	r0, r2, r4, r0
 800d16c:	fba3 3202 	umull	r3, r2, r3, r2
 800d170:	3301      	adds	r3, #1
 800d172:	eb40 0002 	adc.w	r0, r0, r2
 800d176:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d17a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d17e:	bd10      	pop	{r4, pc}
 800d180:	20000174 	.word	0x20000174
 800d184:	0800e198 	.word	0x0800e198
 800d188:	0800e1af 	.word	0x0800e1af
 800d18c:	abcd330e 	.word	0xabcd330e
 800d190:	e66d1234 	.word	0xe66d1234
 800d194:	0005deec 	.word	0x0005deec
 800d198:	5851f42d 	.word	0x5851f42d
 800d19c:	4c957f2d 	.word	0x4c957f2d

0800d1a0 <std>:
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	b510      	push	{r4, lr}
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1ae:	6083      	str	r3, [r0, #8]
 800d1b0:	8181      	strh	r1, [r0, #12]
 800d1b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d1b4:	81c2      	strh	r2, [r0, #14]
 800d1b6:	6183      	str	r3, [r0, #24]
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	2208      	movs	r2, #8
 800d1bc:	305c      	adds	r0, #92	@ 0x5c
 800d1be:	f000 f8f4 	bl	800d3aa <memset>
 800d1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f8 <std+0x58>)
 800d1c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1fc <std+0x5c>)
 800d1c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d200 <std+0x60>)
 800d1cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d204 <std+0x64>)
 800d1d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d208 <std+0x68>)
 800d1d4:	6224      	str	r4, [r4, #32]
 800d1d6:	429c      	cmp	r4, r3
 800d1d8:	d006      	beq.n	800d1e8 <std+0x48>
 800d1da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d1de:	4294      	cmp	r4, r2
 800d1e0:	d002      	beq.n	800d1e8 <std+0x48>
 800d1e2:	33d0      	adds	r3, #208	@ 0xd0
 800d1e4:	429c      	cmp	r4, r3
 800d1e6:	d105      	bne.n	800d1f4 <std+0x54>
 800d1e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1f0:	f000 b954 	b.w	800d49c <__retarget_lock_init_recursive>
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	bf00      	nop
 800d1f8:	0800d325 	.word	0x0800d325
 800d1fc:	0800d347 	.word	0x0800d347
 800d200:	0800d37f 	.word	0x0800d37f
 800d204:	0800d3a3 	.word	0x0800d3a3
 800d208:	20001aa4 	.word	0x20001aa4

0800d20c <stdio_exit_handler>:
 800d20c:	4a02      	ldr	r2, [pc, #8]	@ (800d218 <stdio_exit_handler+0xc>)
 800d20e:	4903      	ldr	r1, [pc, #12]	@ (800d21c <stdio_exit_handler+0x10>)
 800d210:	4803      	ldr	r0, [pc, #12]	@ (800d220 <stdio_exit_handler+0x14>)
 800d212:	f000 b869 	b.w	800d2e8 <_fwalk_sglue>
 800d216:	bf00      	nop
 800d218:	20000168 	.word	0x20000168
 800d21c:	0800db1d 	.word	0x0800db1d
 800d220:	20000178 	.word	0x20000178

0800d224 <cleanup_stdio>:
 800d224:	6841      	ldr	r1, [r0, #4]
 800d226:	4b0c      	ldr	r3, [pc, #48]	@ (800d258 <cleanup_stdio+0x34>)
 800d228:	4299      	cmp	r1, r3
 800d22a:	b510      	push	{r4, lr}
 800d22c:	4604      	mov	r4, r0
 800d22e:	d001      	beq.n	800d234 <cleanup_stdio+0x10>
 800d230:	f000 fc74 	bl	800db1c <_fflush_r>
 800d234:	68a1      	ldr	r1, [r4, #8]
 800d236:	4b09      	ldr	r3, [pc, #36]	@ (800d25c <cleanup_stdio+0x38>)
 800d238:	4299      	cmp	r1, r3
 800d23a:	d002      	beq.n	800d242 <cleanup_stdio+0x1e>
 800d23c:	4620      	mov	r0, r4
 800d23e:	f000 fc6d 	bl	800db1c <_fflush_r>
 800d242:	68e1      	ldr	r1, [r4, #12]
 800d244:	4b06      	ldr	r3, [pc, #24]	@ (800d260 <cleanup_stdio+0x3c>)
 800d246:	4299      	cmp	r1, r3
 800d248:	d004      	beq.n	800d254 <cleanup_stdio+0x30>
 800d24a:	4620      	mov	r0, r4
 800d24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d250:	f000 bc64 	b.w	800db1c <_fflush_r>
 800d254:	bd10      	pop	{r4, pc}
 800d256:	bf00      	nop
 800d258:	20001aa4 	.word	0x20001aa4
 800d25c:	20001b0c 	.word	0x20001b0c
 800d260:	20001b74 	.word	0x20001b74

0800d264 <global_stdio_init.part.0>:
 800d264:	b510      	push	{r4, lr}
 800d266:	4b0b      	ldr	r3, [pc, #44]	@ (800d294 <global_stdio_init.part.0+0x30>)
 800d268:	4c0b      	ldr	r4, [pc, #44]	@ (800d298 <global_stdio_init.part.0+0x34>)
 800d26a:	4a0c      	ldr	r2, [pc, #48]	@ (800d29c <global_stdio_init.part.0+0x38>)
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	4620      	mov	r0, r4
 800d270:	2200      	movs	r2, #0
 800d272:	2104      	movs	r1, #4
 800d274:	f7ff ff94 	bl	800d1a0 <std>
 800d278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d27c:	2201      	movs	r2, #1
 800d27e:	2109      	movs	r1, #9
 800d280:	f7ff ff8e 	bl	800d1a0 <std>
 800d284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d288:	2202      	movs	r2, #2
 800d28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d28e:	2112      	movs	r1, #18
 800d290:	f7ff bf86 	b.w	800d1a0 <std>
 800d294:	20001bdc 	.word	0x20001bdc
 800d298:	20001aa4 	.word	0x20001aa4
 800d29c:	0800d20d 	.word	0x0800d20d

0800d2a0 <__sfp_lock_acquire>:
 800d2a0:	4801      	ldr	r0, [pc, #4]	@ (800d2a8 <__sfp_lock_acquire+0x8>)
 800d2a2:	f000 b8fc 	b.w	800d49e <__retarget_lock_acquire_recursive>
 800d2a6:	bf00      	nop
 800d2a8:	20001be5 	.word	0x20001be5

0800d2ac <__sfp_lock_release>:
 800d2ac:	4801      	ldr	r0, [pc, #4]	@ (800d2b4 <__sfp_lock_release+0x8>)
 800d2ae:	f000 b8f7 	b.w	800d4a0 <__retarget_lock_release_recursive>
 800d2b2:	bf00      	nop
 800d2b4:	20001be5 	.word	0x20001be5

0800d2b8 <__sinit>:
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	f7ff fff0 	bl	800d2a0 <__sfp_lock_acquire>
 800d2c0:	6a23      	ldr	r3, [r4, #32]
 800d2c2:	b11b      	cbz	r3, 800d2cc <__sinit+0x14>
 800d2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c8:	f7ff bff0 	b.w	800d2ac <__sfp_lock_release>
 800d2cc:	4b04      	ldr	r3, [pc, #16]	@ (800d2e0 <__sinit+0x28>)
 800d2ce:	6223      	str	r3, [r4, #32]
 800d2d0:	4b04      	ldr	r3, [pc, #16]	@ (800d2e4 <__sinit+0x2c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1f5      	bne.n	800d2c4 <__sinit+0xc>
 800d2d8:	f7ff ffc4 	bl	800d264 <global_stdio_init.part.0>
 800d2dc:	e7f2      	b.n	800d2c4 <__sinit+0xc>
 800d2de:	bf00      	nop
 800d2e0:	0800d225 	.word	0x0800d225
 800d2e4:	20001bdc 	.word	0x20001bdc

0800d2e8 <_fwalk_sglue>:
 800d2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ec:	4607      	mov	r7, r0
 800d2ee:	4688      	mov	r8, r1
 800d2f0:	4614      	mov	r4, r2
 800d2f2:	2600      	movs	r6, #0
 800d2f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2f8:	f1b9 0901 	subs.w	r9, r9, #1
 800d2fc:	d505      	bpl.n	800d30a <_fwalk_sglue+0x22>
 800d2fe:	6824      	ldr	r4, [r4, #0]
 800d300:	2c00      	cmp	r4, #0
 800d302:	d1f7      	bne.n	800d2f4 <_fwalk_sglue+0xc>
 800d304:	4630      	mov	r0, r6
 800d306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d30a:	89ab      	ldrh	r3, [r5, #12]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d907      	bls.n	800d320 <_fwalk_sglue+0x38>
 800d310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d314:	3301      	adds	r3, #1
 800d316:	d003      	beq.n	800d320 <_fwalk_sglue+0x38>
 800d318:	4629      	mov	r1, r5
 800d31a:	4638      	mov	r0, r7
 800d31c:	47c0      	blx	r8
 800d31e:	4306      	orrs	r6, r0
 800d320:	3568      	adds	r5, #104	@ 0x68
 800d322:	e7e9      	b.n	800d2f8 <_fwalk_sglue+0x10>

0800d324 <__sread>:
 800d324:	b510      	push	{r4, lr}
 800d326:	460c      	mov	r4, r1
 800d328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32c:	f000 f868 	bl	800d400 <_read_r>
 800d330:	2800      	cmp	r0, #0
 800d332:	bfab      	itete	ge
 800d334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d336:	89a3      	ldrhlt	r3, [r4, #12]
 800d338:	181b      	addge	r3, r3, r0
 800d33a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d33e:	bfac      	ite	ge
 800d340:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d342:	81a3      	strhlt	r3, [r4, #12]
 800d344:	bd10      	pop	{r4, pc}

0800d346 <__swrite>:
 800d346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d34a:	461f      	mov	r7, r3
 800d34c:	898b      	ldrh	r3, [r1, #12]
 800d34e:	05db      	lsls	r3, r3, #23
 800d350:	4605      	mov	r5, r0
 800d352:	460c      	mov	r4, r1
 800d354:	4616      	mov	r6, r2
 800d356:	d505      	bpl.n	800d364 <__swrite+0x1e>
 800d358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d35c:	2302      	movs	r3, #2
 800d35e:	2200      	movs	r2, #0
 800d360:	f000 f83c 	bl	800d3dc <_lseek_r>
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d36a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d36e:	81a3      	strh	r3, [r4, #12]
 800d370:	4632      	mov	r2, r6
 800d372:	463b      	mov	r3, r7
 800d374:	4628      	mov	r0, r5
 800d376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d37a:	f000 b853 	b.w	800d424 <_write_r>

0800d37e <__sseek>:
 800d37e:	b510      	push	{r4, lr}
 800d380:	460c      	mov	r4, r1
 800d382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d386:	f000 f829 	bl	800d3dc <_lseek_r>
 800d38a:	1c43      	adds	r3, r0, #1
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	bf15      	itete	ne
 800d390:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d39a:	81a3      	strheq	r3, [r4, #12]
 800d39c:	bf18      	it	ne
 800d39e:	81a3      	strhne	r3, [r4, #12]
 800d3a0:	bd10      	pop	{r4, pc}

0800d3a2 <__sclose>:
 800d3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a6:	f000 b809 	b.w	800d3bc <_close_r>

0800d3aa <memset>:
 800d3aa:	4402      	add	r2, r0
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d100      	bne.n	800d3b4 <memset+0xa>
 800d3b2:	4770      	bx	lr
 800d3b4:	f803 1b01 	strb.w	r1, [r3], #1
 800d3b8:	e7f9      	b.n	800d3ae <memset+0x4>
	...

0800d3bc <_close_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4d06      	ldr	r5, [pc, #24]	@ (800d3d8 <_close_r+0x1c>)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	602b      	str	r3, [r5, #0]
 800d3c8:	f7f4 f99c 	bl	8001704 <_close>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_close_r+0x1a>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_close_r+0x1a>
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	20001be0 	.word	0x20001be0

0800d3dc <_lseek_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4d07      	ldr	r5, [pc, #28]	@ (800d3fc <_lseek_r+0x20>)
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	4608      	mov	r0, r1
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	602a      	str	r2, [r5, #0]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	f7f4 f9b1 	bl	8001752 <_lseek>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_lseek_r+0x1e>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_lseek_r+0x1e>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	20001be0 	.word	0x20001be0

0800d400 <_read_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4d07      	ldr	r5, [pc, #28]	@ (800d420 <_read_r+0x20>)
 800d404:	4604      	mov	r4, r0
 800d406:	4608      	mov	r0, r1
 800d408:	4611      	mov	r1, r2
 800d40a:	2200      	movs	r2, #0
 800d40c:	602a      	str	r2, [r5, #0]
 800d40e:	461a      	mov	r2, r3
 800d410:	f7f4 f93f 	bl	8001692 <_read>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_read_r+0x1e>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_read_r+0x1e>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	20001be0 	.word	0x20001be0

0800d424 <_write_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4d07      	ldr	r5, [pc, #28]	@ (800d444 <_write_r+0x20>)
 800d428:	4604      	mov	r4, r0
 800d42a:	4608      	mov	r0, r1
 800d42c:	4611      	mov	r1, r2
 800d42e:	2200      	movs	r2, #0
 800d430:	602a      	str	r2, [r5, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f7f4 f94a 	bl	80016cc <_write>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_write_r+0x1e>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_write_r+0x1e>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	20001be0 	.word	0x20001be0

0800d448 <__errno>:
 800d448:	4b01      	ldr	r3, [pc, #4]	@ (800d450 <__errno+0x8>)
 800d44a:	6818      	ldr	r0, [r3, #0]
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	20000174 	.word	0x20000174

0800d454 <__libc_init_array>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	4d0d      	ldr	r5, [pc, #52]	@ (800d48c <__libc_init_array+0x38>)
 800d458:	4c0d      	ldr	r4, [pc, #52]	@ (800d490 <__libc_init_array+0x3c>)
 800d45a:	1b64      	subs	r4, r4, r5
 800d45c:	10a4      	asrs	r4, r4, #2
 800d45e:	2600      	movs	r6, #0
 800d460:	42a6      	cmp	r6, r4
 800d462:	d109      	bne.n	800d478 <__libc_init_array+0x24>
 800d464:	4d0b      	ldr	r5, [pc, #44]	@ (800d494 <__libc_init_array+0x40>)
 800d466:	4c0c      	ldr	r4, [pc, #48]	@ (800d498 <__libc_init_array+0x44>)
 800d468:	f000 fe46 	bl	800e0f8 <_init>
 800d46c:	1b64      	subs	r4, r4, r5
 800d46e:	10a4      	asrs	r4, r4, #2
 800d470:	2600      	movs	r6, #0
 800d472:	42a6      	cmp	r6, r4
 800d474:	d105      	bne.n	800d482 <__libc_init_array+0x2e>
 800d476:	bd70      	pop	{r4, r5, r6, pc}
 800d478:	f855 3b04 	ldr.w	r3, [r5], #4
 800d47c:	4798      	blx	r3
 800d47e:	3601      	adds	r6, #1
 800d480:	e7ee      	b.n	800d460 <__libc_init_array+0xc>
 800d482:	f855 3b04 	ldr.w	r3, [r5], #4
 800d486:	4798      	blx	r3
 800d488:	3601      	adds	r6, #1
 800d48a:	e7f2      	b.n	800d472 <__libc_init_array+0x1e>
 800d48c:	0800e280 	.word	0x0800e280
 800d490:	0800e280 	.word	0x0800e280
 800d494:	0800e280 	.word	0x0800e280
 800d498:	0800e284 	.word	0x0800e284

0800d49c <__retarget_lock_init_recursive>:
 800d49c:	4770      	bx	lr

0800d49e <__retarget_lock_acquire_recursive>:
 800d49e:	4770      	bx	lr

0800d4a0 <__retarget_lock_release_recursive>:
 800d4a0:	4770      	bx	lr

0800d4a2 <memcpy>:
 800d4a2:	440a      	add	r2, r1
 800d4a4:	4291      	cmp	r1, r2
 800d4a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4aa:	d100      	bne.n	800d4ae <memcpy+0xc>
 800d4ac:	4770      	bx	lr
 800d4ae:	b510      	push	{r4, lr}
 800d4b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4b8:	4291      	cmp	r1, r2
 800d4ba:	d1f9      	bne.n	800d4b0 <memcpy+0xe>
 800d4bc:	bd10      	pop	{r4, pc}
	...

0800d4c0 <__assert_func>:
 800d4c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4c2:	4614      	mov	r4, r2
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4b09      	ldr	r3, [pc, #36]	@ (800d4ec <__assert_func+0x2c>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	68d8      	ldr	r0, [r3, #12]
 800d4ce:	b14c      	cbz	r4, 800d4e4 <__assert_func+0x24>
 800d4d0:	4b07      	ldr	r3, [pc, #28]	@ (800d4f0 <__assert_func+0x30>)
 800d4d2:	9100      	str	r1, [sp, #0]
 800d4d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4d8:	4906      	ldr	r1, [pc, #24]	@ (800d4f4 <__assert_func+0x34>)
 800d4da:	462b      	mov	r3, r5
 800d4dc:	f000 fb46 	bl	800db6c <fiprintf>
 800d4e0:	f000 fb66 	bl	800dbb0 <abort>
 800d4e4:	4b04      	ldr	r3, [pc, #16]	@ (800d4f8 <__assert_func+0x38>)
 800d4e6:	461c      	mov	r4, r3
 800d4e8:	e7f3      	b.n	800d4d2 <__assert_func+0x12>
 800d4ea:	bf00      	nop
 800d4ec:	20000174 	.word	0x20000174
 800d4f0:	0800e207 	.word	0x0800e207
 800d4f4:	0800e214 	.word	0x0800e214
 800d4f8:	0800e242 	.word	0x0800e242

0800d4fc <_free_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	4605      	mov	r5, r0
 800d500:	2900      	cmp	r1, #0
 800d502:	d041      	beq.n	800d588 <_free_r+0x8c>
 800d504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d508:	1f0c      	subs	r4, r1, #4
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfb8      	it	lt
 800d50e:	18e4      	addlt	r4, r4, r3
 800d510:	f000 f8e8 	bl	800d6e4 <__malloc_lock>
 800d514:	4a1d      	ldr	r2, [pc, #116]	@ (800d58c <_free_r+0x90>)
 800d516:	6813      	ldr	r3, [r2, #0]
 800d518:	b933      	cbnz	r3, 800d528 <_free_r+0x2c>
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	6014      	str	r4, [r2, #0]
 800d51e:	4628      	mov	r0, r5
 800d520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d524:	f000 b8e4 	b.w	800d6f0 <__malloc_unlock>
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d908      	bls.n	800d53e <_free_r+0x42>
 800d52c:	6820      	ldr	r0, [r4, #0]
 800d52e:	1821      	adds	r1, r4, r0
 800d530:	428b      	cmp	r3, r1
 800d532:	bf01      	itttt	eq
 800d534:	6819      	ldreq	r1, [r3, #0]
 800d536:	685b      	ldreq	r3, [r3, #4]
 800d538:	1809      	addeq	r1, r1, r0
 800d53a:	6021      	streq	r1, [r4, #0]
 800d53c:	e7ed      	b.n	800d51a <_free_r+0x1e>
 800d53e:	461a      	mov	r2, r3
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	b10b      	cbz	r3, 800d548 <_free_r+0x4c>
 800d544:	42a3      	cmp	r3, r4
 800d546:	d9fa      	bls.n	800d53e <_free_r+0x42>
 800d548:	6811      	ldr	r1, [r2, #0]
 800d54a:	1850      	adds	r0, r2, r1
 800d54c:	42a0      	cmp	r0, r4
 800d54e:	d10b      	bne.n	800d568 <_free_r+0x6c>
 800d550:	6820      	ldr	r0, [r4, #0]
 800d552:	4401      	add	r1, r0
 800d554:	1850      	adds	r0, r2, r1
 800d556:	4283      	cmp	r3, r0
 800d558:	6011      	str	r1, [r2, #0]
 800d55a:	d1e0      	bne.n	800d51e <_free_r+0x22>
 800d55c:	6818      	ldr	r0, [r3, #0]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	6053      	str	r3, [r2, #4]
 800d562:	4408      	add	r0, r1
 800d564:	6010      	str	r0, [r2, #0]
 800d566:	e7da      	b.n	800d51e <_free_r+0x22>
 800d568:	d902      	bls.n	800d570 <_free_r+0x74>
 800d56a:	230c      	movs	r3, #12
 800d56c:	602b      	str	r3, [r5, #0]
 800d56e:	e7d6      	b.n	800d51e <_free_r+0x22>
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	1821      	adds	r1, r4, r0
 800d574:	428b      	cmp	r3, r1
 800d576:	bf04      	itt	eq
 800d578:	6819      	ldreq	r1, [r3, #0]
 800d57a:	685b      	ldreq	r3, [r3, #4]
 800d57c:	6063      	str	r3, [r4, #4]
 800d57e:	bf04      	itt	eq
 800d580:	1809      	addeq	r1, r1, r0
 800d582:	6021      	streq	r1, [r4, #0]
 800d584:	6054      	str	r4, [r2, #4]
 800d586:	e7ca      	b.n	800d51e <_free_r+0x22>
 800d588:	bd38      	pop	{r3, r4, r5, pc}
 800d58a:	bf00      	nop
 800d58c:	20001bec 	.word	0x20001bec

0800d590 <malloc>:
 800d590:	4b02      	ldr	r3, [pc, #8]	@ (800d59c <malloc+0xc>)
 800d592:	4601      	mov	r1, r0
 800d594:	6818      	ldr	r0, [r3, #0]
 800d596:	f000 b825 	b.w	800d5e4 <_malloc_r>
 800d59a:	bf00      	nop
 800d59c:	20000174 	.word	0x20000174

0800d5a0 <sbrk_aligned>:
 800d5a0:	b570      	push	{r4, r5, r6, lr}
 800d5a2:	4e0f      	ldr	r6, [pc, #60]	@ (800d5e0 <sbrk_aligned+0x40>)
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	6831      	ldr	r1, [r6, #0]
 800d5a8:	4605      	mov	r5, r0
 800d5aa:	b911      	cbnz	r1, 800d5b2 <sbrk_aligned+0x12>
 800d5ac:	f000 faf0 	bl	800db90 <_sbrk_r>
 800d5b0:	6030      	str	r0, [r6, #0]
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	f000 faeb 	bl	800db90 <_sbrk_r>
 800d5ba:	1c43      	adds	r3, r0, #1
 800d5bc:	d103      	bne.n	800d5c6 <sbrk_aligned+0x26>
 800d5be:	f04f 34ff 	mov.w	r4, #4294967295
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	bd70      	pop	{r4, r5, r6, pc}
 800d5c6:	1cc4      	adds	r4, r0, #3
 800d5c8:	f024 0403 	bic.w	r4, r4, #3
 800d5cc:	42a0      	cmp	r0, r4
 800d5ce:	d0f8      	beq.n	800d5c2 <sbrk_aligned+0x22>
 800d5d0:	1a21      	subs	r1, r4, r0
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f000 fadc 	bl	800db90 <_sbrk_r>
 800d5d8:	3001      	adds	r0, #1
 800d5da:	d1f2      	bne.n	800d5c2 <sbrk_aligned+0x22>
 800d5dc:	e7ef      	b.n	800d5be <sbrk_aligned+0x1e>
 800d5de:	bf00      	nop
 800d5e0:	20001be8 	.word	0x20001be8

0800d5e4 <_malloc_r>:
 800d5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	1ccd      	adds	r5, r1, #3
 800d5ea:	f025 0503 	bic.w	r5, r5, #3
 800d5ee:	3508      	adds	r5, #8
 800d5f0:	2d0c      	cmp	r5, #12
 800d5f2:	bf38      	it	cc
 800d5f4:	250c      	movcc	r5, #12
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	db01      	blt.n	800d600 <_malloc_r+0x1c>
 800d5fc:	42a9      	cmp	r1, r5
 800d5fe:	d904      	bls.n	800d60a <_malloc_r+0x26>
 800d600:	230c      	movs	r3, #12
 800d602:	6033      	str	r3, [r6, #0]
 800d604:	2000      	movs	r0, #0
 800d606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6e0 <_malloc_r+0xfc>
 800d60e:	f000 f869 	bl	800d6e4 <__malloc_lock>
 800d612:	f8d8 3000 	ldr.w	r3, [r8]
 800d616:	461c      	mov	r4, r3
 800d618:	bb44      	cbnz	r4, 800d66c <_malloc_r+0x88>
 800d61a:	4629      	mov	r1, r5
 800d61c:	4630      	mov	r0, r6
 800d61e:	f7ff ffbf 	bl	800d5a0 <sbrk_aligned>
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	4604      	mov	r4, r0
 800d626:	d158      	bne.n	800d6da <_malloc_r+0xf6>
 800d628:	f8d8 4000 	ldr.w	r4, [r8]
 800d62c:	4627      	mov	r7, r4
 800d62e:	2f00      	cmp	r7, #0
 800d630:	d143      	bne.n	800d6ba <_malloc_r+0xd6>
 800d632:	2c00      	cmp	r4, #0
 800d634:	d04b      	beq.n	800d6ce <_malloc_r+0xea>
 800d636:	6823      	ldr	r3, [r4, #0]
 800d638:	4639      	mov	r1, r7
 800d63a:	4630      	mov	r0, r6
 800d63c:	eb04 0903 	add.w	r9, r4, r3
 800d640:	f000 faa6 	bl	800db90 <_sbrk_r>
 800d644:	4581      	cmp	r9, r0
 800d646:	d142      	bne.n	800d6ce <_malloc_r+0xea>
 800d648:	6821      	ldr	r1, [r4, #0]
 800d64a:	1a6d      	subs	r5, r5, r1
 800d64c:	4629      	mov	r1, r5
 800d64e:	4630      	mov	r0, r6
 800d650:	f7ff ffa6 	bl	800d5a0 <sbrk_aligned>
 800d654:	3001      	adds	r0, #1
 800d656:	d03a      	beq.n	800d6ce <_malloc_r+0xea>
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	442b      	add	r3, r5
 800d65c:	6023      	str	r3, [r4, #0]
 800d65e:	f8d8 3000 	ldr.w	r3, [r8]
 800d662:	685a      	ldr	r2, [r3, #4]
 800d664:	bb62      	cbnz	r2, 800d6c0 <_malloc_r+0xdc>
 800d666:	f8c8 7000 	str.w	r7, [r8]
 800d66a:	e00f      	b.n	800d68c <_malloc_r+0xa8>
 800d66c:	6822      	ldr	r2, [r4, #0]
 800d66e:	1b52      	subs	r2, r2, r5
 800d670:	d420      	bmi.n	800d6b4 <_malloc_r+0xd0>
 800d672:	2a0b      	cmp	r2, #11
 800d674:	d917      	bls.n	800d6a6 <_malloc_r+0xc2>
 800d676:	1961      	adds	r1, r4, r5
 800d678:	42a3      	cmp	r3, r4
 800d67a:	6025      	str	r5, [r4, #0]
 800d67c:	bf18      	it	ne
 800d67e:	6059      	strne	r1, [r3, #4]
 800d680:	6863      	ldr	r3, [r4, #4]
 800d682:	bf08      	it	eq
 800d684:	f8c8 1000 	streq.w	r1, [r8]
 800d688:	5162      	str	r2, [r4, r5]
 800d68a:	604b      	str	r3, [r1, #4]
 800d68c:	4630      	mov	r0, r6
 800d68e:	f000 f82f 	bl	800d6f0 <__malloc_unlock>
 800d692:	f104 000b 	add.w	r0, r4, #11
 800d696:	1d23      	adds	r3, r4, #4
 800d698:	f020 0007 	bic.w	r0, r0, #7
 800d69c:	1ac2      	subs	r2, r0, r3
 800d69e:	bf1c      	itt	ne
 800d6a0:	1a1b      	subne	r3, r3, r0
 800d6a2:	50a3      	strne	r3, [r4, r2]
 800d6a4:	e7af      	b.n	800d606 <_malloc_r+0x22>
 800d6a6:	6862      	ldr	r2, [r4, #4]
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	bf0c      	ite	eq
 800d6ac:	f8c8 2000 	streq.w	r2, [r8]
 800d6b0:	605a      	strne	r2, [r3, #4]
 800d6b2:	e7eb      	b.n	800d68c <_malloc_r+0xa8>
 800d6b4:	4623      	mov	r3, r4
 800d6b6:	6864      	ldr	r4, [r4, #4]
 800d6b8:	e7ae      	b.n	800d618 <_malloc_r+0x34>
 800d6ba:	463c      	mov	r4, r7
 800d6bc:	687f      	ldr	r7, [r7, #4]
 800d6be:	e7b6      	b.n	800d62e <_malloc_r+0x4a>
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	d1fb      	bne.n	800d6c0 <_malloc_r+0xdc>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	6053      	str	r3, [r2, #4]
 800d6cc:	e7de      	b.n	800d68c <_malloc_r+0xa8>
 800d6ce:	230c      	movs	r3, #12
 800d6d0:	6033      	str	r3, [r6, #0]
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f000 f80c 	bl	800d6f0 <__malloc_unlock>
 800d6d8:	e794      	b.n	800d604 <_malloc_r+0x20>
 800d6da:	6005      	str	r5, [r0, #0]
 800d6dc:	e7d6      	b.n	800d68c <_malloc_r+0xa8>
 800d6de:	bf00      	nop
 800d6e0:	20001bec 	.word	0x20001bec

0800d6e4 <__malloc_lock>:
 800d6e4:	4801      	ldr	r0, [pc, #4]	@ (800d6ec <__malloc_lock+0x8>)
 800d6e6:	f7ff beda 	b.w	800d49e <__retarget_lock_acquire_recursive>
 800d6ea:	bf00      	nop
 800d6ec:	20001be4 	.word	0x20001be4

0800d6f0 <__malloc_unlock>:
 800d6f0:	4801      	ldr	r0, [pc, #4]	@ (800d6f8 <__malloc_unlock+0x8>)
 800d6f2:	f7ff bed5 	b.w	800d4a0 <__retarget_lock_release_recursive>
 800d6f6:	bf00      	nop
 800d6f8:	20001be4 	.word	0x20001be4

0800d6fc <_printf_common>:
 800d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d700:	4616      	mov	r6, r2
 800d702:	4698      	mov	r8, r3
 800d704:	688a      	ldr	r2, [r1, #8]
 800d706:	690b      	ldr	r3, [r1, #16]
 800d708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d70c:	4293      	cmp	r3, r2
 800d70e:	bfb8      	it	lt
 800d710:	4613      	movlt	r3, r2
 800d712:	6033      	str	r3, [r6, #0]
 800d714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d718:	4607      	mov	r7, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	b10a      	cbz	r2, 800d722 <_printf_common+0x26>
 800d71e:	3301      	adds	r3, #1
 800d720:	6033      	str	r3, [r6, #0]
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	0699      	lsls	r1, r3, #26
 800d726:	bf42      	ittt	mi
 800d728:	6833      	ldrmi	r3, [r6, #0]
 800d72a:	3302      	addmi	r3, #2
 800d72c:	6033      	strmi	r3, [r6, #0]
 800d72e:	6825      	ldr	r5, [r4, #0]
 800d730:	f015 0506 	ands.w	r5, r5, #6
 800d734:	d106      	bne.n	800d744 <_printf_common+0x48>
 800d736:	f104 0a19 	add.w	sl, r4, #25
 800d73a:	68e3      	ldr	r3, [r4, #12]
 800d73c:	6832      	ldr	r2, [r6, #0]
 800d73e:	1a9b      	subs	r3, r3, r2
 800d740:	42ab      	cmp	r3, r5
 800d742:	dc26      	bgt.n	800d792 <_printf_common+0x96>
 800d744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d748:	6822      	ldr	r2, [r4, #0]
 800d74a:	3b00      	subs	r3, #0
 800d74c:	bf18      	it	ne
 800d74e:	2301      	movne	r3, #1
 800d750:	0692      	lsls	r2, r2, #26
 800d752:	d42b      	bmi.n	800d7ac <_printf_common+0xb0>
 800d754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d758:	4641      	mov	r1, r8
 800d75a:	4638      	mov	r0, r7
 800d75c:	47c8      	blx	r9
 800d75e:	3001      	adds	r0, #1
 800d760:	d01e      	beq.n	800d7a0 <_printf_common+0xa4>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	6922      	ldr	r2, [r4, #16]
 800d766:	f003 0306 	and.w	r3, r3, #6
 800d76a:	2b04      	cmp	r3, #4
 800d76c:	bf02      	ittt	eq
 800d76e:	68e5      	ldreq	r5, [r4, #12]
 800d770:	6833      	ldreq	r3, [r6, #0]
 800d772:	1aed      	subeq	r5, r5, r3
 800d774:	68a3      	ldr	r3, [r4, #8]
 800d776:	bf0c      	ite	eq
 800d778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d77c:	2500      	movne	r5, #0
 800d77e:	4293      	cmp	r3, r2
 800d780:	bfc4      	itt	gt
 800d782:	1a9b      	subgt	r3, r3, r2
 800d784:	18ed      	addgt	r5, r5, r3
 800d786:	2600      	movs	r6, #0
 800d788:	341a      	adds	r4, #26
 800d78a:	42b5      	cmp	r5, r6
 800d78c:	d11a      	bne.n	800d7c4 <_printf_common+0xc8>
 800d78e:	2000      	movs	r0, #0
 800d790:	e008      	b.n	800d7a4 <_printf_common+0xa8>
 800d792:	2301      	movs	r3, #1
 800d794:	4652      	mov	r2, sl
 800d796:	4641      	mov	r1, r8
 800d798:	4638      	mov	r0, r7
 800d79a:	47c8      	blx	r9
 800d79c:	3001      	adds	r0, #1
 800d79e:	d103      	bne.n	800d7a8 <_printf_common+0xac>
 800d7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a8:	3501      	adds	r5, #1
 800d7aa:	e7c6      	b.n	800d73a <_printf_common+0x3e>
 800d7ac:	18e1      	adds	r1, r4, r3
 800d7ae:	1c5a      	adds	r2, r3, #1
 800d7b0:	2030      	movs	r0, #48	@ 0x30
 800d7b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7b6:	4422      	add	r2, r4
 800d7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7c0:	3302      	adds	r3, #2
 800d7c2:	e7c7      	b.n	800d754 <_printf_common+0x58>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	4622      	mov	r2, r4
 800d7c8:	4641      	mov	r1, r8
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	47c8      	blx	r9
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d0e6      	beq.n	800d7a0 <_printf_common+0xa4>
 800d7d2:	3601      	adds	r6, #1
 800d7d4:	e7d9      	b.n	800d78a <_printf_common+0x8e>
	...

0800d7d8 <_printf_i>:
 800d7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7dc:	7e0f      	ldrb	r7, [r1, #24]
 800d7de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7e0:	2f78      	cmp	r7, #120	@ 0x78
 800d7e2:	4691      	mov	r9, r2
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	469a      	mov	sl, r3
 800d7ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7ee:	d807      	bhi.n	800d800 <_printf_i+0x28>
 800d7f0:	2f62      	cmp	r7, #98	@ 0x62
 800d7f2:	d80a      	bhi.n	800d80a <_printf_i+0x32>
 800d7f4:	2f00      	cmp	r7, #0
 800d7f6:	f000 80d1 	beq.w	800d99c <_printf_i+0x1c4>
 800d7fa:	2f58      	cmp	r7, #88	@ 0x58
 800d7fc:	f000 80b8 	beq.w	800d970 <_printf_i+0x198>
 800d800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d808:	e03a      	b.n	800d880 <_printf_i+0xa8>
 800d80a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d80e:	2b15      	cmp	r3, #21
 800d810:	d8f6      	bhi.n	800d800 <_printf_i+0x28>
 800d812:	a101      	add	r1, pc, #4	@ (adr r1, 800d818 <_printf_i+0x40>)
 800d814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d818:	0800d871 	.word	0x0800d871
 800d81c:	0800d885 	.word	0x0800d885
 800d820:	0800d801 	.word	0x0800d801
 800d824:	0800d801 	.word	0x0800d801
 800d828:	0800d801 	.word	0x0800d801
 800d82c:	0800d801 	.word	0x0800d801
 800d830:	0800d885 	.word	0x0800d885
 800d834:	0800d801 	.word	0x0800d801
 800d838:	0800d801 	.word	0x0800d801
 800d83c:	0800d801 	.word	0x0800d801
 800d840:	0800d801 	.word	0x0800d801
 800d844:	0800d983 	.word	0x0800d983
 800d848:	0800d8af 	.word	0x0800d8af
 800d84c:	0800d93d 	.word	0x0800d93d
 800d850:	0800d801 	.word	0x0800d801
 800d854:	0800d801 	.word	0x0800d801
 800d858:	0800d9a5 	.word	0x0800d9a5
 800d85c:	0800d801 	.word	0x0800d801
 800d860:	0800d8af 	.word	0x0800d8af
 800d864:	0800d801 	.word	0x0800d801
 800d868:	0800d801 	.word	0x0800d801
 800d86c:	0800d945 	.word	0x0800d945
 800d870:	6833      	ldr	r3, [r6, #0]
 800d872:	1d1a      	adds	r2, r3, #4
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6032      	str	r2, [r6, #0]
 800d878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d87c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d880:	2301      	movs	r3, #1
 800d882:	e09c      	b.n	800d9be <_printf_i+0x1e6>
 800d884:	6833      	ldr	r3, [r6, #0]
 800d886:	6820      	ldr	r0, [r4, #0]
 800d888:	1d19      	adds	r1, r3, #4
 800d88a:	6031      	str	r1, [r6, #0]
 800d88c:	0606      	lsls	r6, r0, #24
 800d88e:	d501      	bpl.n	800d894 <_printf_i+0xbc>
 800d890:	681d      	ldr	r5, [r3, #0]
 800d892:	e003      	b.n	800d89c <_printf_i+0xc4>
 800d894:	0645      	lsls	r5, r0, #25
 800d896:	d5fb      	bpl.n	800d890 <_printf_i+0xb8>
 800d898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d89c:	2d00      	cmp	r5, #0
 800d89e:	da03      	bge.n	800d8a8 <_printf_i+0xd0>
 800d8a0:	232d      	movs	r3, #45	@ 0x2d
 800d8a2:	426d      	negs	r5, r5
 800d8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8a8:	4858      	ldr	r0, [pc, #352]	@ (800da0c <_printf_i+0x234>)
 800d8aa:	230a      	movs	r3, #10
 800d8ac:	e011      	b.n	800d8d2 <_printf_i+0xfa>
 800d8ae:	6821      	ldr	r1, [r4, #0]
 800d8b0:	6833      	ldr	r3, [r6, #0]
 800d8b2:	0608      	lsls	r0, r1, #24
 800d8b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8b8:	d402      	bmi.n	800d8c0 <_printf_i+0xe8>
 800d8ba:	0649      	lsls	r1, r1, #25
 800d8bc:	bf48      	it	mi
 800d8be:	b2ad      	uxthmi	r5, r5
 800d8c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8c2:	4852      	ldr	r0, [pc, #328]	@ (800da0c <_printf_i+0x234>)
 800d8c4:	6033      	str	r3, [r6, #0]
 800d8c6:	bf14      	ite	ne
 800d8c8:	230a      	movne	r3, #10
 800d8ca:	2308      	moveq	r3, #8
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d8d2:	6866      	ldr	r6, [r4, #4]
 800d8d4:	60a6      	str	r6, [r4, #8]
 800d8d6:	2e00      	cmp	r6, #0
 800d8d8:	db05      	blt.n	800d8e6 <_printf_i+0x10e>
 800d8da:	6821      	ldr	r1, [r4, #0]
 800d8dc:	432e      	orrs	r6, r5
 800d8de:	f021 0104 	bic.w	r1, r1, #4
 800d8e2:	6021      	str	r1, [r4, #0]
 800d8e4:	d04b      	beq.n	800d97e <_printf_i+0x1a6>
 800d8e6:	4616      	mov	r6, r2
 800d8e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8ec:	fb03 5711 	mls	r7, r3, r1, r5
 800d8f0:	5dc7      	ldrb	r7, [r0, r7]
 800d8f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8f6:	462f      	mov	r7, r5
 800d8f8:	42bb      	cmp	r3, r7
 800d8fa:	460d      	mov	r5, r1
 800d8fc:	d9f4      	bls.n	800d8e8 <_printf_i+0x110>
 800d8fe:	2b08      	cmp	r3, #8
 800d900:	d10b      	bne.n	800d91a <_printf_i+0x142>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	07df      	lsls	r7, r3, #31
 800d906:	d508      	bpl.n	800d91a <_printf_i+0x142>
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	6861      	ldr	r1, [r4, #4]
 800d90c:	4299      	cmp	r1, r3
 800d90e:	bfde      	ittt	le
 800d910:	2330      	movle	r3, #48	@ 0x30
 800d912:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d916:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d91a:	1b92      	subs	r2, r2, r6
 800d91c:	6122      	str	r2, [r4, #16]
 800d91e:	f8cd a000 	str.w	sl, [sp]
 800d922:	464b      	mov	r3, r9
 800d924:	aa03      	add	r2, sp, #12
 800d926:	4621      	mov	r1, r4
 800d928:	4640      	mov	r0, r8
 800d92a:	f7ff fee7 	bl	800d6fc <_printf_common>
 800d92e:	3001      	adds	r0, #1
 800d930:	d14a      	bne.n	800d9c8 <_printf_i+0x1f0>
 800d932:	f04f 30ff 	mov.w	r0, #4294967295
 800d936:	b004      	add	sp, #16
 800d938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	f043 0320 	orr.w	r3, r3, #32
 800d942:	6023      	str	r3, [r4, #0]
 800d944:	4832      	ldr	r0, [pc, #200]	@ (800da10 <_printf_i+0x238>)
 800d946:	2778      	movs	r7, #120	@ 0x78
 800d948:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	6831      	ldr	r1, [r6, #0]
 800d950:	061f      	lsls	r7, r3, #24
 800d952:	f851 5b04 	ldr.w	r5, [r1], #4
 800d956:	d402      	bmi.n	800d95e <_printf_i+0x186>
 800d958:	065f      	lsls	r7, r3, #25
 800d95a:	bf48      	it	mi
 800d95c:	b2ad      	uxthmi	r5, r5
 800d95e:	6031      	str	r1, [r6, #0]
 800d960:	07d9      	lsls	r1, r3, #31
 800d962:	bf44      	itt	mi
 800d964:	f043 0320 	orrmi.w	r3, r3, #32
 800d968:	6023      	strmi	r3, [r4, #0]
 800d96a:	b11d      	cbz	r5, 800d974 <_printf_i+0x19c>
 800d96c:	2310      	movs	r3, #16
 800d96e:	e7ad      	b.n	800d8cc <_printf_i+0xf4>
 800d970:	4826      	ldr	r0, [pc, #152]	@ (800da0c <_printf_i+0x234>)
 800d972:	e7e9      	b.n	800d948 <_printf_i+0x170>
 800d974:	6823      	ldr	r3, [r4, #0]
 800d976:	f023 0320 	bic.w	r3, r3, #32
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	e7f6      	b.n	800d96c <_printf_i+0x194>
 800d97e:	4616      	mov	r6, r2
 800d980:	e7bd      	b.n	800d8fe <_printf_i+0x126>
 800d982:	6833      	ldr	r3, [r6, #0]
 800d984:	6825      	ldr	r5, [r4, #0]
 800d986:	6961      	ldr	r1, [r4, #20]
 800d988:	1d18      	adds	r0, r3, #4
 800d98a:	6030      	str	r0, [r6, #0]
 800d98c:	062e      	lsls	r6, r5, #24
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	d501      	bpl.n	800d996 <_printf_i+0x1be>
 800d992:	6019      	str	r1, [r3, #0]
 800d994:	e002      	b.n	800d99c <_printf_i+0x1c4>
 800d996:	0668      	lsls	r0, r5, #25
 800d998:	d5fb      	bpl.n	800d992 <_printf_i+0x1ba>
 800d99a:	8019      	strh	r1, [r3, #0]
 800d99c:	2300      	movs	r3, #0
 800d99e:	6123      	str	r3, [r4, #16]
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	e7bc      	b.n	800d91e <_printf_i+0x146>
 800d9a4:	6833      	ldr	r3, [r6, #0]
 800d9a6:	1d1a      	adds	r2, r3, #4
 800d9a8:	6032      	str	r2, [r6, #0]
 800d9aa:	681e      	ldr	r6, [r3, #0]
 800d9ac:	6862      	ldr	r2, [r4, #4]
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f7f2 fc35 	bl	8000220 <memchr>
 800d9b6:	b108      	cbz	r0, 800d9bc <_printf_i+0x1e4>
 800d9b8:	1b80      	subs	r0, r0, r6
 800d9ba:	6060      	str	r0, [r4, #4]
 800d9bc:	6863      	ldr	r3, [r4, #4]
 800d9be:	6123      	str	r3, [r4, #16]
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9c6:	e7aa      	b.n	800d91e <_printf_i+0x146>
 800d9c8:	6923      	ldr	r3, [r4, #16]
 800d9ca:	4632      	mov	r2, r6
 800d9cc:	4649      	mov	r1, r9
 800d9ce:	4640      	mov	r0, r8
 800d9d0:	47d0      	blx	sl
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	d0ad      	beq.n	800d932 <_printf_i+0x15a>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	079b      	lsls	r3, r3, #30
 800d9da:	d413      	bmi.n	800da04 <_printf_i+0x22c>
 800d9dc:	68e0      	ldr	r0, [r4, #12]
 800d9de:	9b03      	ldr	r3, [sp, #12]
 800d9e0:	4298      	cmp	r0, r3
 800d9e2:	bfb8      	it	lt
 800d9e4:	4618      	movlt	r0, r3
 800d9e6:	e7a6      	b.n	800d936 <_printf_i+0x15e>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	4632      	mov	r2, r6
 800d9ec:	4649      	mov	r1, r9
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	47d0      	blx	sl
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	d09d      	beq.n	800d932 <_printf_i+0x15a>
 800d9f6:	3501      	adds	r5, #1
 800d9f8:	68e3      	ldr	r3, [r4, #12]
 800d9fa:	9903      	ldr	r1, [sp, #12]
 800d9fc:	1a5b      	subs	r3, r3, r1
 800d9fe:	42ab      	cmp	r3, r5
 800da00:	dcf2      	bgt.n	800d9e8 <_printf_i+0x210>
 800da02:	e7eb      	b.n	800d9dc <_printf_i+0x204>
 800da04:	2500      	movs	r5, #0
 800da06:	f104 0619 	add.w	r6, r4, #25
 800da0a:	e7f5      	b.n	800d9f8 <_printf_i+0x220>
 800da0c:	0800e243 	.word	0x0800e243
 800da10:	0800e254 	.word	0x0800e254

0800da14 <__sflush_r>:
 800da14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	0716      	lsls	r6, r2, #28
 800da1e:	4605      	mov	r5, r0
 800da20:	460c      	mov	r4, r1
 800da22:	d454      	bmi.n	800dace <__sflush_r+0xba>
 800da24:	684b      	ldr	r3, [r1, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	dc02      	bgt.n	800da30 <__sflush_r+0x1c>
 800da2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	dd48      	ble.n	800dac2 <__sflush_r+0xae>
 800da30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da32:	2e00      	cmp	r6, #0
 800da34:	d045      	beq.n	800dac2 <__sflush_r+0xae>
 800da36:	2300      	movs	r3, #0
 800da38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da3c:	682f      	ldr	r7, [r5, #0]
 800da3e:	6a21      	ldr	r1, [r4, #32]
 800da40:	602b      	str	r3, [r5, #0]
 800da42:	d030      	beq.n	800daa6 <__sflush_r+0x92>
 800da44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da46:	89a3      	ldrh	r3, [r4, #12]
 800da48:	0759      	lsls	r1, r3, #29
 800da4a:	d505      	bpl.n	800da58 <__sflush_r+0x44>
 800da4c:	6863      	ldr	r3, [r4, #4]
 800da4e:	1ad2      	subs	r2, r2, r3
 800da50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da52:	b10b      	cbz	r3, 800da58 <__sflush_r+0x44>
 800da54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	2300      	movs	r3, #0
 800da5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da5c:	6a21      	ldr	r1, [r4, #32]
 800da5e:	4628      	mov	r0, r5
 800da60:	47b0      	blx	r6
 800da62:	1c43      	adds	r3, r0, #1
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	d106      	bne.n	800da76 <__sflush_r+0x62>
 800da68:	6829      	ldr	r1, [r5, #0]
 800da6a:	291d      	cmp	r1, #29
 800da6c:	d82b      	bhi.n	800dac6 <__sflush_r+0xb2>
 800da6e:	4a2a      	ldr	r2, [pc, #168]	@ (800db18 <__sflush_r+0x104>)
 800da70:	40ca      	lsrs	r2, r1
 800da72:	07d6      	lsls	r6, r2, #31
 800da74:	d527      	bpl.n	800dac6 <__sflush_r+0xb2>
 800da76:	2200      	movs	r2, #0
 800da78:	6062      	str	r2, [r4, #4]
 800da7a:	04d9      	lsls	r1, r3, #19
 800da7c:	6922      	ldr	r2, [r4, #16]
 800da7e:	6022      	str	r2, [r4, #0]
 800da80:	d504      	bpl.n	800da8c <__sflush_r+0x78>
 800da82:	1c42      	adds	r2, r0, #1
 800da84:	d101      	bne.n	800da8a <__sflush_r+0x76>
 800da86:	682b      	ldr	r3, [r5, #0]
 800da88:	b903      	cbnz	r3, 800da8c <__sflush_r+0x78>
 800da8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da8e:	602f      	str	r7, [r5, #0]
 800da90:	b1b9      	cbz	r1, 800dac2 <__sflush_r+0xae>
 800da92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da96:	4299      	cmp	r1, r3
 800da98:	d002      	beq.n	800daa0 <__sflush_r+0x8c>
 800da9a:	4628      	mov	r0, r5
 800da9c:	f7ff fd2e 	bl	800d4fc <_free_r>
 800daa0:	2300      	movs	r3, #0
 800daa2:	6363      	str	r3, [r4, #52]	@ 0x34
 800daa4:	e00d      	b.n	800dac2 <__sflush_r+0xae>
 800daa6:	2301      	movs	r3, #1
 800daa8:	4628      	mov	r0, r5
 800daaa:	47b0      	blx	r6
 800daac:	4602      	mov	r2, r0
 800daae:	1c50      	adds	r0, r2, #1
 800dab0:	d1c9      	bne.n	800da46 <__sflush_r+0x32>
 800dab2:	682b      	ldr	r3, [r5, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d0c6      	beq.n	800da46 <__sflush_r+0x32>
 800dab8:	2b1d      	cmp	r3, #29
 800daba:	d001      	beq.n	800dac0 <__sflush_r+0xac>
 800dabc:	2b16      	cmp	r3, #22
 800dabe:	d11e      	bne.n	800dafe <__sflush_r+0xea>
 800dac0:	602f      	str	r7, [r5, #0]
 800dac2:	2000      	movs	r0, #0
 800dac4:	e022      	b.n	800db0c <__sflush_r+0xf8>
 800dac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daca:	b21b      	sxth	r3, r3
 800dacc:	e01b      	b.n	800db06 <__sflush_r+0xf2>
 800dace:	690f      	ldr	r7, [r1, #16]
 800dad0:	2f00      	cmp	r7, #0
 800dad2:	d0f6      	beq.n	800dac2 <__sflush_r+0xae>
 800dad4:	0793      	lsls	r3, r2, #30
 800dad6:	680e      	ldr	r6, [r1, #0]
 800dad8:	bf08      	it	eq
 800dada:	694b      	ldreq	r3, [r1, #20]
 800dadc:	600f      	str	r7, [r1, #0]
 800dade:	bf18      	it	ne
 800dae0:	2300      	movne	r3, #0
 800dae2:	eba6 0807 	sub.w	r8, r6, r7
 800dae6:	608b      	str	r3, [r1, #8]
 800dae8:	f1b8 0f00 	cmp.w	r8, #0
 800daec:	dde9      	ble.n	800dac2 <__sflush_r+0xae>
 800daee:	6a21      	ldr	r1, [r4, #32]
 800daf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800daf2:	4643      	mov	r3, r8
 800daf4:	463a      	mov	r2, r7
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b0      	blx	r6
 800dafa:	2800      	cmp	r0, #0
 800dafc:	dc08      	bgt.n	800db10 <__sflush_r+0xfc>
 800dafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db06:	81a3      	strh	r3, [r4, #12]
 800db08:	f04f 30ff 	mov.w	r0, #4294967295
 800db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db10:	4407      	add	r7, r0
 800db12:	eba8 0800 	sub.w	r8, r8, r0
 800db16:	e7e7      	b.n	800dae8 <__sflush_r+0xd4>
 800db18:	20400001 	.word	0x20400001

0800db1c <_fflush_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	690b      	ldr	r3, [r1, #16]
 800db20:	4605      	mov	r5, r0
 800db22:	460c      	mov	r4, r1
 800db24:	b913      	cbnz	r3, 800db2c <_fflush_r+0x10>
 800db26:	2500      	movs	r5, #0
 800db28:	4628      	mov	r0, r5
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
 800db2c:	b118      	cbz	r0, 800db36 <_fflush_r+0x1a>
 800db2e:	6a03      	ldr	r3, [r0, #32]
 800db30:	b90b      	cbnz	r3, 800db36 <_fflush_r+0x1a>
 800db32:	f7ff fbc1 	bl	800d2b8 <__sinit>
 800db36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d0f3      	beq.n	800db26 <_fflush_r+0xa>
 800db3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db40:	07d0      	lsls	r0, r2, #31
 800db42:	d404      	bmi.n	800db4e <_fflush_r+0x32>
 800db44:	0599      	lsls	r1, r3, #22
 800db46:	d402      	bmi.n	800db4e <_fflush_r+0x32>
 800db48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db4a:	f7ff fca8 	bl	800d49e <__retarget_lock_acquire_recursive>
 800db4e:	4628      	mov	r0, r5
 800db50:	4621      	mov	r1, r4
 800db52:	f7ff ff5f 	bl	800da14 <__sflush_r>
 800db56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db58:	07da      	lsls	r2, r3, #31
 800db5a:	4605      	mov	r5, r0
 800db5c:	d4e4      	bmi.n	800db28 <_fflush_r+0xc>
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	059b      	lsls	r3, r3, #22
 800db62:	d4e1      	bmi.n	800db28 <_fflush_r+0xc>
 800db64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db66:	f7ff fc9b 	bl	800d4a0 <__retarget_lock_release_recursive>
 800db6a:	e7dd      	b.n	800db28 <_fflush_r+0xc>

0800db6c <fiprintf>:
 800db6c:	b40e      	push	{r1, r2, r3}
 800db6e:	b503      	push	{r0, r1, lr}
 800db70:	4601      	mov	r1, r0
 800db72:	ab03      	add	r3, sp, #12
 800db74:	4805      	ldr	r0, [pc, #20]	@ (800db8c <fiprintf+0x20>)
 800db76:	f853 2b04 	ldr.w	r2, [r3], #4
 800db7a:	6800      	ldr	r0, [r0, #0]
 800db7c:	9301      	str	r3, [sp, #4]
 800db7e:	f000 f847 	bl	800dc10 <_vfiprintf_r>
 800db82:	b002      	add	sp, #8
 800db84:	f85d eb04 	ldr.w	lr, [sp], #4
 800db88:	b003      	add	sp, #12
 800db8a:	4770      	bx	lr
 800db8c:	20000174 	.word	0x20000174

0800db90 <_sbrk_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4d06      	ldr	r5, [pc, #24]	@ (800dbac <_sbrk_r+0x1c>)
 800db94:	2300      	movs	r3, #0
 800db96:	4604      	mov	r4, r0
 800db98:	4608      	mov	r0, r1
 800db9a:	602b      	str	r3, [r5, #0]
 800db9c:	f7f3 fde6 	bl	800176c <_sbrk>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_sbrk_r+0x1a>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_sbrk_r+0x1a>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	20001be0 	.word	0x20001be0

0800dbb0 <abort>:
 800dbb0:	b508      	push	{r3, lr}
 800dbb2:	2006      	movs	r0, #6
 800dbb4:	f000 fa00 	bl	800dfb8 <raise>
 800dbb8:	2001      	movs	r0, #1
 800dbba:	f7f3 fd5f 	bl	800167c <_exit>

0800dbbe <__sfputc_r>:
 800dbbe:	6893      	ldr	r3, [r2, #8]
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	b410      	push	{r4}
 800dbc6:	6093      	str	r3, [r2, #8]
 800dbc8:	da08      	bge.n	800dbdc <__sfputc_r+0x1e>
 800dbca:	6994      	ldr	r4, [r2, #24]
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	db01      	blt.n	800dbd4 <__sfputc_r+0x16>
 800dbd0:	290a      	cmp	r1, #10
 800dbd2:	d103      	bne.n	800dbdc <__sfputc_r+0x1e>
 800dbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbd8:	f000 b932 	b.w	800de40 <__swbuf_r>
 800dbdc:	6813      	ldr	r3, [r2, #0]
 800dbde:	1c58      	adds	r0, r3, #1
 800dbe0:	6010      	str	r0, [r2, #0]
 800dbe2:	7019      	strb	r1, [r3, #0]
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <__sfputs_r>:
 800dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbee:	4606      	mov	r6, r0
 800dbf0:	460f      	mov	r7, r1
 800dbf2:	4614      	mov	r4, r2
 800dbf4:	18d5      	adds	r5, r2, r3
 800dbf6:	42ac      	cmp	r4, r5
 800dbf8:	d101      	bne.n	800dbfe <__sfputs_r+0x12>
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	e007      	b.n	800dc0e <__sfputs_r+0x22>
 800dbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc02:	463a      	mov	r2, r7
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7ff ffda 	bl	800dbbe <__sfputc_r>
 800dc0a:	1c43      	adds	r3, r0, #1
 800dc0c:	d1f3      	bne.n	800dbf6 <__sfputs_r+0xa>
 800dc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc10 <_vfiprintf_r>:
 800dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	460d      	mov	r5, r1
 800dc16:	b09d      	sub	sp, #116	@ 0x74
 800dc18:	4614      	mov	r4, r2
 800dc1a:	4698      	mov	r8, r3
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	b118      	cbz	r0, 800dc28 <_vfiprintf_r+0x18>
 800dc20:	6a03      	ldr	r3, [r0, #32]
 800dc22:	b90b      	cbnz	r3, 800dc28 <_vfiprintf_r+0x18>
 800dc24:	f7ff fb48 	bl	800d2b8 <__sinit>
 800dc28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc2a:	07d9      	lsls	r1, r3, #31
 800dc2c:	d405      	bmi.n	800dc3a <_vfiprintf_r+0x2a>
 800dc2e:	89ab      	ldrh	r3, [r5, #12]
 800dc30:	059a      	lsls	r2, r3, #22
 800dc32:	d402      	bmi.n	800dc3a <_vfiprintf_r+0x2a>
 800dc34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc36:	f7ff fc32 	bl	800d49e <__retarget_lock_acquire_recursive>
 800dc3a:	89ab      	ldrh	r3, [r5, #12]
 800dc3c:	071b      	lsls	r3, r3, #28
 800dc3e:	d501      	bpl.n	800dc44 <_vfiprintf_r+0x34>
 800dc40:	692b      	ldr	r3, [r5, #16]
 800dc42:	b99b      	cbnz	r3, 800dc6c <_vfiprintf_r+0x5c>
 800dc44:	4629      	mov	r1, r5
 800dc46:	4630      	mov	r0, r6
 800dc48:	f000 f938 	bl	800debc <__swsetup_r>
 800dc4c:	b170      	cbz	r0, 800dc6c <_vfiprintf_r+0x5c>
 800dc4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc50:	07dc      	lsls	r4, r3, #31
 800dc52:	d504      	bpl.n	800dc5e <_vfiprintf_r+0x4e>
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	b01d      	add	sp, #116	@ 0x74
 800dc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5e:	89ab      	ldrh	r3, [r5, #12]
 800dc60:	0598      	lsls	r0, r3, #22
 800dc62:	d4f7      	bmi.n	800dc54 <_vfiprintf_r+0x44>
 800dc64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc66:	f7ff fc1b 	bl	800d4a0 <__retarget_lock_release_recursive>
 800dc6a:	e7f3      	b.n	800dc54 <_vfiprintf_r+0x44>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc70:	2320      	movs	r3, #32
 800dc72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc76:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc7a:	2330      	movs	r3, #48	@ 0x30
 800dc7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de2c <_vfiprintf_r+0x21c>
 800dc80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc84:	f04f 0901 	mov.w	r9, #1
 800dc88:	4623      	mov	r3, r4
 800dc8a:	469a      	mov	sl, r3
 800dc8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc90:	b10a      	cbz	r2, 800dc96 <_vfiprintf_r+0x86>
 800dc92:	2a25      	cmp	r2, #37	@ 0x25
 800dc94:	d1f9      	bne.n	800dc8a <_vfiprintf_r+0x7a>
 800dc96:	ebba 0b04 	subs.w	fp, sl, r4
 800dc9a:	d00b      	beq.n	800dcb4 <_vfiprintf_r+0xa4>
 800dc9c:	465b      	mov	r3, fp
 800dc9e:	4622      	mov	r2, r4
 800dca0:	4629      	mov	r1, r5
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff ffa2 	bl	800dbec <__sfputs_r>
 800dca8:	3001      	adds	r0, #1
 800dcaa:	f000 80a7 	beq.w	800ddfc <_vfiprintf_r+0x1ec>
 800dcae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcb0:	445a      	add	r2, fp
 800dcb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcb4:	f89a 3000 	ldrb.w	r3, [sl]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f000 809f 	beq.w	800ddfc <_vfiprintf_r+0x1ec>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcc8:	f10a 0a01 	add.w	sl, sl, #1
 800dccc:	9304      	str	r3, [sp, #16]
 800dcce:	9307      	str	r3, [sp, #28]
 800dcd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcd6:	4654      	mov	r4, sl
 800dcd8:	2205      	movs	r2, #5
 800dcda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcde:	4853      	ldr	r0, [pc, #332]	@ (800de2c <_vfiprintf_r+0x21c>)
 800dce0:	f7f2 fa9e 	bl	8000220 <memchr>
 800dce4:	9a04      	ldr	r2, [sp, #16]
 800dce6:	b9d8      	cbnz	r0, 800dd20 <_vfiprintf_r+0x110>
 800dce8:	06d1      	lsls	r1, r2, #27
 800dcea:	bf44      	itt	mi
 800dcec:	2320      	movmi	r3, #32
 800dcee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcf2:	0713      	lsls	r3, r2, #28
 800dcf4:	bf44      	itt	mi
 800dcf6:	232b      	movmi	r3, #43	@ 0x2b
 800dcf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcfc:	f89a 3000 	ldrb.w	r3, [sl]
 800dd00:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd02:	d015      	beq.n	800dd30 <_vfiprintf_r+0x120>
 800dd04:	9a07      	ldr	r2, [sp, #28]
 800dd06:	4654      	mov	r4, sl
 800dd08:	2000      	movs	r0, #0
 800dd0a:	f04f 0c0a 	mov.w	ip, #10
 800dd0e:	4621      	mov	r1, r4
 800dd10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd14:	3b30      	subs	r3, #48	@ 0x30
 800dd16:	2b09      	cmp	r3, #9
 800dd18:	d94b      	bls.n	800ddb2 <_vfiprintf_r+0x1a2>
 800dd1a:	b1b0      	cbz	r0, 800dd4a <_vfiprintf_r+0x13a>
 800dd1c:	9207      	str	r2, [sp, #28]
 800dd1e:	e014      	b.n	800dd4a <_vfiprintf_r+0x13a>
 800dd20:	eba0 0308 	sub.w	r3, r0, r8
 800dd24:	fa09 f303 	lsl.w	r3, r9, r3
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	9304      	str	r3, [sp, #16]
 800dd2c:	46a2      	mov	sl, r4
 800dd2e:	e7d2      	b.n	800dcd6 <_vfiprintf_r+0xc6>
 800dd30:	9b03      	ldr	r3, [sp, #12]
 800dd32:	1d19      	adds	r1, r3, #4
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	9103      	str	r1, [sp, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	bfbb      	ittet	lt
 800dd3c:	425b      	neglt	r3, r3
 800dd3e:	f042 0202 	orrlt.w	r2, r2, #2
 800dd42:	9307      	strge	r3, [sp, #28]
 800dd44:	9307      	strlt	r3, [sp, #28]
 800dd46:	bfb8      	it	lt
 800dd48:	9204      	strlt	r2, [sp, #16]
 800dd4a:	7823      	ldrb	r3, [r4, #0]
 800dd4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd4e:	d10a      	bne.n	800dd66 <_vfiprintf_r+0x156>
 800dd50:	7863      	ldrb	r3, [r4, #1]
 800dd52:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd54:	d132      	bne.n	800ddbc <_vfiprintf_r+0x1ac>
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	1d1a      	adds	r2, r3, #4
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	9203      	str	r2, [sp, #12]
 800dd5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd62:	3402      	adds	r4, #2
 800dd64:	9305      	str	r3, [sp, #20]
 800dd66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de3c <_vfiprintf_r+0x22c>
 800dd6a:	7821      	ldrb	r1, [r4, #0]
 800dd6c:	2203      	movs	r2, #3
 800dd6e:	4650      	mov	r0, sl
 800dd70:	f7f2 fa56 	bl	8000220 <memchr>
 800dd74:	b138      	cbz	r0, 800dd86 <_vfiprintf_r+0x176>
 800dd76:	9b04      	ldr	r3, [sp, #16]
 800dd78:	eba0 000a 	sub.w	r0, r0, sl
 800dd7c:	2240      	movs	r2, #64	@ 0x40
 800dd7e:	4082      	lsls	r2, r0
 800dd80:	4313      	orrs	r3, r2
 800dd82:	3401      	adds	r4, #1
 800dd84:	9304      	str	r3, [sp, #16]
 800dd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8a:	4829      	ldr	r0, [pc, #164]	@ (800de30 <_vfiprintf_r+0x220>)
 800dd8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd90:	2206      	movs	r2, #6
 800dd92:	f7f2 fa45 	bl	8000220 <memchr>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d03f      	beq.n	800de1a <_vfiprintf_r+0x20a>
 800dd9a:	4b26      	ldr	r3, [pc, #152]	@ (800de34 <_vfiprintf_r+0x224>)
 800dd9c:	bb1b      	cbnz	r3, 800dde6 <_vfiprintf_r+0x1d6>
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	3307      	adds	r3, #7
 800dda2:	f023 0307 	bic.w	r3, r3, #7
 800dda6:	3308      	adds	r3, #8
 800dda8:	9303      	str	r3, [sp, #12]
 800ddaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddac:	443b      	add	r3, r7
 800ddae:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddb0:	e76a      	b.n	800dc88 <_vfiprintf_r+0x78>
 800ddb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	2001      	movs	r0, #1
 800ddba:	e7a8      	b.n	800dd0e <_vfiprintf_r+0xfe>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	3401      	adds	r4, #1
 800ddc0:	9305      	str	r3, [sp, #20]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	f04f 0c0a 	mov.w	ip, #10
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddce:	3a30      	subs	r2, #48	@ 0x30
 800ddd0:	2a09      	cmp	r2, #9
 800ddd2:	d903      	bls.n	800dddc <_vfiprintf_r+0x1cc>
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d0c6      	beq.n	800dd66 <_vfiprintf_r+0x156>
 800ddd8:	9105      	str	r1, [sp, #20]
 800ddda:	e7c4      	b.n	800dd66 <_vfiprintf_r+0x156>
 800dddc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dde0:	4604      	mov	r4, r0
 800dde2:	2301      	movs	r3, #1
 800dde4:	e7f0      	b.n	800ddc8 <_vfiprintf_r+0x1b8>
 800dde6:	ab03      	add	r3, sp, #12
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	462a      	mov	r2, r5
 800ddec:	4b12      	ldr	r3, [pc, #72]	@ (800de38 <_vfiprintf_r+0x228>)
 800ddee:	a904      	add	r1, sp, #16
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	f3af 8000 	nop.w
 800ddf6:	4607      	mov	r7, r0
 800ddf8:	1c78      	adds	r0, r7, #1
 800ddfa:	d1d6      	bne.n	800ddaa <_vfiprintf_r+0x19a>
 800ddfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddfe:	07d9      	lsls	r1, r3, #31
 800de00:	d405      	bmi.n	800de0e <_vfiprintf_r+0x1fe>
 800de02:	89ab      	ldrh	r3, [r5, #12]
 800de04:	059a      	lsls	r2, r3, #22
 800de06:	d402      	bmi.n	800de0e <_vfiprintf_r+0x1fe>
 800de08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de0a:	f7ff fb49 	bl	800d4a0 <__retarget_lock_release_recursive>
 800de0e:	89ab      	ldrh	r3, [r5, #12]
 800de10:	065b      	lsls	r3, r3, #25
 800de12:	f53f af1f 	bmi.w	800dc54 <_vfiprintf_r+0x44>
 800de16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de18:	e71e      	b.n	800dc58 <_vfiprintf_r+0x48>
 800de1a:	ab03      	add	r3, sp, #12
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	462a      	mov	r2, r5
 800de20:	4b05      	ldr	r3, [pc, #20]	@ (800de38 <_vfiprintf_r+0x228>)
 800de22:	a904      	add	r1, sp, #16
 800de24:	4630      	mov	r0, r6
 800de26:	f7ff fcd7 	bl	800d7d8 <_printf_i>
 800de2a:	e7e4      	b.n	800ddf6 <_vfiprintf_r+0x1e6>
 800de2c:	0800e265 	.word	0x0800e265
 800de30:	0800e26f 	.word	0x0800e26f
 800de34:	00000000 	.word	0x00000000
 800de38:	0800dbed 	.word	0x0800dbed
 800de3c:	0800e26b 	.word	0x0800e26b

0800de40 <__swbuf_r>:
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	460e      	mov	r6, r1
 800de44:	4614      	mov	r4, r2
 800de46:	4605      	mov	r5, r0
 800de48:	b118      	cbz	r0, 800de52 <__swbuf_r+0x12>
 800de4a:	6a03      	ldr	r3, [r0, #32]
 800de4c:	b90b      	cbnz	r3, 800de52 <__swbuf_r+0x12>
 800de4e:	f7ff fa33 	bl	800d2b8 <__sinit>
 800de52:	69a3      	ldr	r3, [r4, #24]
 800de54:	60a3      	str	r3, [r4, #8]
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	071a      	lsls	r2, r3, #28
 800de5a:	d501      	bpl.n	800de60 <__swbuf_r+0x20>
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	b943      	cbnz	r3, 800de72 <__swbuf_r+0x32>
 800de60:	4621      	mov	r1, r4
 800de62:	4628      	mov	r0, r5
 800de64:	f000 f82a 	bl	800debc <__swsetup_r>
 800de68:	b118      	cbz	r0, 800de72 <__swbuf_r+0x32>
 800de6a:	f04f 37ff 	mov.w	r7, #4294967295
 800de6e:	4638      	mov	r0, r7
 800de70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	6922      	ldr	r2, [r4, #16]
 800de76:	1a98      	subs	r0, r3, r2
 800de78:	6963      	ldr	r3, [r4, #20]
 800de7a:	b2f6      	uxtb	r6, r6
 800de7c:	4283      	cmp	r3, r0
 800de7e:	4637      	mov	r7, r6
 800de80:	dc05      	bgt.n	800de8e <__swbuf_r+0x4e>
 800de82:	4621      	mov	r1, r4
 800de84:	4628      	mov	r0, r5
 800de86:	f7ff fe49 	bl	800db1c <_fflush_r>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d1ed      	bne.n	800de6a <__swbuf_r+0x2a>
 800de8e:	68a3      	ldr	r3, [r4, #8]
 800de90:	3b01      	subs	r3, #1
 800de92:	60a3      	str	r3, [r4, #8]
 800de94:	6823      	ldr	r3, [r4, #0]
 800de96:	1c5a      	adds	r2, r3, #1
 800de98:	6022      	str	r2, [r4, #0]
 800de9a:	701e      	strb	r6, [r3, #0]
 800de9c:	6962      	ldr	r2, [r4, #20]
 800de9e:	1c43      	adds	r3, r0, #1
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d004      	beq.n	800deae <__swbuf_r+0x6e>
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	07db      	lsls	r3, r3, #31
 800dea8:	d5e1      	bpl.n	800de6e <__swbuf_r+0x2e>
 800deaa:	2e0a      	cmp	r6, #10
 800deac:	d1df      	bne.n	800de6e <__swbuf_r+0x2e>
 800deae:	4621      	mov	r1, r4
 800deb0:	4628      	mov	r0, r5
 800deb2:	f7ff fe33 	bl	800db1c <_fflush_r>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d0d9      	beq.n	800de6e <__swbuf_r+0x2e>
 800deba:	e7d6      	b.n	800de6a <__swbuf_r+0x2a>

0800debc <__swsetup_r>:
 800debc:	b538      	push	{r3, r4, r5, lr}
 800debe:	4b29      	ldr	r3, [pc, #164]	@ (800df64 <__swsetup_r+0xa8>)
 800dec0:	4605      	mov	r5, r0
 800dec2:	6818      	ldr	r0, [r3, #0]
 800dec4:	460c      	mov	r4, r1
 800dec6:	b118      	cbz	r0, 800ded0 <__swsetup_r+0x14>
 800dec8:	6a03      	ldr	r3, [r0, #32]
 800deca:	b90b      	cbnz	r3, 800ded0 <__swsetup_r+0x14>
 800decc:	f7ff f9f4 	bl	800d2b8 <__sinit>
 800ded0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ded4:	0719      	lsls	r1, r3, #28
 800ded6:	d422      	bmi.n	800df1e <__swsetup_r+0x62>
 800ded8:	06da      	lsls	r2, r3, #27
 800deda:	d407      	bmi.n	800deec <__swsetup_r+0x30>
 800dedc:	2209      	movs	r2, #9
 800dede:	602a      	str	r2, [r5, #0]
 800dee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee4:	81a3      	strh	r3, [r4, #12]
 800dee6:	f04f 30ff 	mov.w	r0, #4294967295
 800deea:	e033      	b.n	800df54 <__swsetup_r+0x98>
 800deec:	0758      	lsls	r0, r3, #29
 800deee:	d512      	bpl.n	800df16 <__swsetup_r+0x5a>
 800def0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800def2:	b141      	cbz	r1, 800df06 <__swsetup_r+0x4a>
 800def4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800def8:	4299      	cmp	r1, r3
 800defa:	d002      	beq.n	800df02 <__swsetup_r+0x46>
 800defc:	4628      	mov	r0, r5
 800defe:	f7ff fafd 	bl	800d4fc <_free_r>
 800df02:	2300      	movs	r3, #0
 800df04:	6363      	str	r3, [r4, #52]	@ 0x34
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df0c:	81a3      	strh	r3, [r4, #12]
 800df0e:	2300      	movs	r3, #0
 800df10:	6063      	str	r3, [r4, #4]
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	6023      	str	r3, [r4, #0]
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	f043 0308 	orr.w	r3, r3, #8
 800df1c:	81a3      	strh	r3, [r4, #12]
 800df1e:	6923      	ldr	r3, [r4, #16]
 800df20:	b94b      	cbnz	r3, 800df36 <__swsetup_r+0x7a>
 800df22:	89a3      	ldrh	r3, [r4, #12]
 800df24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df2c:	d003      	beq.n	800df36 <__swsetup_r+0x7a>
 800df2e:	4621      	mov	r1, r4
 800df30:	4628      	mov	r0, r5
 800df32:	f000 f883 	bl	800e03c <__smakebuf_r>
 800df36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df3a:	f013 0201 	ands.w	r2, r3, #1
 800df3e:	d00a      	beq.n	800df56 <__swsetup_r+0x9a>
 800df40:	2200      	movs	r2, #0
 800df42:	60a2      	str	r2, [r4, #8]
 800df44:	6962      	ldr	r2, [r4, #20]
 800df46:	4252      	negs	r2, r2
 800df48:	61a2      	str	r2, [r4, #24]
 800df4a:	6922      	ldr	r2, [r4, #16]
 800df4c:	b942      	cbnz	r2, 800df60 <__swsetup_r+0xa4>
 800df4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df52:	d1c5      	bne.n	800dee0 <__swsetup_r+0x24>
 800df54:	bd38      	pop	{r3, r4, r5, pc}
 800df56:	0799      	lsls	r1, r3, #30
 800df58:	bf58      	it	pl
 800df5a:	6962      	ldrpl	r2, [r4, #20]
 800df5c:	60a2      	str	r2, [r4, #8]
 800df5e:	e7f4      	b.n	800df4a <__swsetup_r+0x8e>
 800df60:	2000      	movs	r0, #0
 800df62:	e7f7      	b.n	800df54 <__swsetup_r+0x98>
 800df64:	20000174 	.word	0x20000174

0800df68 <_raise_r>:
 800df68:	291f      	cmp	r1, #31
 800df6a:	b538      	push	{r3, r4, r5, lr}
 800df6c:	4605      	mov	r5, r0
 800df6e:	460c      	mov	r4, r1
 800df70:	d904      	bls.n	800df7c <_raise_r+0x14>
 800df72:	2316      	movs	r3, #22
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	f04f 30ff 	mov.w	r0, #4294967295
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df7e:	b112      	cbz	r2, 800df86 <_raise_r+0x1e>
 800df80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df84:	b94b      	cbnz	r3, 800df9a <_raise_r+0x32>
 800df86:	4628      	mov	r0, r5
 800df88:	f000 f830 	bl	800dfec <_getpid_r>
 800df8c:	4622      	mov	r2, r4
 800df8e:	4601      	mov	r1, r0
 800df90:	4628      	mov	r0, r5
 800df92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df96:	f000 b817 	b.w	800dfc8 <_kill_r>
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d00a      	beq.n	800dfb4 <_raise_r+0x4c>
 800df9e:	1c59      	adds	r1, r3, #1
 800dfa0:	d103      	bne.n	800dfaa <_raise_r+0x42>
 800dfa2:	2316      	movs	r3, #22
 800dfa4:	6003      	str	r3, [r0, #0]
 800dfa6:	2001      	movs	r0, #1
 800dfa8:	e7e7      	b.n	800df7a <_raise_r+0x12>
 800dfaa:	2100      	movs	r1, #0
 800dfac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4798      	blx	r3
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	e7e0      	b.n	800df7a <_raise_r+0x12>

0800dfb8 <raise>:
 800dfb8:	4b02      	ldr	r3, [pc, #8]	@ (800dfc4 <raise+0xc>)
 800dfba:	4601      	mov	r1, r0
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	f7ff bfd3 	b.w	800df68 <_raise_r>
 800dfc2:	bf00      	nop
 800dfc4:	20000174 	.word	0x20000174

0800dfc8 <_kill_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	@ (800dfe8 <_kill_r+0x20>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f7f3 fb41 	bl	800165c <_kill>
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d102      	bne.n	800dfe4 <_kill_r+0x1c>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b103      	cbz	r3, 800dfe4 <_kill_r+0x1c>
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20001be0 	.word	0x20001be0

0800dfec <_getpid_r>:
 800dfec:	f7f3 bb2e 	b.w	800164c <_getpid>

0800dff0 <__swhatbuf_r>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	460c      	mov	r4, r1
 800dff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff8:	2900      	cmp	r1, #0
 800dffa:	b096      	sub	sp, #88	@ 0x58
 800dffc:	4615      	mov	r5, r2
 800dffe:	461e      	mov	r6, r3
 800e000:	da0d      	bge.n	800e01e <__swhatbuf_r+0x2e>
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e008:	f04f 0100 	mov.w	r1, #0
 800e00c:	bf14      	ite	ne
 800e00e:	2340      	movne	r3, #64	@ 0x40
 800e010:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e014:	2000      	movs	r0, #0
 800e016:	6031      	str	r1, [r6, #0]
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	b016      	add	sp, #88	@ 0x58
 800e01c:	bd70      	pop	{r4, r5, r6, pc}
 800e01e:	466a      	mov	r2, sp
 800e020:	f000 f848 	bl	800e0b4 <_fstat_r>
 800e024:	2800      	cmp	r0, #0
 800e026:	dbec      	blt.n	800e002 <__swhatbuf_r+0x12>
 800e028:	9901      	ldr	r1, [sp, #4]
 800e02a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e02e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e032:	4259      	negs	r1, r3
 800e034:	4159      	adcs	r1, r3
 800e036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e03a:	e7eb      	b.n	800e014 <__swhatbuf_r+0x24>

0800e03c <__smakebuf_r>:
 800e03c:	898b      	ldrh	r3, [r1, #12]
 800e03e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e040:	079d      	lsls	r5, r3, #30
 800e042:	4606      	mov	r6, r0
 800e044:	460c      	mov	r4, r1
 800e046:	d507      	bpl.n	800e058 <__smakebuf_r+0x1c>
 800e048:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e04c:	6023      	str	r3, [r4, #0]
 800e04e:	6123      	str	r3, [r4, #16]
 800e050:	2301      	movs	r3, #1
 800e052:	6163      	str	r3, [r4, #20]
 800e054:	b003      	add	sp, #12
 800e056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e058:	ab01      	add	r3, sp, #4
 800e05a:	466a      	mov	r2, sp
 800e05c:	f7ff ffc8 	bl	800dff0 <__swhatbuf_r>
 800e060:	9f00      	ldr	r7, [sp, #0]
 800e062:	4605      	mov	r5, r0
 800e064:	4639      	mov	r1, r7
 800e066:	4630      	mov	r0, r6
 800e068:	f7ff fabc 	bl	800d5e4 <_malloc_r>
 800e06c:	b948      	cbnz	r0, 800e082 <__smakebuf_r+0x46>
 800e06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e072:	059a      	lsls	r2, r3, #22
 800e074:	d4ee      	bmi.n	800e054 <__smakebuf_r+0x18>
 800e076:	f023 0303 	bic.w	r3, r3, #3
 800e07a:	f043 0302 	orr.w	r3, r3, #2
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	e7e2      	b.n	800e048 <__smakebuf_r+0xc>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	6020      	str	r0, [r4, #0]
 800e086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e08a:	81a3      	strh	r3, [r4, #12]
 800e08c:	9b01      	ldr	r3, [sp, #4]
 800e08e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e092:	b15b      	cbz	r3, 800e0ac <__smakebuf_r+0x70>
 800e094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e098:	4630      	mov	r0, r6
 800e09a:	f000 f81d 	bl	800e0d8 <_isatty_r>
 800e09e:	b128      	cbz	r0, 800e0ac <__smakebuf_r+0x70>
 800e0a0:	89a3      	ldrh	r3, [r4, #12]
 800e0a2:	f023 0303 	bic.w	r3, r3, #3
 800e0a6:	f043 0301 	orr.w	r3, r3, #1
 800e0aa:	81a3      	strh	r3, [r4, #12]
 800e0ac:	89a3      	ldrh	r3, [r4, #12]
 800e0ae:	431d      	orrs	r5, r3
 800e0b0:	81a5      	strh	r5, [r4, #12]
 800e0b2:	e7cf      	b.n	800e054 <__smakebuf_r+0x18>

0800e0b4 <_fstat_r>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d07      	ldr	r5, [pc, #28]	@ (800e0d4 <_fstat_r+0x20>)
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	4608      	mov	r0, r1
 800e0be:	4611      	mov	r1, r2
 800e0c0:	602b      	str	r3, [r5, #0]
 800e0c2:	f7f3 fb2b 	bl	800171c <_fstat>
 800e0c6:	1c43      	adds	r3, r0, #1
 800e0c8:	d102      	bne.n	800e0d0 <_fstat_r+0x1c>
 800e0ca:	682b      	ldr	r3, [r5, #0]
 800e0cc:	b103      	cbz	r3, 800e0d0 <_fstat_r+0x1c>
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	bd38      	pop	{r3, r4, r5, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20001be0 	.word	0x20001be0

0800e0d8 <_isatty_r>:
 800e0d8:	b538      	push	{r3, r4, r5, lr}
 800e0da:	4d06      	ldr	r5, [pc, #24]	@ (800e0f4 <_isatty_r+0x1c>)
 800e0dc:	2300      	movs	r3, #0
 800e0de:	4604      	mov	r4, r0
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	602b      	str	r3, [r5, #0]
 800e0e4:	f7f3 fb2a 	bl	800173c <_isatty>
 800e0e8:	1c43      	adds	r3, r0, #1
 800e0ea:	d102      	bne.n	800e0f2 <_isatty_r+0x1a>
 800e0ec:	682b      	ldr	r3, [r5, #0]
 800e0ee:	b103      	cbz	r3, 800e0f2 <_isatty_r+0x1a>
 800e0f0:	6023      	str	r3, [r4, #0]
 800e0f2:	bd38      	pop	{r3, r4, r5, pc}
 800e0f4:	20001be0 	.word	0x20001be0

0800e0f8 <_init>:
 800e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fa:	bf00      	nop
 800e0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0fe:	bc08      	pop	{r3}
 800e100:	469e      	mov	lr, r3
 800e102:	4770      	bx	lr

0800e104 <_fini>:
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e106:	bf00      	nop
 800e108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10a:	bc08      	pop	{r3}
 800e10c:	469e      	mov	lr, r3
 800e10e:	4770      	bx	lr
