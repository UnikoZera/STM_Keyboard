
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800f48c  0800f48c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f604  0800f604  000111b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f604  0800f604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f60c  0800f60c  000111b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f60c  0800f60c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f610  0800f610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  0800f614  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cb8  200001b8  0800f7cc  000111b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e70  0800f7cc  00011e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b05e  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066df  00000000  00000000  0003c246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002380  00000000  00000000  00042928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b7f  00000000  00000000  00044ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002867a  00000000  00000000  00046827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000308fc  00000000  00000000  0006eea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e85e2  00000000  00000000  0009f79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187d7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009dc8  00000000  00000000  00187dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00191b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001b8 	.word	0x200001b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f474 	.word	0x0800f474

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001bc 	.word	0x200001bc
 800021c:	0800f474 	.word	0x0800f474

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f00e f88e 	bl	800e726 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000614:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	481e      	ldr	r0, [pc, #120]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000676:	f002 fc5d 	bl	8002f34 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f001 f83b 	bl	80016fa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4818      	ldr	r0, [pc, #96]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000690:	f003 fcc4 	bl	800401c <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f001 f82e 	bl	80016fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_ADC1_Init+0x108>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	@ 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006bc:	f002 fe90 	bl	80033e0 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f001 f818 	bl	80016fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_ADC1_Init+0x10c>)
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ce:	230c      	movs	r3, #12
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006d8:	f002 fe82 	bl	80033e0 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006e2:	f001 f80a 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	@ 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001d4 	.word	0x200001d4
 80006f4:	32601000 	.word	0x32601000
 80006f8:	3ef08000 	.word	0x3ef08000

080006fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f00e f80c 	bl	800e726 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000710:	4a32      	ldr	r2, [pc, #200]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000716:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b2e      	ldr	r3, [pc, #184]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000728:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000730:	2201      	movs	r2, #1
 8000732:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000736:	2204      	movs	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000742:	2201      	movs	r2, #1
 8000744:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000748:	2202      	movs	r2, #2
 800074a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000762:	2201      	movs	r2, #1
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000776:	4818      	ldr	r0, [pc, #96]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000778:	f002 fbdc 	bl	8002f34 <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 ffba 	bl	80016fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_ADC2_Init+0xe4>)
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	@ 0x7f
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007a4:	f002 fe1c 	bl	80033e0 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ae:	f000 ffa4 	bl	80016fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_ADC2_Init+0xe8>)
 80007b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007b6:	230c      	movs	r3, #12
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007c0:	f002 fe0e 	bl	80033e0 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80007ca:	f000 ff96 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000240 	.word	0x20000240
 80007dc:	50000100 	.word	0x50000100
 80007e0:	0c900008 	.word	0x0c900008
 80007e4:	10c00010 	.word	0x10c00010

080007e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09c      	sub	sp, #112	@ 0x70
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	2244      	movs	r2, #68	@ 0x44
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00d ff8c 	bl	800e726 <memset>
  if(adcHandle->Instance==ADC1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000816:	d169      	bne.n	80008ec <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000818:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800081c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800081e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000822:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4618      	mov	r0, r3
 800082a:	f007 fb9d 	bl	8007f68 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000834:	f000 ff61 	bl	80016fa <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000838:	4b66      	ldr	r3, [pc, #408]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a65      	ldr	r2, [pc, #404]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000840:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000842:	4b64      	ldr	r3, [pc, #400]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800084a:	4b63      	ldr	r3, [pc, #396]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a62      	ldr	r2, [pc, #392]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000850:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b60      	ldr	r3, [pc, #384]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b5d      	ldr	r3, [pc, #372]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a5c      	ldr	r2, [pc, #368]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b5a      	ldr	r3, [pc, #360]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Key_2_Pin|Key_1_Pin;
 800087a:	2303      	movs	r3, #3
 800087c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800088a:	4619      	mov	r1, r3
 800088c:	4853      	ldr	r0, [pc, #332]	@ (80009dc <HAL_ADC_MspInit+0x1f4>)
 800088e:	f004 fa5b 	bl	8004d48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000892:	4b53      	ldr	r3, [pc, #332]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 8000894:	4a53      	ldr	r2, [pc, #332]	@ (80009e4 <HAL_ADC_MspInit+0x1fc>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000898:	4b51      	ldr	r3, [pc, #324]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 800089a:	2205      	movs	r2, #5
 800089c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b4e      	ldr	r3, [pc, #312]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b4d      	ldr	r3, [pc, #308]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b8:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c0:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c2:	2220      	movs	r2, #32
 80008c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008ce:	4844      	ldr	r0, [pc, #272]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008d0:	f003 ff60 	bl	8004794 <HAL_DMA_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80008da:	f000 ff0e 	bl	80016fa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a3f      	ldr	r2, [pc, #252]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80008e4:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008ea:	e06e      	b.n	80009ca <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <HAL_ADC_MspInit+0x200>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d169      	bne.n	80009ca <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000900:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fb2e 	bl	8007f68 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000912:	f000 fef2 	bl	80016fa <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a2d      	ldr	r2, [pc, #180]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800091e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000920:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10b      	bne.n	8000940 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	4a2a      	ldr	r2, [pc, #168]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000944:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Key_3_Pin|Key_4_Pin;
 8000958:	23c0      	movs	r3, #192	@ 0xc0
 800095a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f004 f9eb 	bl	8004d48 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000974:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <HAL_ADC_MspInit+0x208>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800097a:	2224      	movs	r2, #36	@ 0x24
 800097c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000996:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800099a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a2:	2220      	movs	r2, #32
 80009a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009b0:	f003 fef0 	bl	8004794 <HAL_DMA_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 80009ba:	f000 fe9e 	bl	80016fa <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80009c4:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	@ 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000036c 	.word	0x2000036c
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400
 80009e0:	200002ac 	.word	0x200002ac
 80009e4:	40020008 	.word	0x40020008
 80009e8:	50000100 	.word	0x50000100
 80009ec:	2000030c 	.word	0x2000030c
 80009f0:	4002001c 	.word	0x4002001c

080009f4 <ADC_Filter>:

uint16_t filter_adc_data[4]; // 用于存储滤波后的ADC数据
uint16_t last_adc_data[4]; // 用于记录上一次的ADC数据

void ADC_Filter(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
    last_adc_data[0] = filter_adc_data[0];
 80009f8:	4b44      	ldr	r3, [pc, #272]	@ (8000b0c <ADC_Filter+0x118>)
 80009fa:	881a      	ldrh	r2, [r3, #0]
 80009fc:	4b44      	ldr	r3, [pc, #272]	@ (8000b10 <ADC_Filter+0x11c>)
 80009fe:	801a      	strh	r2, [r3, #0]
    last_adc_data[1] = filter_adc_data[1];
 8000a00:	4b42      	ldr	r3, [pc, #264]	@ (8000b0c <ADC_Filter+0x118>)
 8000a02:	885a      	ldrh	r2, [r3, #2]
 8000a04:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a06:	805a      	strh	r2, [r3, #2]
    last_adc_data[2] = filter_adc_data[2];
 8000a08:	4b40      	ldr	r3, [pc, #256]	@ (8000b0c <ADC_Filter+0x118>)
 8000a0a:	889a      	ldrh	r2, [r3, #4]
 8000a0c:	4b40      	ldr	r3, [pc, #256]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a0e:	809a      	strh	r2, [r3, #4]
    last_adc_data[3] = filter_adc_data[3];
 8000a10:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <ADC_Filter+0x118>)
 8000a12:	88da      	ldrh	r2, [r3, #6]
 8000a14:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a16:	80da      	strh	r2, [r3, #6]

	filter_adc_data[0] = ADC_FILTER_ALPHA * buffer_adc_1[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[0];
 8000a18:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <ADC_Filter+0x120>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a24:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000b18 <ADC_Filter+0x124>
 8000a28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a2c:	4b37      	ldr	r3, [pc, #220]	@ (8000b0c <ADC_Filter+0x118>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a38:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000b1c <ADC_Filter+0x128>
 8000a3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a48:	ee17 3a90 	vmov	r3, s15
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <ADC_Filter+0x118>)
 8000a50:	801a      	strh	r2, [r3, #0]
	filter_adc_data[1] = ADC_FILTER_ALPHA * buffer_adc_1[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[1];
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <ADC_Filter+0x120>)
 8000a54:	885b      	ldrh	r3, [r3, #2]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000b18 <ADC_Filter+0x124>
 8000a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <ADC_Filter+0x118>)
 8000a68:	885b      	ldrh	r3, [r3, #2]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a72:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000b1c <ADC_Filter+0x128>
 8000a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a82:	ee17 3a90 	vmov	r3, s15
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <ADC_Filter+0x118>)
 8000a8a:	805a      	strh	r2, [r3, #2]
	filter_adc_data[2] = ADC_FILTER_ALPHA * buffer_adc_2[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[2];
 8000a8c:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <ADC_Filter+0x12c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	ee07 3a90 	vmov	s15, r3
 8000a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a98:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000b18 <ADC_Filter+0x124>
 8000a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <ADC_Filter+0x118>)
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aac:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000b1c <ADC_Filter+0x128>
 8000ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000abc:	ee17 3a90 	vmov	r3, s15
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <ADC_Filter+0x118>)
 8000ac4:	809a      	strh	r2, [r3, #4]
	filter_adc_data[3] = ADC_FILTER_ALPHA * buffer_adc_2[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[3];
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <ADC_Filter+0x12c>)
 8000ac8:	885b      	ldrh	r3, [r3, #2]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000b18 <ADC_Filter+0x124>
 8000ad6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <ADC_Filter+0x118>)
 8000adc:	88db      	ldrh	r3, [r3, #6]
 8000ade:	ee07 3a90 	vmov	s15, r3
 8000ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000b1c <ADC_Filter+0x128>
 8000aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af6:	ee17 3a90 	vmov	r3, s15
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <ADC_Filter+0x118>)
 8000afe:	80da      	strh	r2, [r3, #6]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000378 	.word	0x20000378
 8000b10:	20000380 	.word	0x20000380
 8000b14:	20000370 	.word	0x20000370
 8000b18:	3f19999a 	.word	0x3f19999a
 8000b1c:	3ecccccc 	.word	0x3ecccccc
 8000b20:	20000374 	.word	0x20000374

08000b24 <ADC_Init>:

void ADC_Init(void) // 只需要在初始化调用这个就可以持续收集adc数据
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    memset(last_adc_data, 0, sizeof(last_adc_data));
 8000b28:	2208      	movs	r2, #8
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <ADC_Init+0x38>)
 8000b2e:	f00d fdfa 	bl	800e726 <memset>
    memset(filter_adc_data, 0, sizeof(filter_adc_data));
 8000b32:	2208      	movs	r2, #8
 8000b34:	2100      	movs	r1, #0
 8000b36:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <ADC_Init+0x3c>)
 8000b38:	f00d fdf5 	bl	800e726 <memset>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000b3c:	217f      	movs	r1, #127	@ 0x7f
 8000b3e:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <ADC_Init+0x40>)
 8000b40:	f003 fa0a 	bl	8003f58 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000b44:	217f      	movs	r1, #127	@ 0x7f
 8000b46:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <ADC_Init+0x44>)
 8000b48:	f003 fa06 	bl	8003f58 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(10);
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f001 ff67 	bl	8002a20 <HAL_Delay>
    ADC_Start_DMA();
 8000b52:	f000 f80b 	bl	8000b6c <ADC_Start_DMA>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000380 	.word	0x20000380
 8000b60:	20000378 	.word	0x20000378
 8000b64:	200001d4 	.word	0x200001d4
 8000b68:	20000240 	.word	0x20000240

08000b6c <ADC_Start_DMA>:


void ADC_Start_DMA(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer_adc_1, sizeof(buffer_adc_1)/sizeof(uint16_t));
 8000b70:	2202      	movs	r2, #2
 8000b72:	4905      	ldr	r1, [pc, #20]	@ (8000b88 <ADC_Start_DMA+0x1c>)
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <ADC_Start_DMA+0x20>)
 8000b76:	f002 fb61 	bl	800323c <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)buffer_adc_2, sizeof(buffer_adc_2)/sizeof(uint16_t));
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	4904      	ldr	r1, [pc, #16]	@ (8000b90 <ADC_Start_DMA+0x24>)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <ADC_Start_DMA+0x28>)
 8000b80:	f002 fb5c 	bl	800323c <HAL_ADC_Start_DMA>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000370 	.word	0x20000370
 8000b8c:	200001d4 	.word	0x200001d4
 8000b90:	20000374 	.word	0x20000374
 8000b94:	20000240 	.word	0x20000240

08000b98 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <MX_CRC_Init+0x40>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bc2:	f003 fbdf 	bl	8004384 <HAL_CRC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000bcc:	f000 fd95 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000388 	.word	0x20000388
 8000bd8:	40023000 	.word	0x40023000

08000bdc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_CRC_MspInit+0x38>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_CRC_MspInit+0x3c>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bf2:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <HAL_CRC_MspInit+0x3c>)
 8000bf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_CRC_MspInit+0x3c>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023000 	.word	0x40023000
 8000c18:	40021000 	.word	0x40021000

08000c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c26:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c3e:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200b      	movs	r0, #11
 8000c58:	f003 fb5f 	bl	800431a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c5c:	200b      	movs	r0, #11
 8000c5e:	f003 fb76 	bl	800434e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200c      	movs	r0, #12
 8000c68:	f003 fb57 	bl	800431a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c6c:	200c      	movs	r0, #12
 8000c6e:	f003 fb6e 	bl	800434e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200d      	movs	r0, #13
 8000c78:	f003 fb4f 	bl	800431a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c7c:	200d      	movs	r0, #13
 8000c7e:	f003 fb66 	bl	800434e <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a2a      	ldr	r2, [pc, #168]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a24      	ldr	r2, [pc, #144]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <MX_GPIO_Init+0xc8>)
 8000d0e:	f004 f9b5 	bl	800507c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <MX_GPIO_Init+0xc8>)
 8000d2c:	f004 f80c 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESC_Buttom_Pin Mode_Buttom_Pin */
  GPIO_InitStruct.Pin = ESC_Buttom_Pin|Mode_Buttom_Pin;
 8000d30:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_GPIO_Init+0xcc>)
 8000d46:	f003 ffff 	bl	8004d48 <HAL_GPIO_Init>

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	@ 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000400 	.word	0x48000400

08000d60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d66:	4a1e      	ldr	r2, [pc, #120]	@ (8000de0 <MX_I2C1_Init+0x80>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <MX_I2C1_Init+0x84>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9a:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d9c:	f004 f986 	bl	80050ac <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000da6:	f000 fca8 	bl	80016fa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000dae:	f004 fd4b 	bl	8005848 <HAL_I2CEx_ConfigAnalogFilter>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000db8:	f000 fc9f 	bl	80016fa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000dc0:	f004 fd8d 	bl	80058de <HAL_I2CEx_ConfigDigitalFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dca:	f000 fc96 	bl	80016fa <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000dce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000dd2:	f004 fdd1 	bl	8005978 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003ac 	.word	0x200003ac
 8000de0:	40005400 	.word	0x40005400
 8000de4:	4052060f 	.word	0x4052060f

08000de8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09c      	sub	sp, #112	@ 0x70
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	2244      	movs	r2, #68	@ 0x44
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00d fc8c 	bl	800e726 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2e      	ldr	r2, [pc, #184]	@ (8000ecc <HAL_I2C_MspInit+0xe4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d154      	bne.n	8000ec2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4618      	mov	r0, r3
 8000e26:	f007 f89f 	bl	8007f68 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e30:	f000 fc63 	bl	80016fa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e38:	4a25      	ldr	r2, [pc, #148]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000e64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6a:	2312      	movs	r3, #18
 8000e6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e76:	2304      	movs	r3, #4
 8000e78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f003 ff60 	bl	8004d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8000e88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <HAL_I2C_MspInit+0xec>)
 8000ea6:	f003 ff4f 	bl	8004d48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3770      	adds	r7, #112	@ 0x70
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <Keyboard_Init>:
// 第1位为保留位0x00
// 第2-7位为普通按键(0x00-0xFF) 这里做的是4key键盘的协议(外加ESC)
uint8_t hid_buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void Keyboard_Init(void)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	@ 0x34
 8000edc:	af00      	add	r7, sp, #0
    ADC_Init();
 8000ede:	f7ff fe21 	bl	8000b24 <ADC_Init>
    HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	@ 0x64
 8000ee4:	f001 fd9c 	bl	8002a20 <HAL_Delay>
    RGB_Init();
 8000ee8:	f000 fd98 	bl	8001a1c <RGB_Init>
    HAL_Delay(100);
 8000eec:	2064      	movs	r0, #100	@ 0x64
 8000eee:	f001 fd97 	bl	8002a20 <HAL_Delay>

    OLED_EnableDiffMode(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 fd64 	bl	80019c0 <OLED_EnableDiffMode>
    OLED_EnableFastUpdate(1);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f000 fd7f 	bl	80019fc <OLED_EnableFastUpdate>
    OLED_Init();
 8000efe:	f000 fc71 	bl	80017e4 <OLED_Init>
    OLED_UI_Init();
 8000f02:	f000 fcdb 	bl	80018bc <OLED_UI_Init>
    // USB已经在main中初始化

    // 初始化键盘状态
    Keyboard_Settings_Read();
 8000f06:	f000 fb33 	bl	8001570 <Keyboard_Settings_Read>

    HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	@ 0x64
 8000f0c:	f001 fd88 	bl	8002a20 <HAL_Delay>

    magnetic_key_info_t *keys_info_init[4] = 
 8000f10:	4b42      	ldr	r3, [pc, #264]	@ (800101c <Keyboard_Init+0x144>)
 8000f12:	f107 041c 	add.w	r4, r7, #28
 8000f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        &keyboard_state.KEY_4_info
    };

    uint16_t keys_threshold_init[12] = 
    {
        keyboard_settings._1trigger_position_threshold,
 8000f1c:	4b40      	ldr	r3, [pc, #256]	@ (8001020 <Keyboard_Init+0x148>)
 8000f1e:	88db      	ldrh	r3, [r3, #6]
    uint16_t keys_threshold_init[12] = 
 8000f20:	80bb      	strh	r3, [r7, #4]
        keyboard_settings._2trigger_position_threshold,
 8000f22:	4b3f      	ldr	r3, [pc, #252]	@ (8001020 <Keyboard_Init+0x148>)
 8000f24:	899b      	ldrh	r3, [r3, #12]
    uint16_t keys_threshold_init[12] = 
 8000f26:	80fb      	strh	r3, [r7, #6]
        keyboard_settings._3trigger_position_threshold,
 8000f28:	4b3d      	ldr	r3, [pc, #244]	@ (8001020 <Keyboard_Init+0x148>)
 8000f2a:	8a5b      	ldrh	r3, [r3, #18]
    uint16_t keys_threshold_init[12] = 
 8000f2c:	813b      	strh	r3, [r7, #8]
        keyboard_settings._4trigger_position_threshold,
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001020 <Keyboard_Init+0x148>)
 8000f30:	8b1b      	ldrh	r3, [r3, #24]
    uint16_t keys_threshold_init[12] = 
 8000f32:	817b      	strh	r3, [r7, #10]

        keyboard_settings._1trigger_speed_threshold,
 8000f34:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <Keyboard_Init+0x148>)
 8000f36:	891b      	ldrh	r3, [r3, #8]
    uint16_t keys_threshold_init[12] = 
 8000f38:	81bb      	strh	r3, [r7, #12]
        keyboard_settings._2trigger_speed_threshold,
 8000f3a:	4b39      	ldr	r3, [pc, #228]	@ (8001020 <Keyboard_Init+0x148>)
 8000f3c:	89db      	ldrh	r3, [r3, #14]
    uint16_t keys_threshold_init[12] = 
 8000f3e:	81fb      	strh	r3, [r7, #14]
        keyboard_settings._3trigger_speed_threshold,
 8000f40:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <Keyboard_Init+0x148>)
 8000f42:	8a9b      	ldrh	r3, [r3, #20]
    uint16_t keys_threshold_init[12] = 
 8000f44:	823b      	strh	r3, [r7, #16]
        keyboard_settings._4trigger_speed_threshold,
 8000f46:	4b36      	ldr	r3, [pc, #216]	@ (8001020 <Keyboard_Init+0x148>)
 8000f48:	8b5b      	ldrh	r3, [r3, #26]
    uint16_t keys_threshold_init[12] = 
 8000f4a:	827b      	strh	r3, [r7, #18]

        keyboard_settings._1release_speed_threshold,
 8000f4c:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <Keyboard_Init+0x148>)
 8000f4e:	895b      	ldrh	r3, [r3, #10]
    uint16_t keys_threshold_init[12] = 
 8000f50:	82bb      	strh	r3, [r7, #20]
        keyboard_settings._2release_speed_threshold,
 8000f52:	4b33      	ldr	r3, [pc, #204]	@ (8001020 <Keyboard_Init+0x148>)
 8000f54:	8a1b      	ldrh	r3, [r3, #16]
    uint16_t keys_threshold_init[12] = 
 8000f56:	82fb      	strh	r3, [r7, #22]
        keyboard_settings._3release_speed_threshold,
 8000f58:	4b31      	ldr	r3, [pc, #196]	@ (8001020 <Keyboard_Init+0x148>)
 8000f5a:	8adb      	ldrh	r3, [r3, #22]
    uint16_t keys_threshold_init[12] = 
 8000f5c:	833b      	strh	r3, [r7, #24]
        keyboard_settings._4release_speed_threshold
 8000f5e:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <Keyboard_Init+0x148>)
 8000f60:	8b9b      	ldrh	r3, [r3, #28]
    uint16_t keys_threshold_init[12] = 
 8000f62:	837b      	strh	r3, [r7, #26]
    };

    for (int i = 0; i < 4; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f68:	e046      	b.n	8000ff8 <Keyboard_Init+0x120>
    {
        keys_info_init[i]->key_state = KEY_RELEASED;
 8000f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	3330      	adds	r3, #48	@ 0x30
 8000f70:	443b      	add	r3, r7
 8000f72:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000f76:	2203      	movs	r2, #3
 8000f78:	701a      	strb	r2, [r3, #0]
        keys_info_init[i]->trigger_position_threshold = keys_threshold_init[i]; // 触发位置阈值
 8000f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	3330      	adds	r3, #48	@ 0x30
 8000f80:	443b      	add	r3, r7
 8000f82:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	3330      	adds	r3, #48	@ 0x30
 8000f8c:	443b      	add	r3, r7
 8000f8e:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000f92:	8053      	strh	r3, [r2, #2]
        keys_info_init[i]->trigger_speed_threshold = keys_threshold_init[i + 4]; // 触发速度阈值
 8000f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f96:	1d19      	adds	r1, r3, #4
 8000f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	3330      	adds	r3, #48	@ 0x30
 8000f9e:	443b      	add	r3, r7
 8000fa0:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fa4:	004b      	lsls	r3, r1, #1
 8000fa6:	3330      	adds	r3, #48	@ 0x30
 8000fa8:	443b      	add	r3, r7
 8000faa:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000fae:	8093      	strh	r3, [r2, #4]
        keys_info_init[i]->release_speed_threshold = keys_threshold_init[i + 8]; // 释放速度阈值
 8000fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb2:	f103 0108 	add.w	r1, r3, #8
 8000fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	3330      	adds	r3, #48	@ 0x30
 8000fbc:	443b      	add	r3, r7
 8000fbe:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fc2:	004b      	lsls	r3, r1, #1
 8000fc4:	3330      	adds	r3, #48	@ 0x30
 8000fc6:	443b      	add	r3, r7
 8000fc8:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000fcc:	80d3      	strh	r3, [r2, #6]
        keys_info_init[i]->press_time = HAL_GetTick(); // 初始化按下时间戳
 8000fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	3330      	adds	r3, #48	@ 0x30
 8000fd4:	443b      	add	r3, r7
 8000fd6:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8000fda:	f001 fd15 	bl	8002a08 <HAL_GetTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60a3      	str	r3, [r4, #8]
        keys_info_init[i]->press_speed = 0; // 初始化按下速度
 8000fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	3330      	adds	r3, #48	@ 0x30
 8000fe8:	443b      	add	r3, r7
 8000fea:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	819a      	strh	r2, [r3, #12]
    for (int i = 0; i < 4; i++)
 8000ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	ddb5      	ble.n	8000f6a <Keyboard_Init+0x92>
    }

    keyboard_state.TouchButton_1 = false;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <Keyboard_Init+0x14c>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    keyboard_state.TouchButton_2 = false;
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <Keyboard_Init+0x14c>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    keyboard_settings.keyboard_mode = 1;
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <Keyboard_Init+0x148>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3734      	adds	r7, #52	@ 0x34
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	0800f48c 	.word	0x0800f48c
 8001020:	20000400 	.word	0x20000400
 8001024:	20000424 	.word	0x20000424

08001028 <update_key_state>:

// Helper Func
static void update_key_state(magnetic_key_info_t *key_info, float current_adc, uint16_t pos_threshold, int16_t speed_trigger, int16_t speed_release)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	ed87 0a02 	vstr	s0, [r7, #8]
 8001034:	4608      	mov	r0, r1
 8001036:	4611      	mov	r1, r2
 8001038:	461a      	mov	r2, r3
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	460b      	mov	r3, r1
 8001040:	80bb      	strh	r3, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	807b      	strh	r3, [r7, #2]
    switch (key_info->key_state)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b03      	cmp	r3, #3
 800104c:	f200 80c1 	bhi.w	80011d2 <update_key_state+0x1aa>
 8001050:	a201      	add	r2, pc, #4	@ (adr r2, 8001058 <update_key_state+0x30>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	080010b5 	.word	0x080010b5
 800105c:	0800111f 	.word	0x0800111f
 8001060:	08001169 	.word	0x08001169
 8001064:	08001069 	.word	0x08001069
    {
        case KEY_RELEASED:
            if (current_adc >= pos_threshold)
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001072:	ed97 7a02 	vldr	s14, [r7, #8]
 8001076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	db08      	blt.n	8001092 <update_key_state+0x6a>
            {
                key_info->key_state = KEY_PRESSED;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001086:	f001 fcbf 	bl	8002a08 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed >= speed_trigger)
            {
                key_info->key_state = KEY_PRESSING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 8001090:	e0a8      	b.n	80011e4 <update_key_state+0x1bc>
            else if (key_info->press_speed >= speed_trigger)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001098:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	f300 80a1 	bgt.w	80011e4 <update_key_state+0x1bc>
                key_info->key_state = KEY_PRESSING;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010a8:	f001 fcae 	bl	8002a08 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	609a      	str	r2, [r3, #8]
            break;
 80010b2:	e097      	b.n	80011e4 <update_key_state+0x1bc>
        case KEY_PRESSING:
            if (current_adc >= pos_threshold)
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ed97 7a02 	vldr	s14, [r7, #8]
 80010c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	db08      	blt.n	80010de <update_key_state+0xb6>
            {
                key_info->key_state = KEY_PRESSED;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010d2:	f001 fc99 	bl	8002a08 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed < speed_release)
            {
                key_info->key_state = KEY_RELEASING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 80010dc:	e084      	b.n	80011e8 <update_key_state+0x1c0>
            else if (key_info->press_speed < speed_trigger) // 可能是有点抖动造成的
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dd08      	ble.n	80010fe <update_key_state+0xd6>
                key_info->key_state = KEY_RELEASED;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2203      	movs	r2, #3
 80010f0:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010f2:	f001 fc89 	bl	8002a08 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	609a      	str	r2, [r3, #8]
            break;
 80010fc:	e074      	b.n	80011e8 <update_key_state+0x1c0>
            else if (key_info->press_speed < speed_release)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001104:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001108:	429a      	cmp	r2, r3
 800110a:	dd6d      	ble.n	80011e8 <update_key_state+0x1c0>
                key_info->key_state = KEY_RELEASING;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001112:	f001 fc79 	bl	8002a08 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	609a      	str	r2, [r3, #8]
            break;
 800111c:	e064      	b.n	80011e8 <update_key_state+0x1c0>
        case KEY_PRESSED:
            if (current_adc < pos_threshold)
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	ed97 7a02 	vldr	s14, [r7, #8]
 800112c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	d508      	bpl.n	8001148 <update_key_state+0x120>
            {
                key_info->key_state = KEY_RELEASED;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2203      	movs	r2, #3
 800113a:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 800113c:	f001 fc64 	bl	8002a08 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed < speed_release)
            {
                key_info->key_state = KEY_RELEASING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 8001146:	e051      	b.n	80011ec <update_key_state+0x1c4>
            else if (key_info->press_speed < speed_release)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800114e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001152:	429a      	cmp	r2, r3
 8001154:	dd4a      	ble.n	80011ec <update_key_state+0x1c4>
                key_info->key_state = KEY_RELEASING;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2202      	movs	r2, #2
 800115a:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 800115c:	f001 fc54 	bl	8002a08 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	609a      	str	r2, [r3, #8]
            break;
 8001166:	e041      	b.n	80011ec <update_key_state+0x1c4>
        case KEY_RELEASING:
            if (current_adc < pos_threshold)
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001172:	ed97 7a02 	vldr	s14, [r7, #8]
 8001176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d508      	bpl.n	8001192 <update_key_state+0x16a>
            {
                key_info->key_state = KEY_RELEASED;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001186:	f001 fc3f 	bl	8002a08 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed >= speed_trigger)
            {
                key_info->key_state = KEY_PRESSING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 8001190:	e02e      	b.n	80011f0 <update_key_state+0x1c8>
            else if (key_info->press_speed > speed_release)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001198:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800119c:	429a      	cmp	r2, r3
 800119e:	da08      	bge.n	80011b2 <update_key_state+0x18a>
                key_info->key_state = KEY_PRESSED;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80011a6:	f001 fc2f 	bl	8002a08 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	609a      	str	r2, [r3, #8]
            break;
 80011b0:	e01e      	b.n	80011f0 <update_key_state+0x1c8>
            else if (key_info->press_speed >= speed_trigger)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dc17      	bgt.n	80011f0 <update_key_state+0x1c8>
                key_info->key_state = KEY_PRESSING;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80011c6:	f001 fc1f 	bl	8002a08 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	609a      	str	r2, [r3, #8]
            break;
 80011d0:	e00e      	b.n	80011f0 <update_key_state+0x1c8>

    default:
        key_info->key_state = KEY_RELEASED;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]
        key_info->press_time = HAL_GetTick();
 80011d8:	f001 fc16 	bl	8002a08 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	609a      	str	r2, [r3, #8]
        break;
 80011e2:	e006      	b.n	80011f2 <update_key_state+0x1ca>
            break;
 80011e4:	bf00      	nop
 80011e6:	e004      	b.n	80011f2 <update_key_state+0x1ca>
            break;
 80011e8:	bf00      	nop
 80011ea:	e002      	b.n	80011f2 <update_key_state+0x1ca>
            break;
 80011ec:	bf00      	nop
 80011ee:	e000      	b.n	80011f2 <update_key_state+0x1ca>
            break;
 80011f0:	bf00      	nop
    }
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop

080011fc <Keyboard_Read_Input>:

void Keyboard_Read_Input(keyboard_settings_t *settings, keyboard_state_t *state)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	@ 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    ADC_Filter();
 8001206:	f7ff fbf5 	bl	80009f4 <ADC_Filter>

    state->TouchButton_1 = (HAL_GPIO_ReadPin(ESC_Buttom_GPIO_Port, ESC_Buttom_Pin) == GPIO_PIN_SET);
 800120a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800120e:	484e      	ldr	r0, [pc, #312]	@ (8001348 <Keyboard_Read_Input+0x14c>)
 8001210:	f003 ff1c 	bl	800504c <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2da      	uxtb	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    state->TouchButton_2 = (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_SET);
 8001226:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800122a:	4847      	ldr	r0, [pc, #284]	@ (8001348 <Keyboard_Read_Input+0x14c>)
 800122c:	f003 ff0e 	bl	800504c <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    // 状态机部分
    magnetic_key_info_t *keys[4] = 
    {
        &state->KEY_1_info,
 8001242:	683b      	ldr	r3, [r7, #0]
    magnetic_key_info_t *keys[4] = 
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
        &state->KEY_2_info,
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3310      	adds	r3, #16
    magnetic_key_info_t *keys[4] = 
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
        &state->KEY_3_info,
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3320      	adds	r3, #32
    magnetic_key_info_t *keys[4] = 
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
        &state->KEY_4_info
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3330      	adds	r3, #48	@ 0x30
    magnetic_key_info_t *keys[4] = 
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    uint16_t pos_thresholds[4] = 
    {
        settings->_1trigger_position_threshold,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	88db      	ldrh	r3, [r3, #6]
    uint16_t pos_thresholds[4] = 
 800125c:	83bb      	strh	r3, [r7, #28]
        settings->_2trigger_position_threshold,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	899b      	ldrh	r3, [r3, #12]
    uint16_t pos_thresholds[4] = 
 8001262:	83fb      	strh	r3, [r7, #30]
        settings->_3trigger_position_threshold,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	8a5b      	ldrh	r3, [r3, #18]
    uint16_t pos_thresholds[4] = 
 8001268:	843b      	strh	r3, [r7, #32]
        settings->_4trigger_position_threshold
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	8b1b      	ldrh	r3, [r3, #24]
    uint16_t pos_thresholds[4] = 
 800126e:	847b      	strh	r3, [r7, #34]	@ 0x22
    };

    int16_t speed_triggers[4] = 
    {
        settings->_1trigger_speed_threshold,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	891b      	ldrh	r3, [r3, #8]
 8001274:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = 
 8001276:	82bb      	strh	r3, [r7, #20]
        settings->_2trigger_speed_threshold,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	89db      	ldrh	r3, [r3, #14]
 800127c:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = 
 800127e:	82fb      	strh	r3, [r7, #22]
        settings->_3trigger_speed_threshold,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	8a9b      	ldrh	r3, [r3, #20]
 8001284:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = 
 8001286:	833b      	strh	r3, [r7, #24]
        settings->_4trigger_speed_threshold
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8b5b      	ldrh	r3, [r3, #26]
 800128c:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = 
 800128e:	837b      	strh	r3, [r7, #26]
    };

    int16_t speed_releases[4] = 
    {
        settings->_1release_speed_threshold,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	895b      	ldrh	r3, [r3, #10]
 8001294:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = 
 8001296:	81bb      	strh	r3, [r7, #12]
        settings->_2release_speed_threshold,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	8a1b      	ldrh	r3, [r3, #16]
 800129c:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = 
 800129e:	81fb      	strh	r3, [r7, #14]
        settings->_3release_speed_threshold,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8adb      	ldrh	r3, [r3, #22]
 80012a4:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = 
 80012a6:	823b      	strh	r3, [r7, #16]
        settings->_4release_speed_threshold
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	8b9b      	ldrh	r3, [r3, #28]
 80012ac:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = 
 80012ae:	827b      	strh	r3, [r7, #18]
    };

    for (int i = 0; i < 4; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b4:	e040      	b.n	8001338 <Keyboard_Read_Input+0x13c>
    {
        keys[i]->press_speed = CALCULATE_PRESS_SPEED(filter_adc_data[i], last_adc_data[i], 1);
 80012b6:	4a25      	ldr	r2, [pc, #148]	@ (800134c <Keyboard_Read_Input+0x150>)
 80012b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012be:	4619      	mov	r1, r3
 80012c0:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <Keyboard_Read_Input+0x154>)
 80012c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c8:	1acb      	subs	r3, r1, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	0152      	lsls	r2, r2, #5
 80012d0:	1ad2      	subs	r2, r2, r3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	b29a      	uxth	r2, r3
 80012da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3338      	adds	r3, #56	@ 0x38
 80012e0:	443b      	add	r3, r7
 80012e2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80012e6:	b212      	sxth	r2, r2
 80012e8:	819a      	strh	r2, [r3, #12]
        update_key_state(keys[i], filter_adc_data[i], pos_thresholds[i], speed_triggers[i], speed_releases[i]);
 80012ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	3338      	adds	r3, #56	@ 0x38
 80012f0:	443b      	add	r3, r7
 80012f2:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <Keyboard_Read_Input+0x150>)
 80012f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	3338      	adds	r3, #56	@ 0x38
 800130c:	443b      	add	r3, r7
 800130e:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8001312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	3338      	adds	r3, #56	@ 0x38
 8001318:	443b      	add	r3, r7
 800131a:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 800131e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3338      	adds	r3, #56	@ 0x38
 8001324:	443b      	add	r3, r7
 8001326:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	f7ff fe7b 	bl	8001028 <update_key_state>
    for (int i = 0; i < 4; i++)
 8001332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001334:	3301      	adds	r3, #1
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
 8001338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800133a:	2b03      	cmp	r3, #3
 800133c:	ddbb      	ble.n	80012b6 <Keyboard_Read_Input+0xba>
    }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3738      	adds	r7, #56	@ 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	48000400 	.word	0x48000400
 800134c:	20000378 	.word	0x20000378
 8001350:	20000380 	.word	0x20000380

08001354 <Keyboard_Updater>:

void Keyboard_Updater(keyboard_settings_t *settings, keyboard_state_t *state)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    Keyboard_Read_Input(settings, state);
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff4b 	bl	80011fc <Keyboard_Read_Input>
    hid_buffer[0] = KEYBOARD_BUTTON_NONE; // 特殊按键位
 8001366:	4b66      	ldr	r3, [pc, #408]	@ (8001500 <Keyboard_Updater+0x1ac>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
    hid_buffer[1] = KEYBOARD_BUTTON_NONE; // 保留位
 800136c:	4b64      	ldr	r3, [pc, #400]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800136e:	2200      	movs	r2, #0
 8001370:	705a      	strb	r2, [r3, #1]

    if (settings->enable_quick_trigger)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d064      	beq.n	8001444 <Keyboard_Updater+0xf0>
    {
        if (state->KEY_1_info.key_state == KEY_PRESSED || state->KEY_1_info.key_state == KEY_PRESSING)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d003      	beq.n	800138a <Keyboard_Updater+0x36>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <Keyboard_Updater+0x3e>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 800138a:	4b5d      	ldr	r3, [pc, #372]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800138c:	2207      	movs	r2, #7
 800138e:	709a      	strb	r2, [r3, #2]
 8001390:	e00a      	b.n	80013a8 <Keyboard_Updater+0x54>
        }
        else if (state->KEY_1_info.key_state == KEY_RELEASED || state->KEY_1_info.key_state == KEY_RELEASING)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d003      	beq.n	80013a2 <Keyboard_Updater+0x4e>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d102      	bne.n	80013a8 <Keyboard_Updater+0x54>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 80013a2:	4b57      	ldr	r3, [pc, #348]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	709a      	strb	r2, [r3, #2]
        }

        if (state->KEY_2_info.key_state == KEY_PRESSED || state->KEY_2_info.key_state == KEY_PRESSING)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	7c1b      	ldrb	r3, [r3, #16]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d003      	beq.n	80013b8 <Keyboard_Updater+0x64>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	7c1b      	ldrb	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d103      	bne.n	80013c0 <Keyboard_Updater+0x6c>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 80013b8:	4b51      	ldr	r3, [pc, #324]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80013ba:	2209      	movs	r2, #9
 80013bc:	70da      	strb	r2, [r3, #3]
 80013be:	e00a      	b.n	80013d6 <Keyboard_Updater+0x82>
        }
        else if (state->KEY_2_info.key_state == KEY_RELEASED || state->KEY_2_info.key_state == KEY_RELEASING)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	7c1b      	ldrb	r3, [r3, #16]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d003      	beq.n	80013d0 <Keyboard_Updater+0x7c>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	7c1b      	ldrb	r3, [r3, #16]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d102      	bne.n	80013d6 <Keyboard_Updater+0x82>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 80013d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	70da      	strb	r2, [r3, #3]
        }

        if (state->KEY_3_info.key_state == KEY_PRESSED || state->KEY_3_info.key_state == KEY_PRESSING)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d004      	beq.n	80013ea <Keyboard_Updater+0x96>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d103      	bne.n	80013f2 <Keyboard_Updater+0x9e>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 80013ea:	4b45      	ldr	r3, [pc, #276]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80013ec:	220d      	movs	r2, #13
 80013ee:	711a      	strb	r2, [r3, #4]
 80013f0:	e00c      	b.n	800140c <Keyboard_Updater+0xb8>
        }
        else if (state->KEY_3_info.key_state == KEY_RELEASED || state->KEY_3_info.key_state == KEY_RELEASING)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d004      	beq.n	8001406 <Keyboard_Updater+0xb2>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d102      	bne.n	800140c <Keyboard_Updater+0xb8>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 8001406:	4b3e      	ldr	r3, [pc, #248]	@ (8001500 <Keyboard_Updater+0x1ac>)
 8001408:	2200      	movs	r2, #0
 800140a:	711a      	strb	r2, [r3, #4]
        }

        if (state->KEY_4_info.key_state == KEY_PRESSED || state->KEY_4_info.key_state == KEY_PRESSING)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001412:	2b01      	cmp	r3, #1
 8001414:	d004      	beq.n	8001420 <Keyboard_Updater+0xcc>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <Keyboard_Updater+0xd4>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 8001420:	4b37      	ldr	r3, [pc, #220]	@ (8001500 <Keyboard_Updater+0x1ac>)
 8001422:	220e      	movs	r2, #14
 8001424:	715a      	strb	r2, [r3, #5]
 8001426:	e04d      	b.n	80014c4 <Keyboard_Updater+0x170>
        }
        else if (state->KEY_4_info.key_state == KEY_RELEASED || state->KEY_4_info.key_state == KEY_RELEASING)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800142e:	2b03      	cmp	r3, #3
 8001430:	d004      	beq.n	800143c <Keyboard_Updater+0xe8>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001438:	2b02      	cmp	r3, #2
 800143a:	d143      	bne.n	80014c4 <Keyboard_Updater+0x170>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 800143c:	4b30      	ldr	r3, [pc, #192]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800143e:	2200      	movs	r2, #0
 8001440:	715a      	strb	r2, [r3, #5]
 8001442:	e03f      	b.n	80014c4 <Keyboard_Updater+0x170>
        }
    }
    else
    {
        if (state->KEY_1_info.key_state == KEY_PRESSED)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d103      	bne.n	8001454 <Keyboard_Updater+0x100>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 800144c:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800144e:	2207      	movs	r2, #7
 8001450:	709a      	strb	r2, [r3, #2]
 8001452:	e006      	b.n	8001462 <Keyboard_Updater+0x10e>
        }
        else if (state->KEY_1_info.key_state == KEY_RELEASED)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d102      	bne.n	8001462 <Keyboard_Updater+0x10e>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800145e:	2200      	movs	r2, #0
 8001460:	709a      	strb	r2, [r3, #2]
        }

        if (state->KEY_2_info.key_state == KEY_PRESSED)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7c1b      	ldrb	r3, [r3, #16]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d103      	bne.n	8001472 <Keyboard_Updater+0x11e>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 800146a:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800146c:	2209      	movs	r2, #9
 800146e:	70da      	strb	r2, [r3, #3]
 8001470:	e006      	b.n	8001480 <Keyboard_Updater+0x12c>
        }
        else if (state->KEY_2_info.key_state == KEY_RELEASED)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	7c1b      	ldrb	r3, [r3, #16]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d102      	bne.n	8001480 <Keyboard_Updater+0x12c>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800147c:	2200      	movs	r2, #0
 800147e:	70da      	strb	r2, [r3, #3]
        }

        if (state->KEY_3_info.key_state == KEY_PRESSED)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d103      	bne.n	8001492 <Keyboard_Updater+0x13e>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800148c:	220d      	movs	r2, #13
 800148e:	711a      	strb	r2, [r3, #4]
 8001490:	e007      	b.n	80014a2 <Keyboard_Updater+0x14e>
        }
        else if (state->KEY_3_info.key_state == KEY_RELEASED)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d102      	bne.n	80014a2 <Keyboard_Updater+0x14e>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <Keyboard_Updater+0x1ac>)
 800149e:	2200      	movs	r2, #0
 80014a0:	711a      	strb	r2, [r3, #4]
        }

        if (state->KEY_4_info.key_state == KEY_PRESSED)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d103      	bne.n	80014b4 <Keyboard_Updater+0x160>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80014ae:	220e      	movs	r2, #14
 80014b0:	715a      	strb	r2, [r3, #5]
 80014b2:	e007      	b.n	80014c4 <Keyboard_Updater+0x170>
        }
        else if (state->KEY_4_info.key_state == KEY_RELEASED)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d102      	bne.n	80014c4 <Keyboard_Updater+0x170>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	715a      	strb	r2, [r3, #5]
        }

    }
    
    hid_buffer[6] = state->TouchButton_1 ? KEYBOARD_BUTTON_ESC : KEYBOARD_BUTTON_NONE;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <Keyboard_Updater+0x17e>
 80014ce:	2229      	movs	r2, #41	@ 0x29
 80014d0:	e000      	b.n	80014d4 <Keyboard_Updater+0x180>
 80014d2:	2200      	movs	r2, #0
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80014d6:	719a      	strb	r2, [r3, #6]
    hid_buffer[7] = KEYBOARD_BUTTON_NONE; // 这是padding
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	71da      	strb	r2, [r3, #7]

    // 这里的TouchButton_2是模式切换按钮,不需要发送到USB HID
    // 发送USB HID报告
    if (settings->keyboard_mode == 1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d104      	bne.n	80014f0 <Keyboard_Updater+0x19c>
    {
        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, sizeof(hid_buffer));
 80014e6:	2208      	movs	r2, #8
 80014e8:	4905      	ldr	r1, [pc, #20]	@ (8001500 <Keyboard_Updater+0x1ac>)
 80014ea:	4806      	ldr	r0, [pc, #24]	@ (8001504 <Keyboard_Updater+0x1b0>)
 80014ec:	f00b faa4 	bl	800ca38 <USBD_HID_SendReport>
    }

    keyboard_update_flag = 0; // 清除更新标志位
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <Keyboard_Updater+0x1b4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000046c 	.word	0x2000046c
 8001504:	20002564 	.word	0x20002564
 8001508:	20000468 	.word	0x20000468

0800150c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 这里是1000hz的定时器中断
{
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6 && !keyboard_update_flag) // TIM6用于扫描&更新键盘状态
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a10      	ldr	r2, [pc, #64]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10a      	bne.n	8001534 <HAL_TIM_PeriodElapsedCallback+0x28>
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        keyboard_update_flag = 1;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
        Keyboard_Updater(&keyboard_settings, &keyboard_state);
 800152c:	490d      	ldr	r1, [pc, #52]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800152e:	480e      	ldr	r0, [pc, #56]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001530:	f7ff ff10 	bl	8001354 <Keyboard_Updater>
    }

    if (htim->Instance == TIM6)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10a      	bne.n	8001554 <HAL_TIM_PeriodElapsedCallback+0x48>
    {
        msg_counter++;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	1c54      	adds	r4, r2, #1
 8001546:	f143 0500 	adc.w	r5, r3, #0
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800154c:	e9c3 4500 	strd	r4, r5, [r3]
        CPS_Counter(); // 计算CPS
 8001550:	f000 fa02 	bl	8001958 <CPS_Counter>
    }
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	40001000 	.word	0x40001000
 8001560:	20000468 	.word	0x20000468
 8001564:	20000424 	.word	0x20000424
 8001568:	20000400 	.word	0x20000400
 800156c:	20001e70 	.word	0x20001e70

08001570 <Keyboard_Settings_Read>:


#pragma region EEPROM Simulation

void Keyboard_Settings_Read(void)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
    uint32_t* p_settings_in_flash = (uint32_t*)KEYBOARD_SETTINGS_FLASH_START_ADDRESS;
 8001576:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <Keyboard_Settings_Read+0xa4>)
 8001578:	60fb      	str	r3, [r7, #12]

    // 计算Flash中存储的数据的CRC值，并与数据自身存储的CRC值进行比较
    uint32_t crc_check = HAL_CRC_Calculate(&hcrc, p_settings_in_flash, BYTES_TO_WORDS(sizeof(keyboard_settings_t)) - 1);
 800157a:	2208      	movs	r2, #8
 800157c:	68f9      	ldr	r1, [r7, #12]
 800157e:	4826      	ldr	r0, [pc, #152]	@ (8001618 <Keyboard_Settings_Read+0xa8>)
 8001580:	f002 ff64 	bl	800444c <HAL_CRC_Calculate>
 8001584:	60b8      	str	r0, [r7, #8]

    // 从Flash中读取CRC值
    uint32_t stored_crc = *(p_settings_in_flash + BYTES_TO_WORDS(sizeof(keyboard_settings_t)) - 1);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	607b      	str	r3, [r7, #4]

    // 比较CRC值
    if (crc_check == stored_crc)
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	d10a      	bne.n	80015aa <Keyboard_Settings_Read+0x3a>
    {
        memcpy(&keyboard_settings, (void*)KEYBOARD_SETTINGS_FLASH_START_ADDRESS, sizeof(keyboard_settings_t));
 8001594:	4a21      	ldr	r2, [pc, #132]	@ (800161c <Keyboard_Settings_Read+0xac>)
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <Keyboard_Settings_Read+0xa4>)
 8001598:	4614      	mov	r4, r2
 800159a:	461d      	mov	r5, r3
 800159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	6023      	str	r3, [r4, #0]
        keyboard_settings._4trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
        keyboard_settings._4release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度

        // Keyboard_Settings_Save(); // Debug时候可以关闭
    }
}
 80015a8:	e030      	b.n	800160c <Keyboard_Settings_Read+0x9c>
        keyboard_settings.keyboard_mode = 1; // 默认模式
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
        keyboard_settings.rgb_style = 1; // 默认RGB风格
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	705a      	strb	r2, [r3, #1]
        keyboard_settings.enable_quick_trigger = 0; // 默认不开启快速触发
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	715a      	strb	r2, [r3, #5]
        keyboard_settings._1trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015c2:	80da      	strh	r2, [r3, #6]
        keyboard_settings._1trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度阈值
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015c6:	2264      	movs	r2, #100	@ 0x64
 80015c8:	811a      	strh	r2, [r3, #8]
        keyboard_settings._1release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015cc:	2232      	movs	r2, #50	@ 0x32
 80015ce:	815a      	strh	r2, [r3, #10]
        keyboard_settings._2trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d6:	819a      	strh	r2, [r3, #12]
        keyboard_settings._2trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 80015d8:	4b10      	ldr	r3, [pc, #64]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015da:	2264      	movs	r2, #100	@ 0x64
 80015dc:	81da      	strh	r2, [r3, #14]
        keyboard_settings._2release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015e0:	2232      	movs	r2, #50	@ 0x32
 80015e2:	821a      	strh	r2, [r3, #16]
        keyboard_settings._3trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ea:	825a      	strh	r2, [r3, #18]
        keyboard_settings._3trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015ee:	2264      	movs	r2, #100	@ 0x64
 80015f0:	829a      	strh	r2, [r3, #20]
        keyboard_settings._3release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015f4:	2232      	movs	r2, #50	@ 0x32
 80015f6:	82da      	strh	r2, [r3, #22]
        keyboard_settings._4trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <Keyboard_Settings_Read+0xac>)
 80015fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015fe:	831a      	strh	r2, [r3, #24]
        keyboard_settings._4trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <Keyboard_Settings_Read+0xac>)
 8001602:	2264      	movs	r2, #100	@ 0x64
 8001604:	835a      	strh	r2, [r3, #26]
        keyboard_settings._4release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 8001606:	4b05      	ldr	r3, [pc, #20]	@ (800161c <Keyboard_Settings_Read+0xac>)
 8001608:	2232      	movs	r2, #50	@ 0x32
 800160a:	839a      	strh	r2, [r3, #28]
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bdb0      	pop	{r4, r5, r7, pc}
 8001614:	0801f800 	.word	0x0801f800
 8001618:	20000388 	.word	0x20000388
 800161c:	20000400 	.word	0x20000400

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f001 f98b 	bl	800293e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f81c 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162c:	f7ff fb30 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001630:	f7ff faf4 	bl	8000c1c <MX_DMA_Init>
  MX_ADC2_Init();
 8001634:	f7ff f862 	bl	80006fc <MX_ADC2_Init>
  MX_I2C1_Init();
 8001638:	f7ff fb92 	bl	8000d60 <MX_I2C1_Init>
  MX_USB_Device_Init();
 800163c:	f00c fb50 	bl	800dce0 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001640:	f7fe ffd4 	bl	80005ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8001644:	f000 ff62 	bl	800250c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001648:	f001 f8ac 	bl	80027a4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800164c:	f7ff faa4 	bl	8000b98 <MX_CRC_Init>
  MX_TIM6_Init();
 8001650:	f000 ffd2 	bl	80025f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 8001654:	f7ff fc40 	bl	8000ed8 <Keyboard_Init>
  HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	@ 0x64
 800165a:	f001 f9e1 	bl	8002a20 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    RGB_Loop();
 800165e:	f000 fd5b 	bl	8002118 <RGB_Loop>
 8001662:	e7fc      	b.n	800165e <main+0x3e>

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	@ 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2238      	movs	r2, #56	@ 0x38
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00d f857 	bl	800e726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001686:	2000      	movs	r0, #0
 8001688:	f005 fe8c 	bl	80073a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800168c:	2321      	movs	r3, #33	@ 0x21
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001694:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001696:	2301      	movs	r3, #1
 8001698:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169e:	2303      	movs	r3, #3
 80016a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016a6:	2355      	movs	r3, #85	@ 0x55
 80016a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	4618      	mov	r0, r3
 80016bc:	f005 ff26 	bl	800750c <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016c6:	f000 f818 	bl	80016fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2104      	movs	r1, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 fa24 	bl	8007b30 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016ee:	f000 f804 	bl	80016fa <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	@ 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fe:	b672      	cpsid	i
}
 8001700:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001702:	bf00      	nop
 8001704:	e7fd      	b.n	8001702 <Error_Handler+0x8>
	...

08001708 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 800170e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001712:	2100      	movs	r1, #0
 8001714:	4811      	ldr	r0, [pc, #68]	@ (800175c <OLED_InitBuffer+0x54>)
 8001716:	f00d f806 	bl	800e726 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 800171a:	f240 4201 	movw	r2, #1025	@ 0x401
 800171e:	2100      	movs	r1, #0
 8001720:	480f      	ldr	r0, [pc, #60]	@ (8001760 <OLED_InitBuffer+0x58>)
 8001722:	f00d f800 	bl	800e726 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <OLED_InitBuffer+0x58>)
 8001728:	2240      	movs	r2, #64	@ 0x40
 800172a:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <OLED_InitBuffer+0x5c>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <OLED_InitBuffer+0x60>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	e006      	b.n	800174c <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <OLED_InitBuffer+0x64>)
 8001742:	2101      	movs	r1, #1
 8001744:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	3301      	adds	r3, #1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d9f5      	bls.n	800173e <OLED_InitBuffer+0x36>
    }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000480 	.word	0x20000480
 8001760:	20000880 	.word	0x20000880
 8001764:	20000474 	.word	0x20000474
 8001768:	20000475 	.word	0x20000475
 800176c:	20000478 	.word	0x20000478

08001770 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177a:	2100      	movs	r1, #0
 800177c:	480a      	ldr	r0, [pc, #40]	@ (80017a8 <OLED_ClearBuffer+0x38>)
 800177e:	f00c ffd2 	bl	800e726 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e006      	b.n	8001796 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <OLED_ClearBuffer+0x3c>)
 800178c:	2101      	movs	r1, #1
 800178e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	3301      	adds	r3, #1
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b07      	cmp	r3, #7
 800179a:	d9f5      	bls.n	8001788 <OLED_ClearBuffer+0x18>
    }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000480 	.word	0x20000480
 80017ac:	20000478 	.word	0x20000478

080017b0 <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 80017ba:	2300      	movs	r3, #0
 80017bc:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 80017c2:	f107 020c 	add.w	r2, r7, #12
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2302      	movs	r3, #2
 80017ce:	2178      	movs	r1, #120	@ 0x78
 80017d0:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <OLED_SendCommand+0x30>)
 80017d2:	f003 fd07 	bl	80051e4 <HAL_I2C_Master_Transmit>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003ac 	.word	0x200003ac

080017e4 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 80017e8:	2064      	movs	r0, #100	@ 0x64
 80017ea:	f001 f919 	bl	8002a20 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 80017ee:	20ae      	movs	r0, #174	@ 0xae
 80017f0:	f7ff ffde 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 80017f4:	20d5      	movs	r0, #213	@ 0xd5
 80017f6:	f7ff ffdb 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 80017fa:	2080      	movs	r0, #128	@ 0x80
 80017fc:	f7ff ffd8 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001800:	20a8      	movs	r0, #168	@ 0xa8
 8001802:	f7ff ffd5 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001806:	203f      	movs	r0, #63	@ 0x3f
 8001808:	f7ff ffd2 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 800180c:	20d3      	movs	r0, #211	@ 0xd3
 800180e:	f7ff ffcf 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff ffcc 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001818:	2040      	movs	r0, #64	@ 0x40
 800181a:	f7ff ffc9 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 800181e:	208d      	movs	r0, #141	@ 0x8d
 8001820:	f7ff ffc6 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001824:	2014      	movs	r0, #20
 8001826:	f7ff ffc3 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 800182a:	2020      	movs	r0, #32
 800182c:	f7ff ffc0 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ffbd 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001836:	20a1      	movs	r0, #161	@ 0xa1
 8001838:	f7ff ffba 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 800183c:	20c8      	movs	r0, #200	@ 0xc8
 800183e:	f7ff ffb7 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8001842:	20da      	movs	r0, #218	@ 0xda
 8001844:	f7ff ffb4 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001848:	2012      	movs	r0, #18
 800184a:	f7ff ffb1 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 800184e:	2081      	movs	r0, #129	@ 0x81
 8001850:	f7ff ffae 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8001854:	20cf      	movs	r0, #207	@ 0xcf
 8001856:	f7ff ffab 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 800185a:	20d9      	movs	r0, #217	@ 0xd9
 800185c:	f7ff ffa8 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8001860:	20f1      	movs	r0, #241	@ 0xf1
 8001862:	f7ff ffa5 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8001866:	20db      	movs	r0, #219	@ 0xdb
 8001868:	f7ff ffa2 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 800186c:	2030      	movs	r0, #48	@ 0x30
 800186e:	f7ff ff9f 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8001872:	20a4      	movs	r0, #164	@ 0xa4
 8001874:	f7ff ff9c 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8001878:	20a6      	movs	r0, #166	@ 0xa6
 800187a:	f7ff ff99 	bl	80017b0 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 800187e:	202e      	movs	r0, #46	@ 0x2e
 8001880:	f7ff ff96 	bl	80017b0 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8001884:	f7ff ff40 	bl	8001708 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8001888:	f7ff ff72 	bl	8001770 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 800188c:	20af      	movs	r0, #175	@ 0xaf
 800188e:	f7ff ff8f 	bl	80017b0 <OLED_SendCommand>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}

08001896 <OLED_InitAnimationManager>:
AnimationManager_t g_Icon_AnimationManager;    // 菜单动画管理器
AnimationManager_t g_Title_AnimationManager; // 标题动画管理器
AnimationManager_t g_AnimationManager;       // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00c ff39 	bl	800e726 <memset>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <OLED_UI_Init>:
#define OLED_CURSOR_TWEEN_DURATION 400
#define OLED_CURSOR_TWEEN_POSITION EASE_INOUT_CUBIC
#define OLED_CURSOR_TWEEN_SCALE EASE_INOUT_CUBIC

void OLED_UI_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
    OLED_InitAnimationManager(&g_Icon_AnimationManager);
 80018c0:	4818      	ldr	r0, [pc, #96]	@ (8001924 <OLED_UI_Init+0x68>)
 80018c2:	f7ff ffe8 	bl	8001896 <OLED_InitAnimationManager>
    OLED_InitAnimationManager(&g_Title_AnimationManager);
 80018c6:	4818      	ldr	r0, [pc, #96]	@ (8001928 <OLED_UI_Init+0x6c>)
 80018c8:	f7ff ffe5 	bl	8001896 <OLED_InitAnimationManager>
    OLED_InitAnimationManager(&g_AnimationManager);
 80018cc:	4817      	ldr	r0, [pc, #92]	@ (800192c <OLED_UI_Init+0x70>)
 80018ce:	f7ff ffe2 	bl	8001896 <OLED_InitAnimationManager>

    keyDOWN = keyUP = keyLEFT = keyRIGHT = keyENTER = false;
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <OLED_UI_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <OLED_UI_Init+0x74>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <OLED_UI_Init+0x78>)
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <OLED_UI_Init+0x78>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <OLED_UI_Init+0x7c>)
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <OLED_UI_Init+0x7c>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <OLED_UI_Init+0x80>)
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <OLED_UI_Init+0x80>)
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <OLED_UI_Init+0x84>)
 80018f6:	701a      	strb	r2, [r3, #0]
    MutiKeyUp = MutiKeyDown = MutiKeyLeft = MutiKeyRight = MutiKeyEnter = false;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <OLED_UI_Init+0x88>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <OLED_UI_Init+0x88>)
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <OLED_UI_Init+0x8c>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <OLED_UI_Init+0x8c>)
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <OLED_UI_Init+0x90>)
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <OLED_UI_Init+0x90>)
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <OLED_UI_Init+0x94>)
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <OLED_UI_Init+0x94>)
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <OLED_UI_Init+0x98>)
 800191c:	701a      	strb	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000c84 	.word	0x20000c84
 8001928:	20001278 	.word	0x20001278
 800192c:	2000186c 	.word	0x2000186c
 8001930:	20001e69 	.word	0x20001e69
 8001934:	20001e68 	.word	0x20001e68
 8001938:	20001e67 	.word	0x20001e67
 800193c:	20001e65 	.word	0x20001e65
 8001940:	20001e66 	.word	0x20001e66
 8001944:	20001e64 	.word	0x20001e64
 8001948:	20001e63 	.word	0x20001e63
 800194c:	20001e62 	.word	0x20001e62
 8001950:	20001e61 	.word	0x20001e61
 8001954:	20001e60 	.word	0x20001e60

08001958 <CPS_Counter>:
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新全局动画管理器
    OLED_SmartUpdate(); // 使用智能更新模式
}

void CPS_Counter(void)
{
 8001958:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800195c:	af00      	add	r7, sp, #0
    static uint64_t last_counter = 0;

    if (msg_counter - last_counter >= 100) // 每100ms计算一次CPS
 800195e:	4915      	ldr	r1, [pc, #84]	@ (80019b4 <CPS_Counter+0x5c>)
 8001960:	e9d1 4500 	ldrd	r4, r5, [r1]
 8001964:	4914      	ldr	r1, [pc, #80]	@ (80019b8 <CPS_Counter+0x60>)
 8001966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800196a:	1a22      	subs	r2, r4, r0
 800196c:	eb65 0301 	sbc.w	r3, r5, r1
 8001970:	2a64      	cmp	r2, #100	@ 0x64
 8001972:	f173 0300 	sbcs.w	r3, r3, #0
 8001976:	d318      	bcc.n	80019aa <CPS_Counter+0x52>
    {
        cps = (uint16_t) ((msg_counter - last_counter) * 10);
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <CPS_Counter+0x5c>)
 800197a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <CPS_Counter+0x60>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	ebb0 0802 	subs.w	r8, r0, r2
 8001988:	eb61 0903 	sbc.w	r9, r1, r3
 800198c:	fa1f f388 	uxth.w	r3, r8
 8001990:	461a      	mov	r2, r3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <CPS_Counter+0x64>)
 800199c:	801a      	strh	r2, [r3, #0]
        last_counter = msg_counter;
 800199e:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <CPS_Counter+0x5c>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	4904      	ldr	r1, [pc, #16]	@ (80019b8 <CPS_Counter+0x60>)
 80019a6:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80019b2:	4770      	bx	lr
 80019b4:	20001e70 	.word	0x20001e70
 80019b8:	20001e78 	.word	0x20001e78
 80019bc:	20001e6a 	.word	0x20001e6a

080019c0 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <OLED_EnableDiffMode+0x30>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	7013      	strb	r3, [r2, #0]
    if (enable)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 80019d6:	4a07      	ldr	r2, [pc, #28]	@ (80019f4 <OLED_EnableDiffMode+0x34>)
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <OLED_EnableDiffMode+0x38>)
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019e2:	461a      	mov	r2, r3
 80019e4:	f00c ff1b 	bl	800e81e <memcpy>
    }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20002280 	.word	0x20002280
 80019f4:	20001e80 	.word	0x20001e80
 80019f8:	20000480 	.word	0x20000480

080019fc <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <OLED_EnableFastUpdate+0x1c>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	7013      	strb	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	20000000 	.word	0x20000000

08001a1c <RGB_Init>:
static led_fade_t led_fade_states[NUM_LEDS];
static uint8_t led_colors[NUM_LEDS][3];
static uint16_t pwm_buffer[PWM_BUFFER_LEN];

void RGB_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    RGB_Clear();
 8001a20:	f000 f838 	bl	8001a94 <RGB_Clear>
    RGB_Update();
 8001a24:	f000 f84e 	bl	8001ac4 <RGB_Update>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <RGB_SetColor>:

// RGB范围是0-255
// led_index: 0-3
void RGB_SetColor(uint8_t led_index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001a2c:	b490      	push	{r4, r7}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71bb      	strb	r3, [r7, #6]
 8001a42:	460b      	mov	r3, r1
 8001a44:	717b      	strb	r3, [r7, #5]
 8001a46:	4613      	mov	r3, r2
 8001a48:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d819      	bhi.n	8001a84 <RGB_SetColor+0x58>
    {
        led_colors[led_index][0] = red;
 8001a50:	79fa      	ldrb	r2, [r7, #7]
 8001a52:	490f      	ldr	r1, [pc, #60]	@ (8001a90 <RGB_SetColor+0x64>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	79ba      	ldrb	r2, [r7, #6]
 8001a5e:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][1] = green;
 8001a60:	79fa      	ldrb	r2, [r7, #7]
 8001a62:	490b      	ldr	r1, [pc, #44]	@ (8001a90 <RGB_SetColor+0x64>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	797a      	ldrb	r2, [r7, #5]
 8001a70:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][2] = blue;
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	4906      	ldr	r1, [pc, #24]	@ (8001a90 <RGB_SetColor+0x64>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3302      	adds	r3, #2
 8001a80:	793a      	ldrb	r2, [r7, #4]
 8001a82:	701a      	strb	r2, [r3, #0]
    }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc90      	pop	{r4, r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200022a8 	.word	0x200022a8

08001a94 <RGB_Clear>:

void RGB_Clear(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	e009      	b.n	8001ab4 <RGB_Clear+0x20>
    {
        RGB_SetColor(i, 0, 0, 0);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f7ff ffbf 	bl	8001a2c <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	ddf2      	ble.n	8001aa0 <RGB_Clear+0xc>
    }
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <RGB_Update>:

//! setColor之后请直接调用这个来更新LED颜色
void RGB_Update(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e067      	b.n	8001ba4 <RGB_Update+0xe0>
    {
        // Green
        for (int j = 7; j >= 0; j--)
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e01b      	b.n	8001b12 <RGB_Update+0x4e>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][1] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001ada:	4941      	ldr	r1, [pc, #260]	@ (8001be0 <RGB_Update+0x11c>)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	fa42 f303 	asr.w	r3, r2, r3
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <RGB_Update+0x3a>
 8001afa:	2188      	movs	r1, #136	@ 0x88
 8001afc:	e000      	b.n	8001b00 <RGB_Update+0x3c>
 8001afe:	2144      	movs	r1, #68	@ 0x44
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	617a      	str	r2, [r7, #20]
 8001b06:	4a37      	ldr	r2, [pc, #220]	@ (8001be4 <RGB_Update+0x120>)
 8001b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	dae0      	bge.n	8001ada <RGB_Update+0x16>
        }
        // Red
        for (int j = 7; j >= 0; j--)
 8001b18:	2307      	movs	r3, #7
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	e01a      	b.n	8001b54 <RGB_Update+0x90>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][0] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001b1e:	4930      	ldr	r1, [pc, #192]	@ (8001be0 <RGB_Update+0x11c>)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	fa42 f303 	asr.w	r3, r2, r3
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <RGB_Update+0x7c>
 8001b3c:	2188      	movs	r1, #136	@ 0x88
 8001b3e:	e000      	b.n	8001b42 <RGB_Update+0x7e>
 8001b40:	2144      	movs	r1, #68	@ 0x44
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	617a      	str	r2, [r7, #20]
 8001b48:	4a26      	ldr	r2, [pc, #152]	@ (8001be4 <RGB_Update+0x120>)
 8001b4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	dae1      	bge.n	8001b1e <RGB_Update+0x5a>
        }
        // Blue
        for (int j = 7; j >= 0; j--)
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	e01b      	b.n	8001b98 <RGB_Update+0xd4>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][2] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001b60:	491f      	ldr	r1, [pc, #124]	@ (8001be0 <RGB_Update+0x11c>)
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	fa42 f303 	asr.w	r3, r2, r3
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <RGB_Update+0xc0>
 8001b80:	2188      	movs	r1, #136	@ 0x88
 8001b82:	e000      	b.n	8001b86 <RGB_Update+0xc2>
 8001b84:	2144      	movs	r1, #68	@ 0x44
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	617a      	str	r2, [r7, #20]
 8001b8c:	4a15      	ldr	r2, [pc, #84]	@ (8001be4 <RGB_Update+0x120>)
 8001b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	dae0      	bge.n	8001b60 <RGB_Update+0x9c>
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	dd94      	ble.n	8001ad4 <RGB_Update+0x10>
        }
    }

    // Reset pulse
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	e009      	b.n	8001bc4 <RGB_Update+0x100>
    {
        pwm_buffer[buffer_index++] = 0;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	617a      	str	r2, [r7, #20]
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <RGB_Update+0x120>)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b29      	cmp	r3, #41	@ 0x29
 8001bc8:	ddf2      	ble.n	8001bb0 <RGB_Update+0xec>
    }

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwm_buffer, PWM_BUFFER_LEN);
 8001bca:	238a      	movs	r3, #138	@ 0x8a
 8001bcc:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <RGB_Update+0x120>)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <RGB_Update+0x124>)
 8001bd2:	f006 fc71 	bl	80084b8 <HAL_TIM_PWM_Start_DMA>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200022a8 	.word	0x200022a8
 8001be4:	200022b4 	.word	0x200022b4
 8001be8:	200023d0 	.word	0x200023d0

08001bec <Hue_To_RGB>:

// --- Helper function for rainbow effect ---
// Converts a hue value (0-255) to an RGB color.
static void Hue_To_RGB(uint8_t hue, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
    if (hue < 85)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b54      	cmp	r3, #84	@ 0x54
 8001c00:	d814      	bhi.n	8001c2c <Hue_To_RGB+0x40>
    { // Red -> Green
        *r = (85 - hue) * 3;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	0052      	lsls	r2, r2, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	701a      	strb	r2, [r3, #0]
        *g = hue * 3;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	0052      	lsls	r2, r2, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
        hue -= 170;
        *r = hue * 3;
        *g = 0;
        *b = (85 - hue) * 3;
    }
}
 8001c2a:	e031      	b.n	8001c90 <Hue_To_RGB+0xa4>
    else if (hue < 170)
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2ba9      	cmp	r3, #169	@ 0xa9
 8001c30:	d817      	bhi.n	8001c62 <Hue_To_RGB+0x76>
        hue -= 85;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3b55      	subs	r3, #85	@ 0x55
 8001c36:	73fb      	strb	r3, [r7, #15]
        *r = 0;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
        *g = (85 - hue) * 3;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	0052      	lsls	r2, r2, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	701a      	strb	r2, [r3, #0]
        *b = hue * 3;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	461a      	mov	r2, r3
 8001c56:	0052      	lsls	r2, r2, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	701a      	strb	r2, [r3, #0]
}
 8001c60:	e016      	b.n	8001c90 <Hue_To_RGB+0xa4>
        hue -= 170;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	3356      	adds	r3, #86	@ 0x56
 8001c66:	73fb      	strb	r3, [r7, #15]
        *r = hue * 3;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	0052      	lsls	r2, r2, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
        *b = (85 - hue) * 3;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	701a      	strb	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <RGB_RainbowCycle>:

static uint16_t rainbow_hue = 0;

void RGB_RainbowCycle(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
    uint8_t r, g, b;
    for (int i = 0; i < NUM_LEDS; i++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	e018      	b.n	8001cda <RGB_RainbowCycle+0x3e>
    {
        // Calculate the hue for each LED, offset by its position to create the rainbow.
        uint8_t hue = (rainbow_hue + (i * 256 / NUM_LEDS)) & 0xFF;
 8001ca8:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <RGB_RainbowCycle+0x6c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	70fb      	strb	r3, [r7, #3]
        Hue_To_RGB(hue, &r, &g, &b);
 8001cba:	463b      	mov	r3, r7
 8001cbc:	1c7a      	adds	r2, r7, #1
 8001cbe:	1cb9      	adds	r1, r7, #2
 8001cc0:	78f8      	ldrb	r0, [r7, #3]
 8001cc2:	f7ff ff93 	bl	8001bec <Hue_To_RGB>
        RGB_SetColor(i, r, g, b);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b2d8      	uxtb	r0, r3
 8001cca:	78b9      	ldrb	r1, [r7, #2]
 8001ccc:	787a      	ldrb	r2, [r7, #1]
 8001cce:	783b      	ldrb	r3, [r7, #0]
 8001cd0:	f7ff feac 	bl	8001a2c <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	dde3      	ble.n	8001ca8 <RGB_RainbowCycle+0xc>
    }
    RGB_Update();
 8001ce0:	f7ff fef0 	bl	8001ac4 <RGB_Update>

    // Increment the hue for the next cycle to make the rainbow move.
    rainbow_hue++;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <RGB_RainbowCycle+0x6c>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <RGB_RainbowCycle+0x6c>)
 8001cee:	801a      	strh	r2, [r3, #0]
    if (rainbow_hue >= 256)
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <RGB_RainbowCycle+0x6c>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	2bff      	cmp	r3, #255	@ 0xff
 8001cf6:	d902      	bls.n	8001cfe <RGB_RainbowCycle+0x62>
    {
        rainbow_hue = 0;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <RGB_RainbowCycle+0x6c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	801a      	strh	r2, [r3, #0]
    }
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200023c8 	.word	0x200023c8

08001d0c <RGB_InitFade>:

void RGB_InitFade(uint8_t led_index)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
    if (led_index < NUM_LEDS)
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d874      	bhi.n	8001e06 <RGB_InitFade+0xfa>
    {
        if (led_fade_states[led_index].is_first_trigger == 1)
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	493c      	ldr	r1, [pc, #240]	@ (8001e10 <RGB_InitFade+0x104>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	3308      	adds	r3, #8
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d13e      	bne.n	8001dae <RGB_InitFade+0xa2>
        {
            led_fade_states[led_index].is_first_trigger = 0;
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	4937      	ldr	r1, [pc, #220]	@ (8001e10 <RGB_InitFade+0x104>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
            led_fade_states[led_index].current_r = rand() % 256;
 8001d42:	f00c fbad 	bl	800e4a0 <rand>
 8001d46:	4603      	mov	r3, r0
 8001d48:	425a      	negs	r2, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	bf58      	it	pl
 8001d50:	4253      	negpl	r3, r2
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	b2d8      	uxtb	r0, r3
 8001d56:	492e      	ldr	r1, [pc, #184]	@ (8001e10 <RGB_InitFade+0x104>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3303      	adds	r3, #3
 8001d62:	4602      	mov	r2, r0
 8001d64:	701a      	strb	r2, [r3, #0]
            led_fade_states[led_index].current_g = rand() % 256;
 8001d66:	f00c fb9b 	bl	800e4a0 <rand>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	425a      	negs	r2, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	bf58      	it	pl
 8001d74:	4253      	negpl	r3, r2
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	b2d8      	uxtb	r0, r3
 8001d7a:	4925      	ldr	r1, [pc, #148]	@ (8001e10 <RGB_InitFade+0x104>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	3304      	adds	r3, #4
 8001d86:	4602      	mov	r2, r0
 8001d88:	701a      	strb	r2, [r3, #0]
            led_fade_states[led_index].current_b = rand() % 256;
 8001d8a:	f00c fb89 	bl	800e4a0 <rand>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	425a      	negs	r2, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	bf58      	it	pl
 8001d98:	4253      	negpl	r3, r2
 8001d9a:	79fa      	ldrb	r2, [r7, #7]
 8001d9c:	b2d8      	uxtb	r0, r3
 8001d9e:	491c      	ldr	r1, [pc, #112]	@ (8001e10 <RGB_InitFade+0x104>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	3305      	adds	r3, #5
 8001daa:	4602      	mov	r2, r0
 8001dac:	701a      	strb	r2, [r3, #0]
        }

        led_fade_states[led_index].target_r = 0;
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	4917      	ldr	r1, [pc, #92]	@ (8001e10 <RGB_InitFade+0x104>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_g = 0;
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	4913      	ldr	r1, [pc, #76]	@ (8001e10 <RGB_InitFade+0x104>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3301      	adds	r3, #1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_b = 0;
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	490f      	ldr	r1, [pc, #60]	@ (8001e10 <RGB_InitFade+0x104>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	3302      	adds	r3, #2
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].is_fading = 0;
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	490a      	ldr	r1, [pc, #40]	@ (8001e10 <RGB_InitFade+0x104>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	3307      	adds	r3, #7
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].fade_step = 5;
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	4906      	ldr	r1, [pc, #24]	@ (8001e10 <RGB_InitFade+0x104>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3306      	adds	r3, #6
 8001e02:	2205      	movs	r2, #5
 8001e04:	701a      	strb	r2, [r3, #0]
    }
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20002284 	.word	0x20002284

08001e14 <RGB_TriggerFade>:

// 触发LED渐暗效果
void RGB_TriggerFade(uint8_t led_index, uint8_t target_r, uint8_t target_g, uint8_t target_b)
{
 8001e14:	b490      	push	{r4, r7}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	4603      	mov	r3, r0
 8001e28:	71bb      	strb	r3, [r7, #6]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	717b      	strb	r3, [r7, #5]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d822      	bhi.n	8001e7e <RGB_TriggerFade+0x6a>
    {
        // 设置目标颜色
        led_fade_states[led_index].target_r = target_r;
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	4913      	ldr	r1, [pc, #76]	@ (8001e88 <RGB_TriggerFade+0x74>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	79ba      	ldrb	r2, [r7, #6]
 8001e46:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_g = target_g;
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	490f      	ldr	r1, [pc, #60]	@ (8001e88 <RGB_TriggerFade+0x74>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	3301      	adds	r3, #1
 8001e56:	797a      	ldrb	r2, [r7, #5]
 8001e58:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_b = target_b;
 8001e5a:	79fa      	ldrb	r2, [r7, #7]
 8001e5c:	490a      	ldr	r1, [pc, #40]	@ (8001e88 <RGB_TriggerFade+0x74>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	3302      	adds	r3, #2
 8001e68:	793a      	ldrb	r2, [r7, #4]
 8001e6a:	701a      	strb	r2, [r3, #0]

        // 开始渐暗
        led_fade_states[led_index].is_fading = 1;
 8001e6c:	79fa      	ldrb	r2, [r7, #7]
 8001e6e:	4906      	ldr	r1, [pc, #24]	@ (8001e88 <RGB_TriggerFade+0x74>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	3307      	adds	r3, #7
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
    }
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc90      	pop	{r4, r7}
 8001e86:	4770      	bx	lr
 8001e88:	20002284 	.word	0x20002284

08001e8c <RGB_ProcessFade>:

// 处理渐暗效果
void RGB_ProcessFade(void)
{    
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	e133      	b.n	8002100 <RGB_ProcessFade+0x274>
    {
        if (led_fade_states[i].is_fading)
 8001e98:	499e      	ldr	r1, [pc, #632]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3307      	adds	r3, #7
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8126 	beq.w	80020fa <RGB_ProcessFade+0x26e>
        {
            // 渐暗处理
            if (led_fade_states[i].current_r + led_fade_states[i].target_r > led_fade_states[i].fade_step)
 8001eae:	4999      	ldr	r1, [pc, #612]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3303      	adds	r3, #3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4994      	ldr	r1, [pc, #592]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	18c1      	adds	r1, r0, r3
 8001ed0:	4890      	ldr	r0, [pc, #576]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	4403      	add	r3, r0
 8001edc:	3306      	adds	r3, #6
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	dd1b      	ble.n	8001f1c <RGB_ProcessFade+0x90>
                led_fade_states[i].current_r -= led_fade_states[i].fade_step;
 8001ee4:	498b      	ldr	r1, [pc, #556]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	7819      	ldrb	r1, [r3, #0]
 8001ef4:	4887      	ldr	r0, [pc, #540]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	4403      	add	r3, r0
 8001f00:	3306      	adds	r3, #6
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	1acb      	subs	r3, r1, r3
 8001f06:	b2d8      	uxtb	r0, r3
 8001f08:	4982      	ldr	r1, [pc, #520]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	3303      	adds	r3, #3
 8001f16:	4602      	mov	r2, r0
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e008      	b.n	8001f2e <RGB_ProcessFade+0xa2>
            else
                led_fade_states[i].current_r = 0;
 8001f1c:	497d      	ldr	r1, [pc, #500]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	3303      	adds	r3, #3
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]

            if (led_fade_states[i].current_g + led_fade_states[i].target_g > led_fade_states[i].fade_step)
 8001f2e:	4979      	ldr	r1, [pc, #484]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4974      	ldr	r1, [pc, #464]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	18c1      	adds	r1, r0, r3
 8001f52:	4870      	ldr	r0, [pc, #448]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4403      	add	r3, r0
 8001f5e:	3306      	adds	r3, #6
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4299      	cmp	r1, r3
 8001f64:	dd1b      	ble.n	8001f9e <RGB_ProcessFade+0x112>
                led_fade_states[i].current_g -= led_fade_states[i].fade_step;
 8001f66:	496b      	ldr	r1, [pc, #428]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	3304      	adds	r3, #4
 8001f74:	7819      	ldrb	r1, [r3, #0]
 8001f76:	4867      	ldr	r0, [pc, #412]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	4403      	add	r3, r0
 8001f82:	3306      	adds	r3, #6
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	b2d8      	uxtb	r0, r3
 8001f8a:	4962      	ldr	r1, [pc, #392]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	3304      	adds	r3, #4
 8001f98:	4602      	mov	r2, r0
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e008      	b.n	8001fb0 <RGB_ProcessFade+0x124>
            else
                led_fade_states[i].current_g = 0;
 8001f9e:	495d      	ldr	r1, [pc, #372]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3304      	adds	r3, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]

            if (led_fade_states[i].current_b + led_fade_states[i].target_b > led_fade_states[i].fade_step)
 8001fb0:	4958      	ldr	r1, [pc, #352]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3305      	adds	r3, #5
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	4954      	ldr	r1, [pc, #336]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3302      	adds	r3, #2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	18c1      	adds	r1, r0, r3
 8001fd4:	484f      	ldr	r0, [pc, #316]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	4403      	add	r3, r0
 8001fe0:	3306      	adds	r3, #6
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4299      	cmp	r1, r3
 8001fe6:	dd1b      	ble.n	8002020 <RGB_ProcessFade+0x194>
                led_fade_states[i].current_b -= led_fade_states[i].fade_step;
 8001fe8:	494a      	ldr	r1, [pc, #296]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3305      	adds	r3, #5
 8001ff6:	7819      	ldrb	r1, [r3, #0]
 8001ff8:	4846      	ldr	r0, [pc, #280]	@ (8002114 <RGB_ProcessFade+0x288>)
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	4403      	add	r3, r0
 8002004:	3306      	adds	r3, #6
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	1acb      	subs	r3, r1, r3
 800200a:	b2d8      	uxtb	r0, r3
 800200c:	4941      	ldr	r1, [pc, #260]	@ (8002114 <RGB_ProcessFade+0x288>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	440b      	add	r3, r1
 8002018:	3305      	adds	r3, #5
 800201a:	4602      	mov	r2, r0
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e008      	b.n	8002032 <RGB_ProcessFade+0x1a6>
            else
                led_fade_states[i].current_b = 0;
 8002020:	493c      	ldr	r1, [pc, #240]	@ (8002114 <RGB_ProcessFade+0x288>)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	440b      	add	r3, r1
 800202c:	3305      	adds	r3, #5
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
            
            // 设置LED颜色
            RGB_SetColor(i, led_fade_states[i].current_r, 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	b2d8      	uxtb	r0, r3
 8002036:	4937      	ldr	r1, [pc, #220]	@ (8002114 <RGB_ProcessFade+0x288>)
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	440b      	add	r3, r1
 8002042:	3303      	adds	r3, #3
 8002044:	7819      	ldrb	r1, [r3, #0]
 8002046:	4c33      	ldr	r4, [pc, #204]	@ (8002114 <RGB_ProcessFade+0x288>)
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	4423      	add	r3, r4
 8002052:	3304      	adds	r3, #4
 8002054:	781c      	ldrb	r4, [r3, #0]
 8002056:	4d2f      	ldr	r5, [pc, #188]	@ (8002114 <RGB_ProcessFade+0x288>)
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	442b      	add	r3, r5
 8002062:	3305      	adds	r3, #5
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4622      	mov	r2, r4
 8002068:	f7ff fce0 	bl	8001a2c <RGB_SetColor>
                           led_fade_states[i].current_g, 
                           led_fade_states[i].current_b);
            
            // 检查是否渐暗完成
            if (led_fade_states[i].current_r == led_fade_states[i].target_r && 
 800206c:	4929      	ldr	r1, [pc, #164]	@ (8002114 <RGB_ProcessFade+0x288>)
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	440b      	add	r3, r1
 8002078:	3303      	adds	r3, #3
 800207a:	7819      	ldrb	r1, [r3, #0]
 800207c:	4825      	ldr	r0, [pc, #148]	@ (8002114 <RGB_ProcessFade+0x288>)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	4403      	add	r3, r0
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4299      	cmp	r1, r3
 800208c:	d135      	bne.n	80020fa <RGB_ProcessFade+0x26e>
                led_fade_states[i].current_g == led_fade_states[i].target_g && 
 800208e:	4921      	ldr	r1, [pc, #132]	@ (8002114 <RGB_ProcessFade+0x288>)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	440b      	add	r3, r1
 800209a:	3304      	adds	r3, #4
 800209c:	7819      	ldrb	r1, [r3, #0]
 800209e:	481d      	ldr	r0, [pc, #116]	@ (8002114 <RGB_ProcessFade+0x288>)
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	4403      	add	r3, r0
 80020aa:	3301      	adds	r3, #1
 80020ac:	781b      	ldrb	r3, [r3, #0]
            if (led_fade_states[i].current_r == led_fade_states[i].target_r && 
 80020ae:	4299      	cmp	r1, r3
 80020b0:	d123      	bne.n	80020fa <RGB_ProcessFade+0x26e>
                led_fade_states[i].current_b == led_fade_states[i].target_b)
 80020b2:	4918      	ldr	r1, [pc, #96]	@ (8002114 <RGB_ProcessFade+0x288>)
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	440b      	add	r3, r1
 80020be:	3305      	adds	r3, #5
 80020c0:	7819      	ldrb	r1, [r3, #0]
 80020c2:	4814      	ldr	r0, [pc, #80]	@ (8002114 <RGB_ProcessFade+0x288>)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	4403      	add	r3, r0
 80020ce:	3302      	adds	r3, #2
 80020d0:	781b      	ldrb	r3, [r3, #0]
                led_fade_states[i].current_g == led_fade_states[i].target_g && 
 80020d2:	4299      	cmp	r1, r3
 80020d4:	d111      	bne.n	80020fa <RGB_ProcessFade+0x26e>
            {
                led_fade_states[i].is_fading = 0;
 80020d6:	490f      	ldr	r1, [pc, #60]	@ (8002114 <RGB_ProcessFade+0x288>)
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	3307      	adds	r3, #7
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
                led_fade_states[i].is_first_trigger = 1;
 80020e8:	490a      	ldr	r1, [pc, #40]	@ (8002114 <RGB_ProcessFade+0x288>)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	3308      	adds	r3, #8
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3301      	adds	r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	f77f aec8 	ble.w	8001e98 <RGB_ProcessFade+0xc>
            }
        }
    }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bdb0      	pop	{r4, r5, r7, pc}
 8002112:	bf00      	nop
 8002114:	20002284 	.word	0x20002284

08002118 <RGB_Loop>:


void RGB_Loop(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    if (keyboard_settings.rgb_style == 1)
 800211c:	4b3d      	ldr	r3, [pc, #244]	@ (8002214 <RGB_Loop+0xfc>)
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <RGB_Loop+0x18>
    {
        RGB_RainbowCycle();
 8002124:	f7ff fdba 	bl	8001c9c <RGB_RainbowCycle>
        HAL_Delay(100); // 控制速度
 8002128:	2064      	movs	r0, #100	@ 0x64
 800212a:	f000 fc79 	bl	8002a20 <HAL_Delay>
    {
        RGB_Clear(); // 清除颜色
        RGB_Update(); // 更新LED颜色
        HAL_Delay(100); // 控制速度
    }
}
 800212e:	e06f      	b.n	8002210 <RGB_Loop+0xf8>
    else if (keyboard_settings.rgb_style == 2)
 8002130:	4b38      	ldr	r3, [pc, #224]	@ (8002214 <RGB_Loop+0xfc>)
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d160      	bne.n	80021fa <RGB_Loop+0xe2>
        if (keyboard_state.KEY_1_info.key_state == KEY_PRESSED)
 8002138:	4b37      	ldr	r3, [pc, #220]	@ (8002218 <RGB_Loop+0x100>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d103      	bne.n	8002148 <RGB_Loop+0x30>
            RGB_InitFade(0); // 触发LED 1渐暗
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fde3 	bl	8001d0c <RGB_InitFade>
 8002146:	e00c      	b.n	8002162 <RGB_Loop+0x4a>
        else if (keyboard_state.KEY_1_info.key_state == KEY_RELEASED)
 8002148:	4b33      	ldr	r3, [pc, #204]	@ (8002218 <RGB_Loop+0x100>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d108      	bne.n	8002162 <RGB_Loop+0x4a>
            led_fade_states[0].is_first_trigger = 1;
 8002150:	4b32      	ldr	r3, [pc, #200]	@ (800221c <RGB_Loop+0x104>)
 8002152:	2201      	movs	r2, #1
 8002154:	721a      	strb	r2, [r3, #8]
            RGB_TriggerFade(0, 0, 0, 0);
 8002156:	2300      	movs	r3, #0
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fe59 	bl	8001e14 <RGB_TriggerFade>
        if (keyboard_state.KEY_2_info.key_state == KEY_PRESSED)
 8002162:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <RGB_Loop+0x100>)
 8002164:	7c1b      	ldrb	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d103      	bne.n	8002172 <RGB_Loop+0x5a>
            RGB_InitFade(1); // 触发LED 2渐暗
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff fdce 	bl	8001d0c <RGB_InitFade>
 8002170:	e00c      	b.n	800218c <RGB_Loop+0x74>
        else if (keyboard_state.KEY_2_info.key_state == KEY_RELEASED)
 8002172:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <RGB_Loop+0x100>)
 8002174:	7c1b      	ldrb	r3, [r3, #16]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d108      	bne.n	800218c <RGB_Loop+0x74>
            led_fade_states[1].is_first_trigger = 1;
 800217a:	4b28      	ldr	r3, [pc, #160]	@ (800221c <RGB_Loop+0x104>)
 800217c:	2201      	movs	r2, #1
 800217e:	745a      	strb	r2, [r3, #17]
            RGB_TriggerFade(1, 0, 0, 0);
 8002180:	2300      	movs	r3, #0
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff fe44 	bl	8001e14 <RGB_TriggerFade>
        if (keyboard_state.KEY_3_info.key_state == KEY_PRESSED)
 800218c:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <RGB_Loop+0x100>)
 800218e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d103      	bne.n	800219e <RGB_Loop+0x86>
            RGB_InitFade(2); // 触发LED 3渐暗
 8002196:	2002      	movs	r0, #2
 8002198:	f7ff fdb8 	bl	8001d0c <RGB_InitFade>
 800219c:	e00d      	b.n	80021ba <RGB_Loop+0xa2>
        else if (keyboard_state.KEY_3_info.key_state == KEY_RELEASED)
 800219e:	4b1e      	ldr	r3, [pc, #120]	@ (8002218 <RGB_Loop+0x100>)
 80021a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d108      	bne.n	80021ba <RGB_Loop+0xa2>
            led_fade_states[2].is_first_trigger = 1;
 80021a8:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <RGB_Loop+0x104>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	769a      	strb	r2, [r3, #26]
            RGB_TriggerFade(2, 0, 0, 0);
 80021ae:	2300      	movs	r3, #0
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2002      	movs	r0, #2
 80021b6:	f7ff fe2d 	bl	8001e14 <RGB_TriggerFade>
        if (keyboard_state.KEY_4_info.key_state == KEY_PRESSED)
 80021ba:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <RGB_Loop+0x100>)
 80021bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d103      	bne.n	80021cc <RGB_Loop+0xb4>
            RGB_InitFade(3); // 触发LED 4渐暗
 80021c4:	2003      	movs	r0, #3
 80021c6:	f7ff fda1 	bl	8001d0c <RGB_InitFade>
 80021ca:	e00e      	b.n	80021ea <RGB_Loop+0xd2>
        else if (keyboard_state.KEY_4_info.key_state == KEY_RELEASED)
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <RGB_Loop+0x100>)
 80021ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d109      	bne.n	80021ea <RGB_Loop+0xd2>
            led_fade_states[3].is_first_trigger = 1;
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <RGB_Loop+0x104>)
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            RGB_TriggerFade(3, 0, 0, 0);
 80021de:	2300      	movs	r3, #0
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	2003      	movs	r0, #3
 80021e6:	f7ff fe15 	bl	8001e14 <RGB_TriggerFade>
        RGB_ProcessFade(); // 处理渐暗效果
 80021ea:	f7ff fe4f 	bl	8001e8c <RGB_ProcessFade>
        RGB_Update(); // 更新LED颜色
 80021ee:	f7ff fc69 	bl	8001ac4 <RGB_Update>
        HAL_Delay(50); // 控制渐暗速度
 80021f2:	2032      	movs	r0, #50	@ 0x32
 80021f4:	f000 fc14 	bl	8002a20 <HAL_Delay>
}
 80021f8:	e00a      	b.n	8002210 <RGB_Loop+0xf8>
    else if (keyboard_settings.rgb_style == 0)
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <RGB_Loop+0xfc>)
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <RGB_Loop+0xf8>
        RGB_Clear(); // 清除颜色
 8002202:	f7ff fc47 	bl	8001a94 <RGB_Clear>
        RGB_Update(); // 更新LED颜色
 8002206:	f7ff fc5d 	bl	8001ac4 <RGB_Update>
        HAL_Delay(100); // 控制速度
 800220a:	2064      	movs	r0, #100	@ 0x64
 800220c:	f000 fc08 	bl	8002a20 <HAL_Delay>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000400 	.word	0x20000400
 8002218:	20000424 	.word	0x20000424
 800221c:	20002284 	.word	0x20002284

08002220 <HAL_TIM_PWM_PulseFinishedCallback>:


// 自动回调函数停止DMA
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d103      	bne.n	800223a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8002232:	2100      	movs	r1, #0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f006 fb57 	bl	80088e8 <HAL_TIM_PWM_Stop_DMA>
    }
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40000400 	.word	0x40000400

08002248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_MspInit+0x4c>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	4a10      	ldr	r2, [pc, #64]	@ (8002294 <HAL_MspInit+0x4c>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6613      	str	r3, [r2, #96]	@ 0x60
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <HAL_MspInit+0x4c>)
 800225c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_MspInit+0x4c>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <HAL_MspInit+0x4c>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6593      	str	r3, [r2, #88]	@ 0x58
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_MspInit+0x4c>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800227e:	2002      	movs	r0, #2
 8002280:	f000 fbf0 	bl	8002a64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8002284:	f000 fc02 	bl	8002a8c <HAL_SYSCFG_DisableVREFBUF>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002288:	f005 f930 	bl	80074ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <NMI_Handler+0x4>

080022a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <MemManage_Handler+0x4>

080022b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <UsageFault_Handler+0x4>

080022c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ee:	f000 fb79 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022fc:	4802      	ldr	r0, [pc, #8]	@ (8002308 <DMA1_Channel1_IRQHandler+0x10>)
 80022fe:	f002 fbd3 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200002ac 	.word	0x200002ac

0800230c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <DMA1_Channel2_IRQHandler+0x10>)
 8002312:	f002 fbc9 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000030c 	.word	0x2000030c

08002320 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <DMA1_Channel3_IRQHandler+0x10>)
 8002326:	f002 fbbf 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20002468 	.word	0x20002468

08002334 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <USB_LP_IRQHandler+0x10>)
 800233a:	f003 fc2d 	bl	8005b98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20002a34 	.word	0x20002a34

08002348 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800234c:	4802      	ldr	r0, [pc, #8]	@ (8002358 <TIM6_DAC_IRQHandler+0x10>)
 800234e:	f006 fbc3 	bl	8008ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000241c 	.word	0x2000241c

0800235c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return 1;
 8002360:	2301      	movs	r3, #1
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_kill>:

int _kill(int pid, int sig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002376:	f00c fa25 	bl	800e7c4 <__errno>
 800237a:	4603      	mov	r3, r0
 800237c:	2216      	movs	r2, #22
 800237e:	601a      	str	r2, [r3, #0]
  return -1;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_exit>:

void _exit (int status)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ffe7 	bl	800236c <_kill>
  while (1) {}    /* Make sure we hang here */
 800239e:	bf00      	nop
 80023a0:	e7fd      	b.n	800239e <_exit+0x12>

080023a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e00a      	b.n	80023ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023b4:	f3af 8000 	nop.w
 80023b8:	4601      	mov	r1, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	60ba      	str	r2, [r7, #8]
 80023c0:	b2ca      	uxtb	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	dbf0      	blt.n	80023b4 <_read+0x12>
  }

  return len;
 80023d2:	687b      	ldr	r3, [r7, #4]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e009      	b.n	8002402 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	60ba      	str	r2, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	dbf1      	blt.n	80023ee <_write+0x12>
  }
  return len;
 800240a:	687b      	ldr	r3, [r7, #4]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_close>:

int _close(int file)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800243c:	605a      	str	r2, [r3, #4]
  return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_isatty>:

int _isatty(int file)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f00c f98a 	bl	800e7c4 <__errno>
 80024b0:	4603      	mov	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <_sbrk+0x64>)
 80024cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20008000 	.word	0x20008000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	200023cc 	.word	0x200023cc
 80024e4:	20002e70 	.word	0x20002e70

080024e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <SystemInit+0x20>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <SystemInit+0x20>)
 80024f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	@ 0x38
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800253e:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 8002540:	4a2c      	ldr	r2, [pc, #176]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002542:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 8002546:	2200      	movs	r2, #0
 8002548:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 8002550:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 8002552:	22d4      	movs	r2, #212	@ 0xd4
 8002554:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002556:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002562:	4823      	ldr	r0, [pc, #140]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 8002564:	f005 fef0 	bl	8008348 <HAL_TIM_Base_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800256e:	f7ff f8c4 	bl	80016fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800257c:	4619      	mov	r1, r3
 800257e:	481c      	ldr	r0, [pc, #112]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 8002580:	f006 fd0e 	bl	8008fa0 <HAL_TIM_ConfigClockSource>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800258a:	f7ff f8b6 	bl	80016fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800258e:	4818      	ldr	r0, [pc, #96]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 8002590:	f005 ff31 	bl	80083f6 <HAL_TIM_PWM_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800259a:	f7ff f8ae 	bl	80016fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4810      	ldr	r0, [pc, #64]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 80025ae:	f007 fb49 	bl	8009c44 <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025b8:	f7ff f89f 	bl	80016fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025bc:	2360      	movs	r3, #96	@ 0x60
 80025be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	2200      	movs	r2, #0
 80025d0:	4619      	mov	r1, r3
 80025d2:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 80025d4:	f006 fbd0 	bl	8008d78 <HAL_TIM_PWM_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025de:	f7ff f88c 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025e2:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <MX_TIM3_Init+0xe4>)
 80025e4:	f000 f8a6 	bl	8002734 <HAL_TIM_MspPostInit>

}
 80025e8:	bf00      	nop
 80025ea:	3738      	adds	r7, #56	@ 0x38
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200023d0 	.word	0x200023d0
 80025f4:	40000400 	.word	0x40000400

080025f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <MX_TIM6_Init+0x64>)
 800260a:	4a15      	ldr	r2, [pc, #84]	@ (8002660 <MX_TIM6_Init+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 800260e:	4b13      	ldr	r3, [pc, #76]	@ (800265c <MX_TIM6_Init+0x64>)
 8002610:	22a9      	movs	r2, #169	@ 0xa9
 8002612:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <MX_TIM6_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <MX_TIM6_Init+0x64>)
 800261c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002620:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <MX_TIM6_Init+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <MX_TIM6_Init+0x64>)
 800262a:	f005 fe8d 	bl	8008348 <HAL_TIM_Base_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002634:	f7ff f861 	bl	80016fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4805      	ldr	r0, [pc, #20]	@ (800265c <MX_TIM6_Init+0x64>)
 8002646:	f007 fafd 	bl	8009c44 <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002650:	f7ff f853 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000241c 	.word	0x2000241c
 8002660:	40001000 	.word	0x40001000

08002664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <HAL_TIM_Base_MspInit+0xbc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d137      	bne.n	80026e6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002676:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <HAL_TIM_Base_MspInit+0xc0>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267a:	4a2a      	ldr	r2, [pc, #168]	@ (8002724 <HAL_TIM_Base_MspInit+0xc0>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	6593      	str	r3, [r2, #88]	@ 0x58
 8002682:	4b28      	ldr	r3, [pc, #160]	@ (8002724 <HAL_TIM_Base_MspInit+0xc0>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel3;
 800268e:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_TIM_Base_MspInit+0xc8>)
 8002692:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002694:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 8002696:	223d      	movs	r2, #61	@ 0x3d
 8002698:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800269a:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 800269c:	2210      	movs	r2, #16
 800269e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a0:	4b21      	ldr	r3, [pc, #132]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026a6:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ba:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026c2:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80026c8:	4817      	ldr	r0, [pc, #92]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026ca:	f002 f863 	bl	8004794 <HAL_DMA_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80026d4:	f7ff f811 	bl	80016fa <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a13      	ldr	r2, [pc, #76]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_TIM_Base_MspInit+0xc4>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80026e4:	e018      	b.n	8002718 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM6)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_TIM_Base_MspInit+0xcc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d113      	bne.n	8002718 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <HAL_TIM_Base_MspInit+0xc0>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002724 <HAL_TIM_Base_MspInit+0xc0>)
 80026f6:	f043 0310 	orr.w	r3, r3, #16
 80026fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_TIM_Base_MspInit+0xc0>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2036      	movs	r0, #54	@ 0x36
 800270e:	f001 fe04 	bl	800431a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002712:	2036      	movs	r0, #54	@ 0x36
 8002714:	f001 fe1b 	bl	800434e <HAL_NVIC_EnableIRQ>
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40000400 	.word	0x40000400
 8002724:	40021000 	.word	0x40021000
 8002728:	20002468 	.word	0x20002468
 800272c:	40020030 	.word	0x40020030
 8002730:	40001000 	.word	0x40001000

08002734 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <HAL_TIM_MspPostInit+0x64>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d11b      	bne.n	800278e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_TIM_MspPostInit+0x68>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	4a10      	ldr	r2, [pc, #64]	@ (800279c <HAL_TIM_MspPostInit+0x68>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_TIM_MspPostInit+0x68>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RGB_PWM_Pin;
 800276e:	2310      	movs	r3, #16
 8002770:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800277e:	2302      	movs	r3, #2
 8002780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_PWM_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <HAL_TIM_MspPostInit+0x6c>)
 800278a:	f002 fadd 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800278e:	bf00      	nop
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40000400 	.word	0x40000400
 800279c:	40021000 	.word	0x40021000
 80027a0:	48000400 	.word	0x48000400

080027a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027a8:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027aa:	4a23      	ldr	r2, [pc, #140]	@ (8002838 <MX_USART2_UART_Init+0x94>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ae:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b17      	ldr	r3, [pc, #92]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027da:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027e0:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e6:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ec:	4811      	ldr	r0, [pc, #68]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 80027ee:	f007 faf1 	bl	8009dd4 <HAL_UART_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027f8:	f7fe ff7f 	bl	80016fa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027fc:	2100      	movs	r1, #0
 80027fe:	480d      	ldr	r0, [pc, #52]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 8002800:	f008 f85c 	bl	800a8bc <HAL_UARTEx_SetTxFifoThreshold>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800280a:	f7fe ff76 	bl	80016fa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280e:	2100      	movs	r1, #0
 8002810:	4808      	ldr	r0, [pc, #32]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 8002812:	f008 f891 	bl	800a938 <HAL_UARTEx_SetRxFifoThreshold>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800281c:	f7fe ff6d 	bl	80016fa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002820:	4804      	ldr	r0, [pc, #16]	@ (8002834 <MX_USART2_UART_Init+0x90>)
 8002822:	f008 f812 	bl	800a84a <HAL_UARTEx_DisableFifoMode>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800282c:	f7fe ff65 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200024c8 	.word	0x200024c8
 8002838:	40004400 	.word	0x40004400

0800283c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b09a      	sub	sp, #104	@ 0x68
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	2244      	movs	r2, #68	@ 0x44
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f00b ff62 	bl	800e726 <memset>
  if(uartHandle->Instance==USART2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <HAL_UART_MspInit+0xa8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d136      	bne.n	80028da <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800286c:	2302      	movs	r3, #2
 800286e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4618      	mov	r0, r3
 800287a:	f005 fb75 	bl	8007f68 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002884:	f7fe ff39 	bl	80016fa <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002888:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_UART_MspInit+0xac>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288c:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <HAL_UART_MspInit+0xac>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002892:	6593      	str	r3, [r2, #88]	@ 0x58
 8002894:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <HAL_UART_MspInit+0xac>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_UART_MspInit+0xac>)
 80028a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a4:	4a10      	ldr	r2, [pc, #64]	@ (80028e8 <HAL_UART_MspInit+0xac>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ac:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <HAL_UART_MspInit+0xac>)
 80028ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028b8:	230c      	movs	r3, #12
 80028ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c8:	2307      	movs	r3, #7
 80028ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028d0:	4619      	mov	r1, r3
 80028d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d6:	f002 fa37 	bl	8004d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028da:	bf00      	nop
 80028dc:	3768      	adds	r7, #104	@ 0x68
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40004400 	.word	0x40004400
 80028e8:	40021000 	.word	0x40021000

080028ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028ec:	480d      	ldr	r0, [pc, #52]	@ (8002924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80028f0:	f7ff fdfa 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <LoopForever+0x6>)
  ldr r1, =_edata
 80028f6:	490d      	ldr	r1, [pc, #52]	@ (800292c <LoopForever+0xa>)
  ldr r2, =_sidata
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <LoopForever+0xe>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028fc:	e002      	b.n	8002904 <LoopCopyDataInit>

080028fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002902:	3304      	adds	r3, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002908:	d3f9      	bcc.n	80028fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290a:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800290c:	4c0a      	ldr	r4, [pc, #40]	@ (8002938 <LoopForever+0x16>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002910:	e001      	b.n	8002916 <LoopFillZerobss>

08002912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002914:	3204      	adds	r2, #4

08002916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002918:	d3fb      	bcc.n	8002912 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800291a:	f00b ff59 	bl	800e7d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800291e:	f7fe fe7f 	bl	8001620 <main>

08002922 <LoopForever>:

LoopForever:
    b LoopForever
 8002922:	e7fe      	b.n	8002922 <LoopForever>
  ldr   r0, =_estack
 8002924:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800292c:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002930:	0800f614 	.word	0x0800f614
  ldr r2, =_sbss
 8002934:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002938:	20002e70 	.word	0x20002e70

0800293c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800293c:	e7fe      	b.n	800293c <ADC1_2_IRQHandler>

0800293e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002948:	2003      	movs	r0, #3
 800294a:	f001 fcdb 	bl	8004304 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800294e:	200f      	movs	r0, #15
 8002950:	f000 f80e 	bl	8002970 <HAL_InitTick>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	71fb      	strb	r3, [r7, #7]
 800295e:	e001      	b.n	8002964 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002960:	f7ff fc72 	bl	8002248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002964:	79fb      	ldrb	r3, [r7, #7]

}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800297c:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <HAL_InitTick+0x68>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d022      	beq.n	80029ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002984:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_InitTick+0x6c>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_InitTick+0x68>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002990:	fbb1 f3f3 	udiv	r3, r1, r3
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	4618      	mov	r0, r3
 800299a:	f001 fce6 	bl	800436a <HAL_SYSTICK_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10f      	bne.n	80029c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b0f      	cmp	r3, #15
 80029a8:	d809      	bhi.n	80029be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029aa:	2200      	movs	r2, #0
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	f001 fcb2 	bl	800431a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <HAL_InitTick+0x70>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e007      	b.n	80029ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e004      	b.n	80029ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e001      	b.n	80029ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	20000004 	.word	0x20000004
 80029e0:	20000008 	.word	0x20000008

080029e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_IncTick+0x1c>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_IncTick+0x20>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a03      	ldr	r2, [pc, #12]	@ (8002a00 <HAL_IncTick+0x1c>)
 80029f4:	6013      	str	r3, [r2, #0]
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	2000255c 	.word	0x2000255c
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <HAL_GetTick+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000255c 	.word	0x2000255c

08002a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff ffee 	bl	8002a08 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d004      	beq.n	8002a44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <HAL_Delay+0x40>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a44:	bf00      	nop
 8002a46:	f7ff ffdf 	bl	8002a08 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d8f7      	bhi.n	8002a46 <HAL_Delay+0x26>
  {
  }
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002a6c:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 0202 	bic.w	r2, r3, #2
 8002a74:	4904      	ldr	r1, [pc, #16]	@ (8002a88 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40010030 	.word	0x40010030

08002a8c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010030 	.word	0x40010030

08002aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3360      	adds	r3, #96	@ 0x60
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <LL_ADC_SetOffset+0x44>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	03fff000 	.word	0x03fff000

08002b5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3360      	adds	r3, #96	@ 0x60
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3360      	adds	r3, #96	@ 0x60
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b087      	sub	sp, #28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3360      	adds	r3, #96	@ 0x60
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3360      	adds	r3, #96	@ 0x60
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	615a      	str	r2, [r3, #20]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3330      	adds	r3, #48	@ 0x30
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	211f      	movs	r1, #31
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	f003 011f 	and.w	r1, r3, #31
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b087      	sub	sp, #28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	0e5b      	lsrs	r3, r3, #25
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	4413      	add	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	0d1b      	lsrs	r3, r3, #20
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2107      	movs	r1, #7
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0d1b      	lsrs	r3, r3, #20
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	431a      	orrs	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0318 	and.w	r3, r3, #24
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d48:	40d9      	lsrs	r1, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	0007ffff 	.word	0x0007ffff

08002d6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 031f 	and.w	r3, r3, #31
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6093      	str	r3, [r2, #8]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e10:	d101      	bne.n	8002e16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e60:	f043 0202 	orr.w	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <LL_ADC_IsEnabled+0x18>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <LL_ADC_IsEnabled+0x1a>
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d101      	bne.n	8002eb2 <LL_ADC_IsDisableOngoing+0x18>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <LL_ADC_IsDisableOngoing+0x1a>
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ed0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d101      	bne.n	8002f00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d101      	bne.n	8002f26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b089      	sub	sp, #36	@ 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e167      	b.n	800321e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fd fc43 	bl	80007e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff19 	bl	8002dac <LL_ADC_IsDeepPowerDownEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff feff 	bl	8002d88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff34 	bl	8002dfc <LL_ADC_IsInternalRegulatorEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d115      	bne.n	8002fc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff18 	bl	8002dd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa4:	4ba0      	ldr	r3, [pc, #640]	@ (8003228 <HAL_ADC_Init+0x2f4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	4aa0      	ldr	r2, [pc, #640]	@ (800322c <HAL_ADC_Init+0x2f8>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fb8:	e002      	b.n	8002fc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f9      	bne.n	8002fba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff16 	bl	8002dfc <LL_ADC_IsInternalRegulatorEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff76 	bl	8002ee8 <LL_ADC_REG_IsConversionOngoing>
 8002ffc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 8100 	bne.w	800320c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 80fc 	bne.w	800320c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800301c:	f043 0202 	orr.w	r2, r3, #2
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff23 	bl	8002e74 <LL_ADC_IsEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d111      	bne.n	8003058 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003034:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003038:	f7ff ff1c 	bl	8002e74 <LL_ADC_IsEnabled>
 800303c:	4604      	mov	r4, r0
 800303e:	487c      	ldr	r0, [pc, #496]	@ (8003230 <HAL_ADC_Init+0x2fc>)
 8003040:	f7ff ff18 	bl	8002e74 <LL_ADC_IsEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	4323      	orrs	r3, r4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4619      	mov	r1, r3
 8003052:	4878      	ldr	r0, [pc, #480]	@ (8003234 <HAL_ADC_Init+0x300>)
 8003054:	f7ff fd2a 	bl	8002aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7f5b      	ldrb	r3, [r3, #29]
 800305c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003062:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003068:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800306e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003076:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003082:	2b01      	cmp	r3, #1
 8003084:	d106      	bne.n	8003094 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	045b      	lsls	r3, r3, #17
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	4b60      	ldr	r3, [pc, #384]	@ (8003238 <HAL_ADC_Init+0x304>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	69b9      	ldr	r1, [r7, #24]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff15 	bl	8002f0e <LL_ADC_INJ_IsConversionOngoing>
 80030e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d16d      	bne.n	80031c8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d16a      	bne.n	80031c8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800310e:	f023 0302 	bic.w	r3, r3, #2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	430b      	orrs	r3, r1
 800311a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003132:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800313c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003140:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6911      	ldr	r1, [r2, #16]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	430b      	orrs	r3, r1
 800314e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003152:	e013      	b.n	800317c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003162:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003174:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003178:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003182:	2b01      	cmp	r3, #1
 8003184:	d118      	bne.n	80031b8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800319c:	4311      	orrs	r1, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031a8:	430a      	orrs	r2, r1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	611a      	str	r2, [r3, #16]
 80031b6:	e007      	b.n	80031c8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10c      	bne.n	80031ea <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	f023 010f 	bic.w	r1, r3, #15
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031e8:	e007      	b.n	80031fa <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 020f 	bic.w	r2, r2, #15
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	65da      	str	r2, [r3, #92]	@ 0x5c
 800320a:	e007      	b.n	800321c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	f043 0210 	orr.w	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800321c:	7ffb      	ldrb	r3, [r7, #31]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	bf00      	nop
 8003228:	20000004 	.word	0x20000004
 800322c:	053e2d63 	.word	0x053e2d63
 8003230:	50000100 	.word	0x50000100
 8003234:	50000300 	.word	0x50000300
 8003238:	fff04007 	.word	0xfff04007

0800323c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003248:	4851      	ldr	r0, [pc, #324]	@ (8003390 <HAL_ADC_Start_DMA+0x154>)
 800324a:	f7ff fd8f 	bl	8002d6c <LL_ADC_GetMultimode>
 800324e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fe47 	bl	8002ee8 <LL_ADC_REG_IsConversionOngoing>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 808f 	bne.w	8003380 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_ADC_Start_DMA+0x34>
 800326c:	2302      	movs	r3, #2
 800326e:	e08a      	b.n	8003386 <HAL_ADC_Start_DMA+0x14a>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d002      	beq.n	800328a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b09      	cmp	r3, #9
 8003288:	d173      	bne.n	8003372 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fc98 	bl	8003bc0 <ADC_Enable>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d166      	bne.n	8003368 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a38      	ldr	r2, [pc, #224]	@ (8003394 <HAL_ADC_Start_DMA+0x158>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d002      	beq.n	80032be <HAL_ADC_Start_DMA+0x82>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	e001      	b.n	80032c2 <HAL_ADC_Start_DMA+0x86>
 80032be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d002      	beq.n	80032d0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ec:	f023 0206 	bic.w	r2, r3, #6
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	661a      	str	r2, [r3, #96]	@ 0x60
 80032f4:	e002      	b.n	80032fc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	4a25      	ldr	r2, [pc, #148]	@ (8003398 <HAL_ADC_Start_DMA+0x15c>)
 8003302:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	4a24      	ldr	r2, [pc, #144]	@ (800339c <HAL_ADC_Start_DMA+0x160>)
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	4a23      	ldr	r2, [pc, #140]	@ (80033a0 <HAL_ADC_Start_DMA+0x164>)
 8003312:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	221c      	movs	r2, #28
 800331a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0210 	orr.w	r2, r2, #16
 8003332:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3340      	adds	r3, #64	@ 0x40
 800334e:	4619      	mov	r1, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f001 fac6 	bl	80048e4 <HAL_DMA_Start_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fdad 	bl	8002ec0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003366:	e00d      	b.n	8003384 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003370:	e008      	b.n	8003384 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800337e:	e001      	b.n	8003384 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003380:	2302      	movs	r3, #2
 8003382:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003384:	7dfb      	ldrb	r3, [r7, #23]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	50000300 	.word	0x50000300
 8003394:	50000100 	.word	0x50000100
 8003398:	08003d8b 	.word	0x08003d8b
 800339c:	08003e63 	.word	0x08003e63
 80033a0:	08003e7f 	.word	0x08003e7f

080033a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b0b6      	sub	sp, #216	@ 0xd8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x22>
 80033fe:	2302      	movs	r3, #2
 8003400:	e3c8      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x7b4>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fd6a 	bl	8002ee8 <LL_ADC_REG_IsConversionOngoing>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 83ad 	bne.w	8003b76 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	f7ff fc24 	bl	8002c76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fd58 	bl	8002ee8 <LL_ADC_REG_IsConversionOngoing>
 8003438:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fd64 	bl	8002f0e <LL_ADC_INJ_IsConversionOngoing>
 8003446:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800344a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 81d9 	bne.w	8003806 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 81d4 	bne.w	8003806 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003466:	d10f      	bne.n	8003488 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2200      	movs	r2, #0
 8003472:	4619      	mov	r1, r3
 8003474:	f7ff fc2b 	bl	8002cce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fbd2 	bl	8002c2a <LL_ADC_SetSamplingTimeCommonConfig>
 8003486:	e00e      	b.n	80034a6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	461a      	mov	r2, r3
 8003496:	f7ff fc1a 	bl	8002cce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fbc2 	bl	8002c2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d022      	beq.n	800350e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6919      	ldr	r1, [r3, #16]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034d8:	f7ff fb1c 	bl	8002b14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6919      	ldr	r1, [r3, #16]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	461a      	mov	r2, r3
 80034ea:	f7ff fb68 	bl	8002bbe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x124>
 80034fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003502:	e000      	b.n	8003506 <HAL_ADC_ConfigChannel+0x126>
 8003504:	2300      	movs	r3, #0
 8003506:	461a      	mov	r2, r3
 8003508:	f7ff fb74 	bl	8002bf4 <LL_ADC_SetOffsetSaturation>
 800350c:	e17b      	b.n	8003806 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fb21 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 800351a:	4603      	mov	r3, r0
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_ADC_ConfigChannel+0x15a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fb16 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003530:	4603      	mov	r3, r0
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	e01e      	b.n	8003578 <HAL_ADC_ConfigChannel+0x198>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fb0b 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800355c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e004      	b.n	8003576 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800356c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003580:	2b00      	cmp	r3, #0
 8003582:	d105      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x1b0>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	e018      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x1e2>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80035a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80035ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e004      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80035b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d106      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fada 	bl	8002b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fabe 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x220>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fab3 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 80035f6:	4603      	mov	r3, r0
 80035f8:	0e9b      	lsrs	r3, r3, #26
 80035fa:	f003 021f 	and.w	r2, r3, #31
 80035fe:	e01e      	b.n	800363e <HAL_ADC_ConfigChannel+0x25e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff faa8 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 800360c:	4603      	mov	r3, r0
 800360e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800361e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003622:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800362e:	2320      	movs	r3, #32
 8003630:	e004      	b.n	800363c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x276>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0e9b      	lsrs	r3, r3, #26
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	e018      	b.n	8003688 <HAL_ADC_ConfigChannel+0x2a8>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800366a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800366e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003672:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e004      	b.n	8003688 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800367e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003688:	429a      	cmp	r2, r3
 800368a:	d106      	bne.n	800369a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2200      	movs	r2, #0
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fa77 	bl	8002b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2102      	movs	r1, #2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fa5b 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x2e6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2102      	movs	r1, #2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fa50 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	0e9b      	lsrs	r3, r3, #26
 80036c0:	f003 021f 	and.w	r2, r3, #31
 80036c4:	e01e      	b.n	8003704 <HAL_ADC_ConfigChannel+0x324>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fa45 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80036f4:	2320      	movs	r3, #32
 80036f6:	e004      	b.n	8003702 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80036f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_ADC_ConfigChannel+0x33c>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0e9b      	lsrs	r3, r3, #26
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	e016      	b.n	800374a <HAL_ADC_ConfigChannel+0x36a>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800372e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003734:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800373c:	2320      	movs	r3, #32
 800373e:	e004      	b.n	800374a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800374a:	429a      	cmp	r2, r3
 800374c:	d106      	bne.n	800375c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2200      	movs	r2, #0
 8003754:	2102      	movs	r1, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fa16 	bl	8002b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2103      	movs	r1, #3
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f9fa 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003768:	4603      	mov	r3, r0
 800376a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x3a8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2103      	movs	r1, #3
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff f9ef 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 800377e:	4603      	mov	r3, r0
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	f003 021f 	and.w	r2, r3, #31
 8003786:	e017      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x3d8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2103      	movs	r1, #3
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f9e4 	bl	8002b5c <LL_ADC_GetOffsetChannel>
 8003794:	4603      	mov	r3, r0
 8003796:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80037a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037a2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80037a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80037aa:	2320      	movs	r3, #32
 80037ac:	e003      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80037ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x3f0>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	e011      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x414>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80037e8:	2320      	movs	r3, #32
 80037ea:	e003      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80037ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d106      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2103      	movs	r1, #3
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff f9c1 	bl	8002b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fb32 	bl	8002e74 <LL_ADC_IsEnabled>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 8140 	bne.w	8003a98 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	461a      	mov	r2, r3
 8003826:	f7ff fa7d 	bl	8002d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	4a8f      	ldr	r2, [pc, #572]	@ (8003a6c <HAL_ADC_ConfigChannel+0x68c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f040 8131 	bne.w	8003a98 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <HAL_ADC_ConfigChannel+0x47e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	3301      	adds	r3, #1
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2b09      	cmp	r3, #9
 8003854:	bf94      	ite	ls
 8003856:	2301      	movls	r3, #1
 8003858:	2300      	movhi	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	e019      	b.n	8003892 <HAL_ADC_ConfigChannel+0x4b2>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800386c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800386e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003876:	2320      	movs	r3, #32
 8003878:	e003      	b.n	8003882 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800387a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2b09      	cmp	r3, #9
 800388a:	bf94      	ite	ls
 800388c:	2301      	movls	r3, #1
 800388e:	2300      	movhi	r3, #0
 8003890:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003892:	2b00      	cmp	r3, #0
 8003894:	d079      	beq.n	800398a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x4d2>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	3301      	adds	r3, #1
 80038aa:	069b      	lsls	r3, r3, #26
 80038ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038b0:	e015      	b.n	80038de <HAL_ADC_ConfigChannel+0x4fe>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80038c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80038ca:	2320      	movs	r3, #32
 80038cc:	e003      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80038ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	069b      	lsls	r3, r3, #26
 80038da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x51e>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	0e9b      	lsrs	r3, r3, #26
 80038f0:	3301      	adds	r3, #1
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	e017      	b.n	800392e <HAL_ADC_ConfigChannel+0x54e>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003916:	2320      	movs	r3, #32
 8003918:	e003      	b.n	8003922 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800391a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	3301      	adds	r3, #1
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	ea42 0103 	orr.w	r1, r2, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x574>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0e9b      	lsrs	r3, r3, #26
 8003944:	3301      	adds	r3, #1
 8003946:	f003 021f 	and.w	r2, r3, #31
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	051b      	lsls	r3, r3, #20
 8003952:	e018      	b.n	8003986 <HAL_ADC_ConfigChannel+0x5a6>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e003      	b.n	8003978 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003986:	430b      	orrs	r3, r1
 8003988:	e081      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x5c6>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0e9b      	lsrs	r3, r3, #26
 800399c:	3301      	adds	r3, #1
 800399e:	069b      	lsls	r3, r3, #26
 80039a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039a4:	e015      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x5f2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e003      	b.n	80039ca <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	069b      	lsls	r3, r3, #26
 80039ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x612>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	0e9b      	lsrs	r3, r3, #26
 80039e4:	3301      	adds	r3, #1
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	e017      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x642>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	e003      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	ea42 0103 	orr.w	r1, r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x66e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	0e9b      	lsrs	r3, r3, #26
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f003 021f 	and.w	r2, r3, #31
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	3b1e      	subs	r3, #30
 8003a46:	051b      	lsls	r3, r3, #20
 8003a48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a4c:	e01e      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x6ac>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	613b      	str	r3, [r7, #16]
  return result;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a66:	2320      	movs	r3, #32
 8003a68:	e006      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x698>
 8003a6a:	bf00      	nop
 8003a6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f003 021f 	and.w	r2, r3, #31
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	3b1e      	subs	r3, #30
 8003a86:	051b      	lsls	r3, r3, #20
 8003a88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a92:	4619      	mov	r1, r3
 8003a94:	f7ff f91b 	bl	8002cce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <HAL_ADC_ConfigChannel+0x7bc>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d071      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aa4:	483e      	ldr	r0, [pc, #248]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003aa6:	f7ff f827 	bl	8002af8 <LL_ADC_GetCommonPathInternalCh>
 8003aaa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_ADC_ConfigChannel+0x6e2>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d127      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d121      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad6:	d157      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003adc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	482f      	ldr	r0, [pc, #188]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ae4:	f7fe fff5 	bl	8002ad2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ae8:	4b30      	ldr	r3, [pc, #192]	@ (8003bac <HAL_ADC_ConfigChannel+0x7cc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	4a30      	ldr	r2, [pc, #192]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b02:	e002      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f9      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b10:	e03a      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d113      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02a      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4818      	ldr	r0, [pc, #96]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b3e:	f7fe ffc8 	bl	8002ad2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b42:	e021      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <HAL_ADC_ConfigChannel+0x7dc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d11c      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d116      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d011      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	480c      	ldr	r0, [pc, #48]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b70:	f7fe ffaf 	bl	8002ad2 <LL_ADC_SetCommonPathInternalCh>
 8003b74:	e008      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b90:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	37d8      	adds	r7, #216	@ 0xd8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	80080000 	.word	0x80080000
 8003ba0:	50000300 	.word	0x50000300
 8003ba4:	c3210000 	.word	0xc3210000
 8003ba8:	90c00010 	.word	0x90c00010
 8003bac:	20000004 	.word	0x20000004
 8003bb0:	053e2d63 	.word	0x053e2d63
 8003bb4:	c7520000 	.word	0xc7520000
 8003bb8:	50000100 	.word	0x50000100
 8003bbc:	cb840000 	.word	0xcb840000

08003bc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f94f 	bl	8002e74 <LL_ADC_IsEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d169      	bne.n	8003cb0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	4b36      	ldr	r3, [pc, #216]	@ (8003cbc <ADC_Enable+0xfc>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e055      	b.n	8003cb2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f90a 	bl	8002e24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c10:	482b      	ldr	r0, [pc, #172]	@ (8003cc0 <ADC_Enable+0x100>)
 8003c12:	f7fe ff71 	bl	8002af8 <LL_ADC_GetCommonPathInternalCh>
 8003c16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d013      	beq.n	8003c48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c20:	4b28      	ldr	r3, [pc, #160]	@ (8003cc4 <ADC_Enable+0x104>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	099b      	lsrs	r3, r3, #6
 8003c26:	4a28      	ldr	r2, [pc, #160]	@ (8003cc8 <ADC_Enable+0x108>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	099b      	lsrs	r3, r3, #6
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c3a:	e002      	b.n	8003c42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f9      	bne.n	8003c3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c48:	f7fe fede 	bl	8002a08 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c4e:	e028      	b.n	8003ca2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f90d 	bl	8002e74 <LL_ADC_IsEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff f8dd 	bl	8002e24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c6a:	f7fe fecd 	bl	8002a08 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d914      	bls.n	8003ca2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d00d      	beq.n	8003ca2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e007      	b.n	8003cb2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d1cf      	bne.n	8003c50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	8000003f 	.word	0x8000003f
 8003cc0:	50000300 	.word	0x50000300
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	053e2d63 	.word	0x053e2d63

08003ccc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff f8de 	bl	8002e9a <LL_ADC_IsDisableOngoing>
 8003cde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff f8c5 	bl	8002e74 <LL_ADC_IsEnabled>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d047      	beq.n	8003d80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d144      	bne.n	8003d80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030d 	and.w	r3, r3, #13
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10c      	bne.n	8003d1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff f89f 	bl	8002e4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2203      	movs	r2, #3
 8003d14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d16:	f7fe fe77 	bl	8002a08 <HAL_GetTick>
 8003d1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d1c:	e029      	b.n	8003d72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	f043 0210 	orr.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e023      	b.n	8003d82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d3a:	f7fe fe65 	bl	8002a08 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d914      	bls.n	8003d72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e007      	b.n	8003d82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1dc      	bne.n	8003d3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d14b      	bne.n	8003e3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d021      	beq.n	8003e02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe ff44 	bl	8002c50 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d032      	beq.n	8003e34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d12b      	bne.n	8003e34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11f      	bne.n	8003e34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e00:	e018      	b.n	8003e34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d111      	bne.n	8003e34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff fab5 	bl	80033a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e3a:	e00e      	b.n	8003e5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fabf 	bl	80033cc <HAL_ADC_ErrorCallback>
}
 8003e4e:	e004      	b.n	8003e5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff faa1 	bl	80033b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9c:	f043 0204 	orr.w	r2, r3, #4
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fa91 	bl	80033cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <LL_ADC_IsEnabled>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <LL_ADC_IsEnabled+0x18>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <LL_ADC_IsEnabled+0x1a>
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_StartCalibration>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003eea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	609a      	str	r2, [r3, #8]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_ADC_IsCalibrationOnGoing>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f1e:	d101      	bne.n	8003f24 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d101      	bne.n	8003f4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e04d      	b.n	8004010 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fea5 	bl	8003ccc <ADC_Disable>
 8003f82:	4603      	mov	r3, r0
 8003f84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d136      	bne.n	8003ffa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f94:	f023 0302 	bic.w	r3, r3, #2
 8003f98:	f043 0202 	orr.w	r2, r3, #2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6839      	ldr	r1, [r7, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff ff96 	bl	8003ed8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fac:	e014      	b.n	8003fd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a18      	ldr	r2, [pc, #96]	@ (8004018 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d90d      	bls.n	8003fd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc0:	f023 0312 	bic.w	r3, r3, #18
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01b      	b.n	8004010 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff94 	bl	8003f0a <LL_ADC_IsCalibrationOnGoing>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e2      	bne.n	8003fae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ff8:	e005      	b.n	8004006 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffe:	f043 0210 	orr.w	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	0004de01 	.word	0x0004de01

0800401c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b0a1      	sub	sp, #132	@ 0x84
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004036:	2302      	movs	r3, #2
 8004038:	e08b      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004042:	2300      	movs	r3, #0
 8004044:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004046:	2300      	movs	r3, #0
 8004048:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004052:	d102      	bne.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004054:	4b41      	ldr	r3, [pc, #260]	@ (800415c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	e001      	b.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e06a      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ff57 	bl	8003f32 <LL_ADC_REG_IsConversionOngoing>
 8004084:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ff51 	bl	8003f32 <LL_ADC_REG_IsConversionOngoing>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d14c      	bne.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004098:	2b00      	cmp	r3, #0
 800409a:	d149      	bne.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800409c:	4b30      	ldr	r3, [pc, #192]	@ (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800409e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d028      	beq.n	80040fa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040ba:	035b      	lsls	r3, r3, #13
 80040bc:	430b      	orrs	r3, r1
 80040be:	431a      	orrs	r2, r3
 80040c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040c8:	f7ff fef3 	bl	8003eb2 <LL_ADC_IsEnabled>
 80040cc:	4604      	mov	r4, r0
 80040ce:	4823      	ldr	r0, [pc, #140]	@ (800415c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040d0:	f7ff feef 	bl	8003eb2 <LL_ADC_IsEnabled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4323      	orrs	r3, r4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d133      	bne.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80040e4:	f023 030f 	bic.w	r3, r3, #15
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	6811      	ldr	r1, [r2, #0]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040f8:	e024      	b.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004104:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004106:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800410a:	f7ff fed2 	bl	8003eb2 <LL_ADC_IsEnabled>
 800410e:	4604      	mov	r4, r0
 8004110:	4812      	ldr	r0, [pc, #72]	@ (800415c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004112:	f7ff fece 	bl	8003eb2 <LL_ADC_IsEnabled>
 8004116:	4603      	mov	r3, r0
 8004118:	4323      	orrs	r3, r4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d112      	bne.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800411e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004126:	f023 030f 	bic.w	r3, r3, #15
 800412a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800412c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800412e:	e009      	b.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004142:	e000      	b.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004144:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800414e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004152:	4618      	mov	r0, r3
 8004154:	3784      	adds	r7, #132	@ 0x84
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}
 800415a:	bf00      	nop
 800415c:	50000100 	.word	0x50000100
 8004160:	50000300 	.word	0x50000300

08004164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004180:	4013      	ands	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800418c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004196:	4a04      	ldr	r2, [pc, #16]	@ (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	60d3      	str	r3, [r2, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b0:	4b04      	ldr	r3, [pc, #16]	@ (80041c4 <__NVIC_GetPriorityGrouping+0x18>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 0307 	and.w	r3, r3, #7
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	db0b      	blt.n	80041f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4907      	ldr	r1, [pc, #28]	@ (8004200 <__NVIC_EnableIRQ+0x38>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2001      	movs	r0, #1
 80041ea:	fa00 f202 	lsl.w	r2, r0, r2
 80041ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000e100 	.word	0xe000e100

08004204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db0a      	blt.n	800422e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	490c      	ldr	r1, [pc, #48]	@ (8004250 <__NVIC_SetPriority+0x4c>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	0112      	lsls	r2, r2, #4
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	440b      	add	r3, r1
 8004228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800422c:	e00a      	b.n	8004244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4908      	ldr	r1, [pc, #32]	@ (8004254 <__NVIC_SetPriority+0x50>)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	3b04      	subs	r3, #4
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	440b      	add	r3, r1
 8004242:	761a      	strb	r2, [r3, #24]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000e100 	.word	0xe000e100
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	@ 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	bf28      	it	cs
 8004276:	2304      	movcs	r3, #4
 8004278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3304      	adds	r3, #4
 800427e:	2b06      	cmp	r3, #6
 8004280:	d902      	bls.n	8004288 <NVIC_EncodePriority+0x30>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3b03      	subs	r3, #3
 8004286:	e000      	b.n	800428a <NVIC_EncodePriority+0x32>
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	401a      	ands	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43d9      	mvns	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	4313      	orrs	r3, r2
         );
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	@ 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042d0:	d301      	bcc.n	80042d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00f      	b.n	80042f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004300 <SysTick_Config+0x40>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042de:	210f      	movs	r1, #15
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	f7ff ff8e 	bl	8004204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <SysTick_Config+0x40>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ee:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <SysTick_Config+0x40>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	e000e010 	.word	0xe000e010

08004304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff29 	bl	8004164 <__NVIC_SetPriorityGrouping>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004328:	f7ff ff40 	bl	80041ac <__NVIC_GetPriorityGrouping>
 800432c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7ff ff90 	bl	8004258 <NVIC_EncodePriority>
 8004338:	4602      	mov	r2, r0
 800433a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff5f 	bl	8004204 <__NVIC_SetPriority>
}
 8004346:	bf00      	nop
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff33 	bl	80041c8 <__NVIC_EnableIRQ>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ffa4 	bl	80042c0 <SysTick_Config>
 8004378:	4603      	mov	r3, r0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e054      	b.n	8004440 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7f5b      	ldrb	r3, [r3, #29]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc fc18 	bl	8000bdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	791b      	ldrb	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a22      	ldr	r2, [pc, #136]	@ (8004448 <HAL_CRC_Init+0xc4>)
 80043c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0218 	bic.w	r2, r2, #24
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	e00c      	b.n	80043ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6899      	ldr	r1, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	461a      	mov	r2, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f94a 	bl	8004678 <HAL_CRCEx_Polynomial_Set>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e028      	b.n	8004440 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	795b      	ldrb	r3, [r3, #5]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f04f 32ff 	mov.w	r2, #4294967295
 80043fe:	611a      	str	r2, [r3, #16]
 8004400:	e004      	b.n	800440c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6912      	ldr	r2, [r2, #16]
 800440a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	04c11db7 	.word	0x04c11db7

0800444c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2202      	movs	r2, #2
 8004460:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d006      	beq.n	8004488 <HAL_CRC_Calculate+0x3c>
 800447a:	2b03      	cmp	r3, #3
 800447c:	d829      	bhi.n	80044d2 <HAL_CRC_Calculate+0x86>
 800447e:	2b01      	cmp	r3, #1
 8004480:	d019      	beq.n	80044b6 <HAL_CRC_Calculate+0x6a>
 8004482:	2b02      	cmp	r3, #2
 8004484:	d01e      	beq.n	80044c4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004486:	e024      	b.n	80044d2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e00a      	b.n	80044a4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	441a      	add	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	3301      	adds	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3f0      	bcc.n	800448e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]
      break;
 80044b4:	e00e      	b.n	80044d4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f812 	bl	80044e4 <CRC_Handle_8>
 80044c0:	6138      	str	r0, [r7, #16]
      break;
 80044c2:	e007      	b.n	80044d4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f89b 	bl	8004604 <CRC_Handle_16>
 80044ce:	6138      	str	r0, [r7, #16]
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_CRC_Calculate+0x88>
      break;
 80044d2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80044da:	693b      	ldr	r3, [r7, #16]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b089      	sub	sp, #36	@ 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e023      	b.n	800453e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3301      	adds	r3, #1
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	440b      	add	r3, r1
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004510:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	3302      	adds	r3, #2
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	440b      	add	r3, r1
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004520:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	3303      	adds	r3, #3
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	440b      	add	r3, r1
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004534:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3301      	adds	r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	429a      	cmp	r2, r3
 8004546:	d3d6      	bcc.n	80044f6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d04f      	beq.n	80045f2 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	4413      	add	r3, r2
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d117      	bne.n	80045a6 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b21b      	sxth	r3, r3
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	b21a      	sxth	r2, r3
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	3301      	adds	r3, #1
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	440b      	add	r3, r1
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b21b      	sxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b21b      	sxth	r3, r3
 8004598:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	8b7a      	ldrh	r2, [r7, #26]
 80045a4:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d120      	bne.n	80045f2 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	4413      	add	r3, r2
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b21b      	sxth	r3, r3
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	b21a      	sxth	r2, r3
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3301      	adds	r3, #1
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	440b      	add	r3, r1
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b21b      	sxth	r3, r3
 80045ce:	4313      	orrs	r3, r2
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	8b7a      	ldrh	r2, [r7, #26]
 80045de:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	3302      	adds	r3, #2
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	4413      	add	r3, r2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3724      	adds	r7, #36	@ 0x24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e013      	b.n	800463e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	041a      	lsls	r2, r3, #16
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3302      	adds	r3, #2
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	440b      	add	r3, r1
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	d3e6      	bcc.n	8004616 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4413      	add	r3, r2
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004688:	231f      	movs	r3, #31
 800468a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
 800469a:	e063      	b.n	8004764 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800469c:	bf00      	nop
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1e5a      	subs	r2, r3, #1
 80046a2:	613a      	str	r2, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d009      	beq.n	80046bc <HAL_CRCEx_Polynomial_Set+0x44>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b18      	cmp	r3, #24
 80046c0:	d846      	bhi.n	8004750 <HAL_CRCEx_Polynomial_Set+0xd8>
 80046c2:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	08004757 	.word	0x08004757
 80046cc:	08004751 	.word	0x08004751
 80046d0:	08004751 	.word	0x08004751
 80046d4:	08004751 	.word	0x08004751
 80046d8:	08004751 	.word	0x08004751
 80046dc:	08004751 	.word	0x08004751
 80046e0:	08004751 	.word	0x08004751
 80046e4:	08004751 	.word	0x08004751
 80046e8:	08004745 	.word	0x08004745
 80046ec:	08004751 	.word	0x08004751
 80046f0:	08004751 	.word	0x08004751
 80046f4:	08004751 	.word	0x08004751
 80046f8:	08004751 	.word	0x08004751
 80046fc:	08004751 	.word	0x08004751
 8004700:	08004751 	.word	0x08004751
 8004704:	08004751 	.word	0x08004751
 8004708:	08004739 	.word	0x08004739
 800470c:	08004751 	.word	0x08004751
 8004710:	08004751 	.word	0x08004751
 8004714:	08004751 	.word	0x08004751
 8004718:	08004751 	.word	0x08004751
 800471c:	08004751 	.word	0x08004751
 8004720:	08004751 	.word	0x08004751
 8004724:	08004751 	.word	0x08004751
 8004728:	0800472d 	.word	0x0800472d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b06      	cmp	r3, #6
 8004730:	d913      	bls.n	800475a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004736:	e010      	b.n	800475a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b07      	cmp	r3, #7
 800473c:	d90f      	bls.n	800475e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004742:	e00c      	b.n	800475e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b0f      	cmp	r3, #15
 8004748:	d90b      	bls.n	8004762 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800474e:	e008      	b.n	8004762 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
        break;
 8004754:	e006      	b.n	8004764 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004756:	bf00      	nop
 8004758:	e004      	b.n	8004764 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004762:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10d      	bne.n	8004786 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 0118 	bic.w	r1, r3, #24
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e08d      	b.n	80048c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_DMA_Init+0x138>)
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d80f      	bhi.n	80047d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b45      	ldr	r3, [pc, #276]	@ (80048d0 <HAL_DMA_Init+0x13c>)
 80047ba:	4413      	add	r3, r2
 80047bc:	4a45      	ldr	r2, [pc, #276]	@ (80048d4 <HAL_DMA_Init+0x140>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	091b      	lsrs	r3, r3, #4
 80047c4:	009a      	lsls	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a42      	ldr	r2, [pc, #264]	@ (80048d8 <HAL_DMA_Init+0x144>)
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80047d0:	e00e      	b.n	80047f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	4b40      	ldr	r3, [pc, #256]	@ (80048dc <HAL_DMA_Init+0x148>)
 80047da:	4413      	add	r3, r2
 80047dc:	4a3d      	ldr	r2, [pc, #244]	@ (80048d4 <HAL_DMA_Init+0x140>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	009a      	lsls	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a3c      	ldr	r2, [pc, #240]	@ (80048e0 <HAL_DMA_Init+0x14c>)
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa1e 	bl	8004c84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004850:	d102      	bne.n	8004858 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800486c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_DMA_Init+0x104>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d80c      	bhi.n	8004898 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa3e 	bl	8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	e008      	b.n	80048aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40020407 	.word	0x40020407
 80048d0:	bffdfff8 	.word	0xbffdfff8
 80048d4:	cccccccd 	.word	0xcccccccd
 80048d8:	40020000 	.word	0x40020000
 80048dc:	bffdfbf8 	.word	0xbffdfbf8
 80048e0:	40020400 	.word	0x40020400

080048e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_DMA_Start_IT+0x20>
 8004900:	2302      	movs	r3, #2
 8004902:	e066      	b.n	80049d2 <HAL_DMA_Start_IT+0xee>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d155      	bne.n	80049c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0201 	bic.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f962 	bl	8004c06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 020e 	orr.w	r2, r2, #14
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e00f      	b.n	800497c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0204 	bic.w	r2, r2, #4
 800496a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 020a 	orr.w	r2, r2, #10
 800497a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004998:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e005      	b.n	80049d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
 80049ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d00d      	beq.n	8004a0e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e047      	b.n	8004a9e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 020e 	bic.w	r2, r2, #14
 8004a1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f003 021f 	and.w	r2, r3, #31
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00c      	beq.n	8004a7e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
    }
  }
  return status;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2204      	movs	r2, #4
 8004aca:	409a      	lsls	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d026      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x7a>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d021      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d107      	bne.n	8004afc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b00:	f003 021f 	and.w	r2, r3, #31
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	2104      	movs	r1, #4
 8004b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d071      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b20:	e06c      	b.n	8004bfc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02e      	beq.n	8004b94 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d029      	beq.n	8004b94 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 020a 	bic.w	r2, r2, #10
 8004b5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f003 021f 	and.w	r2, r3, #31
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	2102      	movs	r1, #2
 8004b74:	fa01 f202 	lsl.w	r2, r1, r2
 8004b78:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d038      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b92:	e033      	b.n	8004bfc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02a      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d025      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 020e 	bic.w	r2, r2, #14
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f003 021f 	and.w	r2, r3, #31
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	2101      	movs	r1, #1
 8004bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
}
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c1c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c2e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d108      	bne.n	8004c66 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c64:	e007      	b.n	8004c76 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b16      	ldr	r3, [pc, #88]	@ (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d802      	bhi.n	8004c9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c98:	4b15      	ldr	r3, [pc, #84]	@ (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e001      	b.n	8004ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ca0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3b08      	subs	r3, #8
 8004cae:	4a12      	ldr	r2, [pc, #72]	@ (8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	009a      	lsls	r2, r3, #2
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8004cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004cce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40020407 	.word	0x40020407
 8004cf0:	40020800 	.word	0x40020800
 8004cf4:	40020820 	.word	0x40020820
 8004cf8:	cccccccd 	.word	0xcccccccd
 8004cfc:	40020880 	.word	0x40020880

08004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a08      	ldr	r2, [pc, #32]	@ (8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	1000823f 	.word	0x1000823f
 8004d44:	40020940 	.word	0x40020940

08004d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d56:	e15a      	b.n	800500e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	4013      	ands	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 814c 	beq.w	8005008 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d005      	beq.n	8004d88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d130      	bne.n	8004dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2203      	movs	r2, #3
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f003 0201 	and.w	r2, r3, #1
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d017      	beq.n	8004e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	2203      	movs	r2, #3
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d123      	bne.n	8004e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	08da      	lsrs	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3208      	adds	r2, #8
 8004e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	220f      	movs	r2, #15
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	08da      	lsrs	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3208      	adds	r2, #8
 8004e74:	6939      	ldr	r1, [r7, #16]
 8004e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	2203      	movs	r2, #3
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 0203 	and.w	r2, r3, #3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80a6 	beq.w	8005008 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800502c <HAL_GPIO_Init+0x2e4>)
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800502c <HAL_GPIO_Init+0x2e4>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ec8:	4b58      	ldr	r3, [pc, #352]	@ (800502c <HAL_GPIO_Init+0x2e4>)
 8004eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ed4:	4a56      	ldr	r2, [pc, #344]	@ (8005030 <HAL_GPIO_Init+0x2e8>)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	220f      	movs	r2, #15
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004efe:	d01f      	beq.n	8004f40 <HAL_GPIO_Init+0x1f8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a4c      	ldr	r2, [pc, #304]	@ (8005034 <HAL_GPIO_Init+0x2ec>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d019      	beq.n	8004f3c <HAL_GPIO_Init+0x1f4>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a4b      	ldr	r2, [pc, #300]	@ (8005038 <HAL_GPIO_Init+0x2f0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_GPIO_Init+0x1f0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a4a      	ldr	r2, [pc, #296]	@ (800503c <HAL_GPIO_Init+0x2f4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00d      	beq.n	8004f34 <HAL_GPIO_Init+0x1ec>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a49      	ldr	r2, [pc, #292]	@ (8005040 <HAL_GPIO_Init+0x2f8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <HAL_GPIO_Init+0x1e8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a48      	ldr	r2, [pc, #288]	@ (8005044 <HAL_GPIO_Init+0x2fc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d101      	bne.n	8004f2c <HAL_GPIO_Init+0x1e4>
 8004f28:	2305      	movs	r3, #5
 8004f2a:	e00a      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f2c:	2306      	movs	r3, #6
 8004f2e:	e008      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f30:	2304      	movs	r3, #4
 8004f32:	e006      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f34:	2303      	movs	r3, #3
 8004f36:	e004      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e002      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_GPIO_Init+0x1fa>
 8004f40:	2300      	movs	r3, #0
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	f002 0203 	and.w	r2, r2, #3
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	4093      	lsls	r3, r2
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f52:	4937      	ldr	r1, [pc, #220]	@ (8005030 <HAL_GPIO_Init+0x2e8>)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f60:	4b39      	ldr	r3, [pc, #228]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f84:	4a30      	ldr	r2, [pc, #192]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	43db      	mvns	r3, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fae:	4a26      	ldr	r2, [pc, #152]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fb4:	4b24      	ldr	r3, [pc, #144]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fde:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4013      	ands	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005002:	4a11      	ldr	r2, [pc, #68]	@ (8005048 <HAL_GPIO_Init+0x300>)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	f47f ae9d 	bne.w	8004d58 <HAL_GPIO_Init+0x10>
  }
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40021000 	.word	0x40021000
 8005030:	40010000 	.word	0x40010000
 8005034:	48000400 	.word	0x48000400
 8005038:	48000800 	.word	0x48000800
 800503c:	48000c00 	.word	0x48000c00
 8005040:	48001000 	.word	0x48001000
 8005044:	48001400 	.word	0x48001400
 8005048:	40010400 	.word	0x40010400

0800504c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	e001      	b.n	800506e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
 8005088:	4613      	mov	r3, r2
 800508a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800508c:	787b      	ldrb	r3, [r7, #1]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005092:	887a      	ldrh	r2, [r7, #2]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005098:	e002      	b.n	80050a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800509a:	887a      	ldrh	r2, [r7, #2]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e08d      	b.n	80051da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fb fe88 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2224      	movs	r2, #36	@ 0x24
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800510c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d107      	bne.n	8005126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	e006      	b.n	8005134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d108      	bne.n	800514e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800514a:	605a      	str	r2, [r3, #4]
 800514c:	e007      	b.n	800515e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800515c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800516c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69d9      	ldr	r1, [r3, #28]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	461a      	mov	r2, r3
 80051f0:	460b      	mov	r3, r1
 80051f2:	817b      	strh	r3, [r7, #10]
 80051f4:	4613      	mov	r3, r2
 80051f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b20      	cmp	r3, #32
 8005202:	f040 80fd 	bne.w	8005400 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_I2C_Master_Transmit+0x30>
 8005210:	2302      	movs	r3, #2
 8005212:	e0f6      	b.n	8005402 <HAL_I2C_Master_Transmit+0x21e>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800521c:	f7fd fbf4 	bl	8002a08 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	2319      	movs	r3, #25
 8005228:	2201      	movs	r2, #1
 800522a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f914 	bl	800545c <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0e1      	b.n	8005402 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2221      	movs	r2, #33	@ 0x21
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2210      	movs	r2, #16
 800524a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	893a      	ldrh	r2, [r7, #8]
 800525e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2bff      	cmp	r3, #255	@ 0xff
 800526e:	d906      	bls.n	800527e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	22ff      	movs	r2, #255	@ 0xff
 8005274:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005276:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e007      	b.n	800528e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800528c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d024      	beq.n	80052e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	3301      	adds	r3, #1
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	8979      	ldrh	r1, [r7, #10]
 80052d2:	4b4e      	ldr	r3, [pc, #312]	@ (800540c <HAL_I2C_Master_Transmit+0x228>)
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fa83 	bl	80057e4 <I2C_TransferConfig>
 80052de:	e066      	b.n	80053ae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	8979      	ldrh	r1, [r7, #10]
 80052e8:	4b48      	ldr	r3, [pc, #288]	@ (800540c <HAL_I2C_Master_Transmit+0x228>)
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fa78 	bl	80057e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80052f4:	e05b      	b.n	80053ae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	6a39      	ldr	r1, [r7, #32]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f907 	bl	800550e <I2C_WaitOnTXISFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07b      	b.n	8005402 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d034      	beq.n	80053ae <HAL_I2C_Master_Transmit+0x1ca>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005348:	2b00      	cmp	r3, #0
 800534a:	d130      	bne.n	80053ae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	2200      	movs	r2, #0
 8005354:	2180      	movs	r1, #128	@ 0x80
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f880 	bl	800545c <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e04d      	b.n	8005402 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	2bff      	cmp	r3, #255	@ 0xff
 800536e:	d90e      	bls.n	800538e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	22ff      	movs	r2, #255	@ 0xff
 8005374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537a:	b2da      	uxtb	r2, r3
 800537c:	8979      	ldrh	r1, [r7, #10]
 800537e:	2300      	movs	r3, #0
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fa2c 	bl	80057e4 <I2C_TransferConfig>
 800538c:	e00f      	b.n	80053ae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	b2da      	uxtb	r2, r3
 800539e:	8979      	ldrh	r1, [r7, #10]
 80053a0:	2300      	movs	r3, #0
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fa1b 	bl	80057e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d19e      	bne.n	80052f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	6a39      	ldr	r1, [r7, #32]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f8ed 	bl	800559c <I2C_WaitOnSTOPFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e01a      	b.n	8005402 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2220      	movs	r2, #32
 80053d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <HAL_I2C_Master_Transmit+0x22c>)
 80053e0:	400b      	ands	r3, r1
 80053e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	e000      	b.n	8005402 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005400:	2302      	movs	r3, #2
  }
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	80002000 	.word	0x80002000
 8005410:	fe00e800 	.word	0xfe00e800

08005414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b02      	cmp	r3, #2
 8005428:	d103      	bne.n	8005432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b01      	cmp	r3, #1
 800543e:	d007      	beq.n	8005450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	619a      	str	r2, [r3, #24]
  }
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	4613      	mov	r3, r2
 800546a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800546c:	e03b      	b.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f8d6 	bl	8005624 <I2C_IsErrorOccurred>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e041      	b.n	8005506 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d02d      	beq.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548a:	f7fd fabd 	bl	8002a08 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d302      	bcc.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d122      	bne.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d113      	bne.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e00f      	b.n	8005506 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	429a      	cmp	r2, r3
 8005502:	d0b4      	beq.n	800546e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800551a:	e033      	b.n	8005584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f87f 	bl	8005624 <I2C_IsErrorOccurred>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e031      	b.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d025      	beq.n	8005584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005538:	f7fd fa66 	bl	8002a08 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d11a      	bne.n	8005584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b02      	cmp	r3, #2
 800555a:	d013      	beq.n	8005584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e007      	b.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b02      	cmp	r3, #2
 8005590:	d1c4      	bne.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055a8:	e02f      	b.n	800560a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f838 	bl	8005624 <I2C_IsErrorOccurred>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e02d      	b.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fd fa23 	bl	8002a08 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11a      	bne.n	800560a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d013      	beq.n	800560a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e007      	b.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b20      	cmp	r3, #32
 8005616:	d1c8      	bne.n	80055aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	@ 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	d068      	beq.n	8005722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2210      	movs	r2, #16
 8005656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005658:	e049      	b.n	80056ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d045      	beq.n	80056ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005662:	f7fd f9d1 	bl	8002a08 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	d302      	bcc.n	8005678 <I2C_IsErrorOccurred+0x54>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d13a      	bne.n	80056ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800568a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800569a:	d121      	bne.n	80056e0 <I2C_IsErrorOccurred+0xbc>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056a2:	d01d      	beq.n	80056e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d01a      	beq.n	80056e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056ba:	f7fd f9a5 	bl	8002a08 <HAL_GetTick>
 80056be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056c0:	e00e      	b.n	80056e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056c2:	f7fd f9a1 	bl	8002a08 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b19      	cmp	r3, #25
 80056ce:	d907      	bls.n	80056e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	f043 0320 	orr.w	r3, r3, #32
 80056d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80056de:	e006      	b.n	80056ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d1e9      	bne.n	80056c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d003      	beq.n	8005704 <I2C_IsErrorOccurred+0xe0>
 80056fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0aa      	beq.n	800565a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2220      	movs	r2, #32
 8005712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	f043 0304 	orr.w	r3, r3, #4
 800571a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	f043 0308 	orr.w	r3, r3, #8
 800575c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	f043 0302 	orr.w	r3, r3, #2
 800577e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01c      	beq.n	80057d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fe3b 	bl	8005414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <I2C_IsErrorOccurred+0x1bc>)
 80057aa:	400b      	ands	r3, r1
 80057ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80057d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3728      	adds	r7, #40	@ 0x28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	fe00e800 	.word	0xfe00e800

080057e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	817b      	strh	r3, [r7, #10]
 80057f2:	4613      	mov	r3, r2
 80057f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f6:	897b      	ldrh	r3, [r7, #10]
 80057f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057fc:	7a7b      	ldrb	r3, [r7, #9]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	4313      	orrs	r3, r2
 800580e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	0d5b      	lsrs	r3, r3, #21
 800581e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005822:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <I2C_TransferConfig+0x60>)
 8005824:	430b      	orrs	r3, r1
 8005826:	43db      	mvns	r3, r3
 8005828:	ea02 0103 	and.w	r1, r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	03ff63ff 	.word	0x03ff63ff

08005848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b20      	cmp	r3, #32
 800585c:	d138      	bne.n	80058d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005868:	2302      	movs	r3, #2
 800586a:	e032      	b.n	80058d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2224      	movs	r2, #36	@ 0x24
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800589a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e000      	b.n	80058d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d139      	bne.n	8005968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058fe:	2302      	movs	r3, #2
 8005900:	e033      	b.n	800596a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2224      	movs	r2, #36	@ 0x24
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005980:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005984:	4a0a      	ldr	r2, [pc, #40]	@ (80059b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	6613      	str	r3, [r2, #96]	@ 0x60
 800598c:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800598e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005998:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4905      	ldr	r1, [pc, #20]	@ (80059b4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	604b      	str	r3, [r1, #4]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40010000 	.word	0x40010000

080059b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e0c0      	b.n	8005b4c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f008 fab4 	bl	800df4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2203      	movs	r2, #3
 80059e8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f005 f844 	bl	800aa7e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
 80059fa:	e03e      	b.n	8005a7a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059fc:	7bfa      	ldrb	r2, [r7, #15]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	440b      	add	r3, r1
 8005a0a:	3311      	adds	r3, #17
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3310      	adds	r3, #16
 8005a20:	7bfa      	ldrb	r2, [r7, #15]
 8005a22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a24:	7bfa      	ldrb	r2, [r7, #15]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	440b      	add	r3, r1
 8005a32:	3313      	adds	r3, #19
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a38:	7bfa      	ldrb	r2, [r7, #15]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	440b      	add	r3, r1
 8005a46:	3320      	adds	r3, #32
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a4c:	7bfa      	ldrb	r2, [r7, #15]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	440b      	add	r3, r1
 8005a5a:	3324      	adds	r3, #36	@ 0x24
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	440b      	add	r3, r1
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	3301      	adds	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	791b      	ldrb	r3, [r3, #4]
 8005a7e:	7bfa      	ldrb	r2, [r7, #15]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3bb      	bcc.n	80059fc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e044      	b.n	8005b14 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	440b      	add	r3, r1
 8005aae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ab2:	7bfa      	ldrb	r2, [r7, #15]
 8005ab4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005acc:	7bfa      	ldrb	r2, [r7, #15]
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	440b      	add	r3, r1
 8005ada:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005af8:	7bfa      	ldrb	r2, [r7, #15]
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	440b      	add	r3, r1
 8005b06:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	3301      	adds	r3, #1
 8005b12:	73fb      	strb	r3, [r7, #15]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	791b      	ldrb	r3, [r3, #4]
 8005b18:	7bfa      	ldrb	r2, [r7, #15]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3b5      	bcc.n	8005a8a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005b2a:	f004 ffc3 	bl	800aab4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	7a9b      	ldrb	r3, [r3, #10]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d102      	bne.n	8005b4a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 fbf6 	bl	8007336 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_PCD_Start+0x16>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e012      	b.n	8005b90 <HAL_PCD_Start+0x3c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f004 ff6a 	bl	800aa50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f006 fd47 	bl	800c614 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f006 fd4c 	bl	800c642 <USB_ReadInterrupts>
 8005baa:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 faee 	bl	8006198 <PCD_EP_ISR_Handler>

    return;
 8005bbc:	e110      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f008 fa44 	bl	800e06e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005be6:	2100      	movs	r1, #0
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8fc 	bl	8005de6 <HAL_PCD_SetAddress>

    return;
 8005bee:	e0f7      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00c      	beq.n	8005c14 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c12:	e0e5      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c30:	b292      	uxth	r2, r2
 8005c32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c36:	e0d3      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d034      	beq.n	8005cac <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0204 	bic.w	r2, r2, #4
 8005c54:	b292      	uxth	r2, r2
 8005c56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0208 	bic.w	r2, r2, #8
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d107      	bne.n	8005c8c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c84:	2100      	movs	r1, #0
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 fb7f 	bl	800738a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f008 fa27 	bl	800e0e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ca4:	b292      	uxth	r2, r2
 8005ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005caa:	e099      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d027      	beq.n	8005d06 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0208 	orr.w	r2, r2, #8
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0204 	orr.w	r2, r2, #4
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f008 f9d4 	bl	800e0ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005d04:	e06c      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d040      	beq.n	8005d92 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d22:	b292      	uxth	r2, r2
 8005d24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d12b      	bne.n	8005d8a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0204 	orr.w	r2, r2, #4
 8005d44:	b292      	uxth	r2, r2
 8005d46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	089b      	lsrs	r3, r3, #2
 8005d76:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d80:	2101      	movs	r1, #1
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 fb01 	bl	800738a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005d88:	e02a      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f008 f98e 	bl	800e0ac <HAL_PCD_SuspendCallback>
    return;
 8005d90:	e026      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00f      	beq.n	8005dbc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005dae:	b292      	uxth	r2, r2
 8005db0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f008 f94c 	bl	800e052 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005dba:	e011      	b.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00c      	beq.n	8005de0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005dde:	bf00      	nop
  }
}
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_PCD_SetAddress+0x1a>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e012      	b.n	8005e26 <HAL_PCD_SetAddress+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	78fa      	ldrb	r2, [r7, #3]
 8005e0c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f006 fbe8 	bl	800c5ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	70fb      	strb	r3, [r7, #3]
 8005e40:	460b      	mov	r3, r1
 8005e42:	803b      	strh	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da0e      	bge.n	8005e72 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 0207 	and.w	r2, r3, #7
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	3310      	adds	r3, #16
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	705a      	strb	r2, [r3, #1]
 8005e70:	e00e      	b.n	8005e90 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 0207 	and.w	r2, r3, #7
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005e9c:	883b      	ldrh	r3, [r7, #0]
 8005e9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	78ba      	ldrb	r2, [r7, #2]
 8005eaa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005eac:	78bb      	ldrb	r3, [r7, #2]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d102      	bne.n	8005eb8 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_PCD_EP_Open+0x98>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e00e      	b.n	8005ee4 <HAL_PCD_EP_Open+0xb6>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f004 fe0b 	bl	800aaf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da0e      	bge.n	8005f1e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	f003 0207 	and.w	r2, r3, #7
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	3310      	adds	r3, #16
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	705a      	strb	r2, [r3, #1]
 8005f1c:	e00e      	b.n	8005f3c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	f003 0207 	and.w	r2, r3, #7
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4413      	add	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_PCD_EP_Close+0x6a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e00e      	b.n	8005f74 <HAL_PCD_EP_Close+0x88>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f005 faab 	bl	800b4c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
 8005f8e:	f003 0207 	and.w	r2, r3, #7
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6979      	ldr	r1, [r7, #20]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f005 fc63 	bl	800b89a <USB_EPStartXfer>

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	460b      	mov	r3, r1
 8005fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	f003 0207 	and.w	r2, r3, #7
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	3310      	adds	r3, #16
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2200      	movs	r2, #0
 8006022:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2201      	movs	r2, #1
 8006028:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	b2da      	uxtb	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	4618      	mov	r0, r3
 800603e:	f005 fc2c 	bl	800b89a <USB_EPStartXfer>

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	7912      	ldrb	r2, [r2, #4]
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e03e      	b.n	80060e8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800606a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800606e:	2b00      	cmp	r3, #0
 8006070:	da0e      	bge.n	8006090 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	f003 0207 	and.w	r2, r3, #7
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	3310      	adds	r3, #16
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	705a      	strb	r2, [r3, #1]
 800608e:	e00c      	b.n	80060aa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006090:	78fa      	ldrb	r2, [r7, #3]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4413      	add	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_PCD_EP_SetStall+0x7e>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e00e      	b.n	80060e8 <HAL_PCD_EP_SetStall+0x9c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	4618      	mov	r0, r3
 80060da:	f006 f98d 	bl	800c3f8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	7912      	ldrb	r2, [r2, #4]
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e040      	b.n	8006190 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800610e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006112:	2b00      	cmp	r3, #0
 8006114:	da0e      	bge.n	8006134 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	f003 0207 	and.w	r2, r3, #7
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	3310      	adds	r3, #16
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	4413      	add	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	705a      	strb	r2, [r3, #1]
 8006132:	e00e      	b.n	8006152 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	f003 0207 	and.w	r2, r3, #7
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_PCD_EP_ClrStall+0x82>
 800616e:	2302      	movs	r3, #2
 8006170:	e00e      	b.n	8006190 <HAL_PCD_EP_ClrStall+0xa0>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	4618      	mov	r0, r3
 8006182:	f006 f98a 	bl	800c49a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b092      	sub	sp, #72	@ 0x48
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061a0:	e333      	b.n	800680a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80061aa:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80061ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80061b8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f040 8108 	bne.w	80063d2 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80061c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d14c      	bne.n	8006266 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80061d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061dc:	813b      	strh	r3, [r7, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	893b      	ldrh	r3, [r7, #8]
 80061e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3310      	adds	r3, #16
 80061f4:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4413      	add	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	4413      	add	r3, r2
 8006210:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800621a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800621e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	441a      	add	r2, r3
 8006228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800622a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800622c:	2100      	movs	r1, #0
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f007 fef5 	bl	800e01e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	7b1b      	ldrb	r3, [r3, #12]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 82e5 	beq.w	800680a <PCD_EP_ISR_Handler+0x672>
 8006240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 82e0 	bne.w	800680a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7b1b      	ldrb	r3, [r3, #12]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006254:	b2da      	uxtb	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	731a      	strb	r2, [r3, #12]
 8006264:	e2d1      	b.n	800680a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800626c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006276:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800627c:	2b00      	cmp	r3, #0
 800627e:	d032      	beq.n	80062e6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006288:	b29b      	uxth	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	4413      	add	r3, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	4413      	add	r3, r2
 800629a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80062b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80062b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f006 fa14 	bl	800c6e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80062cc:	4013      	ands	r3, r2
 80062ce:	817b      	strh	r3, [r7, #10]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	897a      	ldrh	r2, [r7, #10]
 80062d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80062da:	b292      	uxth	r2, r2
 80062dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f007 fe70 	bl	800dfc4 <HAL_PCD_SetupStageCallback>
 80062e4:	e291      	b.n	800680a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80062e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f280 828d 	bge.w	800680a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80062fc:	4013      	ands	r3, r2
 80062fe:	81fb      	strh	r3, [r7, #14]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	89fa      	ldrh	r2, [r7, #14]
 8006306:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800630a:	b292      	uxth	r2, r2
 800630c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006316:	b29b      	uxth	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4413      	add	r3, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	4413      	add	r3, r2
 8006328:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006334:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d019      	beq.n	8006372 <PCD_EP_ISR_Handler+0x1da>
 800633e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d015      	beq.n	8006372 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800634c:	6959      	ldr	r1, [r3, #20]
 800634e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006350:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006354:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006356:	b29b      	uxth	r3, r3
 8006358:	f006 f9c6 	bl	800c6e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800635c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	441a      	add	r2, r3
 8006366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006368:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800636a:	2100      	movs	r1, #0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f007 fe3b 	bl	800dfe8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800637a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800637c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 8242 	bne.w	800680a <PCD_EP_ISR_Handler+0x672>
 8006386:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006388:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800638c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006390:	f000 823b 	beq.w	800680a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a4:	81bb      	strh	r3, [r7, #12]
 80063a6:	89bb      	ldrh	r3, [r7, #12]
 80063a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80063ac:	81bb      	strh	r3, [r7, #12]
 80063ae:	89bb      	ldrh	r3, [r7, #12]
 80063b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063b4:	81bb      	strh	r3, [r7, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	89bb      	ldrh	r3, [r7, #12]
 80063bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	8013      	strh	r3, [r2, #0]
 80063d0:	e21b      	b.n	800680a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063e4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f280 80f1 	bge.w	80065d0 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006404:	4013      	ands	r3, r2
 8006406:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006418:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800641c:	b292      	uxth	r2, r2
 800641e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006420:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006438:	7b1b      	ldrb	r3, [r3, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d123      	bne.n	8006486 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	4413      	add	r3, r2
 8006458:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006462:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006466:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 808b 	beq.w	8006586 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006476:	6959      	ldr	r1, [r3, #20]
 8006478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800647a:	88da      	ldrh	r2, [r3, #6]
 800647c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006480:	f006 f932 	bl	800c6e8 <USB_ReadPMA>
 8006484:	e07f      	b.n	8006586 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006488:	78db      	ldrb	r3, [r3, #3]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d109      	bne.n	80064a2 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800648e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006490:	461a      	mov	r2, r3
 8006492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f9c6 	bl	8006826 <HAL_PCD_EP_DB_Receive>
 800649a:	4603      	mov	r3, r0
 800649c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80064a0:	e071      	b.n	8006586 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80064ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d022      	beq.n	8006542 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006504:	b29b      	uxth	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4413      	add	r3, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	4413      	add	r3, r2
 8006516:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006520:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006524:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006528:	2b00      	cmp	r3, #0
 800652a:	d02c      	beq.n	8006586 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006532:	6959      	ldr	r1, [r3, #20]
 8006534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006536:	891a      	ldrh	r2, [r3, #8]
 8006538:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800653c:	f006 f8d4 	bl	800c6e8 <USB_ReadPMA>
 8006540:	e021      	b.n	8006586 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	4413      	add	r3, r2
 800655c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006566:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800656a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006578:	6959      	ldr	r1, [r3, #20]
 800657a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800657c:	895a      	ldrh	r2, [r3, #10]
 800657e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006582:	f006 f8b1 	bl	800c6e8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006588:	69da      	ldr	r2, [r3, #28]
 800658a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800658e:	441a      	add	r2, r3
 8006590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006592:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800659c:	441a      	add	r2, r3
 800659e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80065a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <PCD_EP_ISR_Handler+0x41e>
 80065aa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80065ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d206      	bcs.n	80065c4 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80065b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f007 fd13 	bl	800dfe8 <HAL_PCD_DataOutStageCallback>
 80065c2:	e005      	b.n	80065d0 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065ca:	4618      	mov	r0, r3
 80065cc:	f005 f965 	bl	800b89a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80065d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 8117 	beq.w	800680a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80065dc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	3310      	adds	r3, #16
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800661c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006624:	b29b      	uxth	r3, r3
 8006626:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b01      	cmp	r3, #1
 800662e:	f040 80a1 	bne.w	8006774 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006634:	2200      	movs	r2, #0
 8006636:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800663a:	7b1b      	ldrb	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8092 	beq.w	8006766 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006642:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d046      	beq.n	80066da <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800664c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d126      	bne.n	80066a2 <PCD_EP_ISR_Handler+0x50a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	00da      	lsls	r2, r3, #3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006686:	b29a      	uxth	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669a:	b29a      	uxth	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	e061      	b.n	8006766 <PCD_EP_ISR_Handler+0x5ce>
 80066a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d15d      	bne.n	8006766 <PCD_EP_ISR_Handler+0x5ce>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	00da      	lsls	r2, r3, #3
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	4413      	add	r3, r2
 80066cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2200      	movs	r2, #0
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	e045      	b.n	8006766 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d126      	bne.n	8006736 <PCD_EP_ISR_Handler+0x59e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	4413      	add	r3, r2
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	00da      	lsls	r2, r3, #3
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	4413      	add	r3, r2
 800670a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800670e:	623b      	str	r3, [r7, #32]
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800671a:	b29a      	uxth	r2, r3
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672e:	b29a      	uxth	r2, r3
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e017      	b.n	8006766 <PCD_EP_ISR_Handler+0x5ce>
 8006736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d113      	bne.n	8006766 <PCD_EP_ISR_Handler+0x5ce>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	4413      	add	r3, r2
 800674e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	00da      	lsls	r2, r3, #3
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	4413      	add	r3, r2
 800675a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	2200      	movs	r2, #0
 8006764:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f007 fc56 	bl	800e01e <HAL_PCD_DataInStageCallback>
 8006772:	e04a      	b.n	800680a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006774:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d13f      	bne.n	80067fe <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	4413      	add	r3, r2
 8006798:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a2:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80067a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d906      	bls.n	80067bc <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80067ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80067b4:	1ad2      	subs	r2, r2, r3
 80067b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b8:	619a      	str	r2, [r3, #24]
 80067ba:	e002      	b.n	80067c2 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80067bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80067c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f007 fc24 	bl	800e01e <HAL_PCD_DataInStageCallback>
 80067d6:	e018      	b.n	800680a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80067d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80067de:	441a      	add	r2, r3
 80067e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80067e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80067ea:	441a      	add	r2, r3
 80067ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067f6:	4618      	mov	r0, r3
 80067f8:	f005 f84f 	bl	800b89a <USB_EPStartXfer>
 80067fc:	e005      	b.n	800680a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80067fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006800:	461a      	mov	r2, r3
 8006802:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f917 	bl	8006a38 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006812:	b29b      	uxth	r3, r3
 8006814:	b21b      	sxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	f6ff acc3 	blt.w	80061a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3748      	adds	r7, #72	@ 0x48
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b088      	sub	sp, #32
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	4613      	mov	r3, r2
 8006832:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d07c      	beq.n	8006938 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4413      	add	r3, r2
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	6812      	ldr	r2, [r2, #0]
 8006856:	4413      	add	r3, r2
 8006858:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006862:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	8b7b      	ldrh	r3, [r7, #26]
 800686a:	429a      	cmp	r2, r3
 800686c:	d306      	bcc.n	800687c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	8b7b      	ldrh	r3, [r7, #26]
 8006874:	1ad2      	subs	r2, r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	619a      	str	r2, [r3, #24]
 800687a:	e002      	b.n	8006882 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d123      	bne.n	80068d2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a4:	833b      	strh	r3, [r7, #24]
 80068a6:	8b3b      	ldrh	r3, [r7, #24]
 80068a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068ac:	833b      	strh	r3, [r7, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	8b3b      	ldrh	r3, [r7, #24]
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01f      	beq.n	800691c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f6:	82fb      	strh	r3, [r7, #22]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	8afb      	ldrh	r3, [r7, #22]
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006914:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800691c:	8b7b      	ldrh	r3, [r7, #26]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8085 	beq.w	8006a2e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6959      	ldr	r1, [r3, #20]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	891a      	ldrh	r2, [r3, #8]
 8006930:	8b7b      	ldrh	r3, [r7, #26]
 8006932:	f005 fed9 	bl	800c6e8 <USB_ReadPMA>
 8006936:	e07a      	b.n	8006a2e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4413      	add	r3, r2
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	4413      	add	r3, r2
 8006952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	8b7b      	ldrh	r3, [r7, #26]
 8006964:	429a      	cmp	r2, r3
 8006966:	d306      	bcc.n	8006976 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	8b7b      	ldrh	r3, [r7, #26]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	619a      	str	r2, [r3, #24]
 8006974:	e002      	b.n	800697c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d123      	bne.n	80069cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800699a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699e:	83fb      	strh	r3, [r7, #30]
 80069a0:	8bfb      	ldrh	r3, [r7, #30]
 80069a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069a6:	83fb      	strh	r3, [r7, #30]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	8bfb      	ldrh	r3, [r7, #30]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11f      	bne.n	8006a16 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f0:	83bb      	strh	r3, [r7, #28]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	8bbb      	ldrh	r3, [r7, #28]
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a16:	8b7b      	ldrh	r3, [r7, #26]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6959      	ldr	r1, [r3, #20]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	895a      	ldrh	r2, [r3, #10]
 8006a28:	8b7b      	ldrh	r3, [r7, #26]
 8006a2a:	f005 fe5d 	bl	800c6e8 <USB_ReadPMA>
    }
  }

  return count;
 8006a2e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b0a6      	sub	sp, #152	@ 0x98
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 81f7 	beq.w	8006e40 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	4413      	add	r3, r2
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a76:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d907      	bls.n	8006a96 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	619a      	str	r2, [r3, #24]
 8006a94:	e002      	b.n	8006a9c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 80e1 	bne.w	8006c68 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d126      	bne.n	8006afc <HAL_PCD_EP_DB_Transmit+0xc4>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	4413      	add	r3, r2
 8006ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	00da      	lsls	r2, r3, #3
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	4413      	add	r3, r2
 8006ad0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	e01a      	b.n	8006b32 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d116      	bne.n	8006b32 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	4413      	add	r3, r2
 8006b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	00da      	lsls	r2, r3, #3
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2e:	2200      	movs	r2, #0
 8006b30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d126      	bne.n	8006b8e <HAL_PCD_EP_DB_Transmit+0x156>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	4413      	add	r3, r2
 8006b56:	623b      	str	r3, [r7, #32]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	00da      	lsls	r2, r3, #3
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	4413      	add	r3, r2
 8006b62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	801a      	strh	r2, [r3, #0]
 8006b8c:	e017      	b.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x186>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d113      	bne.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x186>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	4413      	add	r3, r2
 8006ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	00da      	lsls	r2, r3, #3
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	2200      	movs	r2, #0
 8006bbc:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	78db      	ldrb	r3, [r3, #3]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d123      	bne.n	8006c0e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be0:	837b      	strh	r3, [r7, #26]
 8006be2:	8b7b      	ldrh	r3, [r7, #26]
 8006be4:	f083 0320 	eor.w	r3, r3, #32
 8006be8:	837b      	strh	r3, [r7, #26]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8b7b      	ldrh	r3, [r7, #26]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	4619      	mov	r1, r3
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f007 fa02 	bl	800e01e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01f      	beq.n	8006c64 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3e:	833b      	strh	r3, [r7, #24]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	441a      	add	r2, r3
 8006c4e:	8b3b      	ldrh	r3, [r7, #24]
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e31f      	b.n	80072a8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d021      	beq.n	8006cb6 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006caa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f040 82ca 	bne.w	8007256 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	695a      	ldr	r2, [r3, #20]
 8006cc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cca:	441a      	add	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cd8:	441a      	add	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6a1a      	ldr	r2, [r3, #32]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d309      	bcc.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	6a1a      	ldr	r2, [r3, #32]
 8006cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	621a      	str	r2, [r3, #32]
 8006cfc:	e015      	b.n	8006d2a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006d06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006d14:	e009      	b.n	8006d2a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d15f      	bne.n	8006df2 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d46:	4413      	add	r3, r2
 8006d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	00da      	lsls	r2, r3, #3
 8006d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d52:	4413      	add	r3, r2
 8006d54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <HAL_PCD_EP_DB_Transmit+0x34e>
 8006d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e051      	b.n	8006e2a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d88:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d8a:	d816      	bhi.n	8006dba <HAL_PCD_EP_DB_Transmit+0x382>
 8006d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d9e:	3301      	adds	r3, #1
 8006da0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	029b      	lsls	r3, r3, #10
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	e037      	b.n	8006e2a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006dba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <HAL_PCD_EP_DB_Transmit+0x398>
 8006dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	029b      	lsls	r3, r3, #10
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	4313      	orrs	r3, r2
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	e01b      	b.n	8006e2a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d117      	bne.n	8006e2a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e0e:	4413      	add	r3, r2
 8006e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	00da      	lsls	r2, r3, #3
 8006e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e28:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6959      	ldr	r1, [r3, #20]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	891a      	ldrh	r2, [r3, #8]
 8006e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f005 fc12 	bl	800c662 <USB_WritePMA>
 8006e3e:	e20a      	b.n	8007256 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	6812      	ldr	r2, [r2, #0]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e64:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d307      	bcc.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e7c:	1ad2      	subs	r2, r2, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	619a      	str	r2, [r3, #24]
 8006e82:	e002      	b.n	8006e8a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f040 80f6 	bne.w	8007080 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d126      	bne.n	8006eea <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eb0:	4413      	add	r3, r2
 8006eb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	00da      	lsls	r2, r3, #3
 8006eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ec2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e01a      	b.n	8006f20 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d116      	bne.n	8006f20 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	461a      	mov	r2, r3
 8006f04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f06:	4413      	add	r3, r2
 8006f08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	00da      	lsls	r2, r3, #3
 8006f10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f12:	4413      	add	r3, r2
 8006f14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d12f      	bne.n	8006f90 <HAL_PCD_EP_DB_Transmit+0x558>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f48:	4413      	add	r3, r2
 8006f4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	00da      	lsls	r2, r3, #3
 8006f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f58:	4413      	add	r3, r2
 8006f5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	e01c      	b.n	8006fca <HAL_PCD_EP_DB_Transmit+0x592>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d118      	bne.n	8006fca <HAL_PCD_EP_DB_Transmit+0x592>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fa8:	4413      	add	r3, r2
 8006faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	00da      	lsls	r2, r3, #3
 8006fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fb8:	4413      	add	r3, r2
 8006fba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	78db      	ldrb	r3, [r3, #3]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d127      	bne.n	8007022 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006ff0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ff4:	f083 0320 	eor.w	r3, r3, #32
 8006ff8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800700e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800701a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701e:	b29b      	uxth	r3, r3
 8007020:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	4619      	mov	r1, r3
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f006 fff8 	bl	800e01e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d121      	bne.n	800707c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007052:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	e113      	b.n	80072a8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d121      	bne.n	80070ce <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80070ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f040 80be 	bne.w	8007256 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	695a      	ldr	r2, [r3, #20]
 80070de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80070e2:	441a      	add	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80070f0:	441a      	add	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6a1a      	ldr	r2, [r3, #32]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d309      	bcc.n	8007116 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6a1a      	ldr	r2, [r3, #32]
 800710c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	621a      	str	r2, [r3, #32]
 8007114:	e015      	b.n	8007142 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d107      	bne.n	800712e <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800711e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007122:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800712c:	e009      	b.n	8007142 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d15f      	bne.n	8007210 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800715e:	b29b      	uxth	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007164:	4413      	add	r3, r2
 8007166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	00da      	lsls	r2, r3, #3
 800716e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007170:	4413      	add	r3, r2
 8007172:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007176:	667b      	str	r3, [r7, #100]	@ 0x64
 8007178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007182:	b29a      	uxth	r2, r3
 8007184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <HAL_PCD_EP_DB_Transmit+0x76c>
 800718e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e04e      	b.n	8007242 <HAL_PCD_EP_DB_Transmit+0x80a>
 80071a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a8:	d816      	bhi.n	80071d8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80071aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80071b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_PCD_EP_DB_Transmit+0x788>
 80071ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071bc:	3301      	adds	r3, #1
 80071be:	663b      	str	r3, [r7, #96]	@ 0x60
 80071c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e034      	b.n	8007242 <HAL_PCD_EP_DB_Transmit+0x80a>
 80071d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80071de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071e0:	f003 031f 	and.w	r3, r3, #31
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <HAL_PCD_EP_DB_Transmit+0x7b6>
 80071e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071ea:	3b01      	subs	r3, #1
 80071ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007208:	b29a      	uxth	r2, r3
 800720a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e018      	b.n	8007242 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d114      	bne.n	8007242 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007220:	b29b      	uxth	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007226:	4413      	add	r3, r2
 8007228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	00da      	lsls	r2, r3, #3
 8007230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007232:	4413      	add	r3, r2
 8007234:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007238:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800723a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800723c:	b29a      	uxth	r2, r3
 800723e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007240:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6959      	ldr	r1, [r3, #20]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	895a      	ldrh	r2, [r3, #10]
 800724e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007250:	b29b      	uxth	r3, r3
 8007252:	f005 fa06 	bl	800c662 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800726c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007270:	82fb      	strh	r3, [r7, #22]
 8007272:	8afb      	ldrh	r3, [r7, #22]
 8007274:	f083 0310 	eor.w	r3, r3, #16
 8007278:	82fb      	strh	r3, [r7, #22]
 800727a:	8afb      	ldrh	r3, [r7, #22]
 800727c:	f083 0320 	eor.w	r3, r3, #32
 8007280:	82fb      	strh	r3, [r7, #22]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	8afb      	ldrh	r3, [r7, #22]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3798      	adds	r7, #152	@ 0x98
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	817b      	strh	r3, [r7, #10]
 80072be:	4613      	mov	r3, r2
 80072c0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80072c2:	897b      	ldrh	r3, [r7, #10]
 80072c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072ce:	897b      	ldrh	r3, [r7, #10]
 80072d0:	f003 0207 	and.w	r2, r3, #7
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	3310      	adds	r3, #16
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e009      	b.n	80072fa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072e6:	897a      	ldrh	r2, [r7, #10]
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80072fa:	893b      	ldrh	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2200      	movs	r2, #0
 8007304:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	b29a      	uxth	r2, r3
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	80da      	strh	r2, [r3, #6]
 800730e:	e00b      	b.n	8007328 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2201      	movs	r2, #1
 8007314:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	b29a      	uxth	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0c1b      	lsrs	r3, r3, #16
 8007322:	b29a      	uxth	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800735a:	b29b      	uxth	r3, r3
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800736e:	b29b      	uxth	r3, r3
 8007370:	f043 0302 	orr.w	r3, r3, #2
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d141      	bne.n	8007436 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073b2:	4b4b      	ldr	r3, [pc, #300]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073be:	d131      	bne.n	8007424 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073c0:	4b47      	ldr	r3, [pc, #284]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c6:	4a46      	ldr	r2, [pc, #280]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073d0:	4b43      	ldr	r3, [pc, #268]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80073d8:	4a41      	ldr	r2, [pc, #260]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80073de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073e0:	4b40      	ldr	r3, [pc, #256]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2232      	movs	r2, #50	@ 0x32
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	4a3f      	ldr	r2, [pc, #252]	@ (80074e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80073ec:	fba2 2303 	umull	r2, r3, r2, r3
 80073f0:	0c9b      	lsrs	r3, r3, #18
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073f6:	e002      	b.n	80073fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073fe:	4b38      	ldr	r3, [pc, #224]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800740a:	d102      	bne.n	8007412 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f2      	bne.n	80073f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007412:	4b33      	ldr	r3, [pc, #204]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800741a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800741e:	d158      	bne.n	80074d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e057      	b.n	80074d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007424:	4b2e      	ldr	r3, [pc, #184]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800742a:	4a2d      	ldr	r2, [pc, #180]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800742c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007434:	e04d      	b.n	80074d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800743c:	d141      	bne.n	80074c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800743e:	4b28      	ldr	r3, [pc, #160]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744a:	d131      	bne.n	80074b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800744c:	4b24      	ldr	r3, [pc, #144]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800744e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007452:	4a23      	ldr	r2, [pc, #140]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800745c:	4b20      	ldr	r3, [pc, #128]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007464:	4a1e      	ldr	r2, [pc, #120]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800746a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800746c:	4b1d      	ldr	r3, [pc, #116]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2232      	movs	r2, #50	@ 0x32
 8007472:	fb02 f303 	mul.w	r3, r2, r3
 8007476:	4a1c      	ldr	r2, [pc, #112]	@ (80074e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007478:	fba2 2303 	umull	r2, r3, r2, r3
 800747c:	0c9b      	lsrs	r3, r3, #18
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007482:	e002      	b.n	800748a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3b01      	subs	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800748a:	4b15      	ldr	r3, [pc, #84]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007496:	d102      	bne.n	800749e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f2      	bne.n	8007484 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800749e:	4b10      	ldr	r3, [pc, #64]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074aa:	d112      	bne.n	80074d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e011      	b.n	80074d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074b0:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b6:	4a0a      	ldr	r2, [pc, #40]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80074c0:	e007      	b.n	80074d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80074c2:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80074ca:	4a05      	ldr	r2, [pc, #20]	@ (80074e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	40007000 	.word	0x40007000
 80074e4:	20000004 	.word	0x20000004
 80074e8:	431bde83 	.word	0x431bde83

080074ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80074f0:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	4a04      	ldr	r2, [pc, #16]	@ (8007508 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80074f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074fa:	6093      	str	r3, [r2, #8]
}
 80074fc:	bf00      	nop
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40007000 	.word	0x40007000

0800750c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e2fe      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d075      	beq.n	8007616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800752a:	4b97      	ldr	r3, [pc, #604]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 030c 	and.w	r3, r3, #12
 8007532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007534:	4b94      	ldr	r3, [pc, #592]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b0c      	cmp	r3, #12
 8007542:	d102      	bne.n	800754a <HAL_RCC_OscConfig+0x3e>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d002      	beq.n	8007550 <HAL_RCC_OscConfig+0x44>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b08      	cmp	r3, #8
 800754e:	d10b      	bne.n	8007568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007550:	4b8d      	ldr	r3, [pc, #564]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d05b      	beq.n	8007614 <HAL_RCC_OscConfig+0x108>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d157      	bne.n	8007614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e2d9      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007570:	d106      	bne.n	8007580 <HAL_RCC_OscConfig+0x74>
 8007572:	4b85      	ldr	r3, [pc, #532]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a84      	ldr	r2, [pc, #528]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e01d      	b.n	80075bc <HAL_RCC_OscConfig+0xb0>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007588:	d10c      	bne.n	80075a4 <HAL_RCC_OscConfig+0x98>
 800758a:	4b7f      	ldr	r3, [pc, #508]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a7e      	ldr	r2, [pc, #504]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	4b7c      	ldr	r3, [pc, #496]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a7b      	ldr	r2, [pc, #492]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800759c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	e00b      	b.n	80075bc <HAL_RCC_OscConfig+0xb0>
 80075a4:	4b78      	ldr	r3, [pc, #480]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a77      	ldr	r2, [pc, #476]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80075aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	4b75      	ldr	r3, [pc, #468]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a74      	ldr	r2, [pc, #464]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80075b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d013      	beq.n	80075ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c4:	f7fb fa20 	bl	8002a08 <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075ca:	e008      	b.n	80075de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075cc:	f7fb fa1c 	bl	8002a08 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b64      	cmp	r3, #100	@ 0x64
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e29e      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075de:	4b6a      	ldr	r3, [pc, #424]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0f0      	beq.n	80075cc <HAL_RCC_OscConfig+0xc0>
 80075ea:	e014      	b.n	8007616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fb fa0c 	bl	8002a08 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075f4:	f7fb fa08 	bl	8002a08 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b64      	cmp	r3, #100	@ 0x64
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e28a      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007606:	4b60      	ldr	r3, [pc, #384]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0xe8>
 8007612:	e000      	b.n	8007616 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d075      	beq.n	800770e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007622:	4b59      	ldr	r3, [pc, #356]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 030c 	and.w	r3, r3, #12
 800762a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800762c:	4b56      	ldr	r3, [pc, #344]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b0c      	cmp	r3, #12
 800763a:	d102      	bne.n	8007642 <HAL_RCC_OscConfig+0x136>
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d002      	beq.n	8007648 <HAL_RCC_OscConfig+0x13c>
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	2b04      	cmp	r3, #4
 8007646:	d11f      	bne.n	8007688 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007648:	4b4f      	ldr	r3, [pc, #316]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_RCC_OscConfig+0x154>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e25d      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007660:	4b49      	ldr	r3, [pc, #292]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	4946      	ldr	r1, [pc, #280]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007674:	4b45      	ldr	r3, [pc, #276]	@ (800778c <HAL_RCC_OscConfig+0x280>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fb f979 	bl	8002970 <HAL_InitTick>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d043      	beq.n	800770c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e249      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d023      	beq.n	80076d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007690:	4b3d      	ldr	r3, [pc, #244]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a3c      	ldr	r2, [pc, #240]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800769a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800769c:	f7fb f9b4 	bl	8002a08 <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076a4:	f7fb f9b0 	bl	8002a08 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e232      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076b6:	4b34      	ldr	r3, [pc, #208]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c2:	4b31      	ldr	r3, [pc, #196]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	061b      	lsls	r3, r3, #24
 80076d0:	492d      	ldr	r1, [pc, #180]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	604b      	str	r3, [r1, #4]
 80076d6:	e01a      	b.n	800770e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 80076de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fb f990 	bl	8002a08 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ec:	f7fb f98c 	bl	8002a08 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e20e      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076fe:	4b22      	ldr	r3, [pc, #136]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x1e0>
 800770a:	e000      	b.n	800770e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800770c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0308 	and.w	r3, r3, #8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d041      	beq.n	800779e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01c      	beq.n	800775c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007722:	4b19      	ldr	r3, [pc, #100]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007728:	4a17      	ldr	r2, [pc, #92]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007732:	f7fb f969 	bl	8002a08 <HAL_GetTick>
 8007736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007738:	e008      	b.n	800774c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800773a:	f7fb f965 	bl	8002a08 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e1e7      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800774c:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800774e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0ef      	beq.n	800773a <HAL_RCC_OscConfig+0x22e>
 800775a:	e020      	b.n	800779e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800775c:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 800775e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007762:	4a09      	ldr	r2, [pc, #36]	@ (8007788 <HAL_RCC_OscConfig+0x27c>)
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800776c:	f7fb f94c 	bl	8002a08 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007772:	e00d      	b.n	8007790 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007774:	f7fb f948 	bl	8002a08 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d906      	bls.n	8007790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e1ca      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
 8007786:	bf00      	nop
 8007788:	40021000 	.word	0x40021000
 800778c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007790:	4b8c      	ldr	r3, [pc, #560]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1ea      	bne.n	8007774 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 80a6 	beq.w	80078f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ac:	2300      	movs	r3, #0
 80077ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077b0:	4b84      	ldr	r3, [pc, #528]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80077b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_RCC_OscConfig+0x2b4>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <HAL_RCC_OscConfig+0x2b6>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077c6:	4b7f      	ldr	r3, [pc, #508]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80077c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ca:	4a7e      	ldr	r2, [pc, #504]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80077cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80077d2:	4b7c      	ldr	r3, [pc, #496]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80077de:	2301      	movs	r3, #1
 80077e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077e2:	4b79      	ldr	r3, [pc, #484]	@ (80079c8 <HAL_RCC_OscConfig+0x4bc>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d118      	bne.n	8007820 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077ee:	4b76      	ldr	r3, [pc, #472]	@ (80079c8 <HAL_RCC_OscConfig+0x4bc>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a75      	ldr	r2, [pc, #468]	@ (80079c8 <HAL_RCC_OscConfig+0x4bc>)
 80077f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077fa:	f7fb f905 	bl	8002a08 <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007802:	f7fb f901 	bl	8002a08 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e183      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007814:	4b6c      	ldr	r3, [pc, #432]	@ (80079c8 <HAL_RCC_OscConfig+0x4bc>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d108      	bne.n	800783a <HAL_RCC_OscConfig+0x32e>
 8007828:	4b66      	ldr	r3, [pc, #408]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782e:	4a65      	ldr	r2, [pc, #404]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007830:	f043 0301 	orr.w	r3, r3, #1
 8007834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007838:	e024      	b.n	8007884 <HAL_RCC_OscConfig+0x378>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2b05      	cmp	r3, #5
 8007840:	d110      	bne.n	8007864 <HAL_RCC_OscConfig+0x358>
 8007842:	4b60      	ldr	r3, [pc, #384]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007848:	4a5e      	ldr	r2, [pc, #376]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800784a:	f043 0304 	orr.w	r3, r3, #4
 800784e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007852:	4b5c      	ldr	r3, [pc, #368]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007858:	4a5a      	ldr	r2, [pc, #360]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007862:	e00f      	b.n	8007884 <HAL_RCC_OscConfig+0x378>
 8007864:	4b57      	ldr	r3, [pc, #348]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786a:	4a56      	ldr	r2, [pc, #344]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007874:	4b53      	ldr	r3, [pc, #332]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787a:	4a52      	ldr	r2, [pc, #328]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d016      	beq.n	80078ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788c:	f7fb f8bc 	bl	8002a08 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007892:	e00a      	b.n	80078aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007894:	f7fb f8b8 	bl	8002a08 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e138      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078aa:	4b46      	ldr	r3, [pc, #280]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80078ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0ed      	beq.n	8007894 <HAL_RCC_OscConfig+0x388>
 80078b8:	e015      	b.n	80078e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ba:	f7fb f8a5 	bl	8002a08 <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078c0:	e00a      	b.n	80078d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c2:	f7fb f8a1 	bl	8002a08 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e121      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078d8:	4b3a      	ldr	r3, [pc, #232]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1ed      	bne.n	80078c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078e6:	7ffb      	ldrb	r3, [r7, #31]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d105      	bne.n	80078f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078ec:	4b35      	ldr	r3, [pc, #212]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f0:	4a34      	ldr	r2, [pc, #208]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80078f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d03c      	beq.n	800797e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01c      	beq.n	8007946 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800790c:	4b2d      	ldr	r3, [pc, #180]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800790e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007912:	4a2c      	ldr	r2, [pc, #176]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007914:	f043 0301 	orr.w	r3, r3, #1
 8007918:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791c:	f7fb f874 	bl	8002a08 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007924:	f7fb f870 	bl	8002a08 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e0f2      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007936:	4b23      	ldr	r3, [pc, #140]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0ef      	beq.n	8007924 <HAL_RCC_OscConfig+0x418>
 8007944:	e01b      	b.n	800797e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007946:	4b1f      	ldr	r3, [pc, #124]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800794c:	4a1d      	ldr	r2, [pc, #116]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007956:	f7fb f857 	bl	8002a08 <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800795c:	e008      	b.n	8007970 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800795e:	f7fb f853 	bl	8002a08 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e0d5      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007970:	4b14      	ldr	r3, [pc, #80]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 8007972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1ef      	bne.n	800795e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 80c9 	beq.w	8007b1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007988:	4b0e      	ldr	r3, [pc, #56]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 030c 	and.w	r3, r3, #12
 8007990:	2b0c      	cmp	r3, #12
 8007992:	f000 8083 	beq.w	8007a9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	2b02      	cmp	r3, #2
 800799c:	d15e      	bne.n	8007a5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800799e:	4b09      	ldr	r3, [pc, #36]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a08      	ldr	r2, [pc, #32]	@ (80079c4 <HAL_RCC_OscConfig+0x4b8>)
 80079a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079aa:	f7fb f82d 	bl	8002a08 <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079b0:	e00c      	b.n	80079cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b2:	f7fb f829 	bl	8002a08 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d905      	bls.n	80079cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e0ab      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
 80079c4:	40021000 	.word	0x40021000
 80079c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079cc:	4b55      	ldr	r3, [pc, #340]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1ec      	bne.n	80079b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079d8:	4b52      	ldr	r3, [pc, #328]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	4b52      	ldr	r3, [pc, #328]	@ (8007b28 <HAL_RCC_OscConfig+0x61c>)
 80079de:	4013      	ands	r3, r2
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6a11      	ldr	r1, [r2, #32]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80079e8:	3a01      	subs	r2, #1
 80079ea:	0112      	lsls	r2, r2, #4
 80079ec:	4311      	orrs	r1, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80079f2:	0212      	lsls	r2, r2, #8
 80079f4:	4311      	orrs	r1, r2
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80079fa:	0852      	lsrs	r2, r2, #1
 80079fc:	3a01      	subs	r2, #1
 80079fe:	0552      	lsls	r2, r2, #21
 8007a00:	4311      	orrs	r1, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a06:	0852      	lsrs	r2, r2, #1
 8007a08:	3a01      	subs	r2, #1
 8007a0a:	0652      	lsls	r2, r2, #25
 8007a0c:	4311      	orrs	r1, r2
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a12:	06d2      	lsls	r2, r2, #27
 8007a14:	430a      	orrs	r2, r1
 8007a16:	4943      	ldr	r1, [pc, #268]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a1c:	4b41      	ldr	r3, [pc, #260]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a40      	ldr	r2, [pc, #256]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a28:	4b3e      	ldr	r3, [pc, #248]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	4a3d      	ldr	r2, [pc, #244]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fa ffe8 	bl	8002a08 <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a3c:	f7fa ffe4 	bl	8002a08 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e066      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a4e:	4b35      	ldr	r3, [pc, #212]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0f0      	beq.n	8007a3c <HAL_RCC_OscConfig+0x530>
 8007a5a:	e05e      	b.n	8007b1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5c:	4b31      	ldr	r3, [pc, #196]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a30      	ldr	r2, [pc, #192]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a68:	f7fa ffce 	bl	8002a08 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a70:	f7fa ffca 	bl	8002a08 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e04c      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a82:	4b28      	ldr	r3, [pc, #160]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f0      	bne.n	8007a70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007a8e:	4b25      	ldr	r3, [pc, #148]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	4924      	ldr	r1, [pc, #144]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007a94:	4b25      	ldr	r3, [pc, #148]	@ (8007b2c <HAL_RCC_OscConfig+0x620>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	60cb      	str	r3, [r1, #12]
 8007a9a:	e03e      	b.n	8007b1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e039      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b24 <HAL_RCC_OscConfig+0x618>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f003 0203 	and.w	r2, r3, #3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d12c      	bne.n	8007b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d123      	bne.n	8007b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d11b      	bne.n	8007b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d113      	bne.n	8007b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	3b01      	subs	r3, #1
 8007afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d109      	bne.n	8007b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b0c:	085b      	lsrs	r3, r3, #1
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d001      	beq.n	8007b1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3720      	adds	r7, #32
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40021000 	.word	0x40021000
 8007b28:	019f800c 	.word	0x019f800c
 8007b2c:	feeefffc 	.word	0xfeeefffc

08007b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e11e      	b.n	8007d86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b48:	4b91      	ldr	r3, [pc, #580]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d910      	bls.n	8007b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b56:	4b8e      	ldr	r3, [pc, #568]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f023 020f 	bic.w	r2, r3, #15
 8007b5e:	498c      	ldr	r1, [pc, #560]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b66:	4b8a      	ldr	r3, [pc, #552]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d001      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e106      	b.n	8007d86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d073      	beq.n	8007c6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d129      	bne.n	8007be0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b8c:	4b81      	ldr	r3, [pc, #516]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0f4      	b.n	8007d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007b9c:	f000 f99e 	bl	8007edc <RCC_GetSysClockFreqFromPLLSource>
 8007ba0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4a7c      	ldr	r2, [pc, #496]	@ (8007d98 <HAL_RCC_ClockConfig+0x268>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d93f      	bls.n	8007c2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007baa:	4b7a      	ldr	r3, [pc, #488]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d033      	beq.n	8007c2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d12f      	bne.n	8007c2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bca:	4b72      	ldr	r3, [pc, #456]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007bd2:	4a70      	ldr	r2, [pc, #448]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007bda:	2380      	movs	r3, #128	@ 0x80
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e024      	b.n	8007c2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d107      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007be8:	4b6a      	ldr	r3, [pc, #424]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d109      	bne.n	8007c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0c6      	b.n	8007d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bf8:	4b66      	ldr	r3, [pc, #408]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0be      	b.n	8007d86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c08:	f000 f8ce 	bl	8007da8 <HAL_RCC_GetSysClockFreq>
 8007c0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	4a61      	ldr	r2, [pc, #388]	@ (8007d98 <HAL_RCC_ClockConfig+0x268>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d909      	bls.n	8007c2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c16:	4b5f      	ldr	r3, [pc, #380]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c26:	2380      	movs	r3, #128	@ 0x80
 8007c28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f023 0203 	bic.w	r2, r3, #3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	4957      	ldr	r1, [pc, #348]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3c:	f7fa fee4 	bl	8002a08 <HAL_GetTick>
 8007c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c42:	e00a      	b.n	8007c5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c44:	f7fa fee0 	bl	8002a08 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d901      	bls.n	8007c5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e095      	b.n	8007d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 020c 	and.w	r2, r3, #12
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d1eb      	bne.n	8007c44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d023      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c84:	4b43      	ldr	r3, [pc, #268]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a42      	ldr	r2, [pc, #264]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007c8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d007      	beq.n	8007cac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007ca6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007caa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cac:	4b39      	ldr	r3, [pc, #228]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4936      	ldr	r1, [pc, #216]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	608b      	str	r3, [r1, #8]
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b80      	cmp	r3, #128	@ 0x80
 8007cc4:	d105      	bne.n	8007cd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007cc6:	4b33      	ldr	r3, [pc, #204]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	4a32      	ldr	r2, [pc, #200]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007ccc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d21d      	bcs.n	8007d1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f023 020f 	bic.w	r2, r3, #15
 8007ce8:	4929      	ldr	r1, [pc, #164]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007cf0:	f7fa fe8a 	bl	8002a08 <HAL_GetTick>
 8007cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf6:	e00a      	b.n	8007d0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cf8:	f7fa fe86 	bl	8002a08 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e03b      	b.n	8007d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d0e:	4b20      	ldr	r3, [pc, #128]	@ (8007d90 <HAL_RCC_ClockConfig+0x260>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d1ed      	bne.n	8007cf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d28:	4b1a      	ldr	r3, [pc, #104]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4917      	ldr	r1, [pc, #92]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d46:	4b13      	ldr	r3, [pc, #76]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	490f      	ldr	r1, [pc, #60]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d5a:	f000 f825 	bl	8007da8 <HAL_RCC_GetSysClockFreq>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <HAL_RCC_ClockConfig+0x264>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	490c      	ldr	r1, [pc, #48]	@ (8007d9c <HAL_RCC_ClockConfig+0x26c>)
 8007d6c:	5ccb      	ldrb	r3, [r1, r3]
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	fa22 f303 	lsr.w	r3, r2, r3
 8007d76:	4a0a      	ldr	r2, [pc, #40]	@ (8007da0 <HAL_RCC_ClockConfig+0x270>)
 8007d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007da4 <HAL_RCC_ClockConfig+0x274>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fa fdf6 	bl	8002970 <HAL_InitTick>
 8007d84:	4603      	mov	r3, r0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	40022000 	.word	0x40022000
 8007d94:	40021000 	.word	0x40021000
 8007d98:	04c4b400 	.word	0x04c4b400
 8007d9c:	0800f4e4 	.word	0x0800f4e4
 8007da0:	20000004 	.word	0x20000004
 8007da4:	20000008 	.word	0x20000008

08007da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007dae:	4b2c      	ldr	r3, [pc, #176]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 030c 	and.w	r3, r3, #12
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d102      	bne.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dba:	4b2a      	ldr	r3, [pc, #168]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	e047      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007dc0:	4b27      	ldr	r3, [pc, #156]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 030c 	and.w	r3, r3, #12
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007dcc:	4b26      	ldr	r3, [pc, #152]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	e03e      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007dd2:	4b23      	ldr	r3, [pc, #140]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 030c 	and.w	r3, r3, #12
 8007dda:	2b0c      	cmp	r3, #12
 8007ddc:	d136      	bne.n	8007e4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dde:	4b20      	ldr	r3, [pc, #128]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007de8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	091b      	lsrs	r3, r3, #4
 8007dee:	f003 030f 	and.w	r3, r3, #15
 8007df2:	3301      	adds	r3, #1
 8007df4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d10c      	bne.n	8007e16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	4a16      	ldr	r2, [pc, #88]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e06:	68d2      	ldr	r2, [r2, #12]
 8007e08:	0a12      	lsrs	r2, r2, #8
 8007e0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e0e:	fb02 f303 	mul.w	r3, r2, r3
 8007e12:	617b      	str	r3, [r7, #20]
      break;
 8007e14:	e00c      	b.n	8007e30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e16:	4a13      	ldr	r2, [pc, #76]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1e:	4a10      	ldr	r2, [pc, #64]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e20:	68d2      	ldr	r2, [r2, #12]
 8007e22:	0a12      	lsrs	r2, r2, #8
 8007e24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e28:	fb02 f303 	mul.w	r3, r2, r3
 8007e2c:	617b      	str	r3, [r7, #20]
      break;
 8007e2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e30:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	0e5b      	lsrs	r3, r3, #25
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	e001      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e50:	693b      	ldr	r3, [r7, #16]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40021000 	.word	0x40021000
 8007e64:	00f42400 	.word	0x00f42400
 8007e68:	007a1200 	.word	0x007a1200

08007e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e70:	4b03      	ldr	r3, [pc, #12]	@ (8007e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e72:	681b      	ldr	r3, [r3, #0]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000004 	.word	0x20000004

08007e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e88:	f7ff fff0 	bl	8007e6c <HAL_RCC_GetHCLKFreq>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	0a1b      	lsrs	r3, r3, #8
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	4904      	ldr	r1, [pc, #16]	@ (8007eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e9a:	5ccb      	ldrb	r3, [r1, r3]
 8007e9c:	f003 031f 	and.w	r3, r3, #31
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	0800f4f4 	.word	0x0800f4f4

08007eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007eb4:	f7ff ffda 	bl	8007e6c <HAL_RCC_GetHCLKFreq>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	4b06      	ldr	r3, [pc, #24]	@ (8007ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	0adb      	lsrs	r3, r3, #11
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	4904      	ldr	r1, [pc, #16]	@ (8007ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ec6:	5ccb      	ldrb	r3, [r1, r3]
 8007ec8:	f003 031f 	and.w	r3, r3, #31
 8007ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40021000 	.word	0x40021000
 8007ed8:	0800f4f4 	.word	0x0800f4f4

08007edc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8007f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007eec:	4b1b      	ldr	r3, [pc, #108]	@ (8007f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	091b      	lsrs	r3, r3, #4
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d10c      	bne.n	8007f1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f00:	4a17      	ldr	r2, [pc, #92]	@ (8007f60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	4a14      	ldr	r2, [pc, #80]	@ (8007f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f0a:	68d2      	ldr	r2, [r2, #12]
 8007f0c:	0a12      	lsrs	r2, r2, #8
 8007f0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	617b      	str	r3, [r7, #20]
    break;
 8007f18:	e00c      	b.n	8007f34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f1a:	4a12      	ldr	r2, [pc, #72]	@ (8007f64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f22:	4a0e      	ldr	r2, [pc, #56]	@ (8007f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f24:	68d2      	ldr	r2, [r2, #12]
 8007f26:	0a12      	lsrs	r2, r2, #8
 8007f28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f2c:	fb02 f303 	mul.w	r3, r2, r3
 8007f30:	617b      	str	r3, [r7, #20]
    break;
 8007f32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f34:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	0e5b      	lsrs	r3, r3, #25
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007f4e:	687b      	ldr	r3, [r7, #4]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	007a1200 	.word	0x007a1200
 8007f64:	00f42400 	.word	0x00f42400

08007f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f70:	2300      	movs	r3, #0
 8007f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f74:	2300      	movs	r3, #0
 8007f76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8098 	beq.w	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f86:	2300      	movs	r3, #0
 8007f88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f8a:	4b43      	ldr	r3, [pc, #268]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f96:	4b40      	ldr	r3, [pc, #256]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a39      	ldr	r2, [pc, #228]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fbe:	f7fa fd23 	bl	8002a08 <HAL_GetTick>
 8007fc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fc4:	e009      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fc6:	f7fa fd1f 	bl	8002a08 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d902      	bls.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	74fb      	strb	r3, [r7, #19]
        break;
 8007fd8:	e005      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fda:	4b30      	ldr	r3, [pc, #192]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0ef      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007fe6:	7cfb      	ldrb	r3, [r7, #19]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d159      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007fec:	4b2a      	ldr	r3, [pc, #168]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01e      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	429a      	cmp	r2, r3
 8008006:	d019      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008008:	4b23      	ldr	r3, [pc, #140]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800800a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800800e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008014:	4b20      	ldr	r3, [pc, #128]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801a:	4a1f      	ldr	r2, [pc, #124]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800801c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008024:	4b1c      	ldr	r3, [pc, #112]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802a:	4a1b      	ldr	r2, [pc, #108]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800802c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008034:	4a18      	ldr	r2, [pc, #96]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d016      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008046:	f7fa fcdf 	bl	8002a08 <HAL_GetTick>
 800804a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800804c:	e00b      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804e:	f7fa fcdb 	bl	8002a08 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800805c:	4293      	cmp	r3, r2
 800805e:	d902      	bls.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	74fb      	strb	r3, [r7, #19]
            break;
 8008064:	e006      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008066:	4b0c      	ldr	r3, [pc, #48]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0ec      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008074:	7cfb      	ldrb	r3, [r7, #19]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800807a:	4b07      	ldr	r3, [pc, #28]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800807c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008088:	4903      	ldr	r1, [pc, #12]	@ (8008098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800808a:	4313      	orrs	r3, r2
 800808c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008090:	e008      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008092:	7cfb      	ldrb	r3, [r7, #19]
 8008094:	74bb      	strb	r3, [r7, #18]
 8008096:	e005      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008098:	40021000 	.word	0x40021000
 800809c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a0:	7cfb      	ldrb	r3, [r7, #19]
 80080a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080a4:	7c7b      	ldrb	r3, [r7, #17]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d105      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080aa:	4ba6      	ldr	r3, [pc, #664]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ae:	4aa5      	ldr	r2, [pc, #660]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080c2:	4ba0      	ldr	r3, [pc, #640]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080c8:	f023 0203 	bic.w	r2, r3, #3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	499c      	ldr	r1, [pc, #624]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080e4:	4b97      	ldr	r3, [pc, #604]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ea:	f023 020c 	bic.w	r2, r3, #12
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	4994      	ldr	r1, [pc, #592]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008106:	4b8f      	ldr	r3, [pc, #572]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800810c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	498b      	ldr	r1, [pc, #556]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008116:	4313      	orrs	r3, r2
 8008118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008128:	4b86      	ldr	r3, [pc, #536]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	4983      	ldr	r1, [pc, #524]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008138:	4313      	orrs	r3, r2
 800813a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800814a:	4b7e      	ldr	r3, [pc, #504]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008150:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	497a      	ldr	r1, [pc, #488]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800815a:	4313      	orrs	r3, r2
 800815c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800816c:	4b75      	ldr	r3, [pc, #468]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008172:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	4972      	ldr	r1, [pc, #456]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800817c:	4313      	orrs	r3, r2
 800817e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800818e:	4b6d      	ldr	r3, [pc, #436]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008194:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	4969      	ldr	r1, [pc, #420]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00a      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081b0:	4b64      	ldr	r3, [pc, #400]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	4961      	ldr	r1, [pc, #388]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e0:	4958      	ldr	r1, [pc, #352]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d015      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081f4:	4b53      	ldr	r3, [pc, #332]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008202:	4950      	ldr	r1, [pc, #320]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008212:	d105      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008214:	4b4b      	ldr	r3, [pc, #300]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	4a4a      	ldr	r2, [pc, #296]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800821a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800821e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008228:	2b00      	cmp	r3, #0
 800822a:	d015      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800822c:	4b45      	ldr	r3, [pc, #276]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800822e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008232:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	4942      	ldr	r1, [pc, #264]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800823c:	4313      	orrs	r3, r2
 800823e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800824a:	d105      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800824c:	4b3d      	ldr	r3, [pc, #244]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	4a3c      	ldr	r2, [pc, #240]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008256:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d015      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008264:	4b37      	ldr	r3, [pc, #220]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800826a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008272:	4934      	ldr	r1, [pc, #208]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008274:	4313      	orrs	r3, r2
 8008276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008282:	d105      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008284:	4b2f      	ldr	r3, [pc, #188]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	4a2e      	ldr	r2, [pc, #184]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800828a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800828e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d015      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800829c:	4b29      	ldr	r3, [pc, #164]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	4926      	ldr	r1, [pc, #152]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082ba:	d105      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082bc:	4b21      	ldr	r3, [pc, #132]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	4a20      	ldr	r2, [pc, #128]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d015      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e2:	4918      	ldr	r1, [pc, #96]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082f2:	d105      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082f4:	4b13      	ldr	r3, [pc, #76]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	4a12      	ldr	r2, [pc, #72]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d015      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800830c:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008312:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831a:	490a      	ldr	r1, [pc, #40]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800831c:	4313      	orrs	r3, r2
 800831e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800832a:	d105      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800832c:	4b05      	ldr	r3, [pc, #20]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	4a04      	ldr	r2, [pc, #16]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008338:	7cbb      	ldrb	r3, [r7, #18]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40021000 	.word	0x40021000

08008348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e049      	b.n	80083ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fa f978 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f001 f808 	bl	800939c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e049      	b.n	800849c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d106      	bne.n	8008422 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f841 	bl	80084a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3304      	adds	r3, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f000 ffb1 	bl	800939c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	bf0c      	ite	eq
 80084dc:	2301      	moveq	r3, #1
 80084de:	2300      	movne	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	e03c      	b.n	800855e <HAL_TIM_PWM_Start_DMA+0xa6>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d109      	bne.n	80084fe <HAL_TIM_PWM_Start_DMA+0x46>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	bf0c      	ite	eq
 80084f6:	2301      	moveq	r3, #1
 80084f8:	2300      	movne	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	e02f      	b.n	800855e <HAL_TIM_PWM_Start_DMA+0xa6>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b08      	cmp	r3, #8
 8008502:	d109      	bne.n	8008518 <HAL_TIM_PWM_Start_DMA+0x60>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	bf0c      	ite	eq
 8008510:	2301      	moveq	r3, #1
 8008512:	2300      	movne	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	e022      	b.n	800855e <HAL_TIM_PWM_Start_DMA+0xa6>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b0c      	cmp	r3, #12
 800851c:	d109      	bne.n	8008532 <HAL_TIM_PWM_Start_DMA+0x7a>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	bf0c      	ite	eq
 800852a:	2301      	moveq	r3, #1
 800852c:	2300      	movne	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	e015      	b.n	800855e <HAL_TIM_PWM_Start_DMA+0xa6>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b10      	cmp	r3, #16
 8008536:	d109      	bne.n	800854c <HAL_TIM_PWM_Start_DMA+0x94>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	bf0c      	ite	eq
 8008544:	2301      	moveq	r3, #1
 8008546:	2300      	movne	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	e008      	b.n	800855e <HAL_TIM_PWM_Start_DMA+0xa6>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b02      	cmp	r3, #2
 8008556:	bf0c      	ite	eq
 8008558:	2301      	moveq	r3, #1
 800855a:	2300      	movne	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008562:	2302      	movs	r3, #2
 8008564:	e1a6      	b.n	80088b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d109      	bne.n	8008580 <HAL_TIM_PWM_Start_DMA+0xc8>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b01      	cmp	r3, #1
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	e03c      	b.n	80085fa <HAL_TIM_PWM_Start_DMA+0x142>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b04      	cmp	r3, #4
 8008584:	d109      	bne.n	800859a <HAL_TIM_PWM_Start_DMA+0xe2>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b01      	cmp	r3, #1
 8008590:	bf0c      	ite	eq
 8008592:	2301      	moveq	r3, #1
 8008594:	2300      	movne	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	e02f      	b.n	80085fa <HAL_TIM_PWM_Start_DMA+0x142>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b08      	cmp	r3, #8
 800859e:	d109      	bne.n	80085b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	e022      	b.n	80085fa <HAL_TIM_PWM_Start_DMA+0x142>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b0c      	cmp	r3, #12
 80085b8:	d109      	bne.n	80085ce <HAL_TIM_PWM_Start_DMA+0x116>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	bf0c      	ite	eq
 80085c6:	2301      	moveq	r3, #1
 80085c8:	2300      	movne	r3, #0
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	e015      	b.n	80085fa <HAL_TIM_PWM_Start_DMA+0x142>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b10      	cmp	r3, #16
 80085d2:	d109      	bne.n	80085e8 <HAL_TIM_PWM_Start_DMA+0x130>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	bf0c      	ite	eq
 80085e0:	2301      	moveq	r3, #1
 80085e2:	2300      	movne	r3, #0
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	e008      	b.n	80085fa <HAL_TIM_PWM_Start_DMA+0x142>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	bf0c      	ite	eq
 80085f4:	2301      	moveq	r3, #1
 80085f6:	2300      	movne	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d034      	beq.n	8008668 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <HAL_TIM_PWM_Start_DMA+0x152>
 8008604:	887b      	ldrh	r3, [r7, #2]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e152      	b.n	80088b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <HAL_TIM_PWM_Start_DMA+0x166>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800861c:	e026      	b.n	800866c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b04      	cmp	r3, #4
 8008622:	d104      	bne.n	800862e <HAL_TIM_PWM_Start_DMA+0x176>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800862c:	e01e      	b.n	800866c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b08      	cmp	r3, #8
 8008632:	d104      	bne.n	800863e <HAL_TIM_PWM_Start_DMA+0x186>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800863c:	e016      	b.n	800866c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b0c      	cmp	r3, #12
 8008642:	d104      	bne.n	800864e <HAL_TIM_PWM_Start_DMA+0x196>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800864c:	e00e      	b.n	800866c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b10      	cmp	r3, #16
 8008652:	d104      	bne.n	800865e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800865c:	e006      	b.n	800866c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2202      	movs	r2, #2
 8008662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008666:	e001      	b.n	800866c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e123      	b.n	80088b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b0c      	cmp	r3, #12
 8008670:	f200 80ae 	bhi.w	80087d0 <HAL_TIM_PWM_Start_DMA+0x318>
 8008674:	a201      	add	r2, pc, #4	@ (adr r2, 800867c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	080086b1 	.word	0x080086b1
 8008680:	080087d1 	.word	0x080087d1
 8008684:	080087d1 	.word	0x080087d1
 8008688:	080087d1 	.word	0x080087d1
 800868c:	080086f9 	.word	0x080086f9
 8008690:	080087d1 	.word	0x080087d1
 8008694:	080087d1 	.word	0x080087d1
 8008698:	080087d1 	.word	0x080087d1
 800869c:	08008741 	.word	0x08008741
 80086a0:	080087d1 	.word	0x080087d1
 80086a4:	080087d1 	.word	0x080087d1
 80086a8:	080087d1 	.word	0x080087d1
 80086ac:	08008789 	.word	0x08008789
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	4a81      	ldr	r2, [pc, #516]	@ (80088bc <HAL_TIM_PWM_Start_DMA+0x404>)
 80086b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	4a80      	ldr	r2, [pc, #512]	@ (80088c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 80086be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	4a7f      	ldr	r2, [pc, #508]	@ (80088c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80086c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3334      	adds	r3, #52	@ 0x34
 80086d4:	461a      	mov	r2, r3
 80086d6:	887b      	ldrh	r3, [r7, #2]
 80086d8:	f7fc f904 	bl	80048e4 <HAL_DMA_Start_IT>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e0e6      	b.n	80088b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086f4:	60da      	str	r2, [r3, #12]
      break;
 80086f6:	e06e      	b.n	80087d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fc:	4a6f      	ldr	r2, [pc, #444]	@ (80088bc <HAL_TIM_PWM_Start_DMA+0x404>)
 80086fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008704:	4a6e      	ldr	r2, [pc, #440]	@ (80088c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008706:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870c:	4a6d      	ldr	r2, [pc, #436]	@ (80088c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800870e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3338      	adds	r3, #56	@ 0x38
 800871c:	461a      	mov	r2, r3
 800871e:	887b      	ldrh	r3, [r7, #2]
 8008720:	f7fc f8e0 	bl	80048e4 <HAL_DMA_Start_IT>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e0c2      	b.n	80088b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800873c:	60da      	str	r2, [r3, #12]
      break;
 800873e:	e04a      	b.n	80087d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008744:	4a5d      	ldr	r2, [pc, #372]	@ (80088bc <HAL_TIM_PWM_Start_DMA+0x404>)
 8008746:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874c:	4a5c      	ldr	r2, [pc, #368]	@ (80088c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800874e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008754:	4a5b      	ldr	r2, [pc, #364]	@ (80088c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008756:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	333c      	adds	r3, #60	@ 0x3c
 8008764:	461a      	mov	r2, r3
 8008766:	887b      	ldrh	r3, [r7, #2]
 8008768:	f7fc f8bc 	bl	80048e4 <HAL_DMA_Start_IT>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e09e      	b.n	80088b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008784:	60da      	str	r2, [r3, #12]
      break;
 8008786:	e026      	b.n	80087d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878c:	4a4b      	ldr	r2, [pc, #300]	@ (80088bc <HAL_TIM_PWM_Start_DMA+0x404>)
 800878e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008794:	4a4a      	ldr	r2, [pc, #296]	@ (80088c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008796:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879c:	4a49      	ldr	r2, [pc, #292]	@ (80088c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800879e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3340      	adds	r3, #64	@ 0x40
 80087ac:	461a      	mov	r2, r3
 80087ae:	887b      	ldrh	r3, [r7, #2]
 80087b0:	f7fc f898 	bl	80048e4 <HAL_DMA_Start_IT>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e07a      	b.n	80088b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087cc:	60da      	str	r2, [r3, #12]
      break;
 80087ce:	e002      	b.n	80087d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	75fb      	strb	r3, [r7, #23]
      break;
 80087d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d16a      	bne.n	80088b2 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2201      	movs	r2, #1
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fa07 	bl	8009bf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a36      	ldr	r2, [pc, #216]	@ (80088c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d013      	beq.n	800881c <HAL_TIM_PWM_Start_DMA+0x364>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a34      	ldr	r2, [pc, #208]	@ (80088cc <HAL_TIM_PWM_Start_DMA+0x414>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00e      	beq.n	800881c <HAL_TIM_PWM_Start_DMA+0x364>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a33      	ldr	r2, [pc, #204]	@ (80088d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d009      	beq.n	800881c <HAL_TIM_PWM_Start_DMA+0x364>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a31      	ldr	r2, [pc, #196]	@ (80088d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <HAL_TIM_PWM_Start_DMA+0x364>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a30      	ldr	r2, [pc, #192]	@ (80088d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d101      	bne.n	8008820 <HAL_TIM_PWM_Start_DMA+0x368>
 800881c:	2301      	movs	r3, #1
 800881e:	e000      	b.n	8008822 <HAL_TIM_PWM_Start_DMA+0x36a>
 8008820:	2300      	movs	r3, #0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a23      	ldr	r2, [pc, #140]	@ (80088c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d018      	beq.n	8008872 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008848:	d013      	beq.n	8008872 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a23      	ldr	r2, [pc, #140]	@ (80088dc <HAL_TIM_PWM_Start_DMA+0x424>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a21      	ldr	r2, [pc, #132]	@ (80088e0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1a      	ldr	r2, [pc, #104]	@ (80088cc <HAL_TIM_PWM_Start_DMA+0x414>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d115      	bne.n	800889e <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	4b1a      	ldr	r3, [pc, #104]	@ (80088e4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800887a:	4013      	ands	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b06      	cmp	r3, #6
 8008882:	d015      	beq.n	80088b0 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800888a:	d011      	beq.n	80088b0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889c:	e008      	b.n	80088b0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e000      	b.n	80088b2 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	0800928b 	.word	0x0800928b
 80088c0:	08009333 	.word	0x08009333
 80088c4:	080091f9 	.word	0x080091f9
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40013400 	.word	0x40013400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400
 80088d8:	40014800 	.word	0x40014800
 80088dc:	40000400 	.word	0x40000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	00010007 	.word	0x00010007

080088e8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b0c      	cmp	r3, #12
 80088fa:	d855      	bhi.n	80089a8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80088fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008904 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80088fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008902:	bf00      	nop
 8008904:	08008939 	.word	0x08008939
 8008908:	080089a9 	.word	0x080089a9
 800890c:	080089a9 	.word	0x080089a9
 8008910:	080089a9 	.word	0x080089a9
 8008914:	08008955 	.word	0x08008955
 8008918:	080089a9 	.word	0x080089a9
 800891c:	080089a9 	.word	0x080089a9
 8008920:	080089a9 	.word	0x080089a9
 8008924:	08008971 	.word	0x08008971
 8008928:	080089a9 	.word	0x080089a9
 800892c:	080089a9 	.word	0x080089a9
 8008930:	080089a9 	.word	0x080089a9
 8008934:	0800898d 	.word	0x0800898d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008946:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894c:	4618      	mov	r0, r3
 800894e:	f7fc f844 	bl	80049da <HAL_DMA_Abort_IT>
      break;
 8008952:	e02c      	b.n	80089ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008962:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008968:	4618      	mov	r0, r3
 800896a:	f7fc f836 	bl	80049da <HAL_DMA_Abort_IT>
      break;
 800896e:	e01e      	b.n	80089ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800897e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	4618      	mov	r0, r3
 8008986:	f7fc f828 	bl	80049da <HAL_DMA_Abort_IT>
      break;
 800898a:	e010      	b.n	80089ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800899a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fc f81a 	bl	80049da <HAL_DMA_Abort_IT>
      break;
 80089a6:	e002      	b.n	80089ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	73fb      	strb	r3, [r7, #15]
      break;
 80089ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f040 8081 	bne.w	8008ab8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 f91a 	bl	8009bf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a3e      	ldr	r2, [pc, #248]	@ (8008ac4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d013      	beq.n	80089f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a3d      	ldr	r2, [pc, #244]	@ (8008ac8 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00e      	beq.n	80089f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a3b      	ldr	r2, [pc, #236]	@ (8008acc <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d009      	beq.n	80089f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a3a      	ldr	r2, [pc, #232]	@ (8008ad0 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d004      	beq.n	80089f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a38      	ldr	r2, [pc, #224]	@ (8008ad4 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d101      	bne.n	80089fa <HAL_TIM_PWM_Stop_DMA+0x112>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e000      	b.n	80089fc <HAL_TIM_PWM_Stop_DMA+0x114>
 80089fa:	2300      	movs	r3, #0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d017      	beq.n	8008a30 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10f      	bne.n	8008a30 <HAL_TIM_PWM_Stop_DMA+0x148>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d107      	bne.n	8008a30 <HAL_TIM_PWM_Stop_DMA+0x148>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10f      	bne.n	8008a60 <HAL_TIM_PWM_Stop_DMA+0x178>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d107      	bne.n	8008a60 <HAL_TIM_PWM_Stop_DMA+0x178>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0201 	bic.w	r2, r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d104      	bne.n	8008a70 <HAL_TIM_PWM_Stop_DMA+0x188>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a6e:	e023      	b.n	8008ab8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d104      	bne.n	8008a80 <HAL_TIM_PWM_Stop_DMA+0x198>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a7e:	e01b      	b.n	8008ab8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	d104      	bne.n	8008a90 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a8e:	e013      	b.n	8008ab8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b0c      	cmp	r3, #12
 8008a94:	d104      	bne.n	8008aa0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a9e:	e00b      	b.n	8008ab8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b10      	cmp	r3, #16
 8008aa4:	d104      	bne.n	8008ab0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008aae:	e003      	b.n	8008ab8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	40012c00 	.word	0x40012c00
 8008ac8:	40013400 	.word	0x40013400
 8008acc:	40014000 	.word	0x40014000
 8008ad0:	40014400 	.word	0x40014400
 8008ad4:	40014800 	.word	0x40014800

08008ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d020      	beq.n	8008b3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01b      	beq.n	8008b3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f06f 0202 	mvn.w	r2, #2
 8008b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fb40 	bl	80091a8 <HAL_TIM_IC_CaptureCallback>
 8008b28:	e005      	b.n	8008b36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fb32 	bl	8009194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7f9 fb75 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d020      	beq.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01b      	beq.n	8008b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0204 	mvn.w	r2, #4
 8008b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fb1a 	bl	80091a8 <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fb0c 	bl	8009194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7f9 fb4f 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 0308 	and.w	r3, r3, #8
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d020      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01b      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0208 	mvn.w	r2, #8
 8008ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2204      	movs	r2, #4
 8008baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 faf4 	bl	80091a8 <HAL_TIM_IC_CaptureCallback>
 8008bc0:	e005      	b.n	8008bce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fae6 	bl	8009194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7f9 fb29 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d020      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0210 	mvn.w	r2, #16
 8008bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 face 	bl	80091a8 <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fac0 	bl	8009194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7f9 fb03 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00c      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d007      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0201 	mvn.w	r2, #1
 8008c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7f8 fc64 	bl	800150c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00c      	beq.n	8008c72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d007      	beq.n	8008c72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 f875 	bl	8009d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00c      	beq.n	8008c96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f86d 	bl	8009d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00c      	beq.n	8008cba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d007      	beq.n	8008cba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fa8b 	bl	80091d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00c      	beq.n	8008cde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f06f 0220 	mvn.w	r2, #32
 8008cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f835 	bl	8009d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00c      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 f841 	bl	8009d84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d007      	beq.n	8008d26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f839 	bl	8009d98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00c      	beq.n	8008d4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d007      	beq.n	8008d4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 f831 	bl	8009dac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00c      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f829 	bl	8009dc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e0ff      	b.n	8008f96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b14      	cmp	r3, #20
 8008da2:	f200 80f0 	bhi.w	8008f86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008da6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008f87 	.word	0x08008f87
 8008db4:	08008f87 	.word	0x08008f87
 8008db8:	08008f87 	.word	0x08008f87
 8008dbc:	08008e41 	.word	0x08008e41
 8008dc0:	08008f87 	.word	0x08008f87
 8008dc4:	08008f87 	.word	0x08008f87
 8008dc8:	08008f87 	.word	0x08008f87
 8008dcc:	08008e83 	.word	0x08008e83
 8008dd0:	08008f87 	.word	0x08008f87
 8008dd4:	08008f87 	.word	0x08008f87
 8008dd8:	08008f87 	.word	0x08008f87
 8008ddc:	08008ec3 	.word	0x08008ec3
 8008de0:	08008f87 	.word	0x08008f87
 8008de4:	08008f87 	.word	0x08008f87
 8008de8:	08008f87 	.word	0x08008f87
 8008dec:	08008f05 	.word	0x08008f05
 8008df0:	08008f87 	.word	0x08008f87
 8008df4:	08008f87 	.word	0x08008f87
 8008df8:	08008f87 	.word	0x08008f87
 8008dfc:	08008f45 	.word	0x08008f45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fb64 	bl	80094d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699a      	ldr	r2, [r3, #24]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0208 	orr.w	r2, r2, #8
 8008e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0204 	bic.w	r2, r2, #4
 8008e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6999      	ldr	r1, [r3, #24]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	619a      	str	r2, [r3, #24]
      break;
 8008e3e:	e0a5      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fbd4 	bl	80095f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699a      	ldr	r2, [r3, #24]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6999      	ldr	r1, [r3, #24]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	021a      	lsls	r2, r3, #8
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	619a      	str	r2, [r3, #24]
      break;
 8008e80:	e084      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fc3d 	bl	8009708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69da      	ldr	r2, [r3, #28]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0208 	orr.w	r2, r2, #8
 8008e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69da      	ldr	r2, [r3, #28]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0204 	bic.w	r2, r2, #4
 8008eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69d9      	ldr	r1, [r3, #28]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	61da      	str	r2, [r3, #28]
      break;
 8008ec0:	e064      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fca5 	bl	8009818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	69da      	ldr	r2, [r3, #28]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69da      	ldr	r2, [r3, #28]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69d9      	ldr	r1, [r3, #28]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	021a      	lsls	r2, r3, #8
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	61da      	str	r2, [r3, #28]
      break;
 8008f02:	e043      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fd0e 	bl	800992c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0208 	orr.w	r2, r2, #8
 8008f1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0204 	bic.w	r2, r2, #4
 8008f2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f42:	e023      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fd52 	bl	80099f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	021a      	lsls	r2, r3, #8
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f84:	e002      	b.n	8008f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
      break;
 8008f8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop

08008fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIM_ConfigClockSource+0x1c>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e0de      	b.n	800917a <HAL_TIM_ConfigClockSource+0x1da>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008fda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a63      	ldr	r2, [pc, #396]	@ (8009184 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	f000 80a9 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 8008ffc:	4a61      	ldr	r2, [pc, #388]	@ (8009184 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	f200 80ae 	bhi.w	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009004:	4a60      	ldr	r2, [pc, #384]	@ (8009188 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	f000 80a1 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 800900c:	4a5e      	ldr	r2, [pc, #376]	@ (8009188 <HAL_TIM_ConfigClockSource+0x1e8>)
 800900e:	4293      	cmp	r3, r2
 8009010:	f200 80a6 	bhi.w	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009014:	4a5d      	ldr	r2, [pc, #372]	@ (800918c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009016:	4293      	cmp	r3, r2
 8009018:	f000 8099 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 800901c:	4a5b      	ldr	r2, [pc, #364]	@ (800918c <HAL_TIM_ConfigClockSource+0x1ec>)
 800901e:	4293      	cmp	r3, r2
 8009020:	f200 809e 	bhi.w	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009024:	4a5a      	ldr	r2, [pc, #360]	@ (8009190 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	f000 8091 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 800902c:	4a58      	ldr	r2, [pc, #352]	@ (8009190 <HAL_TIM_ConfigClockSource+0x1f0>)
 800902e:	4293      	cmp	r3, r2
 8009030:	f200 8096 	bhi.w	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009034:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009038:	f000 8089 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 800903c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009040:	f200 808e 	bhi.w	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009048:	d03e      	beq.n	80090c8 <HAL_TIM_ConfigClockSource+0x128>
 800904a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800904e:	f200 8087 	bhi.w	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009056:	f000 8086 	beq.w	8009166 <HAL_TIM_ConfigClockSource+0x1c6>
 800905a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905e:	d87f      	bhi.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009060:	2b70      	cmp	r3, #112	@ 0x70
 8009062:	d01a      	beq.n	800909a <HAL_TIM_ConfigClockSource+0xfa>
 8009064:	2b70      	cmp	r3, #112	@ 0x70
 8009066:	d87b      	bhi.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009068:	2b60      	cmp	r3, #96	@ 0x60
 800906a:	d050      	beq.n	800910e <HAL_TIM_ConfigClockSource+0x16e>
 800906c:	2b60      	cmp	r3, #96	@ 0x60
 800906e:	d877      	bhi.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009070:	2b50      	cmp	r3, #80	@ 0x50
 8009072:	d03c      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x14e>
 8009074:	2b50      	cmp	r3, #80	@ 0x50
 8009076:	d873      	bhi.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009078:	2b40      	cmp	r3, #64	@ 0x40
 800907a:	d058      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x18e>
 800907c:	2b40      	cmp	r3, #64	@ 0x40
 800907e:	d86f      	bhi.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009080:	2b30      	cmp	r3, #48	@ 0x30
 8009082:	d064      	beq.n	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 8009084:	2b30      	cmp	r3, #48	@ 0x30
 8009086:	d86b      	bhi.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009088:	2b20      	cmp	r3, #32
 800908a:	d060      	beq.n	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 800908c:	2b20      	cmp	r3, #32
 800908e:	d867      	bhi.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
 8009090:	2b00      	cmp	r3, #0
 8009092:	d05c      	beq.n	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 8009094:	2b10      	cmp	r3, #16
 8009096:	d05a      	beq.n	800914e <HAL_TIM_ConfigClockSource+0x1ae>
 8009098:	e062      	b.n	8009160 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090aa:	f000 fd85 	bl	8009bb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	609a      	str	r2, [r3, #8]
      break;
 80090c6:	e04f      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090d8:	f000 fd6e 	bl	8009bb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090ea:	609a      	str	r2, [r3, #8]
      break;
 80090ec:	e03c      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090fa:	461a      	mov	r2, r3
 80090fc:	f000 fce0 	bl	8009ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2150      	movs	r1, #80	@ 0x50
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fd39 	bl	8009b7e <TIM_ITRx_SetConfig>
      break;
 800910c:	e02c      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800911a:	461a      	mov	r2, r3
 800911c:	f000 fcff 	bl	8009b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2160      	movs	r1, #96	@ 0x60
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fd29 	bl	8009b7e <TIM_ITRx_SetConfig>
      break;
 800912c:	e01c      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800913a:	461a      	mov	r2, r3
 800913c:	f000 fcc0 	bl	8009ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2140      	movs	r1, #64	@ 0x40
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fd19 	bl	8009b7e <TIM_ITRx_SetConfig>
      break;
 800914c:	e00c      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f000 fd10 	bl	8009b7e <TIM_ITRx_SetConfig>
      break;
 800915e:	e003      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	73fb      	strb	r3, [r7, #15]
      break;
 8009164:	e000      	b.n	8009168 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	00100070 	.word	0x00100070
 8009188:	00100040 	.word	0x00100040
 800918c:	00100030 	.word	0x00100030
 8009190:	00100020 	.word	0x00100020

08009194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009204:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d107      	bne.n	8009220 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2201      	movs	r2, #1
 8009214:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800921e:	e02a      	b.n	8009276 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	429a      	cmp	r2, r3
 8009228:	d107      	bne.n	800923a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2202      	movs	r2, #2
 800922e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009238:	e01d      	b.n	8009276 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	429a      	cmp	r2, r3
 8009242:	d107      	bne.n	8009254 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2204      	movs	r2, #4
 8009248:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009252:	e010      	b.n	8009276 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d107      	bne.n	800926e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2208      	movs	r2, #8
 8009262:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800926c:	e003      	b.n	8009276 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff ffb4 	bl	80091e4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	771a      	strb	r2, [r3, #28]
}
 8009282:	bf00      	nop
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009296:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d10b      	bne.n	80092ba <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2201      	movs	r2, #1
 80092a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d136      	bne.n	800931e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092b8:	e031      	b.n	800931e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d10b      	bne.n	80092dc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2202      	movs	r2, #2
 80092c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d125      	bne.n	800931e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092da:	e020      	b.n	800931e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d10b      	bne.n	80092fe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2204      	movs	r2, #4
 80092ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d114      	bne.n	800931e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092fc:	e00f      	b.n	800931e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d10a      	bne.n	800931e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2208      	movs	r2, #8
 800930c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d103      	bne.n	800931e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7f8 ff7e 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	771a      	strb	r2, [r3, #28]
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	429a      	cmp	r2, r3
 8009348:	d103      	bne.n	8009352 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	771a      	strb	r2, [r3, #28]
 8009350:	e019      	b.n	8009386 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	429a      	cmp	r2, r3
 800935a:	d103      	bne.n	8009364 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2202      	movs	r2, #2
 8009360:	771a      	strb	r2, [r3, #28]
 8009362:	e010      	b.n	8009386 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d103      	bne.n	8009376 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2204      	movs	r2, #4
 8009372:	771a      	strb	r2, [r3, #28]
 8009374:	e007      	b.n	8009386 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	429a      	cmp	r2, r3
 800937e:	d102      	bne.n	8009386 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2208      	movs	r2, #8
 8009384:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff ff18 	bl	80091bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	771a      	strb	r2, [r3, #28]
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a42      	ldr	r2, [pc, #264]	@ (80094b8 <TIM_Base_SetConfig+0x11c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d00f      	beq.n	80093d4 <TIM_Base_SetConfig+0x38>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ba:	d00b      	beq.n	80093d4 <TIM_Base_SetConfig+0x38>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a3f      	ldr	r2, [pc, #252]	@ (80094bc <TIM_Base_SetConfig+0x120>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d007      	beq.n	80093d4 <TIM_Base_SetConfig+0x38>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a3e      	ldr	r2, [pc, #248]	@ (80094c0 <TIM_Base_SetConfig+0x124>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d003      	beq.n	80093d4 <TIM_Base_SetConfig+0x38>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a3d      	ldr	r2, [pc, #244]	@ (80094c4 <TIM_Base_SetConfig+0x128>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d108      	bne.n	80093e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a33      	ldr	r2, [pc, #204]	@ (80094b8 <TIM_Base_SetConfig+0x11c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d01b      	beq.n	8009426 <TIM_Base_SetConfig+0x8a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093f4:	d017      	beq.n	8009426 <TIM_Base_SetConfig+0x8a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a30      	ldr	r2, [pc, #192]	@ (80094bc <TIM_Base_SetConfig+0x120>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d013      	beq.n	8009426 <TIM_Base_SetConfig+0x8a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a2f      	ldr	r2, [pc, #188]	@ (80094c0 <TIM_Base_SetConfig+0x124>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d00f      	beq.n	8009426 <TIM_Base_SetConfig+0x8a>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a2e      	ldr	r2, [pc, #184]	@ (80094c4 <TIM_Base_SetConfig+0x128>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d00b      	beq.n	8009426 <TIM_Base_SetConfig+0x8a>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a2d      	ldr	r2, [pc, #180]	@ (80094c8 <TIM_Base_SetConfig+0x12c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d007      	beq.n	8009426 <TIM_Base_SetConfig+0x8a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a2c      	ldr	r2, [pc, #176]	@ (80094cc <TIM_Base_SetConfig+0x130>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d003      	beq.n	8009426 <TIM_Base_SetConfig+0x8a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a2b      	ldr	r2, [pc, #172]	@ (80094d0 <TIM_Base_SetConfig+0x134>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d108      	bne.n	8009438 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800942c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	4313      	orrs	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	4313      	orrs	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a16      	ldr	r2, [pc, #88]	@ (80094b8 <TIM_Base_SetConfig+0x11c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d00f      	beq.n	8009484 <TIM_Base_SetConfig+0xe8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a17      	ldr	r2, [pc, #92]	@ (80094c4 <TIM_Base_SetConfig+0x128>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d00b      	beq.n	8009484 <TIM_Base_SetConfig+0xe8>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a16      	ldr	r2, [pc, #88]	@ (80094c8 <TIM_Base_SetConfig+0x12c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d007      	beq.n	8009484 <TIM_Base_SetConfig+0xe8>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a15      	ldr	r2, [pc, #84]	@ (80094cc <TIM_Base_SetConfig+0x130>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d003      	beq.n	8009484 <TIM_Base_SetConfig+0xe8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a14      	ldr	r2, [pc, #80]	@ (80094d0 <TIM_Base_SetConfig+0x134>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d103      	bne.n	800948c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	691a      	ldr	r2, [r3, #16]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b01      	cmp	r3, #1
 800949c:	d105      	bne.n	80094aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f023 0201 	bic.w	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	611a      	str	r2, [r3, #16]
  }
}
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	40012c00 	.word	0x40012c00
 80094bc:	40000400 	.word	0x40000400
 80094c0:	40000800 	.word	0x40000800
 80094c4:	40013400 	.word	0x40013400
 80094c8:	40014000 	.word	0x40014000
 80094cc:	40014400 	.word	0x40014400
 80094d0:	40014800 	.word	0x40014800

080094d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	f023 0201 	bic.w	r2, r3, #1
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f023 0302 	bic.w	r3, r3, #2
 8009520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a2c      	ldr	r2, [pc, #176]	@ (80095e0 <TIM_OC1_SetConfig+0x10c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00f      	beq.n	8009554 <TIM_OC1_SetConfig+0x80>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a2b      	ldr	r2, [pc, #172]	@ (80095e4 <TIM_OC1_SetConfig+0x110>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00b      	beq.n	8009554 <TIM_OC1_SetConfig+0x80>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a2a      	ldr	r2, [pc, #168]	@ (80095e8 <TIM_OC1_SetConfig+0x114>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d007      	beq.n	8009554 <TIM_OC1_SetConfig+0x80>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a29      	ldr	r2, [pc, #164]	@ (80095ec <TIM_OC1_SetConfig+0x118>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_OC1_SetConfig+0x80>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a28      	ldr	r2, [pc, #160]	@ (80095f0 <TIM_OC1_SetConfig+0x11c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d10c      	bne.n	800956e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0308 	bic.w	r3, r3, #8
 800955a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	4313      	orrs	r3, r2
 8009564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f023 0304 	bic.w	r3, r3, #4
 800956c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a1b      	ldr	r2, [pc, #108]	@ (80095e0 <TIM_OC1_SetConfig+0x10c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <TIM_OC1_SetConfig+0xc2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a1a      	ldr	r2, [pc, #104]	@ (80095e4 <TIM_OC1_SetConfig+0x110>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00b      	beq.n	8009596 <TIM_OC1_SetConfig+0xc2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a19      	ldr	r2, [pc, #100]	@ (80095e8 <TIM_OC1_SetConfig+0x114>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d007      	beq.n	8009596 <TIM_OC1_SetConfig+0xc2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a18      	ldr	r2, [pc, #96]	@ (80095ec <TIM_OC1_SetConfig+0x118>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_OC1_SetConfig+0xc2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a17      	ldr	r2, [pc, #92]	@ (80095f0 <TIM_OC1_SetConfig+0x11c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d111      	bne.n	80095ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800959c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	685a      	ldr	r2, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	621a      	str	r2, [r3, #32]
}
 80095d4:	bf00      	nop
 80095d6:	371c      	adds	r7, #28
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	40012c00 	.word	0x40012c00
 80095e4:	40013400 	.word	0x40013400
 80095e8:	40014000 	.word	0x40014000
 80095ec:	40014400 	.word	0x40014400
 80095f0:	40014800 	.word	0x40014800

080095f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f023 0210 	bic.w	r2, r3, #16
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800962e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0320 	bic.w	r3, r3, #32
 8009642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a28      	ldr	r2, [pc, #160]	@ (80096f4 <TIM_OC2_SetConfig+0x100>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d003      	beq.n	8009660 <TIM_OC2_SetConfig+0x6c>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a27      	ldr	r2, [pc, #156]	@ (80096f8 <TIM_OC2_SetConfig+0x104>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d10d      	bne.n	800967c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	011b      	lsls	r3, r3, #4
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	4313      	orrs	r3, r2
 8009672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800967a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a1d      	ldr	r2, [pc, #116]	@ (80096f4 <TIM_OC2_SetConfig+0x100>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d00f      	beq.n	80096a4 <TIM_OC2_SetConfig+0xb0>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a1c      	ldr	r2, [pc, #112]	@ (80096f8 <TIM_OC2_SetConfig+0x104>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00b      	beq.n	80096a4 <TIM_OC2_SetConfig+0xb0>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a1b      	ldr	r2, [pc, #108]	@ (80096fc <TIM_OC2_SetConfig+0x108>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d007      	beq.n	80096a4 <TIM_OC2_SetConfig+0xb0>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1a      	ldr	r2, [pc, #104]	@ (8009700 <TIM_OC2_SetConfig+0x10c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d003      	beq.n	80096a4 <TIM_OC2_SetConfig+0xb0>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a19      	ldr	r2, [pc, #100]	@ (8009704 <TIM_OC2_SetConfig+0x110>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d113      	bne.n	80096cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	621a      	str	r2, [r3, #32]
}
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40012c00 	.word	0x40012c00
 80096f8:	40013400 	.word	0x40013400
 80096fc:	40014000 	.word	0x40014000
 8009700:	40014400 	.word	0x40014400
 8009704:	40014800 	.word	0x40014800

08009708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800973a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	021b      	lsls	r3, r3, #8
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a27      	ldr	r2, [pc, #156]	@ (8009804 <TIM_OC3_SetConfig+0xfc>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d003      	beq.n	8009772 <TIM_OC3_SetConfig+0x6a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a26      	ldr	r2, [pc, #152]	@ (8009808 <TIM_OC3_SetConfig+0x100>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d10d      	bne.n	800978e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	4313      	orrs	r3, r2
 8009784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800978c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a1c      	ldr	r2, [pc, #112]	@ (8009804 <TIM_OC3_SetConfig+0xfc>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00f      	beq.n	80097b6 <TIM_OC3_SetConfig+0xae>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a1b      	ldr	r2, [pc, #108]	@ (8009808 <TIM_OC3_SetConfig+0x100>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00b      	beq.n	80097b6 <TIM_OC3_SetConfig+0xae>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a1a      	ldr	r2, [pc, #104]	@ (800980c <TIM_OC3_SetConfig+0x104>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d007      	beq.n	80097b6 <TIM_OC3_SetConfig+0xae>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a19      	ldr	r2, [pc, #100]	@ (8009810 <TIM_OC3_SetConfig+0x108>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d003      	beq.n	80097b6 <TIM_OC3_SetConfig+0xae>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a18      	ldr	r2, [pc, #96]	@ (8009814 <TIM_OC3_SetConfig+0x10c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d113      	bne.n	80097de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	621a      	str	r2, [r3, #32]
}
 80097f8:	bf00      	nop
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40013400 	.word	0x40013400
 800980c:	40014000 	.word	0x40014000
 8009810:	40014400 	.word	0x40014400
 8009814:	40014800 	.word	0x40014800

08009818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800984a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	021b      	lsls	r3, r3, #8
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	4313      	orrs	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	031b      	lsls	r3, r3, #12
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	4313      	orrs	r3, r2
 8009872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a28      	ldr	r2, [pc, #160]	@ (8009918 <TIM_OC4_SetConfig+0x100>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d003      	beq.n	8009884 <TIM_OC4_SetConfig+0x6c>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a27      	ldr	r2, [pc, #156]	@ (800991c <TIM_OC4_SetConfig+0x104>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d10d      	bne.n	80098a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800988a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	031b      	lsls	r3, r3, #12
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	4313      	orrs	r3, r2
 8009896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800989e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009918 <TIM_OC4_SetConfig+0x100>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d00f      	beq.n	80098c8 <TIM_OC4_SetConfig+0xb0>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a1c      	ldr	r2, [pc, #112]	@ (800991c <TIM_OC4_SetConfig+0x104>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00b      	beq.n	80098c8 <TIM_OC4_SetConfig+0xb0>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009920 <TIM_OC4_SetConfig+0x108>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d007      	beq.n	80098c8 <TIM_OC4_SetConfig+0xb0>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009924 <TIM_OC4_SetConfig+0x10c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d003      	beq.n	80098c8 <TIM_OC4_SetConfig+0xb0>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a19      	ldr	r2, [pc, #100]	@ (8009928 <TIM_OC4_SetConfig+0x110>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d113      	bne.n	80098f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	019b      	lsls	r3, r3, #6
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	019b      	lsls	r3, r3, #6
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40012c00 	.word	0x40012c00
 800991c:	40013400 	.word	0x40013400
 8009920:	40014000 	.word	0x40014000
 8009924:	40014400 	.word	0x40014400
 8009928:	40014800 	.word	0x40014800

0800992c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800995a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800995e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	041b      	lsls	r3, r3, #16
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	4313      	orrs	r3, r2
 800997c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a17      	ldr	r2, [pc, #92]	@ (80099e0 <TIM_OC5_SetConfig+0xb4>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d00f      	beq.n	80099a6 <TIM_OC5_SetConfig+0x7a>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a16      	ldr	r2, [pc, #88]	@ (80099e4 <TIM_OC5_SetConfig+0xb8>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d00b      	beq.n	80099a6 <TIM_OC5_SetConfig+0x7a>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a15      	ldr	r2, [pc, #84]	@ (80099e8 <TIM_OC5_SetConfig+0xbc>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d007      	beq.n	80099a6 <TIM_OC5_SetConfig+0x7a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a14      	ldr	r2, [pc, #80]	@ (80099ec <TIM_OC5_SetConfig+0xc0>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d003      	beq.n	80099a6 <TIM_OC5_SetConfig+0x7a>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a13      	ldr	r2, [pc, #76]	@ (80099f0 <TIM_OC5_SetConfig+0xc4>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d109      	bne.n	80099ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	621a      	str	r2, [r3, #32]
}
 80099d4:	bf00      	nop
 80099d6:	371c      	adds	r7, #28
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	40012c00 	.word	0x40012c00
 80099e4:	40013400 	.word	0x40013400
 80099e8:	40014000 	.word	0x40014000
 80099ec:	40014400 	.word	0x40014400
 80099f0:	40014800 	.word	0x40014800

080099f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	051b      	lsls	r3, r3, #20
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a18      	ldr	r2, [pc, #96]	@ (8009aac <TIM_OC6_SetConfig+0xb8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00f      	beq.n	8009a70 <TIM_OC6_SetConfig+0x7c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a17      	ldr	r2, [pc, #92]	@ (8009ab0 <TIM_OC6_SetConfig+0xbc>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d00b      	beq.n	8009a70 <TIM_OC6_SetConfig+0x7c>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a16      	ldr	r2, [pc, #88]	@ (8009ab4 <TIM_OC6_SetConfig+0xc0>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d007      	beq.n	8009a70 <TIM_OC6_SetConfig+0x7c>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a15      	ldr	r2, [pc, #84]	@ (8009ab8 <TIM_OC6_SetConfig+0xc4>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d003      	beq.n	8009a70 <TIM_OC6_SetConfig+0x7c>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a14      	ldr	r2, [pc, #80]	@ (8009abc <TIM_OC6_SetConfig+0xc8>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d109      	bne.n	8009a84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	029b      	lsls	r3, r3, #10
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	621a      	str	r2, [r3, #32]
}
 8009a9e:	bf00      	nop
 8009aa0:	371c      	adds	r7, #28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	40012c00 	.word	0x40012c00
 8009ab0:	40013400 	.word	0x40013400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40014400 	.word	0x40014400
 8009abc:	40014800 	.word	0x40014800

08009ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	f023 0201 	bic.w	r2, r3, #1
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	011b      	lsls	r3, r3, #4
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f023 030a 	bic.w	r3, r3, #10
 8009afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	621a      	str	r2, [r3, #32]
}
 8009b12:	bf00      	nop
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b087      	sub	sp, #28
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	f023 0210 	bic.w	r2, r3, #16
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	031b      	lsls	r3, r3, #12
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	621a      	str	r2, [r3, #32]
}
 8009b72:	bf00      	nop
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b085      	sub	sp, #20
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f043 0307 	orr.w	r3, r3, #7
 8009ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	609a      	str	r2, [r3, #8]
}
 8009bac:	bf00      	nop
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	021a      	lsls	r2, r3, #8
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	609a      	str	r2, [r3, #8]
}
 8009bec:	bf00      	nop
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6a1a      	ldr	r2, [r3, #32]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	43db      	mvns	r3, r3
 8009c1a:	401a      	ands	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a1a      	ldr	r2, [r3, #32]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f003 031f 	and.w	r3, r3, #31
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c30:	431a      	orrs	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	621a      	str	r2, [r3, #32]
}
 8009c36:	bf00      	nop
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e065      	b.n	8009d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a2c      	ldr	r2, [pc, #176]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d004      	beq.n	8009c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d108      	bne.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d018      	beq.n	8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cd2:	d013      	beq.n	8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a18      	ldr	r2, [pc, #96]	@ (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00e      	beq.n	8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a17      	ldr	r2, [pc, #92]	@ (8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d009      	beq.n	8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a12      	ldr	r2, [pc, #72]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a13      	ldr	r2, [pc, #76]	@ (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d10c      	bne.n	8009d16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	40012c00 	.word	0x40012c00
 8009d38:	40013400 	.word	0x40013400
 8009d3c:	40000400 	.word	0x40000400
 8009d40:	40000800 	.word	0x40000800
 8009d44:	40014000 	.word	0x40014000

08009d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e042      	b.n	8009e6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d106      	bne.n	8009dfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7f8 fd1f 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2224      	movs	r2, #36	@ 0x24
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0201 	bic.w	r2, r2, #1
 8009e14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 faf4 	bl	800a40c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f825 	bl	8009e74 <UART_SetConfig>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e01b      	b.n	8009e6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0201 	orr.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fb73 	bl	800a550 <UART_CheckIdleState>
 8009e6a:	4603      	mov	r3, r0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e78:	b08c      	sub	sp, #48	@ 0x30
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4bab      	ldr	r3, [pc, #684]	@ (800a150 <UART_SetConfig+0x2dc>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4aa0      	ldr	r2, [pc, #640]	@ (800a154 <UART_SetConfig+0x2e0>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d004      	beq.n	8009ee0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009edc:	4313      	orrs	r3, r2
 8009ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009eea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efe:	f023 010f 	bic.w	r1, r3, #15
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a91      	ldr	r2, [pc, #580]	@ (800a158 <UART_SetConfig+0x2e4>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d125      	bne.n	8009f64 <UART_SetConfig+0xf0>
 8009f18:	4b90      	ldr	r3, [pc, #576]	@ (800a15c <UART_SetConfig+0x2e8>)
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1e:	f003 0303 	and.w	r3, r3, #3
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d81a      	bhi.n	8009f5c <UART_SetConfig+0xe8>
 8009f26:	a201      	add	r2, pc, #4	@ (adr r2, 8009f2c <UART_SetConfig+0xb8>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f3d 	.word	0x08009f3d
 8009f30:	08009f4d 	.word	0x08009f4d
 8009f34:	08009f45 	.word	0x08009f45
 8009f38:	08009f55 	.word	0x08009f55
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f42:	e0d6      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009f44:	2302      	movs	r3, #2
 8009f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4a:	e0d2      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009f4c:	2304      	movs	r3, #4
 8009f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f52:	e0ce      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009f54:	2308      	movs	r3, #8
 8009f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5a:	e0ca      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f62:	e0c6      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a7d      	ldr	r2, [pc, #500]	@ (800a160 <UART_SetConfig+0x2ec>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d138      	bne.n	8009fe0 <UART_SetConfig+0x16c>
 8009f6e:	4b7b      	ldr	r3, [pc, #492]	@ (800a15c <UART_SetConfig+0x2e8>)
 8009f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f74:	f003 030c 	and.w	r3, r3, #12
 8009f78:	2b0c      	cmp	r3, #12
 8009f7a:	d82d      	bhi.n	8009fd8 <UART_SetConfig+0x164>
 8009f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <UART_SetConfig+0x110>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009fb9 	.word	0x08009fb9
 8009f88:	08009fd9 	.word	0x08009fd9
 8009f8c:	08009fd9 	.word	0x08009fd9
 8009f90:	08009fd9 	.word	0x08009fd9
 8009f94:	08009fc9 	.word	0x08009fc9
 8009f98:	08009fd9 	.word	0x08009fd9
 8009f9c:	08009fd9 	.word	0x08009fd9
 8009fa0:	08009fd9 	.word	0x08009fd9
 8009fa4:	08009fc1 	.word	0x08009fc1
 8009fa8:	08009fd9 	.word	0x08009fd9
 8009fac:	08009fd9 	.word	0x08009fd9
 8009fb0:	08009fd9 	.word	0x08009fd9
 8009fb4:	08009fd1 	.word	0x08009fd1
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbe:	e098      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc6:	e094      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009fc8:	2304      	movs	r3, #4
 8009fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fce:	e090      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	e08c      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fde:	e088      	b.n	800a0f2 <UART_SetConfig+0x27e>
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a5f      	ldr	r2, [pc, #380]	@ (800a164 <UART_SetConfig+0x2f0>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d125      	bne.n	800a036 <UART_SetConfig+0x1c2>
 8009fea:	4b5c      	ldr	r3, [pc, #368]	@ (800a15c <UART_SetConfig+0x2e8>)
 8009fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ff0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ff4:	2b30      	cmp	r3, #48	@ 0x30
 8009ff6:	d016      	beq.n	800a026 <UART_SetConfig+0x1b2>
 8009ff8:	2b30      	cmp	r3, #48	@ 0x30
 8009ffa:	d818      	bhi.n	800a02e <UART_SetConfig+0x1ba>
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d00a      	beq.n	800a016 <UART_SetConfig+0x1a2>
 800a000:	2b20      	cmp	r3, #32
 800a002:	d814      	bhi.n	800a02e <UART_SetConfig+0x1ba>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <UART_SetConfig+0x19a>
 800a008:	2b10      	cmp	r3, #16
 800a00a:	d008      	beq.n	800a01e <UART_SetConfig+0x1aa>
 800a00c:	e00f      	b.n	800a02e <UART_SetConfig+0x1ba>
 800a00e:	2300      	movs	r3, #0
 800a010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a014:	e06d      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a016:	2302      	movs	r3, #2
 800a018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a01c:	e069      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a01e:	2304      	movs	r3, #4
 800a020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a024:	e065      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a026:	2308      	movs	r3, #8
 800a028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02c:	e061      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a02e:	2310      	movs	r3, #16
 800a030:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a034:	e05d      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a4b      	ldr	r2, [pc, #300]	@ (800a168 <UART_SetConfig+0x2f4>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d125      	bne.n	800a08c <UART_SetConfig+0x218>
 800a040:	4b46      	ldr	r3, [pc, #280]	@ (800a15c <UART_SetConfig+0x2e8>)
 800a042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a046:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a04a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a04c:	d016      	beq.n	800a07c <UART_SetConfig+0x208>
 800a04e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a050:	d818      	bhi.n	800a084 <UART_SetConfig+0x210>
 800a052:	2b80      	cmp	r3, #128	@ 0x80
 800a054:	d00a      	beq.n	800a06c <UART_SetConfig+0x1f8>
 800a056:	2b80      	cmp	r3, #128	@ 0x80
 800a058:	d814      	bhi.n	800a084 <UART_SetConfig+0x210>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <UART_SetConfig+0x1f0>
 800a05e:	2b40      	cmp	r3, #64	@ 0x40
 800a060:	d008      	beq.n	800a074 <UART_SetConfig+0x200>
 800a062:	e00f      	b.n	800a084 <UART_SetConfig+0x210>
 800a064:	2300      	movs	r3, #0
 800a066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a06a:	e042      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a06c:	2302      	movs	r3, #2
 800a06e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a072:	e03e      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a074:	2304      	movs	r3, #4
 800a076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a07a:	e03a      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a07c:	2308      	movs	r3, #8
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a082:	e036      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a084:	2310      	movs	r3, #16
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e032      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a30      	ldr	r2, [pc, #192]	@ (800a154 <UART_SetConfig+0x2e0>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d12a      	bne.n	800a0ec <UART_SetConfig+0x278>
 800a096:	4b31      	ldr	r3, [pc, #196]	@ (800a15c <UART_SetConfig+0x2e8>)
 800a098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a09c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a0a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0a4:	d01a      	beq.n	800a0dc <UART_SetConfig+0x268>
 800a0a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0aa:	d81b      	bhi.n	800a0e4 <UART_SetConfig+0x270>
 800a0ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0b0:	d00c      	beq.n	800a0cc <UART_SetConfig+0x258>
 800a0b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0b6:	d815      	bhi.n	800a0e4 <UART_SetConfig+0x270>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <UART_SetConfig+0x250>
 800a0bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0c0:	d008      	beq.n	800a0d4 <UART_SetConfig+0x260>
 800a0c2:	e00f      	b.n	800a0e4 <UART_SetConfig+0x270>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ca:	e012      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d2:	e00e      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0da:	e00a      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a0dc:	2308      	movs	r3, #8
 800a0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e2:	e006      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ea:	e002      	b.n	800a0f2 <UART_SetConfig+0x27e>
 800a0ec:	2310      	movs	r3, #16
 800a0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a17      	ldr	r2, [pc, #92]	@ (800a154 <UART_SetConfig+0x2e0>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	f040 80a8 	bne.w	800a24e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a102:	2b08      	cmp	r3, #8
 800a104:	d834      	bhi.n	800a170 <UART_SetConfig+0x2fc>
 800a106:	a201      	add	r2, pc, #4	@ (adr r2, 800a10c <UART_SetConfig+0x298>)
 800a108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10c:	0800a131 	.word	0x0800a131
 800a110:	0800a171 	.word	0x0800a171
 800a114:	0800a139 	.word	0x0800a139
 800a118:	0800a171 	.word	0x0800a171
 800a11c:	0800a13f 	.word	0x0800a13f
 800a120:	0800a171 	.word	0x0800a171
 800a124:	0800a171 	.word	0x0800a171
 800a128:	0800a171 	.word	0x0800a171
 800a12c:	0800a147 	.word	0x0800a147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a130:	f7fd fea8 	bl	8007e84 <HAL_RCC_GetPCLK1Freq>
 800a134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a136:	e021      	b.n	800a17c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a138:	4b0c      	ldr	r3, [pc, #48]	@ (800a16c <UART_SetConfig+0x2f8>)
 800a13a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a13c:	e01e      	b.n	800a17c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a13e:	f7fd fe33 	bl	8007da8 <HAL_RCC_GetSysClockFreq>
 800a142:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a144:	e01a      	b.n	800a17c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a14a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a14c:	e016      	b.n	800a17c <UART_SetConfig+0x308>
 800a14e:	bf00      	nop
 800a150:	cfff69f3 	.word	0xcfff69f3
 800a154:	40008000 	.word	0x40008000
 800a158:	40013800 	.word	0x40013800
 800a15c:	40021000 	.word	0x40021000
 800a160:	40004400 	.word	0x40004400
 800a164:	40004800 	.word	0x40004800
 800a168:	40004c00 	.word	0x40004c00
 800a16c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a17a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 812a 	beq.w	800a3d8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a188:	4a9e      	ldr	r2, [pc, #632]	@ (800a404 <UART_SetConfig+0x590>)
 800a18a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a18e:	461a      	mov	r2, r3
 800a190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a192:	fbb3 f3f2 	udiv	r3, r3, r2
 800a196:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	4613      	mov	r3, r2
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	4413      	add	r3, r2
 800a1a2:	69ba      	ldr	r2, [r7, #24]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d305      	bcc.n	800a1b4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d903      	bls.n	800a1bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1ba:	e10d      	b.n	800a3d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	2200      	movs	r2, #0
 800a1c0:	60bb      	str	r3, [r7, #8]
 800a1c2:	60fa      	str	r2, [r7, #12]
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c8:	4a8e      	ldr	r2, [pc, #568]	@ (800a404 <UART_SetConfig+0x590>)
 800a1ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1de:	f7f6 f86f 	bl	80002c0 <__aeabi_uldivmod>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f04f 0200 	mov.w	r2, #0
 800a1ee:	f04f 0300 	mov.w	r3, #0
 800a1f2:	020b      	lsls	r3, r1, #8
 800a1f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1f8:	0202      	lsls	r2, r0, #8
 800a1fa:	6979      	ldr	r1, [r7, #20]
 800a1fc:	6849      	ldr	r1, [r1, #4]
 800a1fe:	0849      	lsrs	r1, r1, #1
 800a200:	2000      	movs	r0, #0
 800a202:	460c      	mov	r4, r1
 800a204:	4605      	mov	r5, r0
 800a206:	eb12 0804 	adds.w	r8, r2, r4
 800a20a:	eb43 0905 	adc.w	r9, r3, r5
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	469a      	mov	sl, r3
 800a216:	4693      	mov	fp, r2
 800a218:	4652      	mov	r2, sl
 800a21a:	465b      	mov	r3, fp
 800a21c:	4640      	mov	r0, r8
 800a21e:	4649      	mov	r1, r9
 800a220:	f7f6 f84e 	bl	80002c0 <__aeabi_uldivmod>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4613      	mov	r3, r2
 800a22a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a232:	d308      	bcc.n	800a246 <UART_SetConfig+0x3d2>
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a23a:	d204      	bcs.n	800a246 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6a3a      	ldr	r2, [r7, #32]
 800a242:	60da      	str	r2, [r3, #12]
 800a244:	e0c8      	b.n	800a3d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a24c:	e0c4      	b.n	800a3d8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a256:	d167      	bne.n	800a328 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a258:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a25c:	2b08      	cmp	r3, #8
 800a25e:	d828      	bhi.n	800a2b2 <UART_SetConfig+0x43e>
 800a260:	a201      	add	r2, pc, #4	@ (adr r2, 800a268 <UART_SetConfig+0x3f4>)
 800a262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a266:	bf00      	nop
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a295 	.word	0x0800a295
 800a270:	0800a29d 	.word	0x0800a29d
 800a274:	0800a2b3 	.word	0x0800a2b3
 800a278:	0800a2a3 	.word	0x0800a2a3
 800a27c:	0800a2b3 	.word	0x0800a2b3
 800a280:	0800a2b3 	.word	0x0800a2b3
 800a284:	0800a2b3 	.word	0x0800a2b3
 800a288:	0800a2ab 	.word	0x0800a2ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a28c:	f7fd fdfa 	bl	8007e84 <HAL_RCC_GetPCLK1Freq>
 800a290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a292:	e014      	b.n	800a2be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a294:	f7fd fe0c 	bl	8007eb0 <HAL_RCC_GetPCLK2Freq>
 800a298:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a29a:	e010      	b.n	800a2be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a29c:	4b5a      	ldr	r3, [pc, #360]	@ (800a408 <UART_SetConfig+0x594>)
 800a29e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2a0:	e00d      	b.n	800a2be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2a2:	f7fd fd81 	bl	8007da8 <HAL_RCC_GetSysClockFreq>
 800a2a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2a8:	e009      	b.n	800a2be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2b0:	e005      	b.n	800a2be <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a2bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 8089 	beq.w	800a3d8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ca:	4a4e      	ldr	r2, [pc, #312]	@ (800a404 <UART_SetConfig+0x590>)
 800a2cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2d8:	005a      	lsls	r2, r3, #1
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	441a      	add	r2, r3
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	2b0f      	cmp	r3, #15
 800a2f0:	d916      	bls.n	800a320 <UART_SetConfig+0x4ac>
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f8:	d212      	bcs.n	800a320 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	f023 030f 	bic.w	r3, r3, #15
 800a302:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	b29a      	uxth	r2, r3
 800a310:	8bfb      	ldrh	r3, [r7, #30]
 800a312:	4313      	orrs	r3, r2
 800a314:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	8bfa      	ldrh	r2, [r7, #30]
 800a31c:	60da      	str	r2, [r3, #12]
 800a31e:	e05b      	b.n	800a3d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a326:	e057      	b.n	800a3d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a328:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	d828      	bhi.n	800a382 <UART_SetConfig+0x50e>
 800a330:	a201      	add	r2, pc, #4	@ (adr r2, 800a338 <UART_SetConfig+0x4c4>)
 800a332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a336:	bf00      	nop
 800a338:	0800a35d 	.word	0x0800a35d
 800a33c:	0800a365 	.word	0x0800a365
 800a340:	0800a36d 	.word	0x0800a36d
 800a344:	0800a383 	.word	0x0800a383
 800a348:	0800a373 	.word	0x0800a373
 800a34c:	0800a383 	.word	0x0800a383
 800a350:	0800a383 	.word	0x0800a383
 800a354:	0800a383 	.word	0x0800a383
 800a358:	0800a37b 	.word	0x0800a37b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a35c:	f7fd fd92 	bl	8007e84 <HAL_RCC_GetPCLK1Freq>
 800a360:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a362:	e014      	b.n	800a38e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a364:	f7fd fda4 	bl	8007eb0 <HAL_RCC_GetPCLK2Freq>
 800a368:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a36a:	e010      	b.n	800a38e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a36c:	4b26      	ldr	r3, [pc, #152]	@ (800a408 <UART_SetConfig+0x594>)
 800a36e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a370:	e00d      	b.n	800a38e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a372:	f7fd fd19 	bl	8007da8 <HAL_RCC_GetSysClockFreq>
 800a376:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a378:	e009      	b.n	800a38e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a37a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a37e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a380:	e005      	b.n	800a38e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a38c:	bf00      	nop
    }

    if (pclk != 0U)
 800a38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a390:	2b00      	cmp	r3, #0
 800a392:	d021      	beq.n	800a3d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a398:	4a1a      	ldr	r2, [pc, #104]	@ (800a404 <UART_SetConfig+0x590>)
 800a39a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	085b      	lsrs	r3, r3, #1
 800a3ac:	441a      	add	r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	2b0f      	cmp	r3, #15
 800a3bc:	d909      	bls.n	800a3d2 <UART_SetConfig+0x55e>
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3c4:	d205      	bcs.n	800a3d2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60da      	str	r2, [r3, #12]
 800a3d0:	e002      	b.n	800a3d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3730      	adds	r7, #48	@ 0x30
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a402:	bf00      	nop
 800a404:	0800f4fc 	.word	0x0800f4fc
 800a408:	00f42400 	.word	0x00f42400

0800a40c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	430a      	orrs	r2, r1
 800a456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47e:	f003 0304 	and.w	r3, r3, #4
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c2:	f003 0320 	and.w	r3, r3, #32
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01a      	beq.n	800a522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	430a      	orrs	r2, r1
 800a500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a50a:	d10a      	bne.n	800a522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]
  }
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b098      	sub	sp, #96	@ 0x60
 800a554:	af02      	add	r7, sp, #8
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a560:	f7f8 fa52 	bl	8002a08 <HAL_GetTick>
 800a564:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0308 	and.w	r3, r3, #8
 800a570:	2b08      	cmp	r3, #8
 800a572:	d12f      	bne.n	800a5d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a574:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a57c:	2200      	movs	r2, #0
 800a57e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f88e 	bl	800a6a4 <UART_WaitOnFlagUntilTimeout>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d022      	beq.n	800a5d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a596:	e853 3f00 	ldrex	r3, [r3]
 800a59a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5b4:	e841 2300 	strex	r3, r2, [r1]
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1e6      	bne.n	800a58e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e063      	b.n	800a69c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d149      	bne.n	800a676 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f857 	bl	800a6a4 <UART_WaitOnFlagUntilTimeout>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d03c      	beq.n	800a676 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	e853 3f00 	ldrex	r3, [r3]
 800a608:	623b      	str	r3, [r7, #32]
   return(result);
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a61a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a61c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e6      	bne.n	800a5fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3308      	adds	r3, #8
 800a634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	e853 3f00 	ldrex	r3, [r3]
 800a63c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f023 0301 	bic.w	r3, r3, #1
 800a644:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3308      	adds	r3, #8
 800a64c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a64e:	61fa      	str	r2, [r7, #28]
 800a650:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	69b9      	ldr	r1, [r7, #24]
 800a654:	69fa      	ldr	r2, [r7, #28]
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	617b      	str	r3, [r7, #20]
   return(result);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e5      	bne.n	800a62e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2220      	movs	r2, #32
 800a666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e012      	b.n	800a69c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2220      	movs	r2, #32
 800a67a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2220      	movs	r2, #32
 800a682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3758      	adds	r7, #88	@ 0x58
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6b4:	e04f      	b.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6bc:	d04b      	beq.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6be:	f7f8 f9a3 	bl	8002a08 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	69ba      	ldr	r2, [r7, #24]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d302      	bcc.n	800a6d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e04e      	b.n	800a776 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0304 	and.w	r3, r3, #4
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d037      	beq.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b80      	cmp	r3, #128	@ 0x80
 800a6ea:	d034      	beq.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b40      	cmp	r3, #64	@ 0x40
 800a6f0:	d031      	beq.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d110      	bne.n	800a722 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2208      	movs	r2, #8
 800a706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 f838 	bl	800a77e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2208      	movs	r2, #8
 800a712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e029      	b.n	800a776 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a72c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a730:	d111      	bne.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a73a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 f81e 	bl	800a77e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e00f      	b.n	800a776 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69da      	ldr	r2, [r3, #28]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4013      	ands	r3, r2
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	bf0c      	ite	eq
 800a766:	2301      	moveq	r3, #1
 800a768:	2300      	movne	r3, #0
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	461a      	mov	r2, r3
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	429a      	cmp	r2, r3
 800a772:	d0a0      	beq.n	800a6b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a77e:	b480      	push	{r7}
 800a780:	b095      	sub	sp, #84	@ 0x54
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78e:	e853 3f00 	ldrex	r3, [r3]
 800a792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a79a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e6      	bne.n	800a786 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a7ce:	f023 0301 	bic.w	r3, r3, #1
 800a7d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3308      	adds	r3, #8
 800a7da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7e4:	e841 2300 	strex	r3, r2, [r1]
 800a7e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e3      	bne.n	800a7b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d118      	bne.n	800a82a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	60bb      	str	r3, [r7, #8]
   return(result);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f023 0310 	bic.w	r3, r3, #16
 800a80c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a816:	61bb      	str	r3, [r7, #24]
 800a818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6979      	ldr	r1, [r7, #20]
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	613b      	str	r3, [r7, #16]
   return(result);
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e6      	bne.n	800a7f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a83e:	bf00      	nop
 800a840:	3754      	adds	r7, #84	@ 0x54
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d101      	bne.n	800a860 <HAL_UARTEx_DisableFifoMode+0x16>
 800a85c:	2302      	movs	r3, #2
 800a85e:	e027      	b.n	800a8b0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2224      	movs	r2, #36	@ 0x24
 800a86c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f022 0201 	bic.w	r2, r2, #1
 800a886:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a88e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e02d      	b.n	800a930 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2224      	movs	r2, #36	@ 0x24
 800a8e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 0201 	bic.w	r2, r2, #1
 800a8fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f84f 	bl	800a9b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2220      	movs	r2, #32
 800a922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d101      	bne.n	800a950 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e02d      	b.n	800a9ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2224      	movs	r2, #36	@ 0x24
 800a95c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 0201 	bic.w	r2, r2, #1
 800a976:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	430a      	orrs	r2, r1
 800a98a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f811 	bl	800a9b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d108      	bne.n	800a9d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9d4:	e031      	b.n	800aa3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9da:	2308      	movs	r3, #8
 800a9dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	0e5b      	lsrs	r3, r3, #25
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 0307 	and.w	r3, r3, #7
 800a9ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	0f5b      	lsrs	r3, r3, #29
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 0307 	and.w	r3, r3, #7
 800a9fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	7b3a      	ldrb	r2, [r7, #12]
 800aa02:	4911      	ldr	r1, [pc, #68]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x94>)
 800aa04:	5c8a      	ldrb	r2, [r1, r2]
 800aa06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa0a:	7b3a      	ldrb	r2, [r7, #12]
 800aa0c:	490f      	ldr	r1, [pc, #60]	@ (800aa4c <UARTEx_SetNbDataToProcess+0x98>)
 800aa0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa10:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	7b7a      	ldrb	r2, [r7, #13]
 800aa20:	4909      	ldr	r1, [pc, #36]	@ (800aa48 <UARTEx_SetNbDataToProcess+0x94>)
 800aa22:	5c8a      	ldrb	r2, [r1, r2]
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa28:	7b7a      	ldrb	r2, [r7, #13]
 800aa2a:	4908      	ldr	r1, [pc, #32]	@ (800aa4c <UARTEx_SetNbDataToProcess+0x98>)
 800aa2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa3a:	bf00      	nop
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	0800f514 	.word	0x0800f514
 800aa4c:	0800f51c 	.word	0x0800f51c

0800aa50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aa60:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800aa64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aa86:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800aa8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	43db      	mvns	r3, r3
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	1d3b      	adds	r3, r7, #4
 800aabe:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b0a7      	sub	sp, #156	@ 0x9c
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800ab12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab16:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	78db      	ldrb	r3, [r3, #3]
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d81f      	bhi.n	800ab62 <USB_ActivateEndpoint+0x72>
 800ab22:	a201      	add	r2, pc, #4	@ (adr r2, 800ab28 <USB_ActivateEndpoint+0x38>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab39 	.word	0x0800ab39
 800ab2c:	0800ab55 	.word	0x0800ab55
 800ab30:	0800ab6b 	.word	0x0800ab6b
 800ab34:	0800ab47 	.word	0x0800ab47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ab38:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ab3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ab40:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ab44:	e012      	b.n	800ab6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ab46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ab4a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ab4e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ab52:	e00b      	b.n	800ab6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ab54:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ab58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ab5c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ab60:	e004      	b.n	800ab6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800ab68:	e000      	b.n	800ab6c <USB_ActivateEndpoint+0x7c>
      break;
 800ab6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	441a      	add	r2, r3
 800ab76:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ab7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	b21b      	sxth	r3, r3
 800ab9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba6:	b21a      	sxth	r2, r3
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	b21b      	sxth	r3, r3
 800abae:	4313      	orrs	r3, r2
 800abb0:	b21b      	sxth	r3, r3
 800abb2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	441a      	add	r2, r3
 800abc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800abc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	7b1b      	ldrb	r3, [r3, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f040 8180 	bne.w	800aee2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	785b      	ldrb	r3, [r3, #1]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 8084 	beq.w	800acf4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	61bb      	str	r3, [r7, #24]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	461a      	mov	r2, r3
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	4413      	add	r3, r2
 800abfe:	61bb      	str	r3, [r7, #24]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	00da      	lsls	r2, r3, #3
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac0e:	617b      	str	r3, [r7, #20]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	88db      	ldrh	r3, [r3, #6]
 800ac14:	085b      	lsrs	r3, r3, #1
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	827b      	strh	r3, [r7, #18]
 800ac2e:	8a7b      	ldrh	r3, [r7, #18]
 800ac30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d01b      	beq.n	800ac70 <USB_ActivateEndpoint+0x180>
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac4e:	823b      	strh	r3, [r7, #16]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	441a      	add	r2, r3
 800ac5a:	8a3b      	ldrh	r3, [r7, #16]
 800ac5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	78db      	ldrb	r3, [r3, #3]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d020      	beq.n	800acba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac8e:	81bb      	strh	r3, [r7, #12]
 800ac90:	89bb      	ldrh	r3, [r7, #12]
 800ac92:	f083 0320 	eor.w	r3, r3, #32
 800ac96:	81bb      	strh	r3, [r7, #12]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	441a      	add	r2, r3
 800aca2:	89bb      	ldrh	r3, [r7, #12]
 800aca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	8013      	strh	r3, [r2, #0]
 800acb8:	e3f9      	b.n	800b4ae <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800accc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acd0:	81fb      	strh	r3, [r7, #14]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	441a      	add	r2, r3
 800acdc:	89fb      	ldrh	r3, [r7, #14]
 800acde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ace2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ace6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acee:	b29b      	uxth	r3, r3
 800acf0:	8013      	strh	r3, [r2, #0]
 800acf2:	e3dc      	b.n	800b4ae <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	461a      	mov	r2, r3
 800ad02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad04:	4413      	add	r3, r2
 800ad06:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	00da      	lsls	r2, r3, #3
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	4413      	add	r3, r2
 800ad12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	88db      	ldrh	r3, [r3, #6]
 800ad1c:	085b      	lsrs	r3, r3, #1
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad26:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	461a      	mov	r2, r3
 800ad36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad38:	4413      	add	r3, r2
 800ad3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	00da      	lsls	r2, r3, #3
 800ad42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad44:	4413      	add	r3, r2
 800ad46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5a:	801a      	strh	r2, [r3, #0]
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <USB_ActivateEndpoint+0x28a>
 800ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad76:	801a      	strh	r2, [r3, #0]
 800ad78:	e041      	b.n	800adfe <USB_ActivateEndpoint+0x30e>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad80:	d81c      	bhi.n	800adbc <USB_ActivateEndpoint+0x2cc>
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	085b      	lsrs	r3, r3, #1
 800ad88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <USB_ActivateEndpoint+0x2b2>
 800ad98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ada2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800adac:	b29b      	uxth	r3, r3
 800adae:	029b      	lsls	r3, r3, #10
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	4313      	orrs	r3, r2
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb8:	801a      	strh	r2, [r3, #0]
 800adba:	e020      	b.n	800adfe <USB_ActivateEndpoint+0x30e>
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	095b      	lsrs	r3, r3, #5
 800adc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	f003 031f 	and.w	r3, r3, #31
 800adce:	2b00      	cmp	r3, #0
 800add0:	d104      	bne.n	800addc <USB_ActivateEndpoint+0x2ec>
 800add2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800add6:	3b01      	subs	r3, #1
 800add8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	029b      	lsls	r3, r3, #10
 800adea:	b29b      	uxth	r3, r3
 800adec:	4313      	orrs	r3, r2
 800adee:	b29b      	uxth	r3, r3
 800adf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ae0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01b      	beq.n	800ae4e <USB_ActivateEndpoint+0x35e>
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae2c:	843b      	strh	r3, [r7, #32]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	441a      	add	r2, r3
 800ae38:	8c3b      	ldrh	r3, [r7, #32]
 800ae3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d124      	bne.n	800aea0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae6c:	83bb      	strh	r3, [r7, #28]
 800ae6e:	8bbb      	ldrh	r3, [r7, #28]
 800ae70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae74:	83bb      	strh	r3, [r7, #28]
 800ae76:	8bbb      	ldrh	r3, [r7, #28]
 800ae78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae7c:	83bb      	strh	r3, [r7, #28]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	441a      	add	r2, r3
 800ae88:	8bbb      	ldrh	r3, [r7, #28]
 800ae8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	8013      	strh	r3, [r2, #0]
 800ae9e:	e306      	b.n	800b4ae <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeb6:	83fb      	strh	r3, [r7, #30]
 800aeb8:	8bfb      	ldrh	r3, [r7, #30]
 800aeba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aebe:	83fb      	strh	r3, [r7, #30]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	441a      	add	r2, r3
 800aeca:	8bfb      	ldrh	r3, [r7, #30]
 800aecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aedc:	b29b      	uxth	r3, r3
 800aede:	8013      	strh	r3, [r2, #0]
 800aee0:	e2e5      	b.n	800b4ae <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	78db      	ldrb	r3, [r3, #3]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d11e      	bne.n	800af28 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aefc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af00:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	441a      	add	r2, r3
 800af0e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800af12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af1a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800af1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af22:	b29b      	uxth	r3, r3
 800af24:	8013      	strh	r3, [r2, #0]
 800af26:	e01d      	b.n	800af64 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	b29b      	uxth	r3, r3
 800af36:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800af3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af3e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	441a      	add	r2, r3
 800af4c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800af50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af60:	b29b      	uxth	r3, r3
 800af62:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af6e:	b29b      	uxth	r3, r3
 800af70:	461a      	mov	r2, r3
 800af72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af74:	4413      	add	r3, r2
 800af76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	00da      	lsls	r2, r3, #3
 800af7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af80:	4413      	add	r3, r2
 800af82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af86:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	891b      	ldrh	r3, [r3, #8]
 800af8c:	085b      	lsrs	r3, r3, #1
 800af8e:	b29b      	uxth	r3, r3
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	b29a      	uxth	r2, r3
 800af94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af96:	801a      	strh	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	677b      	str	r3, [r7, #116]	@ 0x74
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	461a      	mov	r2, r3
 800afa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afa8:	4413      	add	r3, r2
 800afaa:	677b      	str	r3, [r7, #116]	@ 0x74
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	00da      	lsls	r2, r3, #3
 800afb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afb4:	4413      	add	r3, r2
 800afb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800afba:	673b      	str	r3, [r7, #112]	@ 0x70
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	895b      	ldrh	r3, [r3, #10]
 800afc0:	085b      	lsrs	r3, r3, #1
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	785b      	ldrb	r3, [r3, #1]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f040 81af 	bne.w	800b334 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800afe6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800afea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d01d      	beq.n	800b02e <USB_ActivateEndpoint+0x53e>
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	b29b      	uxth	r3, r3
 800b000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b008:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	441a      	add	r2, r3
 800b016:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800b01a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b01e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	881b      	ldrh	r3, [r3, #0]
 800b03a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800b03e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01d      	beq.n	800b086 <USB_ActivateEndpoint+0x596>
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b05c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b060:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	441a      	add	r2, r3
 800b06e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800b072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b07a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b07e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b082:	b29b      	uxth	r3, r3
 800b084:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	785b      	ldrb	r3, [r3, #1]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d16b      	bne.n	800b166 <USB_ActivateEndpoint+0x676>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b098:	b29b      	uxth	r3, r3
 800b09a:	461a      	mov	r2, r3
 800b09c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b09e:	4413      	add	r3, r2
 800b0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	00da      	lsls	r2, r3, #3
 800b0a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0c0:	801a      	strh	r2, [r3, #0]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <USB_ActivateEndpoint+0x5f0>
 800b0ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0dc:	801a      	strh	r2, [r3, #0]
 800b0de:	e05d      	b.n	800b19c <USB_ActivateEndpoint+0x6ac>
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0e6:	d81c      	bhi.n	800b122 <USB_ActivateEndpoint+0x632>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	085b      	lsrs	r3, r3, #1
 800b0ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <USB_ActivateEndpoint+0x618>
 800b0fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b102:	3301      	adds	r3, #1
 800b104:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b112:	b29b      	uxth	r3, r3
 800b114:	029b      	lsls	r3, r3, #10
 800b116:	b29b      	uxth	r3, r3
 800b118:	4313      	orrs	r3, r2
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b11e:	801a      	strh	r2, [r3, #0]
 800b120:	e03c      	b.n	800b19c <USB_ActivateEndpoint+0x6ac>
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	095b      	lsrs	r3, r3, #5
 800b128:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f003 031f 	and.w	r3, r3, #31
 800b134:	2b00      	cmp	r3, #0
 800b136:	d104      	bne.n	800b142 <USB_ActivateEndpoint+0x652>
 800b138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b13c:	3b01      	subs	r3, #1
 800b13e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	b29a      	uxth	r2, r3
 800b148:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	029b      	lsls	r3, r3, #10
 800b150:	b29b      	uxth	r3, r3
 800b152:	4313      	orrs	r3, r2
 800b154:	b29b      	uxth	r3, r3
 800b156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b15a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b15e:	b29a      	uxth	r2, r3
 800b160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b162:	801a      	strh	r2, [r3, #0]
 800b164:	e01a      	b.n	800b19c <USB_ActivateEndpoint+0x6ac>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	785b      	ldrb	r3, [r3, #1]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d116      	bne.n	800b19c <USB_ActivateEndpoint+0x6ac>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	657b      	str	r3, [r7, #84]	@ 0x54
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b178:	b29b      	uxth	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b17e:	4413      	add	r3, r2
 800b180:	657b      	str	r3, [r7, #84]	@ 0x54
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	00da      	lsls	r2, r3, #3
 800b188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b18a:	4413      	add	r3, r2
 800b18c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b190:	653b      	str	r3, [r7, #80]	@ 0x50
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	b29a      	uxth	r2, r3
 800b198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b19a:	801a      	strh	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	785b      	ldrb	r3, [r3, #1]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d16b      	bne.n	800b280 <USB_ActivateEndpoint+0x790>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1b8:	4413      	add	r3, r2
 800b1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	00da      	lsls	r2, r3, #3
 800b1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1da:	801a      	strh	r2, [r3, #0]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10a      	bne.n	800b1fa <USB_ActivateEndpoint+0x70a>
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f6:	801a      	strh	r2, [r3, #0]
 800b1f8:	e05b      	b.n	800b2b2 <USB_ActivateEndpoint+0x7c2>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800b200:	d81c      	bhi.n	800b23c <USB_ActivateEndpoint+0x74c>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	085b      	lsrs	r3, r3, #1
 800b208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d004      	beq.n	800b222 <USB_ActivateEndpoint+0x732>
 800b218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b21c:	3301      	adds	r3, #1
 800b21e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29a      	uxth	r2, r3
 800b228:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	029b      	lsls	r3, r3, #10
 800b230:	b29b      	uxth	r3, r3
 800b232:	4313      	orrs	r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b238:	801a      	strh	r2, [r3, #0]
 800b23a:	e03a      	b.n	800b2b2 <USB_ActivateEndpoint+0x7c2>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	095b      	lsrs	r3, r3, #5
 800b242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	f003 031f 	and.w	r3, r3, #31
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d104      	bne.n	800b25c <USB_ActivateEndpoint+0x76c>
 800b252:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b256:	3b01      	subs	r3, #1
 800b258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	b29a      	uxth	r2, r3
 800b262:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b266:	b29b      	uxth	r3, r3
 800b268:	029b      	lsls	r3, r3, #10
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	4313      	orrs	r3, r2
 800b26e:	b29b      	uxth	r3, r3
 800b270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27c:	801a      	strh	r2, [r3, #0]
 800b27e:	e018      	b.n	800b2b2 <USB_ActivateEndpoint+0x7c2>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	785b      	ldrb	r3, [r3, #1]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d114      	bne.n	800b2b2 <USB_ActivateEndpoint+0x7c2>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b28e:	b29b      	uxth	r3, r3
 800b290:	461a      	mov	r2, r3
 800b292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b294:	4413      	add	r3, r2
 800b296:	647b      	str	r3, [r7, #68]	@ 0x44
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	00da      	lsls	r2, r3, #3
 800b29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2b0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b2c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b2ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b2cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b2d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b2d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b2d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b2d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	441a      	add	r2, r3
 800b2e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b2e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	b29b      	uxth	r3, r3
 800b308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b30c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b310:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	441a      	add	r2, r3
 800b31c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b31e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b32a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b32e:	b29b      	uxth	r3, r3
 800b330:	8013      	strh	r3, [r2, #0]
 800b332:	e0bc      	b.n	800b4ae <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800b344:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01d      	beq.n	800b38c <USB_ActivateEndpoint+0x89c>
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b366:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	441a      	add	r2, r3
 800b374:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b37c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b388:	b29b      	uxth	r3, r3
 800b38a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800b39c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800b3a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01d      	beq.n	800b3e4 <USB_ActivateEndpoint+0x8f4>
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3be:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	441a      	add	r2, r3
 800b3cc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800b3d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	78db      	ldrb	r3, [r3, #3]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d024      	beq.n	800b436 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b402:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b406:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b40a:	f083 0320 	eor.w	r3, r3, #32
 800b40e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	441a      	add	r2, r3
 800b41c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b42c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b430:	b29b      	uxth	r3, r3
 800b432:	8013      	strh	r3, [r2, #0]
 800b434:	e01d      	b.n	800b472 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	b29b      	uxth	r3, r3
 800b444:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b44c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	441a      	add	r2, r3
 800b45a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b45e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b46e:	b29b      	uxth	r3, r3
 800b470:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b488:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	441a      	add	r2, r3
 800b496:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b49a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b49e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b4ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	379c      	adds	r7, #156	@ 0x9c
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop

0800b4c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b08d      	sub	sp, #52	@ 0x34
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	7b1b      	ldrb	r3, [r3, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f040 808e 	bne.w	800b5f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	785b      	ldrb	r3, [r3, #1]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d044      	beq.n	800b566 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	81bb      	strh	r3, [r7, #12]
 800b4ea:	89bb      	ldrh	r3, [r7, #12]
 800b4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d01b      	beq.n	800b52c <USB_DeactivateEndpoint+0x6c>
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	881b      	ldrh	r3, [r3, #0]
 800b500:	b29b      	uxth	r3, r3
 800b502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b50a:	817b      	strh	r3, [r7, #10]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	441a      	add	r2, r3
 800b516:	897b      	ldrh	r3, [r7, #10]
 800b518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b51c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b524:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b528:	b29b      	uxth	r3, r3
 800b52a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b53e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b542:	813b      	strh	r3, [r7, #8]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	441a      	add	r2, r3
 800b54e:	893b      	ldrh	r3, [r7, #8]
 800b550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b55c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b560:	b29b      	uxth	r3, r3
 800b562:	8013      	strh	r3, [r2, #0]
 800b564:	e192      	b.n	800b88c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	827b      	strh	r3, [r7, #18]
 800b574:	8a7b      	ldrh	r3, [r7, #18]
 800b576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d01b      	beq.n	800b5b6 <USB_DeactivateEndpoint+0xf6>
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b594:	823b      	strh	r3, [r7, #16]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	441a      	add	r2, r3
 800b5a0:	8a3b      	ldrh	r3, [r7, #16]
 800b5a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5cc:	81fb      	strh	r3, [r7, #14]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	441a      	add	r2, r3
 800b5d8:	89fb      	ldrh	r3, [r7, #14]
 800b5da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	8013      	strh	r3, [r2, #0]
 800b5ee:	e14d      	b.n	800b88c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	785b      	ldrb	r3, [r3, #1]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f040 80a5 	bne.w	800b744 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	843b      	strh	r3, [r7, #32]
 800b608:	8c3b      	ldrh	r3, [r7, #32]
 800b60a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d01b      	beq.n	800b64a <USB_DeactivateEndpoint+0x18a>
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b628:	83fb      	strh	r3, [r7, #30]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	441a      	add	r2, r3
 800b634:	8bfb      	ldrh	r3, [r7, #30]
 800b636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b63a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b63e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b646:	b29b      	uxth	r3, r3
 800b648:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	83bb      	strh	r3, [r7, #28]
 800b658:	8bbb      	ldrh	r3, [r7, #28]
 800b65a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d01b      	beq.n	800b69a <USB_DeactivateEndpoint+0x1da>
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b678:	837b      	strh	r3, [r7, #26]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	441a      	add	r2, r3
 800b684:	8b7b      	ldrh	r3, [r7, #26]
 800b686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b68a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b68e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b692:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b696:	b29b      	uxth	r3, r3
 800b698:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b0:	833b      	strh	r3, [r7, #24]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	441a      	add	r2, r3
 800b6bc:	8b3b      	ldrh	r3, [r7, #24]
 800b6be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6e8:	82fb      	strh	r3, [r7, #22]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	441a      	add	r2, r3
 800b6f4:	8afb      	ldrh	r3, [r7, #22]
 800b6f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b706:	b29b      	uxth	r3, r3
 800b708:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	b29b      	uxth	r3, r3
 800b718:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b71c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b720:	82bb      	strh	r3, [r7, #20]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	441a      	add	r2, r3
 800b72c:	8abb      	ldrh	r3, [r7, #20]
 800b72e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b73e:	b29b      	uxth	r3, r3
 800b740:	8013      	strh	r3, [r2, #0]
 800b742:	e0a3      	b.n	800b88c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	881b      	ldrh	r3, [r3, #0]
 800b750:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b752:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d01b      	beq.n	800b794 <USB_DeactivateEndpoint+0x2d4>
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b772:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	441a      	add	r2, r3
 800b77e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b78c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b790:	b29b      	uxth	r3, r3
 800b792:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b7a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b7a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01b      	beq.n	800b7e4 <USB_DeactivateEndpoint+0x324>
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	881b      	ldrh	r3, [r3, #0]
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	441a      	add	r2, r3
 800b7ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b7d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	441a      	add	r2, r3
 800b806:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b80c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b810:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b818:	b29b      	uxth	r3, r3
 800b81a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	b29b      	uxth	r3, r3
 800b82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b82e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b832:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	441a      	add	r2, r3
 800b83e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b84c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b850:	b29b      	uxth	r3, r3
 800b852:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	4413      	add	r3, r2
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29b      	uxth	r3, r3
 800b862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b86a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	441a      	add	r2, r3
 800b876:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b87c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b888:	b29b      	uxth	r3, r3
 800b88a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3734      	adds	r7, #52	@ 0x34
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b0ac      	sub	sp, #176	@ 0xb0
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	785b      	ldrb	r3, [r3, #1]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	f040 84ca 	bne.w	800c242 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	699a      	ldr	r2, [r3, #24]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d904      	bls.n	800b8c4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8c2:	e003      	b.n	800b8cc <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	7b1b      	ldrb	r3, [r3, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d122      	bne.n	800b91a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	6959      	ldr	r1, [r3, #20]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	88da      	ldrh	r2, [r3, #6]
 800b8dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 febd 	bl	800c662 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	613b      	str	r3, [r7, #16]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	613b      	str	r3, [r7, #16]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	00da      	lsls	r2, r3, #3
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	4413      	add	r3, r2
 800b906:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b910:	b29a      	uxth	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	801a      	strh	r2, [r3, #0]
 800b916:	f000 bc6f 	b.w	800c1f8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	78db      	ldrb	r3, [r3, #3]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	f040 831e 	bne.w	800bf60 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	6a1a      	ldr	r2, [r3, #32]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	f240 82cf 	bls.w	800bed0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b948:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	441a      	add	r2, r3
 800b956:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b95a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b95e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b962:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	6a1a      	ldr	r2, [r3, #32]
 800b972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b976:	1ad2      	subs	r2, r2, r3
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 814f 	beq.w	800bc32 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	633b      	str	r3, [r7, #48]	@ 0x30
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	785b      	ldrb	r3, [r3, #1]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d16b      	bne.n	800ba78 <USB_EPStartXfer+0x1de>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	4413      	add	r3, r2
 800b9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	00da      	lsls	r2, r3, #3
 800b9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9bc:	4413      	add	r3, r2
 800b9be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	801a      	strh	r2, [r3, #0]
 800b9d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10a      	bne.n	800b9f2 <USB_EPStartXfer+0x158>
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ee:	801a      	strh	r2, [r3, #0]
 800b9f0:	e05b      	b.n	800baaa <USB_EPStartXfer+0x210>
 800b9f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9f8:	d81c      	bhi.n	800ba34 <USB_EPStartXfer+0x19a>
 800b9fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9fe:	085b      	lsrs	r3, r3, #1
 800ba00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <USB_EPStartXfer+0x180>
 800ba10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba14:	3301      	adds	r3, #1
 800ba16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	029b      	lsls	r3, r3, #10
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba30:	801a      	strh	r2, [r3, #0]
 800ba32:	e03a      	b.n	800baaa <USB_EPStartXfer+0x210>
 800ba34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba38:	095b      	lsrs	r3, r3, #5
 800ba3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba42:	f003 031f 	and.w	r3, r3, #31
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <USB_EPStartXfer+0x1ba>
 800ba4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	029b      	lsls	r3, r3, #10
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	4313      	orrs	r3, r2
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	801a      	strh	r2, [r3, #0]
 800ba76:	e018      	b.n	800baaa <USB_EPStartXfer+0x210>
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	785b      	ldrb	r3, [r3, #1]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d114      	bne.n	800baaa <USB_EPStartXfer+0x210>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8c:	4413      	add	r3, r2
 800ba8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	00da      	lsls	r2, r3, #3
 800ba96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba98:	4413      	add	r3, r2
 800ba9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	895b      	ldrh	r3, [r3, #10]
 800baae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	6959      	ldr	r1, [r3, #20]
 800bab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800baba:	b29b      	uxth	r3, r3
 800babc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fdce 	bl	800c662 <USB_WritePMA>
            ep->xfer_buff += len;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	695a      	ldr	r2, [r3, #20]
 800baca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bace:	441a      	add	r2, r3
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	6a1a      	ldr	r2, [r3, #32]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	429a      	cmp	r2, r3
 800bade:	d907      	bls.n	800baf0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	6a1a      	ldr	r2, [r3, #32]
 800bae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	621a      	str	r2, [r3, #32]
 800baee:	e006      	b.n	800bafe <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2200      	movs	r2, #0
 800bafc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	785b      	ldrb	r3, [r3, #1]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d16b      	bne.n	800bbde <USB_EPStartXfer+0x344>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	61bb      	str	r3, [r7, #24]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	461a      	mov	r2, r3
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	4413      	add	r3, r2
 800bb18:	61bb      	str	r3, [r7, #24]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	00da      	lsls	r2, r3, #3
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	4413      	add	r3, r2
 800bb24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	801a      	strh	r2, [r3, #0]
 800bb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <USB_EPStartXfer+0x2be>
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	801a      	strh	r2, [r3, #0]
 800bb56:	e05d      	b.n	800bc14 <USB_EPStartXfer+0x37a>
 800bb58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb5c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb5e:	d81c      	bhi.n	800bb9a <USB_EPStartXfer+0x300>
 800bb60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb64:	085b      	lsrs	r3, r3, #1
 800bb66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <USB_EPStartXfer+0x2e6>
 800bb76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	881b      	ldrh	r3, [r3, #0]
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	029b      	lsls	r3, r3, #10
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	4313      	orrs	r3, r2
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	801a      	strh	r2, [r3, #0]
 800bb98:	e03c      	b.n	800bc14 <USB_EPStartXfer+0x37a>
 800bb9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb9e:	095b      	lsrs	r3, r3, #5
 800bba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bba8:	f003 031f 	and.w	r3, r3, #31
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d104      	bne.n	800bbba <USB_EPStartXfer+0x320>
 800bbb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	881b      	ldrh	r3, [r3, #0]
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	029b      	lsls	r3, r3, #10
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	801a      	strh	r2, [r3, #0]
 800bbdc:	e01a      	b.n	800bc14 <USB_EPStartXfer+0x37a>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	785b      	ldrb	r3, [r3, #1]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d116      	bne.n	800bc14 <USB_EPStartXfer+0x37a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	623b      	str	r3, [r7, #32]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	623b      	str	r3, [r7, #32]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	00da      	lsls	r2, r3, #3
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	4413      	add	r3, r2
 800bc04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc08:	61fb      	str	r3, [r7, #28]
 800bc0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	891b      	ldrh	r3, [r3, #8]
 800bc18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	6959      	ldr	r1, [r3, #20]
 800bc20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fd19 	bl	800c662 <USB_WritePMA>
 800bc30:	e2e2      	b.n	800c1f8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	785b      	ldrb	r3, [r3, #1]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d16b      	bne.n	800bd12 <USB_EPStartXfer+0x478>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	461a      	mov	r2, r3
 800bc48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc4a:	4413      	add	r3, r2
 800bc4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	00da      	lsls	r2, r3, #3
 800bc54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc56:	4413      	add	r3, r2
 800bc58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc6c:	801a      	strh	r2, [r3, #0]
 800bc6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <USB_EPStartXfer+0x3f2>
 800bc76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc88:	801a      	strh	r2, [r3, #0]
 800bc8a:	e05d      	b.n	800bd48 <USB_EPStartXfer+0x4ae>
 800bc8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc90:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc92:	d81c      	bhi.n	800bcce <USB_EPStartXfer+0x434>
 800bc94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc98:	085b      	lsrs	r3, r3, #1
 800bc9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d004      	beq.n	800bcb4 <USB_EPStartXfer+0x41a>
 800bcaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bcae:	3301      	adds	r3, #1
 800bcb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bcb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	029b      	lsls	r3, r3, #10
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcca:	801a      	strh	r2, [r3, #0]
 800bccc:	e03c      	b.n	800bd48 <USB_EPStartXfer+0x4ae>
 800bcce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcd2:	095b      	lsrs	r3, r3, #5
 800bcd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bcd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcdc:	f003 031f 	and.w	r3, r3, #31
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d104      	bne.n	800bcee <USB_EPStartXfer+0x454>
 800bce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bce8:	3b01      	subs	r3, #1
 800bcea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bcee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	029b      	lsls	r3, r3, #10
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd0e:	801a      	strh	r2, [r3, #0]
 800bd10:	e01a      	b.n	800bd48 <USB_EPStartXfer+0x4ae>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	785b      	ldrb	r3, [r3, #1]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d116      	bne.n	800bd48 <USB_EPStartXfer+0x4ae>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	461a      	mov	r2, r3
 800bd28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd2a:	4413      	add	r3, r2
 800bd2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	00da      	lsls	r2, r3, #3
 800bd34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd36:	4413      	add	r3, r2
 800bd38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	891b      	ldrh	r3, [r3, #8]
 800bd4c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	6959      	ldr	r1, [r3, #20]
 800bd54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fc7f 	bl	800c662 <USB_WritePMA>
            ep->xfer_buff += len;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	695a      	ldr	r2, [r3, #20]
 800bd68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd6c:	441a      	add	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	6a1a      	ldr	r2, [r3, #32]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d907      	bls.n	800bd8e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	6a1a      	ldr	r2, [r3, #32]
 800bd82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd86:	1ad2      	subs	r2, r2, r3
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	621a      	str	r2, [r3, #32]
 800bd8c:	e006      	b.n	800bd9c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	785b      	ldrb	r3, [r3, #1]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d16b      	bne.n	800be80 <USB_EPStartXfer+0x5e6>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb8:	4413      	add	r3, r2
 800bdba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	00da      	lsls	r2, r3, #3
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc4:	4413      	add	r3, r2
 800bdc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bdca:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdda:	801a      	strh	r2, [r3, #0]
 800bddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <USB_EPStartXfer+0x560>
 800bde4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdf6:	801a      	strh	r2, [r3, #0]
 800bdf8:	e05b      	b.n	800beb2 <USB_EPStartXfer+0x618>
 800bdfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdfe:	2b3e      	cmp	r3, #62	@ 0x3e
 800be00:	d81c      	bhi.n	800be3c <USB_EPStartXfer+0x5a2>
 800be02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be06:	085b      	lsrs	r3, r3, #1
 800be08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d004      	beq.n	800be22 <USB_EPStartXfer+0x588>
 800be18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be1c:	3301      	adds	r3, #1
 800be1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	b29a      	uxth	r2, r3
 800be28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	029b      	lsls	r3, r3, #10
 800be30:	b29b      	uxth	r3, r3
 800be32:	4313      	orrs	r3, r2
 800be34:	b29a      	uxth	r2, r3
 800be36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be38:	801a      	strh	r2, [r3, #0]
 800be3a:	e03a      	b.n	800beb2 <USB_EPStartXfer+0x618>
 800be3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be40:	095b      	lsrs	r3, r3, #5
 800be42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be4a:	f003 031f 	and.w	r3, r3, #31
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <USB_EPStartXfer+0x5c2>
 800be52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be56:	3b01      	subs	r3, #1
 800be58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	b29a      	uxth	r2, r3
 800be62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be66:	b29b      	uxth	r3, r3
 800be68:	029b      	lsls	r3, r3, #10
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	4313      	orrs	r3, r2
 800be6e:	b29b      	uxth	r3, r3
 800be70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be78:	b29a      	uxth	r2, r3
 800be7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be7c:	801a      	strh	r2, [r3, #0]
 800be7e:	e018      	b.n	800beb2 <USB_EPStartXfer+0x618>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	785b      	ldrb	r3, [r3, #1]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d114      	bne.n	800beb2 <USB_EPStartXfer+0x618>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be8e:	b29b      	uxth	r3, r3
 800be90:	461a      	mov	r2, r3
 800be92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be94:	4413      	add	r3, r2
 800be96:	643b      	str	r3, [r7, #64]	@ 0x40
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	00da      	lsls	r2, r3, #3
 800be9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bea0:	4413      	add	r3, r2
 800bea2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800beac:	b29a      	uxth	r2, r3
 800beae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	895b      	ldrh	r3, [r3, #10]
 800beb6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	6959      	ldr	r1, [r3, #20]
 800bebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fbca 	bl	800c662 <USB_WritePMA>
 800bece:	e193      	b.n	800c1f8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800beea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beee:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	441a      	add	r2, r3
 800befc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bf00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	461a      	mov	r2, r3
 800bf22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf24:	4413      	add	r3, r2
 800bf26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	00da      	lsls	r2, r3, #3
 800bf2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf30:	4413      	add	r3, r2
 800bf32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	891b      	ldrh	r3, [r3, #8]
 800bf46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	6959      	ldr	r1, [r3, #20]
 800bf4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fb82 	bl	800c662 <USB_WritePMA>
 800bf5e:	e14b      	b.n	800c1f8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	6a1a      	ldr	r2, [r3, #32]
 800bf64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf68:	1ad2      	subs	r2, r2, r3
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4413      	add	r3, r2
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 809a 	beq.w	800c0ba <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	785b      	ldrb	r3, [r3, #1]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d16b      	bne.n	800c06a <USB_EPStartXfer+0x7d0>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfa2:	4413      	add	r3, r2
 800bfa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	00da      	lsls	r2, r3, #3
 800bfac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfae:	4413      	add	r3, r2
 800bfb0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bfb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfc4:	801a      	strh	r2, [r3, #0]
 800bfc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <USB_EPStartXfer+0x74a>
 800bfce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfe0:	801a      	strh	r2, [r3, #0]
 800bfe2:	e05b      	b.n	800c09c <USB_EPStartXfer+0x802>
 800bfe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfe8:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfea:	d81c      	bhi.n	800c026 <USB_EPStartXfer+0x78c>
 800bfec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bff0:	085b      	lsrs	r3, r3, #1
 800bff2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bffa:	f003 0301 	and.w	r3, r3, #1
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <USB_EPStartXfer+0x772>
 800c002:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c006:	3301      	adds	r3, #1
 800c008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c00c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	b29a      	uxth	r2, r3
 800c012:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c016:	b29b      	uxth	r3, r3
 800c018:	029b      	lsls	r3, r3, #10
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	4313      	orrs	r3, r2
 800c01e:	b29a      	uxth	r2, r3
 800c020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c022:	801a      	strh	r2, [r3, #0]
 800c024:	e03a      	b.n	800c09c <USB_EPStartXfer+0x802>
 800c026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c02a:	095b      	lsrs	r3, r3, #5
 800c02c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c034:	f003 031f 	and.w	r3, r3, #31
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d104      	bne.n	800c046 <USB_EPStartXfer+0x7ac>
 800c03c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c040:	3b01      	subs	r3, #1
 800c042:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c050:	b29b      	uxth	r3, r3
 800c052:	029b      	lsls	r3, r3, #10
 800c054:	b29b      	uxth	r3, r3
 800c056:	4313      	orrs	r3, r2
 800c058:	b29b      	uxth	r3, r3
 800c05a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c05e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c062:	b29a      	uxth	r2, r3
 800c064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c066:	801a      	strh	r2, [r3, #0]
 800c068:	e018      	b.n	800c09c <USB_EPStartXfer+0x802>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	785b      	ldrb	r3, [r3, #1]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d114      	bne.n	800c09c <USB_EPStartXfer+0x802>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c078:	b29b      	uxth	r3, r3
 800c07a:	461a      	mov	r2, r3
 800c07c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c07e:	4413      	add	r3, r2
 800c080:	673b      	str	r3, [r7, #112]	@ 0x70
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	00da      	lsls	r2, r3, #3
 800c088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c08a:	4413      	add	r3, r2
 800c08c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c090:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c096:	b29a      	uxth	r2, r3
 800c098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c09a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	895b      	ldrh	r3, [r3, #10]
 800c0a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	6959      	ldr	r1, [r3, #20]
 800c0a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fad5 	bl	800c662 <USB_WritePMA>
 800c0b8:	e09e      	b.n	800c1f8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	785b      	ldrb	r3, [r3, #1]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d16b      	bne.n	800c19a <USB_EPStartXfer+0x900>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c0d2:	4413      	add	r3, r2
 800c0d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	00da      	lsls	r2, r3, #3
 800c0dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c0de:	4413      	add	r3, r2
 800c0e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c0e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c0e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0f4:	801a      	strh	r2, [r3, #0]
 800c0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <USB_EPStartXfer+0x87a>
 800c0fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	b29b      	uxth	r3, r3
 800c104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c110:	801a      	strh	r2, [r3, #0]
 800c112:	e063      	b.n	800c1dc <USB_EPStartXfer+0x942>
 800c114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c118:	2b3e      	cmp	r3, #62	@ 0x3e
 800c11a:	d81c      	bhi.n	800c156 <USB_EPStartXfer+0x8bc>
 800c11c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c120:	085b      	lsrs	r3, r3, #1
 800c122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d004      	beq.n	800c13c <USB_EPStartXfer+0x8a2>
 800c132:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c136:	3301      	adds	r3, #1
 800c138:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c13c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	b29a      	uxth	r2, r3
 800c142:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c146:	b29b      	uxth	r3, r3
 800c148:	029b      	lsls	r3, r3, #10
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	4313      	orrs	r3, r2
 800c14e:	b29a      	uxth	r2, r3
 800c150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c152:	801a      	strh	r2, [r3, #0]
 800c154:	e042      	b.n	800c1dc <USB_EPStartXfer+0x942>
 800c156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c15a:	095b      	lsrs	r3, r3, #5
 800c15c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c164:	f003 031f 	and.w	r3, r3, #31
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d104      	bne.n	800c176 <USB_EPStartXfer+0x8dc>
 800c16c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c170:	3b01      	subs	r3, #1
 800c172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c176:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c180:	b29b      	uxth	r3, r3
 800c182:	029b      	lsls	r3, r3, #10
 800c184:	b29b      	uxth	r3, r3
 800c186:	4313      	orrs	r3, r2
 800c188:	b29b      	uxth	r3, r3
 800c18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c192:	b29a      	uxth	r2, r3
 800c194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c196:	801a      	strh	r2, [r3, #0]
 800c198:	e020      	b.n	800c1dc <USB_EPStartXfer+0x942>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d11c      	bne.n	800c1dc <USB_EPStartXfer+0x942>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1b6:	4413      	add	r3, r2
 800c1b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	00da      	lsls	r2, r3, #3
 800c1c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c1cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c1d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c1da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	891b      	ldrh	r3, [r3, #8]
 800c1e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	6959      	ldr	r1, [r3, #20]
 800c1e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa35 	bl	800c662 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	b29b      	uxth	r3, r3
 800c206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c20a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c20e:	817b      	strh	r3, [r7, #10]
 800c210:	897b      	ldrh	r3, [r7, #10]
 800c212:	f083 0310 	eor.w	r3, r3, #16
 800c216:	817b      	strh	r3, [r7, #10]
 800c218:	897b      	ldrh	r3, [r7, #10]
 800c21a:	f083 0320 	eor.w	r3, r3, #32
 800c21e:	817b      	strh	r3, [r7, #10]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	441a      	add	r2, r3
 800c22a:	897b      	ldrh	r3, [r7, #10]
 800c22c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	8013      	strh	r3, [r2, #0]
 800c240:	e0d5      	b.n	800c3ee <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	7b1b      	ldrb	r3, [r3, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d156      	bne.n	800c2f8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d122      	bne.n	800c298 <USB_EPStartXfer+0x9fe>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	78db      	ldrb	r3, [r3, #3]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d11e      	bne.n	800c298 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	b29b      	uxth	r3, r3
 800c268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c26c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c270:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	441a      	add	r2, r3
 800c27e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c28a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c292:	b29b      	uxth	r3, r3
 800c294:	8013      	strh	r3, [r2, #0]
 800c296:	e01d      	b.n	800c2d4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	881b      	ldrh	r3, [r3, #0]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c2aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2ae:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	441a      	add	r2, r3
 800c2bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800c2c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	699a      	ldr	r2, [r3, #24]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d907      	bls.n	800c2f0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	699a      	ldr	r2, [r3, #24]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	1ad2      	subs	r2, r2, r3
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	619a      	str	r2, [r3, #24]
 800c2ee:	e054      	b.n	800c39a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	619a      	str	r2, [r3, #24]
 800c2f6:	e050      	b.n	800c39a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	78db      	ldrb	r3, [r3, #3]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d142      	bne.n	800c386 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	69db      	ldr	r3, [r3, #28]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d048      	beq.n	800c39a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4413      	add	r3, r2
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c318:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c31c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d005      	beq.n	800c330 <USB_EPStartXfer+0xa96>
 800c324:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10b      	bne.n	800c348 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c330:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d12e      	bne.n	800c39a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c33c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c344:	2b00      	cmp	r3, #0
 800c346:	d128      	bne.n	800c39a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	b29b      	uxth	r3, r3
 800c356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c35e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	441a      	add	r2, r3
 800c36c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800c370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c37c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c380:	b29b      	uxth	r3, r3
 800c382:	8013      	strh	r3, [r2, #0]
 800c384:	e009      	b.n	800c39a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	78db      	ldrb	r3, [r3, #3]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d103      	bne.n	800c396 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2200      	movs	r2, #0
 800c392:	619a      	str	r2, [r3, #24]
 800c394:	e001      	b.n	800c39a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e02a      	b.n	800c3f0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c3b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c3b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c3bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c3c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c3c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c3c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	441a      	add	r2, r3
 800c3d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c3da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	37b0      	adds	r7, #176	@ 0xb0
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	785b      	ldrb	r3, [r3, #1]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d020      	beq.n	800c44c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4413      	add	r3, r2
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	b29b      	uxth	r3, r3
 800c418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c41c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c420:	81bb      	strh	r3, [r7, #12]
 800c422:	89bb      	ldrh	r3, [r7, #12]
 800c424:	f083 0310 	eor.w	r3, r3, #16
 800c428:	81bb      	strh	r3, [r7, #12]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	441a      	add	r2, r3
 800c434:	89bb      	ldrh	r3, [r7, #12]
 800c436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c43a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c43e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c446:	b29b      	uxth	r3, r3
 800c448:	8013      	strh	r3, [r2, #0]
 800c44a:	e01f      	b.n	800c48c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c462:	81fb      	strh	r3, [r7, #14]
 800c464:	89fb      	ldrh	r3, [r7, #14]
 800c466:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c46a:	81fb      	strh	r3, [r7, #14]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	441a      	add	r2, r3
 800c476:	89fb      	ldrh	r3, [r7, #14]
 800c478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c47c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c488:	b29b      	uxth	r3, r3
 800c48a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c49a:	b480      	push	{r7}
 800c49c:	b087      	sub	sp, #28
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	785b      	ldrb	r3, [r3, #1]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d04c      	beq.n	800c546 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4413      	add	r3, r2
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	823b      	strh	r3, [r7, #16]
 800c4ba:	8a3b      	ldrh	r3, [r7, #16]
 800c4bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01b      	beq.n	800c4fc <USB_EPClearStall+0x62>
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4da:	81fb      	strh	r3, [r7, #14]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	441a      	add	r2, r3
 800c4e6:	89fb      	ldrh	r3, [r7, #14]
 800c4e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	78db      	ldrb	r3, [r3, #3]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d06c      	beq.n	800c5de <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	b29b      	uxth	r3, r3
 800c512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c51a:	81bb      	strh	r3, [r7, #12]
 800c51c:	89bb      	ldrh	r3, [r7, #12]
 800c51e:	f083 0320 	eor.w	r3, r3, #32
 800c522:	81bb      	strh	r3, [r7, #12]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	441a      	add	r2, r3
 800c52e:	89bb      	ldrh	r3, [r7, #12]
 800c530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c53c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c540:	b29b      	uxth	r3, r3
 800c542:	8013      	strh	r3, [r2, #0]
 800c544:	e04b      	b.n	800c5de <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	82fb      	strh	r3, [r7, #22]
 800c554:	8afb      	ldrh	r3, [r7, #22]
 800c556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d01b      	beq.n	800c596 <USB_EPClearStall+0xfc>
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c574:	82bb      	strh	r3, [r7, #20]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	441a      	add	r2, r3
 800c580:	8abb      	ldrh	r3, [r7, #20]
 800c582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c58a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c592:	b29b      	uxth	r3, r3
 800c594:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4413      	add	r3, r2
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ac:	827b      	strh	r3, [r7, #18]
 800c5ae:	8a7b      	ldrh	r3, [r7, #18]
 800c5b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c5b4:	827b      	strh	r3, [r7, #18]
 800c5b6:	8a7b      	ldrh	r3, [r7, #18]
 800c5b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c5bc:	827b      	strh	r3, [r7, #18]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	441a      	add	r2, r3
 800c5c8:	8a7b      	ldrh	r3, [r7, #18]
 800c5ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	371c      	adds	r7, #28
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c5f8:	78fb      	ldrb	r3, [r7, #3]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d103      	bne.n	800c606 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2280      	movs	r2, #128	@ 0x80
 800c602:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c622:	b29b      	uxth	r3, r3
 800c624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c642:	b480      	push	{r7}
 800c644:	b085      	sub	sp, #20
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c650:	b29b      	uxth	r3, r3
 800c652:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c654:	68fb      	ldr	r3, [r7, #12]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3714      	adds	r7, #20
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c662:	b480      	push	{r7}
 800c664:	b08b      	sub	sp, #44	@ 0x2c
 800c666:	af00      	add	r7, sp, #0
 800c668:	60f8      	str	r0, [r7, #12]
 800c66a:	60b9      	str	r1, [r7, #8]
 800c66c:	4611      	mov	r1, r2
 800c66e:	461a      	mov	r2, r3
 800c670:	460b      	mov	r3, r1
 800c672:	80fb      	strh	r3, [r7, #6]
 800c674:	4613      	mov	r3, r2
 800c676:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c678:	88bb      	ldrh	r3, [r7, #4]
 800c67a:	3301      	adds	r3, #1
 800c67c:	085b      	lsrs	r3, r3, #1
 800c67e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c688:	88fa      	ldrh	r2, [r7, #6]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c692:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	627b      	str	r3, [r7, #36]	@ 0x24
 800c698:	e01c      	b.n	800c6d4 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	b21b      	sxth	r3, r3
 800c6a8:	021b      	lsls	r3, r3, #8
 800c6aa:	b21a      	sxth	r2, r3
 800c6ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	b21b      	sxth	r3, r3
 800c6b4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	8a7a      	ldrh	r2, [r7, #18]
 800c6ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	3302      	adds	r3, #2
 800c6c0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1df      	bne.n	800c69a <USB_WritePMA+0x38>
  }
}
 800c6da:	bf00      	nop
 800c6dc:	bf00      	nop
 800c6de:	372c      	adds	r7, #44	@ 0x2c
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b08b      	sub	sp, #44	@ 0x2c
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	80fb      	strh	r3, [r7, #6]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c6fe:	88bb      	ldrh	r3, [r7, #4]
 800c700:	085b      	lsrs	r3, r3, #1
 800c702:	b29b      	uxth	r3, r3
 800c704:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c70e:	88fa      	ldrh	r2, [r7, #6]
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	4413      	add	r3, r2
 800c714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c718:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c71e:	e018      	b.n	800c752 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c720:	6a3b      	ldr	r3, [r7, #32]
 800c722:	881b      	ldrh	r3, [r3, #0]
 800c724:	b29b      	uxth	r3, r3
 800c726:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	3302      	adds	r3, #2
 800c72c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	b2da      	uxtb	r2, r3
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	3301      	adds	r3, #1
 800c73a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	0a1b      	lsrs	r3, r3, #8
 800c740:	b2da      	uxtb	r2, r3
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	3301      	adds	r3, #1
 800c74a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74e:	3b01      	subs	r3, #1
 800c750:	627b      	str	r3, [r7, #36]	@ 0x24
 800c752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1e3      	bne.n	800c720 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c758:	88bb      	ldrh	r3, [r7, #4]
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	b29b      	uxth	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d007      	beq.n	800c774 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	701a      	strb	r2, [r3, #0]
  }
}
 800c774:	bf00      	nop
 800c776:	372c      	adds	r7, #44	@ 0x2c
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800c78c:	2010      	movs	r0, #16
 800c78e:	f001 fe3d 	bl	800e40c <USBD_static_malloc>
 800c792:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d105      	bne.n	800c7a6 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e01b      	b.n	800c7de <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	7c1b      	ldrb	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d103      	bne.n	800c7be <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2207      	movs	r2, #7
 800c7ba:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800c7bc:	e002      	b.n	800c7c4 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800c7c4:	2304      	movs	r3, #4
 800c7c6:	2203      	movs	r2, #3
 800c7c8:	2181      	movs	r1, #129	@ 0x81
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 fd0d 	bl	800e1ea <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800c7f2:	2181      	movs	r1, #129	@ 0x81
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f001 fd1e 	bl	800e236 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d009      	beq.n	800c824 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c816:	4618      	mov	r0, r3
 800c818:	f001 fe06 	bl	800e428 <USBD_static_free>
    pdev->pClassData = NULL;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
	...

0800c830 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c840:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c850:	2303      	movs	r3, #3
 800c852:	e0e8      	b.n	800ca26 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d046      	beq.n	800c8ee <USBD_HID_Setup+0xbe>
 800c860:	2b20      	cmp	r3, #32
 800c862:	f040 80d8 	bne.w	800ca16 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	785b      	ldrb	r3, [r3, #1]
 800c86a:	3b02      	subs	r3, #2
 800c86c:	2b09      	cmp	r3, #9
 800c86e:	d836      	bhi.n	800c8de <USBD_HID_Setup+0xae>
 800c870:	a201      	add	r2, pc, #4	@ (adr r2, 800c878 <USBD_HID_Setup+0x48>)
 800c872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c876:	bf00      	nop
 800c878:	0800c8cf 	.word	0x0800c8cf
 800c87c:	0800c8af 	.word	0x0800c8af
 800c880:	0800c8df 	.word	0x0800c8df
 800c884:	0800c8df 	.word	0x0800c8df
 800c888:	0800c8df 	.word	0x0800c8df
 800c88c:	0800c8df 	.word	0x0800c8df
 800c890:	0800c8df 	.word	0x0800c8df
 800c894:	0800c8df 	.word	0x0800c8df
 800c898:	0800c8bd 	.word	0x0800c8bd
 800c89c:	0800c8a1 	.word	0x0800c8a1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	885b      	ldrh	r3, [r3, #2]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	601a      	str	r2, [r3, #0]
          break;
 800c8ac:	e01e      	b.n	800c8ec <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f001 f9b0 	bl	800dc1a <USBD_CtlSendData>
          break;
 800c8ba:	e017      	b.n	800c8ec <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	885b      	ldrh	r3, [r3, #2]
 800c8c0:	0a1b      	lsrs	r3, r3, #8
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	605a      	str	r2, [r3, #4]
          break;
 800c8cc:	e00e      	b.n	800c8ec <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f001 f99f 	bl	800dc1a <USBD_CtlSendData>
          break;
 800c8dc:	e006      	b.n	800c8ec <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f001 f929 	bl	800db38 <USBD_CtlError>
          ret = USBD_FAIL;
 800c8e6:	2303      	movs	r3, #3
 800c8e8:	75fb      	strb	r3, [r7, #23]
          break;
 800c8ea:	bf00      	nop
      }
      break;
 800c8ec:	e09a      	b.n	800ca24 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	785b      	ldrb	r3, [r3, #1]
 800c8f2:	2b0b      	cmp	r3, #11
 800c8f4:	f200 8086 	bhi.w	800ca04 <USBD_HID_Setup+0x1d4>
 800c8f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c900 <USBD_HID_Setup+0xd0>)
 800c8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fe:	bf00      	nop
 800c900:	0800c931 	.word	0x0800c931
 800c904:	0800ca13 	.word	0x0800ca13
 800c908:	0800ca05 	.word	0x0800ca05
 800c90c:	0800ca05 	.word	0x0800ca05
 800c910:	0800ca05 	.word	0x0800ca05
 800c914:	0800ca05 	.word	0x0800ca05
 800c918:	0800c95b 	.word	0x0800c95b
 800c91c:	0800ca05 	.word	0x0800ca05
 800c920:	0800ca05 	.word	0x0800ca05
 800c924:	0800ca05 	.word	0x0800ca05
 800c928:	0800c9b3 	.word	0x0800c9b3
 800c92c:	0800c9dd 	.word	0x0800c9dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d107      	bne.n	800c94c <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c93c:	f107 030a 	add.w	r3, r7, #10
 800c940:	2202      	movs	r2, #2
 800c942:	4619      	mov	r1, r3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f001 f968 	bl	800dc1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c94a:	e063      	b.n	800ca14 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f001 f8f2 	bl	800db38 <USBD_CtlError>
            ret = USBD_FAIL;
 800c954:	2303      	movs	r3, #3
 800c956:	75fb      	strb	r3, [r7, #23]
          break;
 800c958:	e05c      	b.n	800ca14 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	885b      	ldrh	r3, [r3, #2]
 800c95e:	0a1b      	lsrs	r3, r3, #8
 800c960:	b29b      	uxth	r3, r3
 800c962:	2b22      	cmp	r3, #34	@ 0x22
 800c964:	d108      	bne.n	800c978 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	88db      	ldrh	r3, [r3, #6]
 800c96a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c96c:	bf28      	it	cs
 800c96e:	233f      	movcs	r3, #63	@ 0x3f
 800c970:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800c972:	4b2f      	ldr	r3, [pc, #188]	@ (800ca30 <USBD_HID_Setup+0x200>)
 800c974:	613b      	str	r3, [r7, #16]
 800c976:	e015      	b.n	800c9a4 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	885b      	ldrh	r3, [r3, #2]
 800c97c:	0a1b      	lsrs	r3, r3, #8
 800c97e:	b29b      	uxth	r3, r3
 800c980:	2b21      	cmp	r3, #33	@ 0x21
 800c982:	d108      	bne.n	800c996 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800c984:	4b2b      	ldr	r3, [pc, #172]	@ (800ca34 <USBD_HID_Setup+0x204>)
 800c986:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	88db      	ldrh	r3, [r3, #6]
 800c98c:	2b09      	cmp	r3, #9
 800c98e:	bf28      	it	cs
 800c990:	2309      	movcs	r3, #9
 800c992:	82bb      	strh	r3, [r7, #20]
 800c994:	e006      	b.n	800c9a4 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f001 f8cd 	bl	800db38 <USBD_CtlError>
            ret = USBD_FAIL;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	75fb      	strb	r3, [r7, #23]
            break;
 800c9a2:	e037      	b.n	800ca14 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9a4:	8abb      	ldrh	r3, [r7, #20]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	6939      	ldr	r1, [r7, #16]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f001 f935 	bl	800dc1a <USBD_CtlSendData>
          break;
 800c9b0:	e030      	b.n	800ca14 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	d107      	bne.n	800c9ce <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3308      	adds	r3, #8
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f001 f927 	bl	800dc1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9cc:	e022      	b.n	800ca14 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f001 f8b1 	bl	800db38 <USBD_CtlError>
            ret = USBD_FAIL;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	75fb      	strb	r3, [r7, #23]
          break;
 800c9da:	e01b      	b.n	800ca14 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d106      	bne.n	800c9f6 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	885b      	ldrh	r3, [r3, #2]
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9f4:	e00e      	b.n	800ca14 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800c9f6:	6839      	ldr	r1, [r7, #0]
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f001 f89d 	bl	800db38 <USBD_CtlError>
            ret = USBD_FAIL;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	75fb      	strb	r3, [r7, #23]
          break;
 800ca02:	e007      	b.n	800ca14 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f001 f896 	bl	800db38 <USBD_CtlError>
          ret = USBD_FAIL;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	75fb      	strb	r3, [r7, #23]
          break;
 800ca10:	e000      	b.n	800ca14 <USBD_HID_Setup+0x1e4>
          break;
 800ca12:	bf00      	nop
      }
      break;
 800ca14:	e006      	b.n	800ca24 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f001 f88d 	bl	800db38 <USBD_CtlError>
      ret = USBD_FAIL;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	75fb      	strb	r3, [r7, #23]
      break;
 800ca22:	bf00      	nop
  }

  return (uint8_t)ret;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	200000cc 	.word	0x200000cc
 800ca34:	200000b4 	.word	0x200000b4

0800ca38 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	4613      	mov	r3, r2
 800ca44:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca4c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d101      	bne.n	800ca58 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800ca54:	2303      	movs	r3, #3
 800ca56:	e013      	b.n	800ca80 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d10c      	bne.n	800ca7e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	7b1b      	ldrb	r3, [r3, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d108      	bne.n	800ca7e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	2181      	movs	r1, #129	@ 0x81
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f001 fc84 	bl	800e386 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2222      	movs	r2, #34	@ 0x22
 800ca94:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800ca96:	4b03      	ldr	r3, [pc, #12]	@ (800caa4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	20000048 	.word	0x20000048

0800caa8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2222      	movs	r2, #34	@ 0x22
 800cab4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800cab6:	4b03      	ldr	r3, [pc, #12]	@ (800cac4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	2000006c 	.word	0x2000006c

0800cac8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2222      	movs	r2, #34	@ 0x22
 800cad4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800cad6:	4b03      	ldr	r3, [pc, #12]	@ (800cae4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	20000090 	.word	0x20000090

0800cae8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	460b      	mov	r3, r1
 800caf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cafa:	2200      	movs	r2, #0
 800cafc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	220a      	movs	r2, #10
 800cb18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800cb1a:	4b03      	ldr	r3, [pc, #12]	@ (800cb28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	200000c0 	.word	0x200000c0

0800cb2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	4613      	mov	r3, r2
 800cb38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d101      	bne.n	800cb44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e01f      	b.n	800cb84 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	79fa      	ldrb	r2, [r7, #7]
 800cb76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f001 facd 	bl	800e118 <USBD_LL_Init>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb82:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e016      	b.n	800cbd2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc0:	f107 020e 	add.w	r2, r7, #14
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	4798      	blx	r3
 800cbc8:	4602      	mov	r2, r0
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b082      	sub	sp, #8
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f001 fae6 	bl	800e1b4 <USBD_LL_Start>
 800cbe8:	4603      	mov	r3, r0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b083      	sub	sp, #12
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	460b      	mov	r3, r1
 800cc12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cc14:	2303      	movs	r3, #3
 800cc16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d009      	beq.n	800cc36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	78fa      	ldrb	r2, [r7, #3]
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	4798      	blx	r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d007      	beq.n	800cc66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	78fa      	ldrb	r2, [r7, #3]
 800cc60:	4611      	mov	r1, r2
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	4798      	blx	r3
  }

  return USBD_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 ff1e 	bl	800dac4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cc96:	461a      	mov	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cca4:	f003 031f 	and.w	r3, r3, #31
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d01a      	beq.n	800cce2 <USBD_LL_SetupStage+0x72>
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d822      	bhi.n	800ccf6 <USBD_LL_SetupStage+0x86>
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <USBD_LL_SetupStage+0x4a>
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d00a      	beq.n	800ccce <USBD_LL_SetupStage+0x5e>
 800ccb8:	e01d      	b.n	800ccf6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f9f0 	bl	800d0a8 <USBD_StdDevReq>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73fb      	strb	r3, [r7, #15]
      break;
 800cccc:	e020      	b.n	800cd10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fa54 	bl	800d184 <USBD_StdItfReq>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]
      break;
 800cce0:	e016      	b.n	800cd10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fa93 	bl	800d216 <USBD_StdEPReq>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73fb      	strb	r3, [r7, #15]
      break;
 800ccf4:	e00c      	b.n	800cd10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ccfc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f001 fab5 	bl	800e274 <USBD_LL_StallEP>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73fb      	strb	r3, [r7, #15]
      break;
 800cd0e:	bf00      	nop
  }

  return ret;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b086      	sub	sp, #24
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	60f8      	str	r0, [r7, #12]
 800cd22:	460b      	mov	r3, r1
 800cd24:	607a      	str	r2, [r7, #4]
 800cd26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cd28:	7afb      	ldrb	r3, [r7, #11]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d138      	bne.n	800cda0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cd34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd3c:	2b03      	cmp	r3, #3
 800cd3e:	d14a      	bne.n	800cdd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	689a      	ldr	r2, [r3, #8]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d913      	bls.n	800cd74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	689a      	ldr	r2, [r3, #8]
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	1ad2      	subs	r2, r2, r3
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	68da      	ldr	r2, [r3, #12]
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	4293      	cmp	r3, r2
 800cd64:	bf28      	it	cs
 800cd66:	4613      	movcs	r3, r2
 800cd68:	461a      	mov	r2, r3
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 ff80 	bl	800dc72 <USBD_CtlContinueRx>
 800cd72:	e030      	b.n	800cdd6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d10b      	bne.n	800cd98 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d005      	beq.n	800cd98 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f000 ff7b 	bl	800dc94 <USBD_CtlSendStatus>
 800cd9e:	e01a      	b.n	800cdd6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d114      	bne.n	800cdd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00e      	beq.n	800cdd6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	7afa      	ldrb	r2, [r7, #11]
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	4798      	blx	r3
 800cdc8:	4603      	mov	r3, r0
 800cdca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	e000      	b.n	800cdd8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	460b      	mov	r3, r1
 800cdea:	607a      	str	r2, [r7, #4]
 800cdec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cdee:	7afb      	ldrb	r3, [r7, #11]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d16b      	bne.n	800cecc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3314      	adds	r3, #20
 800cdf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	d156      	bne.n	800ceb2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	689a      	ldr	r2, [r3, #8]
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d914      	bls.n	800ce3a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	1ad2      	subs	r2, r2, r3
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	461a      	mov	r2, r3
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f000 ff12 	bl	800dc50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2200      	movs	r2, #0
 800ce30:	2100      	movs	r1, #0
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f001 fac8 	bl	800e3c8 <USBD_LL_PrepareReceive>
 800ce38:	e03b      	b.n	800ceb2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	68da      	ldr	r2, [r3, #12]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d11c      	bne.n	800ce80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	685a      	ldr	r2, [r3, #4]
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d316      	bcc.n	800ce80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d20f      	bcs.n	800ce80 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce60:	2200      	movs	r2, #0
 800ce62:	2100      	movs	r1, #0
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 fef3 	bl	800dc50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce72:	2300      	movs	r3, #0
 800ce74:	2200      	movs	r2, #0
 800ce76:	2100      	movs	r1, #0
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f001 faa5 	bl	800e3c8 <USBD_LL_PrepareReceive>
 800ce7e:	e018      	b.n	800ceb2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b03      	cmp	r3, #3
 800ce8a:	d10b      	bne.n	800cea4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d005      	beq.n	800cea4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cea4:	2180      	movs	r1, #128	@ 0x80
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f001 f9e4 	bl	800e274 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 ff04 	bl	800dcba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d122      	bne.n	800cf02 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f7ff fe98 	bl	800cbf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ceca:	e01a      	b.n	800cf02 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	2b03      	cmp	r3, #3
 800ced6:	d114      	bne.n	800cf02 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cede:	695b      	ldr	r3, [r3, #20]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00e      	beq.n	800cf02 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	7afa      	ldrb	r2, [r7, #11]
 800ceee:	4611      	mov	r1, r2
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	4798      	blx	r3
 800cef4:	4603      	mov	r3, r0
 800cef6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	e000      	b.n	800cf04 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cf3c:	2303      	movs	r3, #3
 800cf3e:	e02f      	b.n	800cfa0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00f      	beq.n	800cf6a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d009      	beq.n	800cf6a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	6852      	ldr	r2, [r2, #4]
 800cf62:	b2d2      	uxtb	r2, r2
 800cf64:	4611      	mov	r1, r2
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf6a:	2340      	movs	r3, #64	@ 0x40
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2100      	movs	r1, #0
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f001 f93a 	bl	800e1ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2240      	movs	r2, #64	@ 0x40
 800cf82:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf86:	2340      	movs	r3, #64	@ 0x40
 800cf88:	2200      	movs	r2, #0
 800cf8a:	2180      	movs	r1, #128	@ 0x80
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f001 f92c 	bl	800e1ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2240      	movs	r2, #64	@ 0x40
 800cf9c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	78fa      	ldrb	r2, [r7, #3]
 800cfb8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfd6:	b2da      	uxtb	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2204      	movs	r2, #4
 800cfe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b04      	cmp	r3, #4
 800d006:	d106      	bne.n	800d016 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d032:	2b00      	cmp	r3, #0
 800d034:	d101      	bne.n	800d03a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d036:	2303      	movs	r3, #3
 800d038:	e012      	b.n	800d060 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b03      	cmp	r3, #3
 800d044:	d10b      	bne.n	800d05e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d058:	69db      	ldr	r3, [r3, #28]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d068:	b480      	push	{r7}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	3301      	adds	r3, #1
 800d07e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d086:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d08a:	021b      	lsls	r3, r3, #8
 800d08c:	b21a      	sxth	r2, r3
 800d08e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d092:	4313      	orrs	r3, r2
 800d094:	b21b      	sxth	r3, r3
 800d096:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d098:	89fb      	ldrh	r3, [r7, #14]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	371c      	adds	r7, #28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
	...

0800d0a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0be:	2b40      	cmp	r3, #64	@ 0x40
 800d0c0:	d005      	beq.n	800d0ce <USBD_StdDevReq+0x26>
 800d0c2:	2b40      	cmp	r3, #64	@ 0x40
 800d0c4:	d853      	bhi.n	800d16e <USBD_StdDevReq+0xc6>
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00b      	beq.n	800d0e2 <USBD_StdDevReq+0x3a>
 800d0ca:	2b20      	cmp	r3, #32
 800d0cc:	d14f      	bne.n	800d16e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	4798      	blx	r3
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73fb      	strb	r3, [r7, #15]
      break;
 800d0e0:	e04a      	b.n	800d178 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	785b      	ldrb	r3, [r3, #1]
 800d0e6:	2b09      	cmp	r3, #9
 800d0e8:	d83b      	bhi.n	800d162 <USBD_StdDevReq+0xba>
 800d0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f0 <USBD_StdDevReq+0x48>)
 800d0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f0:	0800d145 	.word	0x0800d145
 800d0f4:	0800d159 	.word	0x0800d159
 800d0f8:	0800d163 	.word	0x0800d163
 800d0fc:	0800d14f 	.word	0x0800d14f
 800d100:	0800d163 	.word	0x0800d163
 800d104:	0800d123 	.word	0x0800d123
 800d108:	0800d119 	.word	0x0800d119
 800d10c:	0800d163 	.word	0x0800d163
 800d110:	0800d13b 	.word	0x0800d13b
 800d114:	0800d12d 	.word	0x0800d12d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f9de 	bl	800d4dc <USBD_GetDescriptor>
          break;
 800d120:	e024      	b.n	800d16c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fb43 	bl	800d7b0 <USBD_SetAddress>
          break;
 800d12a:	e01f      	b.n	800d16c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fb82 	bl	800d838 <USBD_SetConfig>
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]
          break;
 800d138:	e018      	b.n	800d16c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fc21 	bl	800d984 <USBD_GetConfig>
          break;
 800d142:	e013      	b.n	800d16c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 fc52 	bl	800d9f0 <USBD_GetStatus>
          break;
 800d14c:	e00e      	b.n	800d16c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fc81 	bl	800da58 <USBD_SetFeature>
          break;
 800d156:	e009      	b.n	800d16c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fc90 	bl	800da80 <USBD_ClrFeature>
          break;
 800d160:	e004      	b.n	800d16c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fce7 	bl	800db38 <USBD_CtlError>
          break;
 800d16a:	bf00      	nop
      }
      break;
 800d16c:	e004      	b.n	800d178 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 fce1 	bl	800db38 <USBD_CtlError>
      break;
 800d176:	bf00      	nop
  }

  return ret;
 800d178:	7bfb      	ldrb	r3, [r7, #15]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop

0800d184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d19a:	2b40      	cmp	r3, #64	@ 0x40
 800d19c:	d005      	beq.n	800d1aa <USBD_StdItfReq+0x26>
 800d19e:	2b40      	cmp	r3, #64	@ 0x40
 800d1a0:	d82f      	bhi.n	800d202 <USBD_StdItfReq+0x7e>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <USBD_StdItfReq+0x26>
 800d1a6:	2b20      	cmp	r3, #32
 800d1a8:	d12b      	bne.n	800d202 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d81d      	bhi.n	800d1f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	889b      	ldrh	r3, [r3, #4]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d813      	bhi.n	800d1ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	4798      	blx	r3
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	88db      	ldrh	r3, [r3, #6]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d110      	bne.n	800d1fe <USBD_StdItfReq+0x7a>
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10d      	bne.n	800d1fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fd56 	bl	800dc94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d1e8:	e009      	b.n	800d1fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fca3 	bl	800db38 <USBD_CtlError>
          break;
 800d1f2:	e004      	b.n	800d1fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 fc9e 	bl	800db38 <USBD_CtlError>
          break;
 800d1fc:	e000      	b.n	800d200 <USBD_StdItfReq+0x7c>
          break;
 800d1fe:	bf00      	nop
      }
      break;
 800d200:	e004      	b.n	800d20c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 fc97 	bl	800db38 <USBD_CtlError>
      break;
 800d20a:	bf00      	nop
  }

  return ret;
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	889b      	ldrh	r3, [r3, #4]
 800d228:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d232:	2b40      	cmp	r3, #64	@ 0x40
 800d234:	d007      	beq.n	800d246 <USBD_StdEPReq+0x30>
 800d236:	2b40      	cmp	r3, #64	@ 0x40
 800d238:	f200 8145 	bhi.w	800d4c6 <USBD_StdEPReq+0x2b0>
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00c      	beq.n	800d25a <USBD_StdEPReq+0x44>
 800d240:	2b20      	cmp	r3, #32
 800d242:	f040 8140 	bne.w	800d4c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	6839      	ldr	r1, [r7, #0]
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	4798      	blx	r3
 800d254:	4603      	mov	r3, r0
 800d256:	73fb      	strb	r3, [r7, #15]
      break;
 800d258:	e13a      	b.n	800d4d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	785b      	ldrb	r3, [r3, #1]
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d007      	beq.n	800d272 <USBD_StdEPReq+0x5c>
 800d262:	2b03      	cmp	r3, #3
 800d264:	f300 8129 	bgt.w	800d4ba <USBD_StdEPReq+0x2a4>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d07f      	beq.n	800d36c <USBD_StdEPReq+0x156>
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d03c      	beq.n	800d2ea <USBD_StdEPReq+0xd4>
 800d270:	e123      	b.n	800d4ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d002      	beq.n	800d284 <USBD_StdEPReq+0x6e>
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d016      	beq.n	800d2b0 <USBD_StdEPReq+0x9a>
 800d282:	e02c      	b.n	800d2de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d284:	7bbb      	ldrb	r3, [r7, #14]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00d      	beq.n	800d2a6 <USBD_StdEPReq+0x90>
 800d28a:	7bbb      	ldrb	r3, [r7, #14]
 800d28c:	2b80      	cmp	r3, #128	@ 0x80
 800d28e:	d00a      	beq.n	800d2a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d290:	7bbb      	ldrb	r3, [r7, #14]
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 ffed 	bl	800e274 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d29a:	2180      	movs	r1, #128	@ 0x80
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 ffe9 	bl	800e274 <USBD_LL_StallEP>
 800d2a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2a4:	e020      	b.n	800d2e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fc45 	bl	800db38 <USBD_CtlError>
              break;
 800d2ae:	e01b      	b.n	800d2e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	885b      	ldrh	r3, [r3, #2]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10e      	bne.n	800d2d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d2b8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00b      	beq.n	800d2d6 <USBD_StdEPReq+0xc0>
 800d2be:	7bbb      	ldrb	r3, [r7, #14]
 800d2c0:	2b80      	cmp	r3, #128	@ 0x80
 800d2c2:	d008      	beq.n	800d2d6 <USBD_StdEPReq+0xc0>
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	88db      	ldrh	r3, [r3, #6]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d104      	bne.n	800d2d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2cc:	7bbb      	ldrb	r3, [r7, #14]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 ffcf 	bl	800e274 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fcdc 	bl	800dc94 <USBD_CtlSendStatus>

              break;
 800d2dc:	e004      	b.n	800d2e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d2de:	6839      	ldr	r1, [r7, #0]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fc29 	bl	800db38 <USBD_CtlError>
              break;
 800d2e6:	bf00      	nop
          }
          break;
 800d2e8:	e0ec      	b.n	800d4c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d002      	beq.n	800d2fc <USBD_StdEPReq+0xe6>
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d016      	beq.n	800d328 <USBD_StdEPReq+0x112>
 800d2fa:	e030      	b.n	800d35e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00d      	beq.n	800d31e <USBD_StdEPReq+0x108>
 800d302:	7bbb      	ldrb	r3, [r7, #14]
 800d304:	2b80      	cmp	r3, #128	@ 0x80
 800d306:	d00a      	beq.n	800d31e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d308:	7bbb      	ldrb	r3, [r7, #14]
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 ffb1 	bl	800e274 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d312:	2180      	movs	r1, #128	@ 0x80
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 ffad 	bl	800e274 <USBD_LL_StallEP>
 800d31a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d31c:	e025      	b.n	800d36a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 fc09 	bl	800db38 <USBD_CtlError>
              break;
 800d326:	e020      	b.n	800d36a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	885b      	ldrh	r3, [r3, #2]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d11b      	bne.n	800d368 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d330:	7bbb      	ldrb	r3, [r7, #14]
 800d332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d336:	2b00      	cmp	r3, #0
 800d338:	d004      	beq.n	800d344 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 ffb7 	bl	800e2b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 fca5 	bl	800dc94 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	4798      	blx	r3
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d35c:	e004      	b.n	800d368 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d35e:	6839      	ldr	r1, [r7, #0]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fbe9 	bl	800db38 <USBD_CtlError>
              break;
 800d366:	e000      	b.n	800d36a <USBD_StdEPReq+0x154>
              break;
 800d368:	bf00      	nop
          }
          break;
 800d36a:	e0ab      	b.n	800d4c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b02      	cmp	r3, #2
 800d376:	d002      	beq.n	800d37e <USBD_StdEPReq+0x168>
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d032      	beq.n	800d3e2 <USBD_StdEPReq+0x1cc>
 800d37c:	e097      	b.n	800d4ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d007      	beq.n	800d394 <USBD_StdEPReq+0x17e>
 800d384:	7bbb      	ldrb	r3, [r7, #14]
 800d386:	2b80      	cmp	r3, #128	@ 0x80
 800d388:	d004      	beq.n	800d394 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d38a:	6839      	ldr	r1, [r7, #0]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fbd3 	bl	800db38 <USBD_CtlError>
                break;
 800d392:	e091      	b.n	800d4b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da0b      	bge.n	800d3b4 <USBD_StdEPReq+0x19e>
 800d39c:	7bbb      	ldrb	r3, [r7, #14]
 800d39e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	3310      	adds	r3, #16
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	e00b      	b.n	800d3cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3b4:	7bbb      	ldrb	r3, [r7, #14]
 800d3b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	3304      	adds	r3, #4
 800d3cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fc1d 	bl	800dc1a <USBD_CtlSendData>
              break;
 800d3e0:	e06a      	b.n	800d4b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d3e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	da11      	bge.n	800d40e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d3ea:	7bbb      	ldrb	r3, [r7, #14]
 800d3ec:	f003 020f 	and.w	r2, r3, #15
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	440b      	add	r3, r1
 800d3fc:	3324      	adds	r3, #36	@ 0x24
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d117      	bne.n	800d434 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d404:	6839      	ldr	r1, [r7, #0]
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fb96 	bl	800db38 <USBD_CtlError>
                  break;
 800d40c:	e054      	b.n	800d4b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d40e:	7bbb      	ldrb	r3, [r7, #14]
 800d410:	f003 020f 	and.w	r2, r3, #15
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	440b      	add	r3, r1
 800d420:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d104      	bne.n	800d434 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 fb83 	bl	800db38 <USBD_CtlError>
                  break;
 800d432:	e041      	b.n	800d4b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	da0b      	bge.n	800d454 <USBD_StdEPReq+0x23e>
 800d43c:	7bbb      	ldrb	r3, [r7, #14]
 800d43e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d442:	4613      	mov	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4413      	add	r3, r2
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	3310      	adds	r3, #16
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	4413      	add	r3, r2
 800d450:	3304      	adds	r3, #4
 800d452:	e00b      	b.n	800d46c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d45a:	4613      	mov	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	4413      	add	r3, r2
 800d46a:	3304      	adds	r3, #4
 800d46c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <USBD_StdEPReq+0x264>
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	2b80      	cmp	r3, #128	@ 0x80
 800d478:	d103      	bne.n	800d482 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2200      	movs	r2, #0
 800d47e:	601a      	str	r2, [r3, #0]
 800d480:	e00e      	b.n	800d4a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d482:	7bbb      	ldrb	r3, [r7, #14]
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 ff32 	bl	800e2f0 <USBD_LL_IsStallEP>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	2201      	movs	r2, #1
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	e002      	b.n	800d4a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2200      	movs	r2, #0
 800d49e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fbb7 	bl	800dc1a <USBD_CtlSendData>
              break;
 800d4ac:	e004      	b.n	800d4b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fb41 	bl	800db38 <USBD_CtlError>
              break;
 800d4b6:	bf00      	nop
          }
          break;
 800d4b8:	e004      	b.n	800d4c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fb3b 	bl	800db38 <USBD_CtlError>
          break;
 800d4c2:	bf00      	nop
      }
      break;
 800d4c4:	e004      	b.n	800d4d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fb35 	bl	800db38 <USBD_CtlError>
      break;
 800d4ce:	bf00      	nop
  }

  return ret;
 800d4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
	...

0800d4dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	885b      	ldrh	r3, [r3, #2]
 800d4f6:	0a1b      	lsrs	r3, r3, #8
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	2b06      	cmp	r3, #6
 800d4fe:	f200 8128 	bhi.w	800d752 <USBD_GetDescriptor+0x276>
 800d502:	a201      	add	r2, pc, #4	@ (adr r2, 800d508 <USBD_GetDescriptor+0x2c>)
 800d504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d508:	0800d525 	.word	0x0800d525
 800d50c:	0800d53d 	.word	0x0800d53d
 800d510:	0800d57d 	.word	0x0800d57d
 800d514:	0800d753 	.word	0x0800d753
 800d518:	0800d753 	.word	0x0800d753
 800d51c:	0800d6f3 	.word	0x0800d6f3
 800d520:	0800d71f 	.word	0x0800d71f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	7c12      	ldrb	r2, [r2, #16]
 800d530:	f107 0108 	add.w	r1, r7, #8
 800d534:	4610      	mov	r0, r2
 800d536:	4798      	blx	r3
 800d538:	60f8      	str	r0, [r7, #12]
      break;
 800d53a:	e112      	b.n	800d762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7c1b      	ldrb	r3, [r3, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10d      	bne.n	800d560 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d54c:	f107 0208 	add.w	r2, r7, #8
 800d550:	4610      	mov	r0, r2
 800d552:	4798      	blx	r3
 800d554:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3301      	adds	r3, #1
 800d55a:	2202      	movs	r2, #2
 800d55c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d55e:	e100      	b.n	800d762 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d568:	f107 0208 	add.w	r2, r7, #8
 800d56c:	4610      	mov	r0, r2
 800d56e:	4798      	blx	r3
 800d570:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	3301      	adds	r3, #1
 800d576:	2202      	movs	r2, #2
 800d578:	701a      	strb	r2, [r3, #0]
      break;
 800d57a:	e0f2      	b.n	800d762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	885b      	ldrh	r3, [r3, #2]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b05      	cmp	r3, #5
 800d584:	f200 80ac 	bhi.w	800d6e0 <USBD_GetDescriptor+0x204>
 800d588:	a201      	add	r2, pc, #4	@ (adr r2, 800d590 <USBD_GetDescriptor+0xb4>)
 800d58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58e:	bf00      	nop
 800d590:	0800d5a9 	.word	0x0800d5a9
 800d594:	0800d5dd 	.word	0x0800d5dd
 800d598:	0800d611 	.word	0x0800d611
 800d59c:	0800d645 	.word	0x0800d645
 800d5a0:	0800d679 	.word	0x0800d679
 800d5a4:	0800d6ad 	.word	0x0800d6ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	7c12      	ldrb	r2, [r2, #16]
 800d5c0:	f107 0108 	add.w	r1, r7, #8
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	4798      	blx	r3
 800d5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ca:	e091      	b.n	800d6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fab2 	bl	800db38 <USBD_CtlError>
            err++;
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5da:	e089      	b.n	800d6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00b      	beq.n	800d600 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	7c12      	ldrb	r2, [r2, #16]
 800d5f4:	f107 0108 	add.w	r1, r7, #8
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	4798      	blx	r3
 800d5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5fe:	e077      	b.n	800d6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa98 	bl	800db38 <USBD_CtlError>
            err++;
 800d608:	7afb      	ldrb	r3, [r7, #11]
 800d60a:	3301      	adds	r3, #1
 800d60c:	72fb      	strb	r3, [r7, #11]
          break;
 800d60e:	e06f      	b.n	800d6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	7c12      	ldrb	r2, [r2, #16]
 800d628:	f107 0108 	add.w	r1, r7, #8
 800d62c:	4610      	mov	r0, r2
 800d62e:	4798      	blx	r3
 800d630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d632:	e05d      	b.n	800d6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fa7e 	bl	800db38 <USBD_CtlError>
            err++;
 800d63c:	7afb      	ldrb	r3, [r7, #11]
 800d63e:	3301      	adds	r3, #1
 800d640:	72fb      	strb	r3, [r7, #11]
          break;
 800d642:	e055      	b.n	800d6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d64a:	691b      	ldr	r3, [r3, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	7c12      	ldrb	r2, [r2, #16]
 800d65c:	f107 0108 	add.w	r1, r7, #8
 800d660:	4610      	mov	r0, r2
 800d662:	4798      	blx	r3
 800d664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d666:	e043      	b.n	800d6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d668:	6839      	ldr	r1, [r7, #0]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fa64 	bl	800db38 <USBD_CtlError>
            err++;
 800d670:	7afb      	ldrb	r3, [r7, #11]
 800d672:	3301      	adds	r3, #1
 800d674:	72fb      	strb	r3, [r7, #11]
          break;
 800d676:	e03b      	b.n	800d6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	7c12      	ldrb	r2, [r2, #16]
 800d690:	f107 0108 	add.w	r1, r7, #8
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
 800d698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d69a:	e029      	b.n	800d6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fa4a 	bl	800db38 <USBD_CtlError>
            err++;
 800d6a4:	7afb      	ldrb	r3, [r7, #11]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6aa:	e021      	b.n	800d6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6be:	699b      	ldr	r3, [r3, #24]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	7c12      	ldrb	r2, [r2, #16]
 800d6c4:	f107 0108 	add.w	r1, r7, #8
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ce:	e00f      	b.n	800d6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fa30 	bl	800db38 <USBD_CtlError>
            err++;
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6de:	e007      	b.n	800d6f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fa28 	bl	800db38 <USBD_CtlError>
          err++;
 800d6e8:	7afb      	ldrb	r3, [r7, #11]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d6ee:	bf00      	nop
      }
      break;
 800d6f0:	e037      	b.n	800d762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	7c1b      	ldrb	r3, [r3, #16]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d109      	bne.n	800d70e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d702:	f107 0208 	add.w	r2, r7, #8
 800d706:	4610      	mov	r0, r2
 800d708:	4798      	blx	r3
 800d70a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d70c:	e029      	b.n	800d762 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fa11 	bl	800db38 <USBD_CtlError>
        err++;
 800d716:	7afb      	ldrb	r3, [r7, #11]
 800d718:	3301      	adds	r3, #1
 800d71a:	72fb      	strb	r3, [r7, #11]
      break;
 800d71c:	e021      	b.n	800d762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	7c1b      	ldrb	r3, [r3, #16]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10d      	bne.n	800d742 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d72e:	f107 0208 	add.w	r2, r7, #8
 800d732:	4610      	mov	r0, r2
 800d734:	4798      	blx	r3
 800d736:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	3301      	adds	r3, #1
 800d73c:	2207      	movs	r2, #7
 800d73e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d740:	e00f      	b.n	800d762 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d742:	6839      	ldr	r1, [r7, #0]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f9f7 	bl	800db38 <USBD_CtlError>
        err++;
 800d74a:	7afb      	ldrb	r3, [r7, #11]
 800d74c:	3301      	adds	r3, #1
 800d74e:	72fb      	strb	r3, [r7, #11]
      break;
 800d750:	e007      	b.n	800d762 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d752:	6839      	ldr	r1, [r7, #0]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f9ef 	bl	800db38 <USBD_CtlError>
      err++;
 800d75a:	7afb      	ldrb	r3, [r7, #11]
 800d75c:	3301      	adds	r3, #1
 800d75e:	72fb      	strb	r3, [r7, #11]
      break;
 800d760:	bf00      	nop
  }

  if (err != 0U)
 800d762:	7afb      	ldrb	r3, [r7, #11]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d11e      	bne.n	800d7a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	88db      	ldrh	r3, [r3, #6]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d016      	beq.n	800d79e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d770:	893b      	ldrh	r3, [r7, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00e      	beq.n	800d794 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	88da      	ldrh	r2, [r3, #6]
 800d77a:	893b      	ldrh	r3, [r7, #8]
 800d77c:	4293      	cmp	r3, r2
 800d77e:	bf28      	it	cs
 800d780:	4613      	movcs	r3, r2
 800d782:	b29b      	uxth	r3, r3
 800d784:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d786:	893b      	ldrh	r3, [r7, #8]
 800d788:	461a      	mov	r2, r3
 800d78a:	68f9      	ldr	r1, [r7, #12]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 fa44 	bl	800dc1a <USBD_CtlSendData>
 800d792:	e009      	b.n	800d7a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 f9ce 	bl	800db38 <USBD_CtlError>
 800d79c:	e004      	b.n	800d7a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 fa78 	bl	800dc94 <USBD_CtlSendStatus>
 800d7a4:	e000      	b.n	800d7a8 <USBD_GetDescriptor+0x2cc>
    return;
 800d7a6:	bf00      	nop
  }
}
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop

0800d7b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	889b      	ldrh	r3, [r3, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d131      	bne.n	800d826 <USBD_SetAddress+0x76>
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	88db      	ldrh	r3, [r3, #6]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d12d      	bne.n	800d826 <USBD_SetAddress+0x76>
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	885b      	ldrh	r3, [r3, #2]
 800d7ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7d0:	d829      	bhi.n	800d826 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	885b      	ldrh	r3, [r3, #2]
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d104      	bne.n	800d7f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f9a3 	bl	800db38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f2:	e01d      	b.n	800d830 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7bfa      	ldrb	r2, [r7, #15]
 800d7f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	4619      	mov	r1, r3
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 fda1 	bl	800e348 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 fa44 	bl	800dc94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d004      	beq.n	800d81c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2202      	movs	r2, #2
 800d816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d81a:	e009      	b.n	800d830 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d824:	e004      	b.n	800d830 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f985 	bl	800db38 <USBD_CtlError>
  }
}
 800d82e:	bf00      	nop
 800d830:	bf00      	nop
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d842:	2300      	movs	r3, #0
 800d844:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	4b4c      	ldr	r3, [pc, #304]	@ (800d980 <USBD_SetConfig+0x148>)
 800d84e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d850:	4b4b      	ldr	r3, [pc, #300]	@ (800d980 <USBD_SetConfig+0x148>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d905      	bls.n	800d864 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f96c 	bl	800db38 <USBD_CtlError>
    return USBD_FAIL;
 800d860:	2303      	movs	r3, #3
 800d862:	e088      	b.n	800d976 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d002      	beq.n	800d876 <USBD_SetConfig+0x3e>
 800d870:	2b03      	cmp	r3, #3
 800d872:	d025      	beq.n	800d8c0 <USBD_SetConfig+0x88>
 800d874:	e071      	b.n	800d95a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d876:	4b42      	ldr	r3, [pc, #264]	@ (800d980 <USBD_SetConfig+0x148>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d01c      	beq.n	800d8b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d87e:	4b40      	ldr	r3, [pc, #256]	@ (800d980 <USBD_SetConfig+0x148>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	461a      	mov	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d888:	4b3d      	ldr	r3, [pc, #244]	@ (800d980 <USBD_SetConfig+0x148>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7ff f9ba 	bl	800cc08 <USBD_SetClassConfig>
 800d894:	4603      	mov	r3, r0
 800d896:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f949 	bl	800db38 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8a6:	e065      	b.n	800d974 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f9f3 	bl	800dc94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2203      	movs	r2, #3
 800d8b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d8b6:	e05d      	b.n	800d974 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f9eb 	bl	800dc94 <USBD_CtlSendStatus>
      break;
 800d8be:	e059      	b.n	800d974 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d8c0:	4b2f      	ldr	r3, [pc, #188]	@ (800d980 <USBD_SetConfig+0x148>)
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d112      	bne.n	800d8ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2202      	movs	r2, #2
 800d8cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d8d0:	4b2b      	ldr	r3, [pc, #172]	@ (800d980 <USBD_SetConfig+0x148>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8da:	4b29      	ldr	r3, [pc, #164]	@ (800d980 <USBD_SetConfig+0x148>)
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff f9ad 	bl	800cc40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f9d4 	bl	800dc94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8ec:	e042      	b.n	800d974 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d8ee:	4b24      	ldr	r3, [pc, #144]	@ (800d980 <USBD_SetConfig+0x148>)
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d02a      	beq.n	800d952 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	b2db      	uxtb	r3, r3
 800d902:	4619      	mov	r1, r3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f7ff f99b 	bl	800cc40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d90a:	4b1d      	ldr	r3, [pc, #116]	@ (800d980 <USBD_SetConfig+0x148>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d914:	4b1a      	ldr	r3, [pc, #104]	@ (800d980 <USBD_SetConfig+0x148>)
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7ff f974 	bl	800cc08 <USBD_SetClassConfig>
 800d920:	4603      	mov	r3, r0
 800d922:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d924:	7bfb      	ldrb	r3, [r7, #15]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00f      	beq.n	800d94a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 f903 	bl	800db38 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	b2db      	uxtb	r3, r3
 800d938:	4619      	mov	r1, r3
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff f980 	bl	800cc40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2202      	movs	r2, #2
 800d944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d948:	e014      	b.n	800d974 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f9a2 	bl	800dc94 <USBD_CtlSendStatus>
      break;
 800d950:	e010      	b.n	800d974 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f99e 	bl	800dc94 <USBD_CtlSendStatus>
      break;
 800d958:	e00c      	b.n	800d974 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 f8eb 	bl	800db38 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d962:	4b07      	ldr	r3, [pc, #28]	@ (800d980 <USBD_SetConfig+0x148>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff f969 	bl	800cc40 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d96e:	2303      	movs	r3, #3
 800d970:	73fb      	strb	r3, [r7, #15]
      break;
 800d972:	bf00      	nop
  }

  return ret;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	20002560 	.word	0x20002560

0800d984 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	88db      	ldrh	r3, [r3, #6]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d004      	beq.n	800d9a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f8cd 	bl	800db38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d99e:	e023      	b.n	800d9e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	dc02      	bgt.n	800d9b2 <USBD_GetConfig+0x2e>
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	dc03      	bgt.n	800d9b8 <USBD_GetConfig+0x34>
 800d9b0:	e015      	b.n	800d9de <USBD_GetConfig+0x5a>
 800d9b2:	2b03      	cmp	r3, #3
 800d9b4:	d00b      	beq.n	800d9ce <USBD_GetConfig+0x4a>
 800d9b6:	e012      	b.n	800d9de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	3308      	adds	r3, #8
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f927 	bl	800dc1a <USBD_CtlSendData>
        break;
 800d9cc:	e00c      	b.n	800d9e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f91f 	bl	800dc1a <USBD_CtlSendData>
        break;
 800d9dc:	e004      	b.n	800d9e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9de:	6839      	ldr	r1, [r7, #0]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f8a9 	bl	800db38 <USBD_CtlError>
        break;
 800d9e6:	bf00      	nop
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da00:	b2db      	uxtb	r3, r3
 800da02:	3b01      	subs	r3, #1
 800da04:	2b02      	cmp	r3, #2
 800da06:	d81e      	bhi.n	800da46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	88db      	ldrh	r3, [r3, #6]
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d004      	beq.n	800da1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f890 	bl	800db38 <USBD_CtlError>
        break;
 800da18:	e01a      	b.n	800da50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800da26:	2b00      	cmp	r3, #0
 800da28:	d005      	beq.n	800da36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	f043 0202 	orr.w	r2, r3, #2
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	330c      	adds	r3, #12
 800da3a:	2202      	movs	r2, #2
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f8eb 	bl	800dc1a <USBD_CtlSendData>
      break;
 800da44:	e004      	b.n	800da50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f875 	bl	800db38 <USBD_CtlError>
      break;
 800da4e:	bf00      	nop
  }
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	885b      	ldrh	r3, [r3, #2]
 800da66:	2b01      	cmp	r3, #1
 800da68:	d106      	bne.n	800da78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f90e 	bl	800dc94 <USBD_CtlSendStatus>
  }
}
 800da78:	bf00      	nop
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da90:	b2db      	uxtb	r3, r3
 800da92:	3b01      	subs	r3, #1
 800da94:	2b02      	cmp	r3, #2
 800da96:	d80b      	bhi.n	800dab0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	885b      	ldrh	r3, [r3, #2]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d10c      	bne.n	800daba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 f8f3 	bl	800dc94 <USBD_CtlSendStatus>
      }
      break;
 800daae:	e004      	b.n	800daba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f840 	bl	800db38 <USBD_CtlError>
      break;
 800dab8:	e000      	b.n	800dabc <USBD_ClrFeature+0x3c>
      break;
 800daba:	bf00      	nop
  }
}
 800dabc:	bf00      	nop
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	781a      	ldrb	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3301      	adds	r3, #1
 800dade:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	781a      	ldrb	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3301      	adds	r3, #1
 800daec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f7ff faba 	bl	800d068 <SWAPBYTE>
 800daf4:	4603      	mov	r3, r0
 800daf6:	461a      	mov	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3301      	adds	r3, #1
 800db00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3301      	adds	r3, #1
 800db06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7ff faad 	bl	800d068 <SWAPBYTE>
 800db0e:	4603      	mov	r3, r0
 800db10:	461a      	mov	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3301      	adds	r3, #1
 800db1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3301      	adds	r3, #1
 800db20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f7ff faa0 	bl	800d068 <SWAPBYTE>
 800db28:	4603      	mov	r3, r0
 800db2a:	461a      	mov	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	80da      	strh	r2, [r3, #6]
}
 800db30:	bf00      	nop
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db42:	2180      	movs	r1, #128	@ 0x80
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 fb95 	bl	800e274 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db4a:	2100      	movs	r1, #0
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 fb91 	bl	800e274 <USBD_LL_StallEP>
}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b086      	sub	sp, #24
 800db5e:	af00      	add	r7, sp, #0
 800db60:	60f8      	str	r0, [r7, #12]
 800db62:	60b9      	str	r1, [r7, #8]
 800db64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d036      	beq.n	800dbde <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db74:	6938      	ldr	r0, [r7, #16]
 800db76:	f000 f836 	bl	800dbe6 <USBD_GetLen>
 800db7a:	4603      	mov	r3, r0
 800db7c:	3301      	adds	r3, #1
 800db7e:	b29b      	uxth	r3, r3
 800db80:	005b      	lsls	r3, r3, #1
 800db82:	b29a      	uxth	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db88:	7dfb      	ldrb	r3, [r7, #23]
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	4413      	add	r3, r2
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	7812      	ldrb	r2, [r2, #0]
 800db92:	701a      	strb	r2, [r3, #0]
  idx++;
 800db94:	7dfb      	ldrb	r3, [r7, #23]
 800db96:	3301      	adds	r3, #1
 800db98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	4413      	add	r3, r2
 800dba0:	2203      	movs	r2, #3
 800dba2:	701a      	strb	r2, [r3, #0]
  idx++;
 800dba4:	7dfb      	ldrb	r3, [r7, #23]
 800dba6:	3301      	adds	r3, #1
 800dba8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbaa:	e013      	b.n	800dbd4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	693a      	ldr	r2, [r7, #16]
 800dbb4:	7812      	ldrb	r2, [r2, #0]
 800dbb6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	613b      	str	r3, [r7, #16]
    idx++;
 800dbbe:	7dfb      	ldrb	r3, [r7, #23]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	4413      	add	r3, r2
 800dbca:	2200      	movs	r2, #0
 800dbcc:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1e7      	bne.n	800dbac <USBD_GetString+0x52>
 800dbdc:	e000      	b.n	800dbe0 <USBD_GetString+0x86>
    return;
 800dbde:	bf00      	nop
  }
}
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dbf6:	e005      	b.n	800dc04 <USBD_GetLen+0x1e>
  {
    len++;
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	3301      	adds	r3, #1
 800dc02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1f5      	bne.n	800dbf8 <USBD_GetLen+0x12>
  }

  return len;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	60f8      	str	r0, [r7, #12]
 800dc22:	60b9      	str	r1, [r7, #8]
 800dc24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2202      	movs	r2, #2
 800dc2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	2100      	movs	r1, #0
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f000 fba0 	bl	800e386 <USBD_LL_Transmit>

  return USBD_OK;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	2100      	movs	r1, #0
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f000 fb8f 	bl	800e386 <USBD_LL_Transmit>

  return USBD_OK;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b084      	sub	sp, #16
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	60f8      	str	r0, [r7, #12]
 800dc7a:	60b9      	str	r1, [r7, #8]
 800dc7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	2100      	movs	r1, #0
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 fb9f 	bl	800e3c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2204      	movs	r2, #4
 800dca0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dca4:	2300      	movs	r3, #0
 800dca6:	2200      	movs	r2, #0
 800dca8:	2100      	movs	r1, #0
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fb6b 	bl	800e386 <USBD_LL_Transmit>

  return USBD_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b082      	sub	sp, #8
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2205      	movs	r2, #5
 800dcc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcca:	2300      	movs	r3, #0
 800dccc:	2200      	movs	r2, #0
 800dcce:	2100      	movs	r1, #0
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fb79 	bl	800e3c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800dce4:	2200      	movs	r2, #0
 800dce6:	490e      	ldr	r1, [pc, #56]	@ (800dd20 <MX_USB_Device_Init+0x40>)
 800dce8:	480e      	ldr	r0, [pc, #56]	@ (800dd24 <MX_USB_Device_Init+0x44>)
 800dcea:	f7fe ff1f 	bl	800cb2c <USBD_Init>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dcf4:	f7f3 fd01 	bl	80016fa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800dcf8:	490b      	ldr	r1, [pc, #44]	@ (800dd28 <MX_USB_Device_Init+0x48>)
 800dcfa:	480a      	ldr	r0, [pc, #40]	@ (800dd24 <MX_USB_Device_Init+0x44>)
 800dcfc:	f7fe ff46 	bl	800cb8c <USBD_RegisterClass>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dd06:	f7f3 fcf8 	bl	80016fa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dd0a:	4806      	ldr	r0, [pc, #24]	@ (800dd24 <MX_USB_Device_Init+0x44>)
 800dd0c:	f7fe ff65 	bl	800cbda <USBD_Start>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800dd16:	f7f3 fcf0 	bl	80016fa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dd1a:	bf00      	nop
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	2000010c 	.word	0x2000010c
 800dd24:	20002564 	.word	0x20002564
 800dd28:	20000010 	.word	0x20000010

0800dd2c <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	4603      	mov	r3, r0
 800dd34:	6039      	str	r1, [r7, #0]
 800dd36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2212      	movs	r2, #18
 800dd3c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800dd3e:	4b03      	ldr	r3, [pc, #12]	@ (800dd4c <USBD_HID_DeviceDescriptor+0x20>)
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	370c      	adds	r7, #12
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr
 800dd4c:	20000128 	.word	0x20000128

0800dd50 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	6039      	str	r1, [r7, #0]
 800dd5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2204      	movs	r2, #4
 800dd60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd62:	4b03      	ldr	r3, [pc, #12]	@ (800dd70 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr
 800dd70:	2000013c 	.word	0x2000013c

0800dd74 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	6039      	str	r1, [r7, #0]
 800dd7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd80:	79fb      	ldrb	r3, [r7, #7]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d105      	bne.n	800dd92 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	4907      	ldr	r1, [pc, #28]	@ (800dda8 <USBD_HID_ProductStrDescriptor+0x34>)
 800dd8a:	4808      	ldr	r0, [pc, #32]	@ (800ddac <USBD_HID_ProductStrDescriptor+0x38>)
 800dd8c:	f7ff fee5 	bl	800db5a <USBD_GetString>
 800dd90:	e004      	b.n	800dd9c <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dd92:	683a      	ldr	r2, [r7, #0]
 800dd94:	4904      	ldr	r1, [pc, #16]	@ (800dda8 <USBD_HID_ProductStrDescriptor+0x34>)
 800dd96:	4805      	ldr	r0, [pc, #20]	@ (800ddac <USBD_HID_ProductStrDescriptor+0x38>)
 800dd98:	f7ff fedf 	bl	800db5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd9c:	4b02      	ldr	r3, [pc, #8]	@ (800dda8 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20002834 	.word	0x20002834
 800ddac:	0800f49c 	.word	0x0800f49c

0800ddb0 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	6039      	str	r1, [r7, #0]
 800ddba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ddbc:	683a      	ldr	r2, [r7, #0]
 800ddbe:	4904      	ldr	r1, [pc, #16]	@ (800ddd0 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800ddc0:	4804      	ldr	r0, [pc, #16]	@ (800ddd4 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800ddc2:	f7ff feca 	bl	800db5a <USBD_GetString>
  return USBD_StrDesc;
 800ddc6:	4b02      	ldr	r3, [pc, #8]	@ (800ddd0 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	20002834 	.word	0x20002834
 800ddd4:	0800f4b4 	.word	0x0800f4b4

0800ddd8 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	4603      	mov	r3, r0
 800dde0:	6039      	str	r1, [r7, #0]
 800dde2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	221a      	movs	r2, #26
 800dde8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddea:	f000 f843 	bl	800de74 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ddee:	4b02      	ldr	r3, [pc, #8]	@ (800ddf8 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	20000140 	.word	0x20000140

0800ddfc <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	6039      	str	r1, [r7, #0]
 800de06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d105      	bne.n	800de1a <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	4907      	ldr	r1, [pc, #28]	@ (800de30 <USBD_HID_ConfigStrDescriptor+0x34>)
 800de12:	4808      	ldr	r0, [pc, #32]	@ (800de34 <USBD_HID_ConfigStrDescriptor+0x38>)
 800de14:	f7ff fea1 	bl	800db5a <USBD_GetString>
 800de18:	e004      	b.n	800de24 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	4904      	ldr	r1, [pc, #16]	@ (800de30 <USBD_HID_ConfigStrDescriptor+0x34>)
 800de1e:	4805      	ldr	r0, [pc, #20]	@ (800de34 <USBD_HID_ConfigStrDescriptor+0x38>)
 800de20:	f7ff fe9b 	bl	800db5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800de24:	4b02      	ldr	r3, [pc, #8]	@ (800de30 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800de26:	4618      	mov	r0, r3
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	20002834 	.word	0x20002834
 800de34:	0800f4c8 	.word	0x0800f4c8

0800de38 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	4603      	mov	r3, r0
 800de40:	6039      	str	r1, [r7, #0]
 800de42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de44:	79fb      	ldrb	r3, [r7, #7]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d105      	bne.n	800de56 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	4907      	ldr	r1, [pc, #28]	@ (800de6c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800de4e:	4808      	ldr	r0, [pc, #32]	@ (800de70 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800de50:	f7ff fe83 	bl	800db5a <USBD_GetString>
 800de54:	e004      	b.n	800de60 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800de56:	683a      	ldr	r2, [r7, #0]
 800de58:	4904      	ldr	r1, [pc, #16]	@ (800de6c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800de5a:	4805      	ldr	r0, [pc, #20]	@ (800de70 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800de5c:	f7ff fe7d 	bl	800db5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800de60:	4b02      	ldr	r3, [pc, #8]	@ (800de6c <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800de62:	4618      	mov	r0, r3
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	20002834 	.word	0x20002834
 800de70:	0800f4d4 	.word	0x0800f4d4

0800de74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de7a:	4b0f      	ldr	r3, [pc, #60]	@ (800deb8 <Get_SerialNum+0x44>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de80:	4b0e      	ldr	r3, [pc, #56]	@ (800debc <Get_SerialNum+0x48>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de86:	4b0e      	ldr	r3, [pc, #56]	@ (800dec0 <Get_SerialNum+0x4c>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4413      	add	r3, r2
 800de92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d009      	beq.n	800deae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de9a:	2208      	movs	r2, #8
 800de9c:	4909      	ldr	r1, [pc, #36]	@ (800dec4 <Get_SerialNum+0x50>)
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f000 f814 	bl	800decc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dea4:	2204      	movs	r2, #4
 800dea6:	4908      	ldr	r1, [pc, #32]	@ (800dec8 <Get_SerialNum+0x54>)
 800dea8:	68b8      	ldr	r0, [r7, #8]
 800deaa:	f000 f80f 	bl	800decc <IntToUnicode>
  }
}
 800deae:	bf00      	nop
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	1fff7590 	.word	0x1fff7590
 800debc:	1fff7594 	.word	0x1fff7594
 800dec0:	1fff7598 	.word	0x1fff7598
 800dec4:	20000142 	.word	0x20000142
 800dec8:	20000152 	.word	0x20000152

0800decc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800decc:	b480      	push	{r7}
 800dece:	b087      	sub	sp, #28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	4613      	mov	r3, r2
 800ded8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dede:	2300      	movs	r3, #0
 800dee0:	75fb      	strb	r3, [r7, #23]
 800dee2:	e027      	b.n	800df34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	0f1b      	lsrs	r3, r3, #28
 800dee8:	2b09      	cmp	r3, #9
 800deea:	d80b      	bhi.n	800df04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	0f1b      	lsrs	r3, r3, #28
 800def0:	b2da      	uxtb	r2, r3
 800def2:	7dfb      	ldrb	r3, [r7, #23]
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	4619      	mov	r1, r3
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	440b      	add	r3, r1
 800defc:	3230      	adds	r2, #48	@ 0x30
 800defe:	b2d2      	uxtb	r2, r2
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	e00a      	b.n	800df1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	0f1b      	lsrs	r3, r3, #28
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	4619      	mov	r1, r3
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	440b      	add	r3, r1
 800df14:	3237      	adds	r2, #55	@ 0x37
 800df16:	b2d2      	uxtb	r2, r2
 800df18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	011b      	lsls	r3, r3, #4
 800df1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df20:	7dfb      	ldrb	r3, [r7, #23]
 800df22:	005b      	lsls	r3, r3, #1
 800df24:	3301      	adds	r3, #1
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	4413      	add	r3, r2
 800df2a:	2200      	movs	r2, #0
 800df2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
 800df30:	3301      	adds	r3, #1
 800df32:	75fb      	strb	r3, [r7, #23]
 800df34:	7dfa      	ldrb	r2, [r7, #23]
 800df36:	79fb      	ldrb	r3, [r7, #7]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d3d3      	bcc.n	800dee4 <IntToUnicode+0x18>
  }
}
 800df3c:	bf00      	nop
 800df3e:	bf00      	nop
 800df40:	371c      	adds	r7, #28
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
	...

0800df4c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b094      	sub	sp, #80	@ 0x50
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800df54:	f107 030c 	add.w	r3, r7, #12
 800df58:	2244      	movs	r2, #68	@ 0x44
 800df5a:	2100      	movs	r1, #0
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 fbe2 	bl	800e726 <memset>
  if(pcdHandle->Instance==USB)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a15      	ldr	r2, [pc, #84]	@ (800dfbc <HAL_PCD_MspInit+0x70>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d122      	bne.n	800dfb2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800df6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800df70:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800df72:	2300      	movs	r3, #0
 800df74:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800df76:	f107 030c 	add.w	r3, r7, #12
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7f9 fff4 	bl	8007f68 <HAL_RCCEx_PeriphCLKConfig>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d001      	beq.n	800df8a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800df86:	f7f3 fbb8 	bl	80016fa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800df8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dfc0 <HAL_PCD_MspInit+0x74>)
 800df8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df8e:	4a0c      	ldr	r2, [pc, #48]	@ (800dfc0 <HAL_PCD_MspInit+0x74>)
 800df90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800df94:	6593      	str	r3, [r2, #88]	@ 0x58
 800df96:	4b0a      	ldr	r3, [pc, #40]	@ (800dfc0 <HAL_PCD_MspInit+0x74>)
 800df98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df9e:	60bb      	str	r3, [r7, #8]
 800dfa0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	2014      	movs	r0, #20
 800dfa8:	f7f6 f9b7 	bl	800431a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dfac:	2014      	movs	r0, #20
 800dfae:	f7f6 f9ce 	bl	800434e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dfb2:	bf00      	nop
 800dfb4:	3750      	adds	r7, #80	@ 0x50
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	40005c00 	.word	0x40005c00
 800dfc0:	40021000 	.word	0x40021000

0800dfc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800dfd8:	4619      	mov	r1, r3
 800dfda:	4610      	mov	r0, r2
 800dfdc:	f7fe fe48 	bl	800cc70 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800dffa:	78fa      	ldrb	r2, [r7, #3]
 800dffc:	6879      	ldr	r1, [r7, #4]
 800dffe:	4613      	mov	r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	00db      	lsls	r3, r3, #3
 800e006:	440b      	add	r3, r1
 800e008:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	78fb      	ldrb	r3, [r7, #3]
 800e010:	4619      	mov	r1, r3
 800e012:	f7fe fe82 	bl	800cd1a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e016:	bf00      	nop
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b082      	sub	sp, #8
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	460b      	mov	r3, r1
 800e028:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e030:	78fa      	ldrb	r2, [r7, #3]
 800e032:	6879      	ldr	r1, [r7, #4]
 800e034:	4613      	mov	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	440b      	add	r3, r1
 800e03e:	3324      	adds	r3, #36	@ 0x24
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	78fb      	ldrb	r3, [r7, #3]
 800e044:	4619      	mov	r1, r3
 800e046:	f7fe fecb 	bl	800cde0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e04a:	bf00      	nop
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b082      	sub	sp, #8
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e060:	4618      	mov	r0, r3
 800e062:	f7fe ffdf 	bl	800d024 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e066:	bf00      	nop
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b084      	sub	sp, #16
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e076:	2301      	movs	r3, #1
 800e078:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	795b      	ldrb	r3, [r3, #5]
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d001      	beq.n	800e086 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e082:	f7f3 fb3a 	bl	80016fa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e08c:	7bfa      	ldrb	r2, [r7, #15]
 800e08e:	4611      	mov	r1, r2
 800e090:	4618      	mov	r0, r3
 800e092:	f7fe ff89 	bl	800cfa8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fe ff35 	bl	800cf0c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e0a2:	bf00      	nop
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
	...

0800e0ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe ff84 	bl	800cfc8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	7a5b      	ldrb	r3, [r3, #9]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d005      	beq.n	800e0d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0c8:	4b04      	ldr	r3, [pc, #16]	@ (800e0dc <HAL_PCD_SuspendCallback+0x30>)
 800e0ca:	691b      	ldr	r3, [r3, #16]
 800e0cc:	4a03      	ldr	r2, [pc, #12]	@ (800e0dc <HAL_PCD_SuspendCallback+0x30>)
 800e0ce:	f043 0306 	orr.w	r3, r3, #6
 800e0d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	e000ed00 	.word	0xe000ed00

0800e0e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	7a5b      	ldrb	r3, [r3, #9]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d007      	beq.n	800e100 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0f0:	4b08      	ldr	r3, [pc, #32]	@ (800e114 <HAL_PCD_ResumeCallback+0x34>)
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	4a07      	ldr	r2, [pc, #28]	@ (800e114 <HAL_PCD_ResumeCallback+0x34>)
 800e0f6:	f023 0306 	bic.w	r3, r3, #6
 800e0fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e0fc:	f000 f99e 	bl	800e43c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe ff74 	bl	800cff4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e10c:	bf00      	nop
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	e000ed00 	.word	0xe000ed00

0800e118 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e120:	4a22      	ldr	r2, [pc, #136]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a20      	ldr	r2, [pc, #128]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e12c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e130:	4b1e      	ldr	r3, [pc, #120]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e132:	4a1f      	ldr	r2, [pc, #124]	@ (800e1b0 <USBD_LL_Init+0x98>)
 800e134:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e136:	4b1d      	ldr	r3, [pc, #116]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e138:	2208      	movs	r2, #8
 800e13a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e13c:	4b1b      	ldr	r3, [pc, #108]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e13e:	2202      	movs	r2, #2
 800e140:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e142:	4b1a      	ldr	r3, [pc, #104]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e144:	2202      	movs	r2, #2
 800e146:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e148:	4b18      	ldr	r3, [pc, #96]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e14e:	4b17      	ldr	r3, [pc, #92]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e150:	2200      	movs	r2, #0
 800e152:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e154:	4b15      	ldr	r3, [pc, #84]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e156:	2200      	movs	r2, #0
 800e158:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e15a:	4b14      	ldr	r3, [pc, #80]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e160:	4812      	ldr	r0, [pc, #72]	@ (800e1ac <USBD_LL_Init+0x94>)
 800e162:	f7f7 fc29 	bl	80059b8 <HAL_PCD_Init>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e16c:	f7f3 fac5 	bl	80016fa <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e176:	2318      	movs	r3, #24
 800e178:	2200      	movs	r2, #0
 800e17a:	2100      	movs	r1, #0
 800e17c:	f7f9 f898 	bl	80072b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e186:	2358      	movs	r3, #88	@ 0x58
 800e188:	2200      	movs	r2, #0
 800e18a:	2180      	movs	r1, #128	@ 0x80
 800e18c:	f7f9 f890 	bl	80072b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e196:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e19a:	2200      	movs	r2, #0
 800e19c:	2181      	movs	r1, #129	@ 0x81
 800e19e:	f7f9 f887 	bl	80072b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	20002a34 	.word	0x20002a34
 800e1b0:	40005c00 	.word	0x40005c00

0800e1b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7f7 fcc2 	bl	8005b54 <HAL_PCD_Start>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 f936 	bl	800e448 <USBD_Get_USB_Status>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b084      	sub	sp, #16
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	4608      	mov	r0, r1
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	70fb      	strb	r3, [r7, #3]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	70bb      	strb	r3, [r7, #2]
 800e200:	4613      	mov	r3, r2
 800e202:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e208:	2300      	movs	r3, #0
 800e20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e212:	78bb      	ldrb	r3, [r7, #2]
 800e214:	883a      	ldrh	r2, [r7, #0]
 800e216:	78f9      	ldrb	r1, [r7, #3]
 800e218:	f7f7 fe09 	bl	8005e2e <HAL_PCD_EP_Open>
 800e21c:	4603      	mov	r3, r0
 800e21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e220:	7bfb      	ldrb	r3, [r7, #15]
 800e222:	4618      	mov	r0, r3
 800e224:	f000 f910 	bl	800e448 <USBD_Get_USB_Status>
 800e228:	4603      	mov	r3, r0
 800e22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b084      	sub	sp, #16
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	460b      	mov	r3, r1
 800e240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e246:	2300      	movs	r3, #0
 800e248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e250:	78fa      	ldrb	r2, [r7, #3]
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f7f7 fe49 	bl	8005eec <HAL_PCD_EP_Close>
 800e25a:	4603      	mov	r3, r0
 800e25c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e25e:	7bfb      	ldrb	r3, [r7, #15]
 800e260:	4618      	mov	r0, r3
 800e262:	f000 f8f1 	bl	800e448 <USBD_Get_USB_Status>
 800e266:	4603      	mov	r3, r0
 800e268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e26a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	460b      	mov	r3, r1
 800e27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e284:	2300      	movs	r3, #0
 800e286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e28e:	78fa      	ldrb	r2, [r7, #3]
 800e290:	4611      	mov	r1, r2
 800e292:	4618      	mov	r0, r3
 800e294:	f7f7 feda 	bl	800604c <HAL_PCD_EP_SetStall>
 800e298:	4603      	mov	r3, r0
 800e29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 f8d2 	bl	800e448 <USBD_Get_USB_Status>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b084      	sub	sp, #16
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e2cc:	78fa      	ldrb	r2, [r7, #3]
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f7 ff0d 	bl	80060f0 <HAL_PCD_EP_ClrStall>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f000 f8b3 	bl	800e448 <USBD_Get_USB_Status>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e302:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	da0b      	bge.n	800e324 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e30c:	78fb      	ldrb	r3, [r7, #3]
 800e30e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e312:	68f9      	ldr	r1, [r7, #12]
 800e314:	4613      	mov	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	00db      	lsls	r3, r3, #3
 800e31c:	440b      	add	r3, r1
 800e31e:	3312      	adds	r3, #18
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	e00b      	b.n	800e33c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e324:	78fb      	ldrb	r3, [r7, #3]
 800e326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e32a:	68f9      	ldr	r1, [r7, #12]
 800e32c:	4613      	mov	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	00db      	lsls	r3, r3, #3
 800e334:	440b      	add	r3, r1
 800e336:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e33a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	460b      	mov	r3, r1
 800e352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e354:	2300      	movs	r3, #0
 800e356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e358:	2300      	movs	r3, #0
 800e35a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e362:	78fa      	ldrb	r2, [r7, #3]
 800e364:	4611      	mov	r1, r2
 800e366:	4618      	mov	r0, r3
 800e368:	f7f7 fd3d 	bl	8005de6 <HAL_PCD_SetAddress>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e370:	7bfb      	ldrb	r3, [r7, #15]
 800e372:	4618      	mov	r0, r3
 800e374:	f000 f868 	bl	800e448 <USBD_Get_USB_Status>
 800e378:	4603      	mov	r3, r0
 800e37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b086      	sub	sp, #24
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	60f8      	str	r0, [r7, #12]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	603b      	str	r3, [r7, #0]
 800e392:	460b      	mov	r3, r1
 800e394:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e396:	2300      	movs	r3, #0
 800e398:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e3a4:	7af9      	ldrb	r1, [r7, #11]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	f7f7 fe18 	bl	8005fde <HAL_PCD_EP_Transmit>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f000 f847 	bl	800e448 <USBD_Get_USB_Status>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3be:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	607a      	str	r2, [r7, #4]
 800e3d2:	603b      	str	r3, [r7, #0]
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e3e6:	7af9      	ldrb	r1, [r7, #11]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	f7f7 fdc6 	bl	8005f7c <HAL_PCD_EP_Receive>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3f4:	7dfb      	ldrb	r3, [r7, #23]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 f826 	bl	800e448 <USBD_Get_USB_Status>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e400:	7dbb      	ldrb	r3, [r7, #22]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3718      	adds	r7, #24
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
	...

0800e40c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e414:	4b03      	ldr	r3, [pc, #12]	@ (800e424 <USBD_static_malloc+0x18>)
}
 800e416:	4618      	mov	r0, r3
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	20002d10 	.word	0x20002d10

0800e428 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]

}
 800e430:	bf00      	nop
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e440:	f7f3 f910 	bl	8001664 <SystemClock_Config>
}
 800e444:	bf00      	nop
 800e446:	bd80      	pop	{r7, pc}

0800e448 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e456:	79fb      	ldrb	r3, [r7, #7]
 800e458:	2b03      	cmp	r3, #3
 800e45a:	d817      	bhi.n	800e48c <USBD_Get_USB_Status+0x44>
 800e45c:	a201      	add	r2, pc, #4	@ (adr r2, 800e464 <USBD_Get_USB_Status+0x1c>)
 800e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e475 	.word	0x0800e475
 800e468:	0800e47b 	.word	0x0800e47b
 800e46c:	0800e481 	.word	0x0800e481
 800e470:	0800e487 	.word	0x0800e487
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]
    break;
 800e478:	e00b      	b.n	800e492 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e47a:	2303      	movs	r3, #3
 800e47c:	73fb      	strb	r3, [r7, #15]
    break;
 800e47e:	e008      	b.n	800e492 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e480:	2301      	movs	r3, #1
 800e482:	73fb      	strb	r3, [r7, #15]
    break;
 800e484:	e005      	b.n	800e492 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e486:	2303      	movs	r3, #3
 800e488:	73fb      	strb	r3, [r7, #15]
    break;
 800e48a:	e002      	b.n	800e492 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e48c:	2303      	movs	r3, #3
 800e48e:	73fb      	strb	r3, [r7, #15]
    break;
 800e490:	bf00      	nop
  }
  return usb_status;
 800e492:	7bfb      	ldrb	r3, [r7, #15]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <rand>:
 800e4a0:	4b16      	ldr	r3, [pc, #88]	@ (800e4fc <rand+0x5c>)
 800e4a2:	b510      	push	{r4, lr}
 800e4a4:	681c      	ldr	r4, [r3, #0]
 800e4a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e4a8:	b9b3      	cbnz	r3, 800e4d8 <rand+0x38>
 800e4aa:	2018      	movs	r0, #24
 800e4ac:	f000 fa2e 	bl	800e90c <malloc>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	6320      	str	r0, [r4, #48]	@ 0x30
 800e4b4:	b920      	cbnz	r0, 800e4c0 <rand+0x20>
 800e4b6:	4b12      	ldr	r3, [pc, #72]	@ (800e500 <rand+0x60>)
 800e4b8:	4812      	ldr	r0, [pc, #72]	@ (800e504 <rand+0x64>)
 800e4ba:	2152      	movs	r1, #82	@ 0x52
 800e4bc:	f000 f9be 	bl	800e83c <__assert_func>
 800e4c0:	4911      	ldr	r1, [pc, #68]	@ (800e508 <rand+0x68>)
 800e4c2:	4b12      	ldr	r3, [pc, #72]	@ (800e50c <rand+0x6c>)
 800e4c4:	e9c0 1300 	strd	r1, r3, [r0]
 800e4c8:	4b11      	ldr	r3, [pc, #68]	@ (800e510 <rand+0x70>)
 800e4ca:	6083      	str	r3, [r0, #8]
 800e4cc:	230b      	movs	r3, #11
 800e4ce:	8183      	strh	r3, [r0, #12]
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e4d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e4da:	480e      	ldr	r0, [pc, #56]	@ (800e514 <rand+0x74>)
 800e4dc:	690b      	ldr	r3, [r1, #16]
 800e4de:	694c      	ldr	r4, [r1, #20]
 800e4e0:	4a0d      	ldr	r2, [pc, #52]	@ (800e518 <rand+0x78>)
 800e4e2:	4358      	muls	r0, r3
 800e4e4:	fb02 0004 	mla	r0, r2, r4, r0
 800e4e8:	fba3 3202 	umull	r3, r2, r3, r2
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	eb40 0002 	adc.w	r0, r0, r2
 800e4f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e4f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e4fa:	bd10      	pop	{r4, pc}
 800e4fc:	20000168 	.word	0x20000168
 800e500:	0800f524 	.word	0x0800f524
 800e504:	0800f53b 	.word	0x0800f53b
 800e508:	abcd330e 	.word	0xabcd330e
 800e50c:	e66d1234 	.word	0xe66d1234
 800e510:	0005deec 	.word	0x0005deec
 800e514:	5851f42d 	.word	0x5851f42d
 800e518:	4c957f2d 	.word	0x4c957f2d

0800e51c <std>:
 800e51c:	2300      	movs	r3, #0
 800e51e:	b510      	push	{r4, lr}
 800e520:	4604      	mov	r4, r0
 800e522:	e9c0 3300 	strd	r3, r3, [r0]
 800e526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e52a:	6083      	str	r3, [r0, #8]
 800e52c:	8181      	strh	r1, [r0, #12]
 800e52e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e530:	81c2      	strh	r2, [r0, #14]
 800e532:	6183      	str	r3, [r0, #24]
 800e534:	4619      	mov	r1, r3
 800e536:	2208      	movs	r2, #8
 800e538:	305c      	adds	r0, #92	@ 0x5c
 800e53a:	f000 f8f4 	bl	800e726 <memset>
 800e53e:	4b0d      	ldr	r3, [pc, #52]	@ (800e574 <std+0x58>)
 800e540:	6263      	str	r3, [r4, #36]	@ 0x24
 800e542:	4b0d      	ldr	r3, [pc, #52]	@ (800e578 <std+0x5c>)
 800e544:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e546:	4b0d      	ldr	r3, [pc, #52]	@ (800e57c <std+0x60>)
 800e548:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e54a:	4b0d      	ldr	r3, [pc, #52]	@ (800e580 <std+0x64>)
 800e54c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e54e:	4b0d      	ldr	r3, [pc, #52]	@ (800e584 <std+0x68>)
 800e550:	6224      	str	r4, [r4, #32]
 800e552:	429c      	cmp	r4, r3
 800e554:	d006      	beq.n	800e564 <std+0x48>
 800e556:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e55a:	4294      	cmp	r4, r2
 800e55c:	d002      	beq.n	800e564 <std+0x48>
 800e55e:	33d0      	adds	r3, #208	@ 0xd0
 800e560:	429c      	cmp	r4, r3
 800e562:	d105      	bne.n	800e570 <std+0x54>
 800e564:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e56c:	f000 b954 	b.w	800e818 <__retarget_lock_init_recursive>
 800e570:	bd10      	pop	{r4, pc}
 800e572:	bf00      	nop
 800e574:	0800e6a1 	.word	0x0800e6a1
 800e578:	0800e6c3 	.word	0x0800e6c3
 800e57c:	0800e6fb 	.word	0x0800e6fb
 800e580:	0800e71f 	.word	0x0800e71f
 800e584:	20002d24 	.word	0x20002d24

0800e588 <stdio_exit_handler>:
 800e588:	4a02      	ldr	r2, [pc, #8]	@ (800e594 <stdio_exit_handler+0xc>)
 800e58a:	4903      	ldr	r1, [pc, #12]	@ (800e598 <stdio_exit_handler+0x10>)
 800e58c:	4803      	ldr	r0, [pc, #12]	@ (800e59c <stdio_exit_handler+0x14>)
 800e58e:	f000 b869 	b.w	800e664 <_fwalk_sglue>
 800e592:	bf00      	nop
 800e594:	2000015c 	.word	0x2000015c
 800e598:	0800ee99 	.word	0x0800ee99
 800e59c:	2000016c 	.word	0x2000016c

0800e5a0 <cleanup_stdio>:
 800e5a0:	6841      	ldr	r1, [r0, #4]
 800e5a2:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d4 <cleanup_stdio+0x34>)
 800e5a4:	4299      	cmp	r1, r3
 800e5a6:	b510      	push	{r4, lr}
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	d001      	beq.n	800e5b0 <cleanup_stdio+0x10>
 800e5ac:	f000 fc74 	bl	800ee98 <_fflush_r>
 800e5b0:	68a1      	ldr	r1, [r4, #8]
 800e5b2:	4b09      	ldr	r3, [pc, #36]	@ (800e5d8 <cleanup_stdio+0x38>)
 800e5b4:	4299      	cmp	r1, r3
 800e5b6:	d002      	beq.n	800e5be <cleanup_stdio+0x1e>
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f000 fc6d 	bl	800ee98 <_fflush_r>
 800e5be:	68e1      	ldr	r1, [r4, #12]
 800e5c0:	4b06      	ldr	r3, [pc, #24]	@ (800e5dc <cleanup_stdio+0x3c>)
 800e5c2:	4299      	cmp	r1, r3
 800e5c4:	d004      	beq.n	800e5d0 <cleanup_stdio+0x30>
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5cc:	f000 bc64 	b.w	800ee98 <_fflush_r>
 800e5d0:	bd10      	pop	{r4, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20002d24 	.word	0x20002d24
 800e5d8:	20002d8c 	.word	0x20002d8c
 800e5dc:	20002df4 	.word	0x20002df4

0800e5e0 <global_stdio_init.part.0>:
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e610 <global_stdio_init.part.0+0x30>)
 800e5e4:	4c0b      	ldr	r4, [pc, #44]	@ (800e614 <global_stdio_init.part.0+0x34>)
 800e5e6:	4a0c      	ldr	r2, [pc, #48]	@ (800e618 <global_stdio_init.part.0+0x38>)
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	2104      	movs	r1, #4
 800e5f0:	f7ff ff94 	bl	800e51c <std>
 800e5f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	2109      	movs	r1, #9
 800e5fc:	f7ff ff8e 	bl	800e51c <std>
 800e600:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e604:	2202      	movs	r2, #2
 800e606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e60a:	2112      	movs	r1, #18
 800e60c:	f7ff bf86 	b.w	800e51c <std>
 800e610:	20002e5c 	.word	0x20002e5c
 800e614:	20002d24 	.word	0x20002d24
 800e618:	0800e589 	.word	0x0800e589

0800e61c <__sfp_lock_acquire>:
 800e61c:	4801      	ldr	r0, [pc, #4]	@ (800e624 <__sfp_lock_acquire+0x8>)
 800e61e:	f000 b8fc 	b.w	800e81a <__retarget_lock_acquire_recursive>
 800e622:	bf00      	nop
 800e624:	20002e65 	.word	0x20002e65

0800e628 <__sfp_lock_release>:
 800e628:	4801      	ldr	r0, [pc, #4]	@ (800e630 <__sfp_lock_release+0x8>)
 800e62a:	f000 b8f7 	b.w	800e81c <__retarget_lock_release_recursive>
 800e62e:	bf00      	nop
 800e630:	20002e65 	.word	0x20002e65

0800e634 <__sinit>:
 800e634:	b510      	push	{r4, lr}
 800e636:	4604      	mov	r4, r0
 800e638:	f7ff fff0 	bl	800e61c <__sfp_lock_acquire>
 800e63c:	6a23      	ldr	r3, [r4, #32]
 800e63e:	b11b      	cbz	r3, 800e648 <__sinit+0x14>
 800e640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e644:	f7ff bff0 	b.w	800e628 <__sfp_lock_release>
 800e648:	4b04      	ldr	r3, [pc, #16]	@ (800e65c <__sinit+0x28>)
 800e64a:	6223      	str	r3, [r4, #32]
 800e64c:	4b04      	ldr	r3, [pc, #16]	@ (800e660 <__sinit+0x2c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d1f5      	bne.n	800e640 <__sinit+0xc>
 800e654:	f7ff ffc4 	bl	800e5e0 <global_stdio_init.part.0>
 800e658:	e7f2      	b.n	800e640 <__sinit+0xc>
 800e65a:	bf00      	nop
 800e65c:	0800e5a1 	.word	0x0800e5a1
 800e660:	20002e5c 	.word	0x20002e5c

0800e664 <_fwalk_sglue>:
 800e664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e668:	4607      	mov	r7, r0
 800e66a:	4688      	mov	r8, r1
 800e66c:	4614      	mov	r4, r2
 800e66e:	2600      	movs	r6, #0
 800e670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e674:	f1b9 0901 	subs.w	r9, r9, #1
 800e678:	d505      	bpl.n	800e686 <_fwalk_sglue+0x22>
 800e67a:	6824      	ldr	r4, [r4, #0]
 800e67c:	2c00      	cmp	r4, #0
 800e67e:	d1f7      	bne.n	800e670 <_fwalk_sglue+0xc>
 800e680:	4630      	mov	r0, r6
 800e682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e686:	89ab      	ldrh	r3, [r5, #12]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d907      	bls.n	800e69c <_fwalk_sglue+0x38>
 800e68c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e690:	3301      	adds	r3, #1
 800e692:	d003      	beq.n	800e69c <_fwalk_sglue+0x38>
 800e694:	4629      	mov	r1, r5
 800e696:	4638      	mov	r0, r7
 800e698:	47c0      	blx	r8
 800e69a:	4306      	orrs	r6, r0
 800e69c:	3568      	adds	r5, #104	@ 0x68
 800e69e:	e7e9      	b.n	800e674 <_fwalk_sglue+0x10>

0800e6a0 <__sread>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6a8:	f000 f868 	bl	800e77c <_read_r>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	bfab      	itete	ge
 800e6b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800e6b4:	181b      	addge	r3, r3, r0
 800e6b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e6ba:	bfac      	ite	ge
 800e6bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e6be:	81a3      	strhlt	r3, [r4, #12]
 800e6c0:	bd10      	pop	{r4, pc}

0800e6c2 <__swrite>:
 800e6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c6:	461f      	mov	r7, r3
 800e6c8:	898b      	ldrh	r3, [r1, #12]
 800e6ca:	05db      	lsls	r3, r3, #23
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	4616      	mov	r6, r2
 800e6d2:	d505      	bpl.n	800e6e0 <__swrite+0x1e>
 800e6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d8:	2302      	movs	r3, #2
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f000 f83c 	bl	800e758 <_lseek_r>
 800e6e0:	89a3      	ldrh	r3, [r4, #12]
 800e6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6ea:	81a3      	strh	r3, [r4, #12]
 800e6ec:	4632      	mov	r2, r6
 800e6ee:	463b      	mov	r3, r7
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f6:	f000 b853 	b.w	800e7a0 <_write_r>

0800e6fa <__sseek>:
 800e6fa:	b510      	push	{r4, lr}
 800e6fc:	460c      	mov	r4, r1
 800e6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e702:	f000 f829 	bl	800e758 <_lseek_r>
 800e706:	1c43      	adds	r3, r0, #1
 800e708:	89a3      	ldrh	r3, [r4, #12]
 800e70a:	bf15      	itete	ne
 800e70c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e70e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e716:	81a3      	strheq	r3, [r4, #12]
 800e718:	bf18      	it	ne
 800e71a:	81a3      	strhne	r3, [r4, #12]
 800e71c:	bd10      	pop	{r4, pc}

0800e71e <__sclose>:
 800e71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e722:	f000 b809 	b.w	800e738 <_close_r>

0800e726 <memset>:
 800e726:	4402      	add	r2, r0
 800e728:	4603      	mov	r3, r0
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d100      	bne.n	800e730 <memset+0xa>
 800e72e:	4770      	bx	lr
 800e730:	f803 1b01 	strb.w	r1, [r3], #1
 800e734:	e7f9      	b.n	800e72a <memset+0x4>
	...

0800e738 <_close_r>:
 800e738:	b538      	push	{r3, r4, r5, lr}
 800e73a:	4d06      	ldr	r5, [pc, #24]	@ (800e754 <_close_r+0x1c>)
 800e73c:	2300      	movs	r3, #0
 800e73e:	4604      	mov	r4, r0
 800e740:	4608      	mov	r0, r1
 800e742:	602b      	str	r3, [r5, #0]
 800e744:	f7f3 fe66 	bl	8002414 <_close>
 800e748:	1c43      	adds	r3, r0, #1
 800e74a:	d102      	bne.n	800e752 <_close_r+0x1a>
 800e74c:	682b      	ldr	r3, [r5, #0]
 800e74e:	b103      	cbz	r3, 800e752 <_close_r+0x1a>
 800e750:	6023      	str	r3, [r4, #0]
 800e752:	bd38      	pop	{r3, r4, r5, pc}
 800e754:	20002e60 	.word	0x20002e60

0800e758 <_lseek_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4d07      	ldr	r5, [pc, #28]	@ (800e778 <_lseek_r+0x20>)
 800e75c:	4604      	mov	r4, r0
 800e75e:	4608      	mov	r0, r1
 800e760:	4611      	mov	r1, r2
 800e762:	2200      	movs	r2, #0
 800e764:	602a      	str	r2, [r5, #0]
 800e766:	461a      	mov	r2, r3
 800e768:	f7f3 fe7b 	bl	8002462 <_lseek>
 800e76c:	1c43      	adds	r3, r0, #1
 800e76e:	d102      	bne.n	800e776 <_lseek_r+0x1e>
 800e770:	682b      	ldr	r3, [r5, #0]
 800e772:	b103      	cbz	r3, 800e776 <_lseek_r+0x1e>
 800e774:	6023      	str	r3, [r4, #0]
 800e776:	bd38      	pop	{r3, r4, r5, pc}
 800e778:	20002e60 	.word	0x20002e60

0800e77c <_read_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4d07      	ldr	r5, [pc, #28]	@ (800e79c <_read_r+0x20>)
 800e780:	4604      	mov	r4, r0
 800e782:	4608      	mov	r0, r1
 800e784:	4611      	mov	r1, r2
 800e786:	2200      	movs	r2, #0
 800e788:	602a      	str	r2, [r5, #0]
 800e78a:	461a      	mov	r2, r3
 800e78c:	f7f3 fe09 	bl	80023a2 <_read>
 800e790:	1c43      	adds	r3, r0, #1
 800e792:	d102      	bne.n	800e79a <_read_r+0x1e>
 800e794:	682b      	ldr	r3, [r5, #0]
 800e796:	b103      	cbz	r3, 800e79a <_read_r+0x1e>
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	bd38      	pop	{r3, r4, r5, pc}
 800e79c:	20002e60 	.word	0x20002e60

0800e7a0 <_write_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4d07      	ldr	r5, [pc, #28]	@ (800e7c0 <_write_r+0x20>)
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	4608      	mov	r0, r1
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	602a      	str	r2, [r5, #0]
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	f7f3 fe14 	bl	80023dc <_write>
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	d102      	bne.n	800e7be <_write_r+0x1e>
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	b103      	cbz	r3, 800e7be <_write_r+0x1e>
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	bd38      	pop	{r3, r4, r5, pc}
 800e7c0:	20002e60 	.word	0x20002e60

0800e7c4 <__errno>:
 800e7c4:	4b01      	ldr	r3, [pc, #4]	@ (800e7cc <__errno+0x8>)
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	20000168 	.word	0x20000168

0800e7d0 <__libc_init_array>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	4d0d      	ldr	r5, [pc, #52]	@ (800e808 <__libc_init_array+0x38>)
 800e7d4:	4c0d      	ldr	r4, [pc, #52]	@ (800e80c <__libc_init_array+0x3c>)
 800e7d6:	1b64      	subs	r4, r4, r5
 800e7d8:	10a4      	asrs	r4, r4, #2
 800e7da:	2600      	movs	r6, #0
 800e7dc:	42a6      	cmp	r6, r4
 800e7de:	d109      	bne.n	800e7f4 <__libc_init_array+0x24>
 800e7e0:	4d0b      	ldr	r5, [pc, #44]	@ (800e810 <__libc_init_array+0x40>)
 800e7e2:	4c0c      	ldr	r4, [pc, #48]	@ (800e814 <__libc_init_array+0x44>)
 800e7e4:	f000 fe46 	bl	800f474 <_init>
 800e7e8:	1b64      	subs	r4, r4, r5
 800e7ea:	10a4      	asrs	r4, r4, #2
 800e7ec:	2600      	movs	r6, #0
 800e7ee:	42a6      	cmp	r6, r4
 800e7f0:	d105      	bne.n	800e7fe <__libc_init_array+0x2e>
 800e7f2:	bd70      	pop	{r4, r5, r6, pc}
 800e7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7f8:	4798      	blx	r3
 800e7fa:	3601      	adds	r6, #1
 800e7fc:	e7ee      	b.n	800e7dc <__libc_init_array+0xc>
 800e7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e802:	4798      	blx	r3
 800e804:	3601      	adds	r6, #1
 800e806:	e7f2      	b.n	800e7ee <__libc_init_array+0x1e>
 800e808:	0800f60c 	.word	0x0800f60c
 800e80c:	0800f60c 	.word	0x0800f60c
 800e810:	0800f60c 	.word	0x0800f60c
 800e814:	0800f610 	.word	0x0800f610

0800e818 <__retarget_lock_init_recursive>:
 800e818:	4770      	bx	lr

0800e81a <__retarget_lock_acquire_recursive>:
 800e81a:	4770      	bx	lr

0800e81c <__retarget_lock_release_recursive>:
 800e81c:	4770      	bx	lr

0800e81e <memcpy>:
 800e81e:	440a      	add	r2, r1
 800e820:	4291      	cmp	r1, r2
 800e822:	f100 33ff 	add.w	r3, r0, #4294967295
 800e826:	d100      	bne.n	800e82a <memcpy+0xc>
 800e828:	4770      	bx	lr
 800e82a:	b510      	push	{r4, lr}
 800e82c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e830:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e834:	4291      	cmp	r1, r2
 800e836:	d1f9      	bne.n	800e82c <memcpy+0xe>
 800e838:	bd10      	pop	{r4, pc}
	...

0800e83c <__assert_func>:
 800e83c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e83e:	4614      	mov	r4, r2
 800e840:	461a      	mov	r2, r3
 800e842:	4b09      	ldr	r3, [pc, #36]	@ (800e868 <__assert_func+0x2c>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4605      	mov	r5, r0
 800e848:	68d8      	ldr	r0, [r3, #12]
 800e84a:	b14c      	cbz	r4, 800e860 <__assert_func+0x24>
 800e84c:	4b07      	ldr	r3, [pc, #28]	@ (800e86c <__assert_func+0x30>)
 800e84e:	9100      	str	r1, [sp, #0]
 800e850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e854:	4906      	ldr	r1, [pc, #24]	@ (800e870 <__assert_func+0x34>)
 800e856:	462b      	mov	r3, r5
 800e858:	f000 fb46 	bl	800eee8 <fiprintf>
 800e85c:	f000 fb66 	bl	800ef2c <abort>
 800e860:	4b04      	ldr	r3, [pc, #16]	@ (800e874 <__assert_func+0x38>)
 800e862:	461c      	mov	r4, r3
 800e864:	e7f3      	b.n	800e84e <__assert_func+0x12>
 800e866:	bf00      	nop
 800e868:	20000168 	.word	0x20000168
 800e86c:	0800f593 	.word	0x0800f593
 800e870:	0800f5a0 	.word	0x0800f5a0
 800e874:	0800f5ce 	.word	0x0800f5ce

0800e878 <_free_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4605      	mov	r5, r0
 800e87c:	2900      	cmp	r1, #0
 800e87e:	d041      	beq.n	800e904 <_free_r+0x8c>
 800e880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e884:	1f0c      	subs	r4, r1, #4
 800e886:	2b00      	cmp	r3, #0
 800e888:	bfb8      	it	lt
 800e88a:	18e4      	addlt	r4, r4, r3
 800e88c:	f000 f8e8 	bl	800ea60 <__malloc_lock>
 800e890:	4a1d      	ldr	r2, [pc, #116]	@ (800e908 <_free_r+0x90>)
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	b933      	cbnz	r3, 800e8a4 <_free_r+0x2c>
 800e896:	6063      	str	r3, [r4, #4]
 800e898:	6014      	str	r4, [r2, #0]
 800e89a:	4628      	mov	r0, r5
 800e89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8a0:	f000 b8e4 	b.w	800ea6c <__malloc_unlock>
 800e8a4:	42a3      	cmp	r3, r4
 800e8a6:	d908      	bls.n	800e8ba <_free_r+0x42>
 800e8a8:	6820      	ldr	r0, [r4, #0]
 800e8aa:	1821      	adds	r1, r4, r0
 800e8ac:	428b      	cmp	r3, r1
 800e8ae:	bf01      	itttt	eq
 800e8b0:	6819      	ldreq	r1, [r3, #0]
 800e8b2:	685b      	ldreq	r3, [r3, #4]
 800e8b4:	1809      	addeq	r1, r1, r0
 800e8b6:	6021      	streq	r1, [r4, #0]
 800e8b8:	e7ed      	b.n	800e896 <_free_r+0x1e>
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	b10b      	cbz	r3, 800e8c4 <_free_r+0x4c>
 800e8c0:	42a3      	cmp	r3, r4
 800e8c2:	d9fa      	bls.n	800e8ba <_free_r+0x42>
 800e8c4:	6811      	ldr	r1, [r2, #0]
 800e8c6:	1850      	adds	r0, r2, r1
 800e8c8:	42a0      	cmp	r0, r4
 800e8ca:	d10b      	bne.n	800e8e4 <_free_r+0x6c>
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	4401      	add	r1, r0
 800e8d0:	1850      	adds	r0, r2, r1
 800e8d2:	4283      	cmp	r3, r0
 800e8d4:	6011      	str	r1, [r2, #0]
 800e8d6:	d1e0      	bne.n	800e89a <_free_r+0x22>
 800e8d8:	6818      	ldr	r0, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	6053      	str	r3, [r2, #4]
 800e8de:	4408      	add	r0, r1
 800e8e0:	6010      	str	r0, [r2, #0]
 800e8e2:	e7da      	b.n	800e89a <_free_r+0x22>
 800e8e4:	d902      	bls.n	800e8ec <_free_r+0x74>
 800e8e6:	230c      	movs	r3, #12
 800e8e8:	602b      	str	r3, [r5, #0]
 800e8ea:	e7d6      	b.n	800e89a <_free_r+0x22>
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	1821      	adds	r1, r4, r0
 800e8f0:	428b      	cmp	r3, r1
 800e8f2:	bf04      	itt	eq
 800e8f4:	6819      	ldreq	r1, [r3, #0]
 800e8f6:	685b      	ldreq	r3, [r3, #4]
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	bf04      	itt	eq
 800e8fc:	1809      	addeq	r1, r1, r0
 800e8fe:	6021      	streq	r1, [r4, #0]
 800e900:	6054      	str	r4, [r2, #4]
 800e902:	e7ca      	b.n	800e89a <_free_r+0x22>
 800e904:	bd38      	pop	{r3, r4, r5, pc}
 800e906:	bf00      	nop
 800e908:	20002e6c 	.word	0x20002e6c

0800e90c <malloc>:
 800e90c:	4b02      	ldr	r3, [pc, #8]	@ (800e918 <malloc+0xc>)
 800e90e:	4601      	mov	r1, r0
 800e910:	6818      	ldr	r0, [r3, #0]
 800e912:	f000 b825 	b.w	800e960 <_malloc_r>
 800e916:	bf00      	nop
 800e918:	20000168 	.word	0x20000168

0800e91c <sbrk_aligned>:
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	4e0f      	ldr	r6, [pc, #60]	@ (800e95c <sbrk_aligned+0x40>)
 800e920:	460c      	mov	r4, r1
 800e922:	6831      	ldr	r1, [r6, #0]
 800e924:	4605      	mov	r5, r0
 800e926:	b911      	cbnz	r1, 800e92e <sbrk_aligned+0x12>
 800e928:	f000 faf0 	bl	800ef0c <_sbrk_r>
 800e92c:	6030      	str	r0, [r6, #0]
 800e92e:	4621      	mov	r1, r4
 800e930:	4628      	mov	r0, r5
 800e932:	f000 faeb 	bl	800ef0c <_sbrk_r>
 800e936:	1c43      	adds	r3, r0, #1
 800e938:	d103      	bne.n	800e942 <sbrk_aligned+0x26>
 800e93a:	f04f 34ff 	mov.w	r4, #4294967295
 800e93e:	4620      	mov	r0, r4
 800e940:	bd70      	pop	{r4, r5, r6, pc}
 800e942:	1cc4      	adds	r4, r0, #3
 800e944:	f024 0403 	bic.w	r4, r4, #3
 800e948:	42a0      	cmp	r0, r4
 800e94a:	d0f8      	beq.n	800e93e <sbrk_aligned+0x22>
 800e94c:	1a21      	subs	r1, r4, r0
 800e94e:	4628      	mov	r0, r5
 800e950:	f000 fadc 	bl	800ef0c <_sbrk_r>
 800e954:	3001      	adds	r0, #1
 800e956:	d1f2      	bne.n	800e93e <sbrk_aligned+0x22>
 800e958:	e7ef      	b.n	800e93a <sbrk_aligned+0x1e>
 800e95a:	bf00      	nop
 800e95c:	20002e68 	.word	0x20002e68

0800e960 <_malloc_r>:
 800e960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e964:	1ccd      	adds	r5, r1, #3
 800e966:	f025 0503 	bic.w	r5, r5, #3
 800e96a:	3508      	adds	r5, #8
 800e96c:	2d0c      	cmp	r5, #12
 800e96e:	bf38      	it	cc
 800e970:	250c      	movcc	r5, #12
 800e972:	2d00      	cmp	r5, #0
 800e974:	4606      	mov	r6, r0
 800e976:	db01      	blt.n	800e97c <_malloc_r+0x1c>
 800e978:	42a9      	cmp	r1, r5
 800e97a:	d904      	bls.n	800e986 <_malloc_r+0x26>
 800e97c:	230c      	movs	r3, #12
 800e97e:	6033      	str	r3, [r6, #0]
 800e980:	2000      	movs	r0, #0
 800e982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea5c <_malloc_r+0xfc>
 800e98a:	f000 f869 	bl	800ea60 <__malloc_lock>
 800e98e:	f8d8 3000 	ldr.w	r3, [r8]
 800e992:	461c      	mov	r4, r3
 800e994:	bb44      	cbnz	r4, 800e9e8 <_malloc_r+0x88>
 800e996:	4629      	mov	r1, r5
 800e998:	4630      	mov	r0, r6
 800e99a:	f7ff ffbf 	bl	800e91c <sbrk_aligned>
 800e99e:	1c43      	adds	r3, r0, #1
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	d158      	bne.n	800ea56 <_malloc_r+0xf6>
 800e9a4:	f8d8 4000 	ldr.w	r4, [r8]
 800e9a8:	4627      	mov	r7, r4
 800e9aa:	2f00      	cmp	r7, #0
 800e9ac:	d143      	bne.n	800ea36 <_malloc_r+0xd6>
 800e9ae:	2c00      	cmp	r4, #0
 800e9b0:	d04b      	beq.n	800ea4a <_malloc_r+0xea>
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	eb04 0903 	add.w	r9, r4, r3
 800e9bc:	f000 faa6 	bl	800ef0c <_sbrk_r>
 800e9c0:	4581      	cmp	r9, r0
 800e9c2:	d142      	bne.n	800ea4a <_malloc_r+0xea>
 800e9c4:	6821      	ldr	r1, [r4, #0]
 800e9c6:	1a6d      	subs	r5, r5, r1
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f7ff ffa6 	bl	800e91c <sbrk_aligned>
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d03a      	beq.n	800ea4a <_malloc_r+0xea>
 800e9d4:	6823      	ldr	r3, [r4, #0]
 800e9d6:	442b      	add	r3, r5
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	f8d8 3000 	ldr.w	r3, [r8]
 800e9de:	685a      	ldr	r2, [r3, #4]
 800e9e0:	bb62      	cbnz	r2, 800ea3c <_malloc_r+0xdc>
 800e9e2:	f8c8 7000 	str.w	r7, [r8]
 800e9e6:	e00f      	b.n	800ea08 <_malloc_r+0xa8>
 800e9e8:	6822      	ldr	r2, [r4, #0]
 800e9ea:	1b52      	subs	r2, r2, r5
 800e9ec:	d420      	bmi.n	800ea30 <_malloc_r+0xd0>
 800e9ee:	2a0b      	cmp	r2, #11
 800e9f0:	d917      	bls.n	800ea22 <_malloc_r+0xc2>
 800e9f2:	1961      	adds	r1, r4, r5
 800e9f4:	42a3      	cmp	r3, r4
 800e9f6:	6025      	str	r5, [r4, #0]
 800e9f8:	bf18      	it	ne
 800e9fa:	6059      	strne	r1, [r3, #4]
 800e9fc:	6863      	ldr	r3, [r4, #4]
 800e9fe:	bf08      	it	eq
 800ea00:	f8c8 1000 	streq.w	r1, [r8]
 800ea04:	5162      	str	r2, [r4, r5]
 800ea06:	604b      	str	r3, [r1, #4]
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f000 f82f 	bl	800ea6c <__malloc_unlock>
 800ea0e:	f104 000b 	add.w	r0, r4, #11
 800ea12:	1d23      	adds	r3, r4, #4
 800ea14:	f020 0007 	bic.w	r0, r0, #7
 800ea18:	1ac2      	subs	r2, r0, r3
 800ea1a:	bf1c      	itt	ne
 800ea1c:	1a1b      	subne	r3, r3, r0
 800ea1e:	50a3      	strne	r3, [r4, r2]
 800ea20:	e7af      	b.n	800e982 <_malloc_r+0x22>
 800ea22:	6862      	ldr	r2, [r4, #4]
 800ea24:	42a3      	cmp	r3, r4
 800ea26:	bf0c      	ite	eq
 800ea28:	f8c8 2000 	streq.w	r2, [r8]
 800ea2c:	605a      	strne	r2, [r3, #4]
 800ea2e:	e7eb      	b.n	800ea08 <_malloc_r+0xa8>
 800ea30:	4623      	mov	r3, r4
 800ea32:	6864      	ldr	r4, [r4, #4]
 800ea34:	e7ae      	b.n	800e994 <_malloc_r+0x34>
 800ea36:	463c      	mov	r4, r7
 800ea38:	687f      	ldr	r7, [r7, #4]
 800ea3a:	e7b6      	b.n	800e9aa <_malloc_r+0x4a>
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	42a3      	cmp	r3, r4
 800ea42:	d1fb      	bne.n	800ea3c <_malloc_r+0xdc>
 800ea44:	2300      	movs	r3, #0
 800ea46:	6053      	str	r3, [r2, #4]
 800ea48:	e7de      	b.n	800ea08 <_malloc_r+0xa8>
 800ea4a:	230c      	movs	r3, #12
 800ea4c:	6033      	str	r3, [r6, #0]
 800ea4e:	4630      	mov	r0, r6
 800ea50:	f000 f80c 	bl	800ea6c <__malloc_unlock>
 800ea54:	e794      	b.n	800e980 <_malloc_r+0x20>
 800ea56:	6005      	str	r5, [r0, #0]
 800ea58:	e7d6      	b.n	800ea08 <_malloc_r+0xa8>
 800ea5a:	bf00      	nop
 800ea5c:	20002e6c 	.word	0x20002e6c

0800ea60 <__malloc_lock>:
 800ea60:	4801      	ldr	r0, [pc, #4]	@ (800ea68 <__malloc_lock+0x8>)
 800ea62:	f7ff beda 	b.w	800e81a <__retarget_lock_acquire_recursive>
 800ea66:	bf00      	nop
 800ea68:	20002e64 	.word	0x20002e64

0800ea6c <__malloc_unlock>:
 800ea6c:	4801      	ldr	r0, [pc, #4]	@ (800ea74 <__malloc_unlock+0x8>)
 800ea6e:	f7ff bed5 	b.w	800e81c <__retarget_lock_release_recursive>
 800ea72:	bf00      	nop
 800ea74:	20002e64 	.word	0x20002e64

0800ea78 <_printf_common>:
 800ea78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea7c:	4616      	mov	r6, r2
 800ea7e:	4698      	mov	r8, r3
 800ea80:	688a      	ldr	r2, [r1, #8]
 800ea82:	690b      	ldr	r3, [r1, #16]
 800ea84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	bfb8      	it	lt
 800ea8c:	4613      	movlt	r3, r2
 800ea8e:	6033      	str	r3, [r6, #0]
 800ea90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea94:	4607      	mov	r7, r0
 800ea96:	460c      	mov	r4, r1
 800ea98:	b10a      	cbz	r2, 800ea9e <_printf_common+0x26>
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	6033      	str	r3, [r6, #0]
 800ea9e:	6823      	ldr	r3, [r4, #0]
 800eaa0:	0699      	lsls	r1, r3, #26
 800eaa2:	bf42      	ittt	mi
 800eaa4:	6833      	ldrmi	r3, [r6, #0]
 800eaa6:	3302      	addmi	r3, #2
 800eaa8:	6033      	strmi	r3, [r6, #0]
 800eaaa:	6825      	ldr	r5, [r4, #0]
 800eaac:	f015 0506 	ands.w	r5, r5, #6
 800eab0:	d106      	bne.n	800eac0 <_printf_common+0x48>
 800eab2:	f104 0a19 	add.w	sl, r4, #25
 800eab6:	68e3      	ldr	r3, [r4, #12]
 800eab8:	6832      	ldr	r2, [r6, #0]
 800eaba:	1a9b      	subs	r3, r3, r2
 800eabc:	42ab      	cmp	r3, r5
 800eabe:	dc26      	bgt.n	800eb0e <_printf_common+0x96>
 800eac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eac4:	6822      	ldr	r2, [r4, #0]
 800eac6:	3b00      	subs	r3, #0
 800eac8:	bf18      	it	ne
 800eaca:	2301      	movne	r3, #1
 800eacc:	0692      	lsls	r2, r2, #26
 800eace:	d42b      	bmi.n	800eb28 <_printf_common+0xb0>
 800ead0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ead4:	4641      	mov	r1, r8
 800ead6:	4638      	mov	r0, r7
 800ead8:	47c8      	blx	r9
 800eada:	3001      	adds	r0, #1
 800eadc:	d01e      	beq.n	800eb1c <_printf_common+0xa4>
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	6922      	ldr	r2, [r4, #16]
 800eae2:	f003 0306 	and.w	r3, r3, #6
 800eae6:	2b04      	cmp	r3, #4
 800eae8:	bf02      	ittt	eq
 800eaea:	68e5      	ldreq	r5, [r4, #12]
 800eaec:	6833      	ldreq	r3, [r6, #0]
 800eaee:	1aed      	subeq	r5, r5, r3
 800eaf0:	68a3      	ldr	r3, [r4, #8]
 800eaf2:	bf0c      	ite	eq
 800eaf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eaf8:	2500      	movne	r5, #0
 800eafa:	4293      	cmp	r3, r2
 800eafc:	bfc4      	itt	gt
 800eafe:	1a9b      	subgt	r3, r3, r2
 800eb00:	18ed      	addgt	r5, r5, r3
 800eb02:	2600      	movs	r6, #0
 800eb04:	341a      	adds	r4, #26
 800eb06:	42b5      	cmp	r5, r6
 800eb08:	d11a      	bne.n	800eb40 <_printf_common+0xc8>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e008      	b.n	800eb20 <_printf_common+0xa8>
 800eb0e:	2301      	movs	r3, #1
 800eb10:	4652      	mov	r2, sl
 800eb12:	4641      	mov	r1, r8
 800eb14:	4638      	mov	r0, r7
 800eb16:	47c8      	blx	r9
 800eb18:	3001      	adds	r0, #1
 800eb1a:	d103      	bne.n	800eb24 <_printf_common+0xac>
 800eb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb24:	3501      	adds	r5, #1
 800eb26:	e7c6      	b.n	800eab6 <_printf_common+0x3e>
 800eb28:	18e1      	adds	r1, r4, r3
 800eb2a:	1c5a      	adds	r2, r3, #1
 800eb2c:	2030      	movs	r0, #48	@ 0x30
 800eb2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb32:	4422      	add	r2, r4
 800eb34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb3c:	3302      	adds	r3, #2
 800eb3e:	e7c7      	b.n	800ead0 <_printf_common+0x58>
 800eb40:	2301      	movs	r3, #1
 800eb42:	4622      	mov	r2, r4
 800eb44:	4641      	mov	r1, r8
 800eb46:	4638      	mov	r0, r7
 800eb48:	47c8      	blx	r9
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	d0e6      	beq.n	800eb1c <_printf_common+0xa4>
 800eb4e:	3601      	adds	r6, #1
 800eb50:	e7d9      	b.n	800eb06 <_printf_common+0x8e>
	...

0800eb54 <_printf_i>:
 800eb54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb58:	7e0f      	ldrb	r7, [r1, #24]
 800eb5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb5c:	2f78      	cmp	r7, #120	@ 0x78
 800eb5e:	4691      	mov	r9, r2
 800eb60:	4680      	mov	r8, r0
 800eb62:	460c      	mov	r4, r1
 800eb64:	469a      	mov	sl, r3
 800eb66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb6a:	d807      	bhi.n	800eb7c <_printf_i+0x28>
 800eb6c:	2f62      	cmp	r7, #98	@ 0x62
 800eb6e:	d80a      	bhi.n	800eb86 <_printf_i+0x32>
 800eb70:	2f00      	cmp	r7, #0
 800eb72:	f000 80d1 	beq.w	800ed18 <_printf_i+0x1c4>
 800eb76:	2f58      	cmp	r7, #88	@ 0x58
 800eb78:	f000 80b8 	beq.w	800ecec <_printf_i+0x198>
 800eb7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb84:	e03a      	b.n	800ebfc <_printf_i+0xa8>
 800eb86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb8a:	2b15      	cmp	r3, #21
 800eb8c:	d8f6      	bhi.n	800eb7c <_printf_i+0x28>
 800eb8e:	a101      	add	r1, pc, #4	@ (adr r1, 800eb94 <_printf_i+0x40>)
 800eb90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb94:	0800ebed 	.word	0x0800ebed
 800eb98:	0800ec01 	.word	0x0800ec01
 800eb9c:	0800eb7d 	.word	0x0800eb7d
 800eba0:	0800eb7d 	.word	0x0800eb7d
 800eba4:	0800eb7d 	.word	0x0800eb7d
 800eba8:	0800eb7d 	.word	0x0800eb7d
 800ebac:	0800ec01 	.word	0x0800ec01
 800ebb0:	0800eb7d 	.word	0x0800eb7d
 800ebb4:	0800eb7d 	.word	0x0800eb7d
 800ebb8:	0800eb7d 	.word	0x0800eb7d
 800ebbc:	0800eb7d 	.word	0x0800eb7d
 800ebc0:	0800ecff 	.word	0x0800ecff
 800ebc4:	0800ec2b 	.word	0x0800ec2b
 800ebc8:	0800ecb9 	.word	0x0800ecb9
 800ebcc:	0800eb7d 	.word	0x0800eb7d
 800ebd0:	0800eb7d 	.word	0x0800eb7d
 800ebd4:	0800ed21 	.word	0x0800ed21
 800ebd8:	0800eb7d 	.word	0x0800eb7d
 800ebdc:	0800ec2b 	.word	0x0800ec2b
 800ebe0:	0800eb7d 	.word	0x0800eb7d
 800ebe4:	0800eb7d 	.word	0x0800eb7d
 800ebe8:	0800ecc1 	.word	0x0800ecc1
 800ebec:	6833      	ldr	r3, [r6, #0]
 800ebee:	1d1a      	adds	r2, r3, #4
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	6032      	str	r2, [r6, #0]
 800ebf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e09c      	b.n	800ed3a <_printf_i+0x1e6>
 800ec00:	6833      	ldr	r3, [r6, #0]
 800ec02:	6820      	ldr	r0, [r4, #0]
 800ec04:	1d19      	adds	r1, r3, #4
 800ec06:	6031      	str	r1, [r6, #0]
 800ec08:	0606      	lsls	r6, r0, #24
 800ec0a:	d501      	bpl.n	800ec10 <_printf_i+0xbc>
 800ec0c:	681d      	ldr	r5, [r3, #0]
 800ec0e:	e003      	b.n	800ec18 <_printf_i+0xc4>
 800ec10:	0645      	lsls	r5, r0, #25
 800ec12:	d5fb      	bpl.n	800ec0c <_printf_i+0xb8>
 800ec14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec18:	2d00      	cmp	r5, #0
 800ec1a:	da03      	bge.n	800ec24 <_printf_i+0xd0>
 800ec1c:	232d      	movs	r3, #45	@ 0x2d
 800ec1e:	426d      	negs	r5, r5
 800ec20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec24:	4858      	ldr	r0, [pc, #352]	@ (800ed88 <_printf_i+0x234>)
 800ec26:	230a      	movs	r3, #10
 800ec28:	e011      	b.n	800ec4e <_printf_i+0xfa>
 800ec2a:	6821      	ldr	r1, [r4, #0]
 800ec2c:	6833      	ldr	r3, [r6, #0]
 800ec2e:	0608      	lsls	r0, r1, #24
 800ec30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec34:	d402      	bmi.n	800ec3c <_printf_i+0xe8>
 800ec36:	0649      	lsls	r1, r1, #25
 800ec38:	bf48      	it	mi
 800ec3a:	b2ad      	uxthmi	r5, r5
 800ec3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec3e:	4852      	ldr	r0, [pc, #328]	@ (800ed88 <_printf_i+0x234>)
 800ec40:	6033      	str	r3, [r6, #0]
 800ec42:	bf14      	ite	ne
 800ec44:	230a      	movne	r3, #10
 800ec46:	2308      	moveq	r3, #8
 800ec48:	2100      	movs	r1, #0
 800ec4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec4e:	6866      	ldr	r6, [r4, #4]
 800ec50:	60a6      	str	r6, [r4, #8]
 800ec52:	2e00      	cmp	r6, #0
 800ec54:	db05      	blt.n	800ec62 <_printf_i+0x10e>
 800ec56:	6821      	ldr	r1, [r4, #0]
 800ec58:	432e      	orrs	r6, r5
 800ec5a:	f021 0104 	bic.w	r1, r1, #4
 800ec5e:	6021      	str	r1, [r4, #0]
 800ec60:	d04b      	beq.n	800ecfa <_printf_i+0x1a6>
 800ec62:	4616      	mov	r6, r2
 800ec64:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec68:	fb03 5711 	mls	r7, r3, r1, r5
 800ec6c:	5dc7      	ldrb	r7, [r0, r7]
 800ec6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec72:	462f      	mov	r7, r5
 800ec74:	42bb      	cmp	r3, r7
 800ec76:	460d      	mov	r5, r1
 800ec78:	d9f4      	bls.n	800ec64 <_printf_i+0x110>
 800ec7a:	2b08      	cmp	r3, #8
 800ec7c:	d10b      	bne.n	800ec96 <_printf_i+0x142>
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	07df      	lsls	r7, r3, #31
 800ec82:	d508      	bpl.n	800ec96 <_printf_i+0x142>
 800ec84:	6923      	ldr	r3, [r4, #16]
 800ec86:	6861      	ldr	r1, [r4, #4]
 800ec88:	4299      	cmp	r1, r3
 800ec8a:	bfde      	ittt	le
 800ec8c:	2330      	movle	r3, #48	@ 0x30
 800ec8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec92:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec96:	1b92      	subs	r2, r2, r6
 800ec98:	6122      	str	r2, [r4, #16]
 800ec9a:	f8cd a000 	str.w	sl, [sp]
 800ec9e:	464b      	mov	r3, r9
 800eca0:	aa03      	add	r2, sp, #12
 800eca2:	4621      	mov	r1, r4
 800eca4:	4640      	mov	r0, r8
 800eca6:	f7ff fee7 	bl	800ea78 <_printf_common>
 800ecaa:	3001      	adds	r0, #1
 800ecac:	d14a      	bne.n	800ed44 <_printf_i+0x1f0>
 800ecae:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb2:	b004      	add	sp, #16
 800ecb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	f043 0320 	orr.w	r3, r3, #32
 800ecbe:	6023      	str	r3, [r4, #0]
 800ecc0:	4832      	ldr	r0, [pc, #200]	@ (800ed8c <_printf_i+0x238>)
 800ecc2:	2778      	movs	r7, #120	@ 0x78
 800ecc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ecc8:	6823      	ldr	r3, [r4, #0]
 800ecca:	6831      	ldr	r1, [r6, #0]
 800eccc:	061f      	lsls	r7, r3, #24
 800ecce:	f851 5b04 	ldr.w	r5, [r1], #4
 800ecd2:	d402      	bmi.n	800ecda <_printf_i+0x186>
 800ecd4:	065f      	lsls	r7, r3, #25
 800ecd6:	bf48      	it	mi
 800ecd8:	b2ad      	uxthmi	r5, r5
 800ecda:	6031      	str	r1, [r6, #0]
 800ecdc:	07d9      	lsls	r1, r3, #31
 800ecde:	bf44      	itt	mi
 800ece0:	f043 0320 	orrmi.w	r3, r3, #32
 800ece4:	6023      	strmi	r3, [r4, #0]
 800ece6:	b11d      	cbz	r5, 800ecf0 <_printf_i+0x19c>
 800ece8:	2310      	movs	r3, #16
 800ecea:	e7ad      	b.n	800ec48 <_printf_i+0xf4>
 800ecec:	4826      	ldr	r0, [pc, #152]	@ (800ed88 <_printf_i+0x234>)
 800ecee:	e7e9      	b.n	800ecc4 <_printf_i+0x170>
 800ecf0:	6823      	ldr	r3, [r4, #0]
 800ecf2:	f023 0320 	bic.w	r3, r3, #32
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	e7f6      	b.n	800ece8 <_printf_i+0x194>
 800ecfa:	4616      	mov	r6, r2
 800ecfc:	e7bd      	b.n	800ec7a <_printf_i+0x126>
 800ecfe:	6833      	ldr	r3, [r6, #0]
 800ed00:	6825      	ldr	r5, [r4, #0]
 800ed02:	6961      	ldr	r1, [r4, #20]
 800ed04:	1d18      	adds	r0, r3, #4
 800ed06:	6030      	str	r0, [r6, #0]
 800ed08:	062e      	lsls	r6, r5, #24
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	d501      	bpl.n	800ed12 <_printf_i+0x1be>
 800ed0e:	6019      	str	r1, [r3, #0]
 800ed10:	e002      	b.n	800ed18 <_printf_i+0x1c4>
 800ed12:	0668      	lsls	r0, r5, #25
 800ed14:	d5fb      	bpl.n	800ed0e <_printf_i+0x1ba>
 800ed16:	8019      	strh	r1, [r3, #0]
 800ed18:	2300      	movs	r3, #0
 800ed1a:	6123      	str	r3, [r4, #16]
 800ed1c:	4616      	mov	r6, r2
 800ed1e:	e7bc      	b.n	800ec9a <_printf_i+0x146>
 800ed20:	6833      	ldr	r3, [r6, #0]
 800ed22:	1d1a      	adds	r2, r3, #4
 800ed24:	6032      	str	r2, [r6, #0]
 800ed26:	681e      	ldr	r6, [r3, #0]
 800ed28:	6862      	ldr	r2, [r4, #4]
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	f7f1 fa77 	bl	8000220 <memchr>
 800ed32:	b108      	cbz	r0, 800ed38 <_printf_i+0x1e4>
 800ed34:	1b80      	subs	r0, r0, r6
 800ed36:	6060      	str	r0, [r4, #4]
 800ed38:	6863      	ldr	r3, [r4, #4]
 800ed3a:	6123      	str	r3, [r4, #16]
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed42:	e7aa      	b.n	800ec9a <_printf_i+0x146>
 800ed44:	6923      	ldr	r3, [r4, #16]
 800ed46:	4632      	mov	r2, r6
 800ed48:	4649      	mov	r1, r9
 800ed4a:	4640      	mov	r0, r8
 800ed4c:	47d0      	blx	sl
 800ed4e:	3001      	adds	r0, #1
 800ed50:	d0ad      	beq.n	800ecae <_printf_i+0x15a>
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	079b      	lsls	r3, r3, #30
 800ed56:	d413      	bmi.n	800ed80 <_printf_i+0x22c>
 800ed58:	68e0      	ldr	r0, [r4, #12]
 800ed5a:	9b03      	ldr	r3, [sp, #12]
 800ed5c:	4298      	cmp	r0, r3
 800ed5e:	bfb8      	it	lt
 800ed60:	4618      	movlt	r0, r3
 800ed62:	e7a6      	b.n	800ecb2 <_printf_i+0x15e>
 800ed64:	2301      	movs	r3, #1
 800ed66:	4632      	mov	r2, r6
 800ed68:	4649      	mov	r1, r9
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	47d0      	blx	sl
 800ed6e:	3001      	adds	r0, #1
 800ed70:	d09d      	beq.n	800ecae <_printf_i+0x15a>
 800ed72:	3501      	adds	r5, #1
 800ed74:	68e3      	ldr	r3, [r4, #12]
 800ed76:	9903      	ldr	r1, [sp, #12]
 800ed78:	1a5b      	subs	r3, r3, r1
 800ed7a:	42ab      	cmp	r3, r5
 800ed7c:	dcf2      	bgt.n	800ed64 <_printf_i+0x210>
 800ed7e:	e7eb      	b.n	800ed58 <_printf_i+0x204>
 800ed80:	2500      	movs	r5, #0
 800ed82:	f104 0619 	add.w	r6, r4, #25
 800ed86:	e7f5      	b.n	800ed74 <_printf_i+0x220>
 800ed88:	0800f5cf 	.word	0x0800f5cf
 800ed8c:	0800f5e0 	.word	0x0800f5e0

0800ed90 <__sflush_r>:
 800ed90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed98:	0716      	lsls	r6, r2, #28
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	d454      	bmi.n	800ee4a <__sflush_r+0xba>
 800eda0:	684b      	ldr	r3, [r1, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	dc02      	bgt.n	800edac <__sflush_r+0x1c>
 800eda6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	dd48      	ble.n	800ee3e <__sflush_r+0xae>
 800edac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edae:	2e00      	cmp	r6, #0
 800edb0:	d045      	beq.n	800ee3e <__sflush_r+0xae>
 800edb2:	2300      	movs	r3, #0
 800edb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800edb8:	682f      	ldr	r7, [r5, #0]
 800edba:	6a21      	ldr	r1, [r4, #32]
 800edbc:	602b      	str	r3, [r5, #0]
 800edbe:	d030      	beq.n	800ee22 <__sflush_r+0x92>
 800edc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	0759      	lsls	r1, r3, #29
 800edc6:	d505      	bpl.n	800edd4 <__sflush_r+0x44>
 800edc8:	6863      	ldr	r3, [r4, #4]
 800edca:	1ad2      	subs	r2, r2, r3
 800edcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800edce:	b10b      	cbz	r3, 800edd4 <__sflush_r+0x44>
 800edd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800edd2:	1ad2      	subs	r2, r2, r3
 800edd4:	2300      	movs	r3, #0
 800edd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edd8:	6a21      	ldr	r1, [r4, #32]
 800edda:	4628      	mov	r0, r5
 800eddc:	47b0      	blx	r6
 800edde:	1c43      	adds	r3, r0, #1
 800ede0:	89a3      	ldrh	r3, [r4, #12]
 800ede2:	d106      	bne.n	800edf2 <__sflush_r+0x62>
 800ede4:	6829      	ldr	r1, [r5, #0]
 800ede6:	291d      	cmp	r1, #29
 800ede8:	d82b      	bhi.n	800ee42 <__sflush_r+0xb2>
 800edea:	4a2a      	ldr	r2, [pc, #168]	@ (800ee94 <__sflush_r+0x104>)
 800edec:	40ca      	lsrs	r2, r1
 800edee:	07d6      	lsls	r6, r2, #31
 800edf0:	d527      	bpl.n	800ee42 <__sflush_r+0xb2>
 800edf2:	2200      	movs	r2, #0
 800edf4:	6062      	str	r2, [r4, #4]
 800edf6:	04d9      	lsls	r1, r3, #19
 800edf8:	6922      	ldr	r2, [r4, #16]
 800edfa:	6022      	str	r2, [r4, #0]
 800edfc:	d504      	bpl.n	800ee08 <__sflush_r+0x78>
 800edfe:	1c42      	adds	r2, r0, #1
 800ee00:	d101      	bne.n	800ee06 <__sflush_r+0x76>
 800ee02:	682b      	ldr	r3, [r5, #0]
 800ee04:	b903      	cbnz	r3, 800ee08 <__sflush_r+0x78>
 800ee06:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee0a:	602f      	str	r7, [r5, #0]
 800ee0c:	b1b9      	cbz	r1, 800ee3e <__sflush_r+0xae>
 800ee0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee12:	4299      	cmp	r1, r3
 800ee14:	d002      	beq.n	800ee1c <__sflush_r+0x8c>
 800ee16:	4628      	mov	r0, r5
 800ee18:	f7ff fd2e 	bl	800e878 <_free_r>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee20:	e00d      	b.n	800ee3e <__sflush_r+0xae>
 800ee22:	2301      	movs	r3, #1
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b0      	blx	r6
 800ee28:	4602      	mov	r2, r0
 800ee2a:	1c50      	adds	r0, r2, #1
 800ee2c:	d1c9      	bne.n	800edc2 <__sflush_r+0x32>
 800ee2e:	682b      	ldr	r3, [r5, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d0c6      	beq.n	800edc2 <__sflush_r+0x32>
 800ee34:	2b1d      	cmp	r3, #29
 800ee36:	d001      	beq.n	800ee3c <__sflush_r+0xac>
 800ee38:	2b16      	cmp	r3, #22
 800ee3a:	d11e      	bne.n	800ee7a <__sflush_r+0xea>
 800ee3c:	602f      	str	r7, [r5, #0]
 800ee3e:	2000      	movs	r0, #0
 800ee40:	e022      	b.n	800ee88 <__sflush_r+0xf8>
 800ee42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee46:	b21b      	sxth	r3, r3
 800ee48:	e01b      	b.n	800ee82 <__sflush_r+0xf2>
 800ee4a:	690f      	ldr	r7, [r1, #16]
 800ee4c:	2f00      	cmp	r7, #0
 800ee4e:	d0f6      	beq.n	800ee3e <__sflush_r+0xae>
 800ee50:	0793      	lsls	r3, r2, #30
 800ee52:	680e      	ldr	r6, [r1, #0]
 800ee54:	bf08      	it	eq
 800ee56:	694b      	ldreq	r3, [r1, #20]
 800ee58:	600f      	str	r7, [r1, #0]
 800ee5a:	bf18      	it	ne
 800ee5c:	2300      	movne	r3, #0
 800ee5e:	eba6 0807 	sub.w	r8, r6, r7
 800ee62:	608b      	str	r3, [r1, #8]
 800ee64:	f1b8 0f00 	cmp.w	r8, #0
 800ee68:	dde9      	ble.n	800ee3e <__sflush_r+0xae>
 800ee6a:	6a21      	ldr	r1, [r4, #32]
 800ee6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee6e:	4643      	mov	r3, r8
 800ee70:	463a      	mov	r2, r7
 800ee72:	4628      	mov	r0, r5
 800ee74:	47b0      	blx	r6
 800ee76:	2800      	cmp	r0, #0
 800ee78:	dc08      	bgt.n	800ee8c <__sflush_r+0xfc>
 800ee7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee82:	81a3      	strh	r3, [r4, #12]
 800ee84:	f04f 30ff 	mov.w	r0, #4294967295
 800ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee8c:	4407      	add	r7, r0
 800ee8e:	eba8 0800 	sub.w	r8, r8, r0
 800ee92:	e7e7      	b.n	800ee64 <__sflush_r+0xd4>
 800ee94:	20400001 	.word	0x20400001

0800ee98 <_fflush_r>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	690b      	ldr	r3, [r1, #16]
 800ee9c:	4605      	mov	r5, r0
 800ee9e:	460c      	mov	r4, r1
 800eea0:	b913      	cbnz	r3, 800eea8 <_fflush_r+0x10>
 800eea2:	2500      	movs	r5, #0
 800eea4:	4628      	mov	r0, r5
 800eea6:	bd38      	pop	{r3, r4, r5, pc}
 800eea8:	b118      	cbz	r0, 800eeb2 <_fflush_r+0x1a>
 800eeaa:	6a03      	ldr	r3, [r0, #32]
 800eeac:	b90b      	cbnz	r3, 800eeb2 <_fflush_r+0x1a>
 800eeae:	f7ff fbc1 	bl	800e634 <__sinit>
 800eeb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d0f3      	beq.n	800eea2 <_fflush_r+0xa>
 800eeba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eebc:	07d0      	lsls	r0, r2, #31
 800eebe:	d404      	bmi.n	800eeca <_fflush_r+0x32>
 800eec0:	0599      	lsls	r1, r3, #22
 800eec2:	d402      	bmi.n	800eeca <_fflush_r+0x32>
 800eec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eec6:	f7ff fca8 	bl	800e81a <__retarget_lock_acquire_recursive>
 800eeca:	4628      	mov	r0, r5
 800eecc:	4621      	mov	r1, r4
 800eece:	f7ff ff5f 	bl	800ed90 <__sflush_r>
 800eed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eed4:	07da      	lsls	r2, r3, #31
 800eed6:	4605      	mov	r5, r0
 800eed8:	d4e4      	bmi.n	800eea4 <_fflush_r+0xc>
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	059b      	lsls	r3, r3, #22
 800eede:	d4e1      	bmi.n	800eea4 <_fflush_r+0xc>
 800eee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eee2:	f7ff fc9b 	bl	800e81c <__retarget_lock_release_recursive>
 800eee6:	e7dd      	b.n	800eea4 <_fflush_r+0xc>

0800eee8 <fiprintf>:
 800eee8:	b40e      	push	{r1, r2, r3}
 800eeea:	b503      	push	{r0, r1, lr}
 800eeec:	4601      	mov	r1, r0
 800eeee:	ab03      	add	r3, sp, #12
 800eef0:	4805      	ldr	r0, [pc, #20]	@ (800ef08 <fiprintf+0x20>)
 800eef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eef6:	6800      	ldr	r0, [r0, #0]
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	f000 f847 	bl	800ef8c <_vfiprintf_r>
 800eefe:	b002      	add	sp, #8
 800ef00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef04:	b003      	add	sp, #12
 800ef06:	4770      	bx	lr
 800ef08:	20000168 	.word	0x20000168

0800ef0c <_sbrk_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4d06      	ldr	r5, [pc, #24]	@ (800ef28 <_sbrk_r+0x1c>)
 800ef10:	2300      	movs	r3, #0
 800ef12:	4604      	mov	r4, r0
 800ef14:	4608      	mov	r0, r1
 800ef16:	602b      	str	r3, [r5, #0]
 800ef18:	f7f3 fab0 	bl	800247c <_sbrk>
 800ef1c:	1c43      	adds	r3, r0, #1
 800ef1e:	d102      	bne.n	800ef26 <_sbrk_r+0x1a>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	b103      	cbz	r3, 800ef26 <_sbrk_r+0x1a>
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	bd38      	pop	{r3, r4, r5, pc}
 800ef28:	20002e60 	.word	0x20002e60

0800ef2c <abort>:
 800ef2c:	b508      	push	{r3, lr}
 800ef2e:	2006      	movs	r0, #6
 800ef30:	f000 fa00 	bl	800f334 <raise>
 800ef34:	2001      	movs	r0, #1
 800ef36:	f7f3 fa29 	bl	800238c <_exit>

0800ef3a <__sfputc_r>:
 800ef3a:	6893      	ldr	r3, [r2, #8]
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	b410      	push	{r4}
 800ef42:	6093      	str	r3, [r2, #8]
 800ef44:	da08      	bge.n	800ef58 <__sfputc_r+0x1e>
 800ef46:	6994      	ldr	r4, [r2, #24]
 800ef48:	42a3      	cmp	r3, r4
 800ef4a:	db01      	blt.n	800ef50 <__sfputc_r+0x16>
 800ef4c:	290a      	cmp	r1, #10
 800ef4e:	d103      	bne.n	800ef58 <__sfputc_r+0x1e>
 800ef50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef54:	f000 b932 	b.w	800f1bc <__swbuf_r>
 800ef58:	6813      	ldr	r3, [r2, #0]
 800ef5a:	1c58      	adds	r0, r3, #1
 800ef5c:	6010      	str	r0, [r2, #0]
 800ef5e:	7019      	strb	r1, [r3, #0]
 800ef60:	4608      	mov	r0, r1
 800ef62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <__sfputs_r>:
 800ef68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	460f      	mov	r7, r1
 800ef6e:	4614      	mov	r4, r2
 800ef70:	18d5      	adds	r5, r2, r3
 800ef72:	42ac      	cmp	r4, r5
 800ef74:	d101      	bne.n	800ef7a <__sfputs_r+0x12>
 800ef76:	2000      	movs	r0, #0
 800ef78:	e007      	b.n	800ef8a <__sfputs_r+0x22>
 800ef7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef7e:	463a      	mov	r2, r7
 800ef80:	4630      	mov	r0, r6
 800ef82:	f7ff ffda 	bl	800ef3a <__sfputc_r>
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	d1f3      	bne.n	800ef72 <__sfputs_r+0xa>
 800ef8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef8c <_vfiprintf_r>:
 800ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef90:	460d      	mov	r5, r1
 800ef92:	b09d      	sub	sp, #116	@ 0x74
 800ef94:	4614      	mov	r4, r2
 800ef96:	4698      	mov	r8, r3
 800ef98:	4606      	mov	r6, r0
 800ef9a:	b118      	cbz	r0, 800efa4 <_vfiprintf_r+0x18>
 800ef9c:	6a03      	ldr	r3, [r0, #32]
 800ef9e:	b90b      	cbnz	r3, 800efa4 <_vfiprintf_r+0x18>
 800efa0:	f7ff fb48 	bl	800e634 <__sinit>
 800efa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efa6:	07d9      	lsls	r1, r3, #31
 800efa8:	d405      	bmi.n	800efb6 <_vfiprintf_r+0x2a>
 800efaa:	89ab      	ldrh	r3, [r5, #12]
 800efac:	059a      	lsls	r2, r3, #22
 800efae:	d402      	bmi.n	800efb6 <_vfiprintf_r+0x2a>
 800efb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efb2:	f7ff fc32 	bl	800e81a <__retarget_lock_acquire_recursive>
 800efb6:	89ab      	ldrh	r3, [r5, #12]
 800efb8:	071b      	lsls	r3, r3, #28
 800efba:	d501      	bpl.n	800efc0 <_vfiprintf_r+0x34>
 800efbc:	692b      	ldr	r3, [r5, #16]
 800efbe:	b99b      	cbnz	r3, 800efe8 <_vfiprintf_r+0x5c>
 800efc0:	4629      	mov	r1, r5
 800efc2:	4630      	mov	r0, r6
 800efc4:	f000 f938 	bl	800f238 <__swsetup_r>
 800efc8:	b170      	cbz	r0, 800efe8 <_vfiprintf_r+0x5c>
 800efca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efcc:	07dc      	lsls	r4, r3, #31
 800efce:	d504      	bpl.n	800efda <_vfiprintf_r+0x4e>
 800efd0:	f04f 30ff 	mov.w	r0, #4294967295
 800efd4:	b01d      	add	sp, #116	@ 0x74
 800efd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	0598      	lsls	r0, r3, #22
 800efde:	d4f7      	bmi.n	800efd0 <_vfiprintf_r+0x44>
 800efe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efe2:	f7ff fc1b 	bl	800e81c <__retarget_lock_release_recursive>
 800efe6:	e7f3      	b.n	800efd0 <_vfiprintf_r+0x44>
 800efe8:	2300      	movs	r3, #0
 800efea:	9309      	str	r3, [sp, #36]	@ 0x24
 800efec:	2320      	movs	r3, #32
 800efee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eff2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eff6:	2330      	movs	r3, #48	@ 0x30
 800eff8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f1a8 <_vfiprintf_r+0x21c>
 800effc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f000:	f04f 0901 	mov.w	r9, #1
 800f004:	4623      	mov	r3, r4
 800f006:	469a      	mov	sl, r3
 800f008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f00c:	b10a      	cbz	r2, 800f012 <_vfiprintf_r+0x86>
 800f00e:	2a25      	cmp	r2, #37	@ 0x25
 800f010:	d1f9      	bne.n	800f006 <_vfiprintf_r+0x7a>
 800f012:	ebba 0b04 	subs.w	fp, sl, r4
 800f016:	d00b      	beq.n	800f030 <_vfiprintf_r+0xa4>
 800f018:	465b      	mov	r3, fp
 800f01a:	4622      	mov	r2, r4
 800f01c:	4629      	mov	r1, r5
 800f01e:	4630      	mov	r0, r6
 800f020:	f7ff ffa2 	bl	800ef68 <__sfputs_r>
 800f024:	3001      	adds	r0, #1
 800f026:	f000 80a7 	beq.w	800f178 <_vfiprintf_r+0x1ec>
 800f02a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f02c:	445a      	add	r2, fp
 800f02e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f030:	f89a 3000 	ldrb.w	r3, [sl]
 800f034:	2b00      	cmp	r3, #0
 800f036:	f000 809f 	beq.w	800f178 <_vfiprintf_r+0x1ec>
 800f03a:	2300      	movs	r3, #0
 800f03c:	f04f 32ff 	mov.w	r2, #4294967295
 800f040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f044:	f10a 0a01 	add.w	sl, sl, #1
 800f048:	9304      	str	r3, [sp, #16]
 800f04a:	9307      	str	r3, [sp, #28]
 800f04c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f050:	931a      	str	r3, [sp, #104]	@ 0x68
 800f052:	4654      	mov	r4, sl
 800f054:	2205      	movs	r2, #5
 800f056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f05a:	4853      	ldr	r0, [pc, #332]	@ (800f1a8 <_vfiprintf_r+0x21c>)
 800f05c:	f7f1 f8e0 	bl	8000220 <memchr>
 800f060:	9a04      	ldr	r2, [sp, #16]
 800f062:	b9d8      	cbnz	r0, 800f09c <_vfiprintf_r+0x110>
 800f064:	06d1      	lsls	r1, r2, #27
 800f066:	bf44      	itt	mi
 800f068:	2320      	movmi	r3, #32
 800f06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f06e:	0713      	lsls	r3, r2, #28
 800f070:	bf44      	itt	mi
 800f072:	232b      	movmi	r3, #43	@ 0x2b
 800f074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f078:	f89a 3000 	ldrb.w	r3, [sl]
 800f07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f07e:	d015      	beq.n	800f0ac <_vfiprintf_r+0x120>
 800f080:	9a07      	ldr	r2, [sp, #28]
 800f082:	4654      	mov	r4, sl
 800f084:	2000      	movs	r0, #0
 800f086:	f04f 0c0a 	mov.w	ip, #10
 800f08a:	4621      	mov	r1, r4
 800f08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f090:	3b30      	subs	r3, #48	@ 0x30
 800f092:	2b09      	cmp	r3, #9
 800f094:	d94b      	bls.n	800f12e <_vfiprintf_r+0x1a2>
 800f096:	b1b0      	cbz	r0, 800f0c6 <_vfiprintf_r+0x13a>
 800f098:	9207      	str	r2, [sp, #28]
 800f09a:	e014      	b.n	800f0c6 <_vfiprintf_r+0x13a>
 800f09c:	eba0 0308 	sub.w	r3, r0, r8
 800f0a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	9304      	str	r3, [sp, #16]
 800f0a8:	46a2      	mov	sl, r4
 800f0aa:	e7d2      	b.n	800f052 <_vfiprintf_r+0xc6>
 800f0ac:	9b03      	ldr	r3, [sp, #12]
 800f0ae:	1d19      	adds	r1, r3, #4
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	9103      	str	r1, [sp, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	bfbb      	ittet	lt
 800f0b8:	425b      	neglt	r3, r3
 800f0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f0be:	9307      	strge	r3, [sp, #28]
 800f0c0:	9307      	strlt	r3, [sp, #28]
 800f0c2:	bfb8      	it	lt
 800f0c4:	9204      	strlt	r2, [sp, #16]
 800f0c6:	7823      	ldrb	r3, [r4, #0]
 800f0c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0ca:	d10a      	bne.n	800f0e2 <_vfiprintf_r+0x156>
 800f0cc:	7863      	ldrb	r3, [r4, #1]
 800f0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0d0:	d132      	bne.n	800f138 <_vfiprintf_r+0x1ac>
 800f0d2:	9b03      	ldr	r3, [sp, #12]
 800f0d4:	1d1a      	adds	r2, r3, #4
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	9203      	str	r2, [sp, #12]
 800f0da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0de:	3402      	adds	r4, #2
 800f0e0:	9305      	str	r3, [sp, #20]
 800f0e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f1b8 <_vfiprintf_r+0x22c>
 800f0e6:	7821      	ldrb	r1, [r4, #0]
 800f0e8:	2203      	movs	r2, #3
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	f7f1 f898 	bl	8000220 <memchr>
 800f0f0:	b138      	cbz	r0, 800f102 <_vfiprintf_r+0x176>
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	eba0 000a 	sub.w	r0, r0, sl
 800f0f8:	2240      	movs	r2, #64	@ 0x40
 800f0fa:	4082      	lsls	r2, r0
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	3401      	adds	r4, #1
 800f100:	9304      	str	r3, [sp, #16]
 800f102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f106:	4829      	ldr	r0, [pc, #164]	@ (800f1ac <_vfiprintf_r+0x220>)
 800f108:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f10c:	2206      	movs	r2, #6
 800f10e:	f7f1 f887 	bl	8000220 <memchr>
 800f112:	2800      	cmp	r0, #0
 800f114:	d03f      	beq.n	800f196 <_vfiprintf_r+0x20a>
 800f116:	4b26      	ldr	r3, [pc, #152]	@ (800f1b0 <_vfiprintf_r+0x224>)
 800f118:	bb1b      	cbnz	r3, 800f162 <_vfiprintf_r+0x1d6>
 800f11a:	9b03      	ldr	r3, [sp, #12]
 800f11c:	3307      	adds	r3, #7
 800f11e:	f023 0307 	bic.w	r3, r3, #7
 800f122:	3308      	adds	r3, #8
 800f124:	9303      	str	r3, [sp, #12]
 800f126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f128:	443b      	add	r3, r7
 800f12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f12c:	e76a      	b.n	800f004 <_vfiprintf_r+0x78>
 800f12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f132:	460c      	mov	r4, r1
 800f134:	2001      	movs	r0, #1
 800f136:	e7a8      	b.n	800f08a <_vfiprintf_r+0xfe>
 800f138:	2300      	movs	r3, #0
 800f13a:	3401      	adds	r4, #1
 800f13c:	9305      	str	r3, [sp, #20]
 800f13e:	4619      	mov	r1, r3
 800f140:	f04f 0c0a 	mov.w	ip, #10
 800f144:	4620      	mov	r0, r4
 800f146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f14a:	3a30      	subs	r2, #48	@ 0x30
 800f14c:	2a09      	cmp	r2, #9
 800f14e:	d903      	bls.n	800f158 <_vfiprintf_r+0x1cc>
 800f150:	2b00      	cmp	r3, #0
 800f152:	d0c6      	beq.n	800f0e2 <_vfiprintf_r+0x156>
 800f154:	9105      	str	r1, [sp, #20]
 800f156:	e7c4      	b.n	800f0e2 <_vfiprintf_r+0x156>
 800f158:	fb0c 2101 	mla	r1, ip, r1, r2
 800f15c:	4604      	mov	r4, r0
 800f15e:	2301      	movs	r3, #1
 800f160:	e7f0      	b.n	800f144 <_vfiprintf_r+0x1b8>
 800f162:	ab03      	add	r3, sp, #12
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	462a      	mov	r2, r5
 800f168:	4b12      	ldr	r3, [pc, #72]	@ (800f1b4 <_vfiprintf_r+0x228>)
 800f16a:	a904      	add	r1, sp, #16
 800f16c:	4630      	mov	r0, r6
 800f16e:	f3af 8000 	nop.w
 800f172:	4607      	mov	r7, r0
 800f174:	1c78      	adds	r0, r7, #1
 800f176:	d1d6      	bne.n	800f126 <_vfiprintf_r+0x19a>
 800f178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f17a:	07d9      	lsls	r1, r3, #31
 800f17c:	d405      	bmi.n	800f18a <_vfiprintf_r+0x1fe>
 800f17e:	89ab      	ldrh	r3, [r5, #12]
 800f180:	059a      	lsls	r2, r3, #22
 800f182:	d402      	bmi.n	800f18a <_vfiprintf_r+0x1fe>
 800f184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f186:	f7ff fb49 	bl	800e81c <__retarget_lock_release_recursive>
 800f18a:	89ab      	ldrh	r3, [r5, #12]
 800f18c:	065b      	lsls	r3, r3, #25
 800f18e:	f53f af1f 	bmi.w	800efd0 <_vfiprintf_r+0x44>
 800f192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f194:	e71e      	b.n	800efd4 <_vfiprintf_r+0x48>
 800f196:	ab03      	add	r3, sp, #12
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	462a      	mov	r2, r5
 800f19c:	4b05      	ldr	r3, [pc, #20]	@ (800f1b4 <_vfiprintf_r+0x228>)
 800f19e:	a904      	add	r1, sp, #16
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	f7ff fcd7 	bl	800eb54 <_printf_i>
 800f1a6:	e7e4      	b.n	800f172 <_vfiprintf_r+0x1e6>
 800f1a8:	0800f5f1 	.word	0x0800f5f1
 800f1ac:	0800f5fb 	.word	0x0800f5fb
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	0800ef69 	.word	0x0800ef69
 800f1b8:	0800f5f7 	.word	0x0800f5f7

0800f1bc <__swbuf_r>:
 800f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1be:	460e      	mov	r6, r1
 800f1c0:	4614      	mov	r4, r2
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	b118      	cbz	r0, 800f1ce <__swbuf_r+0x12>
 800f1c6:	6a03      	ldr	r3, [r0, #32]
 800f1c8:	b90b      	cbnz	r3, 800f1ce <__swbuf_r+0x12>
 800f1ca:	f7ff fa33 	bl	800e634 <__sinit>
 800f1ce:	69a3      	ldr	r3, [r4, #24]
 800f1d0:	60a3      	str	r3, [r4, #8]
 800f1d2:	89a3      	ldrh	r3, [r4, #12]
 800f1d4:	071a      	lsls	r2, r3, #28
 800f1d6:	d501      	bpl.n	800f1dc <__swbuf_r+0x20>
 800f1d8:	6923      	ldr	r3, [r4, #16]
 800f1da:	b943      	cbnz	r3, 800f1ee <__swbuf_r+0x32>
 800f1dc:	4621      	mov	r1, r4
 800f1de:	4628      	mov	r0, r5
 800f1e0:	f000 f82a 	bl	800f238 <__swsetup_r>
 800f1e4:	b118      	cbz	r0, 800f1ee <__swbuf_r+0x32>
 800f1e6:	f04f 37ff 	mov.w	r7, #4294967295
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	6922      	ldr	r2, [r4, #16]
 800f1f2:	1a98      	subs	r0, r3, r2
 800f1f4:	6963      	ldr	r3, [r4, #20]
 800f1f6:	b2f6      	uxtb	r6, r6
 800f1f8:	4283      	cmp	r3, r0
 800f1fa:	4637      	mov	r7, r6
 800f1fc:	dc05      	bgt.n	800f20a <__swbuf_r+0x4e>
 800f1fe:	4621      	mov	r1, r4
 800f200:	4628      	mov	r0, r5
 800f202:	f7ff fe49 	bl	800ee98 <_fflush_r>
 800f206:	2800      	cmp	r0, #0
 800f208:	d1ed      	bne.n	800f1e6 <__swbuf_r+0x2a>
 800f20a:	68a3      	ldr	r3, [r4, #8]
 800f20c:	3b01      	subs	r3, #1
 800f20e:	60a3      	str	r3, [r4, #8]
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	6022      	str	r2, [r4, #0]
 800f216:	701e      	strb	r6, [r3, #0]
 800f218:	6962      	ldr	r2, [r4, #20]
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d004      	beq.n	800f22a <__swbuf_r+0x6e>
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	07db      	lsls	r3, r3, #31
 800f224:	d5e1      	bpl.n	800f1ea <__swbuf_r+0x2e>
 800f226:	2e0a      	cmp	r6, #10
 800f228:	d1df      	bne.n	800f1ea <__swbuf_r+0x2e>
 800f22a:	4621      	mov	r1, r4
 800f22c:	4628      	mov	r0, r5
 800f22e:	f7ff fe33 	bl	800ee98 <_fflush_r>
 800f232:	2800      	cmp	r0, #0
 800f234:	d0d9      	beq.n	800f1ea <__swbuf_r+0x2e>
 800f236:	e7d6      	b.n	800f1e6 <__swbuf_r+0x2a>

0800f238 <__swsetup_r>:
 800f238:	b538      	push	{r3, r4, r5, lr}
 800f23a:	4b29      	ldr	r3, [pc, #164]	@ (800f2e0 <__swsetup_r+0xa8>)
 800f23c:	4605      	mov	r5, r0
 800f23e:	6818      	ldr	r0, [r3, #0]
 800f240:	460c      	mov	r4, r1
 800f242:	b118      	cbz	r0, 800f24c <__swsetup_r+0x14>
 800f244:	6a03      	ldr	r3, [r0, #32]
 800f246:	b90b      	cbnz	r3, 800f24c <__swsetup_r+0x14>
 800f248:	f7ff f9f4 	bl	800e634 <__sinit>
 800f24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f250:	0719      	lsls	r1, r3, #28
 800f252:	d422      	bmi.n	800f29a <__swsetup_r+0x62>
 800f254:	06da      	lsls	r2, r3, #27
 800f256:	d407      	bmi.n	800f268 <__swsetup_r+0x30>
 800f258:	2209      	movs	r2, #9
 800f25a:	602a      	str	r2, [r5, #0]
 800f25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f260:	81a3      	strh	r3, [r4, #12]
 800f262:	f04f 30ff 	mov.w	r0, #4294967295
 800f266:	e033      	b.n	800f2d0 <__swsetup_r+0x98>
 800f268:	0758      	lsls	r0, r3, #29
 800f26a:	d512      	bpl.n	800f292 <__swsetup_r+0x5a>
 800f26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f26e:	b141      	cbz	r1, 800f282 <__swsetup_r+0x4a>
 800f270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f274:	4299      	cmp	r1, r3
 800f276:	d002      	beq.n	800f27e <__swsetup_r+0x46>
 800f278:	4628      	mov	r0, r5
 800f27a:	f7ff fafd 	bl	800e878 <_free_r>
 800f27e:	2300      	movs	r3, #0
 800f280:	6363      	str	r3, [r4, #52]	@ 0x34
 800f282:	89a3      	ldrh	r3, [r4, #12]
 800f284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f288:	81a3      	strh	r3, [r4, #12]
 800f28a:	2300      	movs	r3, #0
 800f28c:	6063      	str	r3, [r4, #4]
 800f28e:	6923      	ldr	r3, [r4, #16]
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	89a3      	ldrh	r3, [r4, #12]
 800f294:	f043 0308 	orr.w	r3, r3, #8
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	6923      	ldr	r3, [r4, #16]
 800f29c:	b94b      	cbnz	r3, 800f2b2 <__swsetup_r+0x7a>
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2a8:	d003      	beq.n	800f2b2 <__swsetup_r+0x7a>
 800f2aa:	4621      	mov	r1, r4
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	f000 f883 	bl	800f3b8 <__smakebuf_r>
 800f2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2b6:	f013 0201 	ands.w	r2, r3, #1
 800f2ba:	d00a      	beq.n	800f2d2 <__swsetup_r+0x9a>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	60a2      	str	r2, [r4, #8]
 800f2c0:	6962      	ldr	r2, [r4, #20]
 800f2c2:	4252      	negs	r2, r2
 800f2c4:	61a2      	str	r2, [r4, #24]
 800f2c6:	6922      	ldr	r2, [r4, #16]
 800f2c8:	b942      	cbnz	r2, 800f2dc <__swsetup_r+0xa4>
 800f2ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f2ce:	d1c5      	bne.n	800f25c <__swsetup_r+0x24>
 800f2d0:	bd38      	pop	{r3, r4, r5, pc}
 800f2d2:	0799      	lsls	r1, r3, #30
 800f2d4:	bf58      	it	pl
 800f2d6:	6962      	ldrpl	r2, [r4, #20]
 800f2d8:	60a2      	str	r2, [r4, #8]
 800f2da:	e7f4      	b.n	800f2c6 <__swsetup_r+0x8e>
 800f2dc:	2000      	movs	r0, #0
 800f2de:	e7f7      	b.n	800f2d0 <__swsetup_r+0x98>
 800f2e0:	20000168 	.word	0x20000168

0800f2e4 <_raise_r>:
 800f2e4:	291f      	cmp	r1, #31
 800f2e6:	b538      	push	{r3, r4, r5, lr}
 800f2e8:	4605      	mov	r5, r0
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	d904      	bls.n	800f2f8 <_raise_r+0x14>
 800f2ee:	2316      	movs	r3, #22
 800f2f0:	6003      	str	r3, [r0, #0]
 800f2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f6:	bd38      	pop	{r3, r4, r5, pc}
 800f2f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2fa:	b112      	cbz	r2, 800f302 <_raise_r+0x1e>
 800f2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f300:	b94b      	cbnz	r3, 800f316 <_raise_r+0x32>
 800f302:	4628      	mov	r0, r5
 800f304:	f000 f830 	bl	800f368 <_getpid_r>
 800f308:	4622      	mov	r2, r4
 800f30a:	4601      	mov	r1, r0
 800f30c:	4628      	mov	r0, r5
 800f30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f312:	f000 b817 	b.w	800f344 <_kill_r>
 800f316:	2b01      	cmp	r3, #1
 800f318:	d00a      	beq.n	800f330 <_raise_r+0x4c>
 800f31a:	1c59      	adds	r1, r3, #1
 800f31c:	d103      	bne.n	800f326 <_raise_r+0x42>
 800f31e:	2316      	movs	r3, #22
 800f320:	6003      	str	r3, [r0, #0]
 800f322:	2001      	movs	r0, #1
 800f324:	e7e7      	b.n	800f2f6 <_raise_r+0x12>
 800f326:	2100      	movs	r1, #0
 800f328:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f32c:	4620      	mov	r0, r4
 800f32e:	4798      	blx	r3
 800f330:	2000      	movs	r0, #0
 800f332:	e7e0      	b.n	800f2f6 <_raise_r+0x12>

0800f334 <raise>:
 800f334:	4b02      	ldr	r3, [pc, #8]	@ (800f340 <raise+0xc>)
 800f336:	4601      	mov	r1, r0
 800f338:	6818      	ldr	r0, [r3, #0]
 800f33a:	f7ff bfd3 	b.w	800f2e4 <_raise_r>
 800f33e:	bf00      	nop
 800f340:	20000168 	.word	0x20000168

0800f344 <_kill_r>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	4d07      	ldr	r5, [pc, #28]	@ (800f364 <_kill_r+0x20>)
 800f348:	2300      	movs	r3, #0
 800f34a:	4604      	mov	r4, r0
 800f34c:	4608      	mov	r0, r1
 800f34e:	4611      	mov	r1, r2
 800f350:	602b      	str	r3, [r5, #0]
 800f352:	f7f3 f80b 	bl	800236c <_kill>
 800f356:	1c43      	adds	r3, r0, #1
 800f358:	d102      	bne.n	800f360 <_kill_r+0x1c>
 800f35a:	682b      	ldr	r3, [r5, #0]
 800f35c:	b103      	cbz	r3, 800f360 <_kill_r+0x1c>
 800f35e:	6023      	str	r3, [r4, #0]
 800f360:	bd38      	pop	{r3, r4, r5, pc}
 800f362:	bf00      	nop
 800f364:	20002e60 	.word	0x20002e60

0800f368 <_getpid_r>:
 800f368:	f7f2 bff8 	b.w	800235c <_getpid>

0800f36c <__swhatbuf_r>:
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	460c      	mov	r4, r1
 800f370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f374:	2900      	cmp	r1, #0
 800f376:	b096      	sub	sp, #88	@ 0x58
 800f378:	4615      	mov	r5, r2
 800f37a:	461e      	mov	r6, r3
 800f37c:	da0d      	bge.n	800f39a <__swhatbuf_r+0x2e>
 800f37e:	89a3      	ldrh	r3, [r4, #12]
 800f380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f384:	f04f 0100 	mov.w	r1, #0
 800f388:	bf14      	ite	ne
 800f38a:	2340      	movne	r3, #64	@ 0x40
 800f38c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f390:	2000      	movs	r0, #0
 800f392:	6031      	str	r1, [r6, #0]
 800f394:	602b      	str	r3, [r5, #0]
 800f396:	b016      	add	sp, #88	@ 0x58
 800f398:	bd70      	pop	{r4, r5, r6, pc}
 800f39a:	466a      	mov	r2, sp
 800f39c:	f000 f848 	bl	800f430 <_fstat_r>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	dbec      	blt.n	800f37e <__swhatbuf_r+0x12>
 800f3a4:	9901      	ldr	r1, [sp, #4]
 800f3a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f3aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3ae:	4259      	negs	r1, r3
 800f3b0:	4159      	adcs	r1, r3
 800f3b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3b6:	e7eb      	b.n	800f390 <__swhatbuf_r+0x24>

0800f3b8 <__smakebuf_r>:
 800f3b8:	898b      	ldrh	r3, [r1, #12]
 800f3ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3bc:	079d      	lsls	r5, r3, #30
 800f3be:	4606      	mov	r6, r0
 800f3c0:	460c      	mov	r4, r1
 800f3c2:	d507      	bpl.n	800f3d4 <__smakebuf_r+0x1c>
 800f3c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	6123      	str	r3, [r4, #16]
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	6163      	str	r3, [r4, #20]
 800f3d0:	b003      	add	sp, #12
 800f3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3d4:	ab01      	add	r3, sp, #4
 800f3d6:	466a      	mov	r2, sp
 800f3d8:	f7ff ffc8 	bl	800f36c <__swhatbuf_r>
 800f3dc:	9f00      	ldr	r7, [sp, #0]
 800f3de:	4605      	mov	r5, r0
 800f3e0:	4639      	mov	r1, r7
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	f7ff fabc 	bl	800e960 <_malloc_r>
 800f3e8:	b948      	cbnz	r0, 800f3fe <__smakebuf_r+0x46>
 800f3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ee:	059a      	lsls	r2, r3, #22
 800f3f0:	d4ee      	bmi.n	800f3d0 <__smakebuf_r+0x18>
 800f3f2:	f023 0303 	bic.w	r3, r3, #3
 800f3f6:	f043 0302 	orr.w	r3, r3, #2
 800f3fa:	81a3      	strh	r3, [r4, #12]
 800f3fc:	e7e2      	b.n	800f3c4 <__smakebuf_r+0xc>
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	6020      	str	r0, [r4, #0]
 800f402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f406:	81a3      	strh	r3, [r4, #12]
 800f408:	9b01      	ldr	r3, [sp, #4]
 800f40a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f40e:	b15b      	cbz	r3, 800f428 <__smakebuf_r+0x70>
 800f410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f414:	4630      	mov	r0, r6
 800f416:	f000 f81d 	bl	800f454 <_isatty_r>
 800f41a:	b128      	cbz	r0, 800f428 <__smakebuf_r+0x70>
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	f023 0303 	bic.w	r3, r3, #3
 800f422:	f043 0301 	orr.w	r3, r3, #1
 800f426:	81a3      	strh	r3, [r4, #12]
 800f428:	89a3      	ldrh	r3, [r4, #12]
 800f42a:	431d      	orrs	r5, r3
 800f42c:	81a5      	strh	r5, [r4, #12]
 800f42e:	e7cf      	b.n	800f3d0 <__smakebuf_r+0x18>

0800f430 <_fstat_r>:
 800f430:	b538      	push	{r3, r4, r5, lr}
 800f432:	4d07      	ldr	r5, [pc, #28]	@ (800f450 <_fstat_r+0x20>)
 800f434:	2300      	movs	r3, #0
 800f436:	4604      	mov	r4, r0
 800f438:	4608      	mov	r0, r1
 800f43a:	4611      	mov	r1, r2
 800f43c:	602b      	str	r3, [r5, #0]
 800f43e:	f7f2 fff5 	bl	800242c <_fstat>
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	d102      	bne.n	800f44c <_fstat_r+0x1c>
 800f446:	682b      	ldr	r3, [r5, #0]
 800f448:	b103      	cbz	r3, 800f44c <_fstat_r+0x1c>
 800f44a:	6023      	str	r3, [r4, #0]
 800f44c:	bd38      	pop	{r3, r4, r5, pc}
 800f44e:	bf00      	nop
 800f450:	20002e60 	.word	0x20002e60

0800f454 <_isatty_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	4d06      	ldr	r5, [pc, #24]	@ (800f470 <_isatty_r+0x1c>)
 800f458:	2300      	movs	r3, #0
 800f45a:	4604      	mov	r4, r0
 800f45c:	4608      	mov	r0, r1
 800f45e:	602b      	str	r3, [r5, #0]
 800f460:	f7f2 fff4 	bl	800244c <_isatty>
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	d102      	bne.n	800f46e <_isatty_r+0x1a>
 800f468:	682b      	ldr	r3, [r5, #0]
 800f46a:	b103      	cbz	r3, 800f46e <_isatty_r+0x1a>
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	20002e60 	.word	0x20002e60

0800f474 <_init>:
 800f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f476:	bf00      	nop
 800f478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f47a:	bc08      	pop	{r3}
 800f47c:	469e      	mov	lr, r3
 800f47e:	4770      	bx	lr

0800f480 <_fini>:
 800f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f482:	bf00      	nop
 800f484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f486:	bc08      	pop	{r3}
 800f488:	469e      	mov	lr, r3
 800f48a:	4770      	bx	lr
