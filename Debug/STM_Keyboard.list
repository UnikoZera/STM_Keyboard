
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f24c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800f42c  0800f42c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5a4  0800f5a4  000111c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f5a4  0800f5a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5ac  0800f5ac  000111c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5ac  0800f5ac  000105ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f5b0  0800f5b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  0800f5b4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  200001c8  0800f778  000111c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c98  0800f778  00011c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029840  00000000  00000000  000111f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006355  00000000  00000000  0003aa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b0  00000000  00000000  00040d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a0d  00000000  00000000  00042f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281e2  00000000  00000000  0004494d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e972  00000000  00000000  0006cb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d3a  00000000  00000000  0009b4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001831db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000959c  00000000  00000000  00183220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0018c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001c8 	.word	0x200001c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f414 	.word	0x0800f414

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001cc 	.word	0x200001cc
 800021c:	0800f414 	.word	0x0800f414

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f00e f85e 	bl	800e6c6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000614:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_ADC1_Init+0x104>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	481e      	ldr	r0, [pc, #120]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000676:	f002 fc2d 	bl	8002ed4 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f001 f86b 	bl	800175a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4818      	ldr	r0, [pc, #96]	@ (80006f0 <MX_ADC1_Init+0x104>)
 8000690:	f003 fc94 	bl	8003fbc <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f001 f85e 	bl	800175a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_ADC1_Init+0x108>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	@ 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006bc:	f002 fe60 	bl	8003380 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f001 f848 	bl	800175a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_ADC1_Init+0x10c>)
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ce:	230c      	movs	r3, #12
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <MX_ADC1_Init+0x104>)
 80006d8:	f002 fe52 	bl	8003380 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006e2:	f001 f83a 	bl	800175a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	@ 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001e4 	.word	0x200001e4
 80006f4:	32601000 	.word	0x32601000
 80006f8:	3ef08000 	.word	0x3ef08000

080006fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f00d ffdc 	bl	800e6c6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000710:	4a32      	ldr	r2, [pc, #200]	@ (80007dc <MX_ADC2_Init+0xe0>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000716:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b2e      	ldr	r3, [pc, #184]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000728:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000730:	2201      	movs	r2, #1
 8000732:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000736:	2204      	movs	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000742:	2201      	movs	r2, #1
 8000744:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000748:	2202      	movs	r2, #2
 800074a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000762:	2201      	movs	r2, #1
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000776:	4818      	ldr	r0, [pc, #96]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 8000778:	f002 fbac 	bl	8002ed4 <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 ffea 	bl	800175a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_ADC2_Init+0xe4>)
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	@ 0x7f
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007a4:	f002 fdec 	bl	8003380 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ae:	f000 ffd4 	bl	800175a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_ADC2_Init+0xe8>)
 80007b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007b6:	230c      	movs	r3, #12
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <MX_ADC2_Init+0xdc>)
 80007c0:	f002 fdde 	bl	8003380 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80007ca:	f000 ffc6 	bl	800175a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000250 	.word	0x20000250
 80007dc:	50000100 	.word	0x50000100
 80007e0:	0c900008 	.word	0x0c900008
 80007e4:	10c00010 	.word	0x10c00010

080007e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09c      	sub	sp, #112	@ 0x70
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	2244      	movs	r2, #68	@ 0x44
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00d ff5c 	bl	800e6c6 <memset>
  if(adcHandle->Instance==ADC1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000816:	d169      	bne.n	80008ec <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000818:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800081c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800081e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000822:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4618      	mov	r0, r3
 800082a:	f007 fb6d 	bl	8007f08 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000834:	f000 ff91 	bl	800175a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000838:	4b66      	ldr	r3, [pc, #408]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a65      	ldr	r2, [pc, #404]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000840:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000842:	4b64      	ldr	r3, [pc, #400]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800084a:	4b63      	ldr	r3, [pc, #396]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a62      	ldr	r2, [pc, #392]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000850:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b60      	ldr	r3, [pc, #384]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b5d      	ldr	r3, [pc, #372]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a5c      	ldr	r2, [pc, #368]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b5a      	ldr	r3, [pc, #360]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Key_2_Pin|Key_1_Pin;
 800087a:	2303      	movs	r3, #3
 800087c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800088a:	4619      	mov	r1, r3
 800088c:	4853      	ldr	r0, [pc, #332]	@ (80009dc <HAL_ADC_MspInit+0x1f4>)
 800088e:	f004 fa2b 	bl	8004ce8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000892:	4b53      	ldr	r3, [pc, #332]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 8000894:	4a53      	ldr	r2, [pc, #332]	@ (80009e4 <HAL_ADC_MspInit+0x1fc>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000898:	4b51      	ldr	r3, [pc, #324]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 800089a:	2205      	movs	r2, #5
 800089c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b4e      	ldr	r3, [pc, #312]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b4d      	ldr	r3, [pc, #308]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b8:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c0:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c2:	2220      	movs	r2, #32
 80008c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008ce:	4844      	ldr	r0, [pc, #272]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008d0:	f003 ff30 	bl	8004734 <HAL_DMA_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80008da:	f000 ff3e 	bl	800175a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a3f      	ldr	r2, [pc, #252]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80008e4:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <HAL_ADC_MspInit+0x1f8>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008ea:	e06e      	b.n	80009ca <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <HAL_ADC_MspInit+0x200>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d169      	bne.n	80009ca <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000900:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fafe 	bl	8007f08 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000912:	f000 ff22 	bl	800175a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a2d      	ldr	r2, [pc, #180]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 800091e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000920:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <HAL_ADC_MspInit+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10b      	bne.n	8000940 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	4a2a      	ldr	r2, [pc, #168]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800092e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000944:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <HAL_ADC_MspInit+0x1f0>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Key_3_Pin|Key_4_Pin;
 8000958:	23c0      	movs	r3, #192	@ 0xc0
 800095a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f004 f9bb 	bl	8004ce8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000974:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <HAL_ADC_MspInit+0x208>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800097a:	2224      	movs	r2, #36	@ 0x24
 800097c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 8000992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000996:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 800099a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a2:	2220      	movs	r2, #32
 80009a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009b0:	f003 fec0 	bl	8004734 <HAL_DMA_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 80009ba:	f000 fece 	bl	800175a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80009c4:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_ADC_MspInit+0x204>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	@ 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000037c 	.word	0x2000037c
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400
 80009e0:	200002bc 	.word	0x200002bc
 80009e4:	40020008 	.word	0x40020008
 80009e8:	50000100 	.word	0x50000100
 80009ec:	2000031c 	.word	0x2000031c
 80009f0:	4002001c 	.word	0x4002001c

080009f4 <ADC_Filter>:

uint16_t filter_adc_data[4]; // 用于存储滤波后的ADC数据
uint16_t last_adc_data[4]; // 用于记录上一次的ADC数据

void ADC_Filter(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
    last_adc_data[0] = filter_adc_data[0];
 80009f8:	4b44      	ldr	r3, [pc, #272]	@ (8000b0c <ADC_Filter+0x118>)
 80009fa:	881a      	ldrh	r2, [r3, #0]
 80009fc:	4b44      	ldr	r3, [pc, #272]	@ (8000b10 <ADC_Filter+0x11c>)
 80009fe:	801a      	strh	r2, [r3, #0]
    last_adc_data[1] = filter_adc_data[1];
 8000a00:	4b42      	ldr	r3, [pc, #264]	@ (8000b0c <ADC_Filter+0x118>)
 8000a02:	885a      	ldrh	r2, [r3, #2]
 8000a04:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a06:	805a      	strh	r2, [r3, #2]
    last_adc_data[2] = filter_adc_data[2];
 8000a08:	4b40      	ldr	r3, [pc, #256]	@ (8000b0c <ADC_Filter+0x118>)
 8000a0a:	889a      	ldrh	r2, [r3, #4]
 8000a0c:	4b40      	ldr	r3, [pc, #256]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a0e:	809a      	strh	r2, [r3, #4]
    last_adc_data[3] = filter_adc_data[3];
 8000a10:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <ADC_Filter+0x118>)
 8000a12:	88da      	ldrh	r2, [r3, #6]
 8000a14:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <ADC_Filter+0x11c>)
 8000a16:	80da      	strh	r2, [r3, #6]

	filter_adc_data[0] = ADC_FILTER_ALPHA * buffer_adc_1[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[0];
 8000a18:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <ADC_Filter+0x120>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a24:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000b18 <ADC_Filter+0x124>
 8000a28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a2c:	4b37      	ldr	r3, [pc, #220]	@ (8000b0c <ADC_Filter+0x118>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a38:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000b1c <ADC_Filter+0x128>
 8000a3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a48:	ee17 3a90 	vmov	r3, s15
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <ADC_Filter+0x118>)
 8000a50:	801a      	strh	r2, [r3, #0]
	filter_adc_data[1] = ADC_FILTER_ALPHA * buffer_adc_1[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[1];
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <ADC_Filter+0x120>)
 8000a54:	885b      	ldrh	r3, [r3, #2]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000b18 <ADC_Filter+0x124>
 8000a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <ADC_Filter+0x118>)
 8000a68:	885b      	ldrh	r3, [r3, #2]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a72:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000b1c <ADC_Filter+0x128>
 8000a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a82:	ee17 3a90 	vmov	r3, s15
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <ADC_Filter+0x118>)
 8000a8a:	805a      	strh	r2, [r3, #2]
	filter_adc_data[2] = ADC_FILTER_ALPHA * buffer_adc_2[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[2];
 8000a8c:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <ADC_Filter+0x12c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	ee07 3a90 	vmov	s15, r3
 8000a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a98:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000b18 <ADC_Filter+0x124>
 8000a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <ADC_Filter+0x118>)
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aac:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000b1c <ADC_Filter+0x128>
 8000ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000abc:	ee17 3a90 	vmov	r3, s15
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <ADC_Filter+0x118>)
 8000ac4:	809a      	strh	r2, [r3, #4]
	filter_adc_data[3] = ADC_FILTER_ALPHA * buffer_adc_2[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[3];
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <ADC_Filter+0x12c>)
 8000ac8:	885b      	ldrh	r3, [r3, #2]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000b18 <ADC_Filter+0x124>
 8000ad6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <ADC_Filter+0x118>)
 8000adc:	88db      	ldrh	r3, [r3, #6]
 8000ade:	ee07 3a90 	vmov	s15, r3
 8000ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000b1c <ADC_Filter+0x128>
 8000aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af6:	ee17 3a90 	vmov	r3, s15
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <ADC_Filter+0x118>)
 8000afe:	80da      	strh	r2, [r3, #6]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000388 	.word	0x20000388
 8000b10:	20000390 	.word	0x20000390
 8000b14:	20000380 	.word	0x20000380
 8000b18:	3f19999a 	.word	0x3f19999a
 8000b1c:	3ecccccc 	.word	0x3ecccccc
 8000b20:	20000384 	.word	0x20000384

08000b24 <ADC_Init>:

void ADC_Init(void) // 只需要在初始化调用这个就可以持续收集adc数据
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    memset(last_adc_data, 0, sizeof(last_adc_data));
 8000b28:	2208      	movs	r2, #8
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <ADC_Init+0x38>)
 8000b2e:	f00d fdca 	bl	800e6c6 <memset>
    memset(filter_adc_data, 0, sizeof(filter_adc_data));
 8000b32:	2208      	movs	r2, #8
 8000b34:	2100      	movs	r1, #0
 8000b36:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <ADC_Init+0x3c>)
 8000b38:	f00d fdc5 	bl	800e6c6 <memset>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000b3c:	217f      	movs	r1, #127	@ 0x7f
 8000b3e:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <ADC_Init+0x40>)
 8000b40:	f003 f9da 	bl	8003ef8 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000b44:	217f      	movs	r1, #127	@ 0x7f
 8000b46:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <ADC_Init+0x44>)
 8000b48:	f003 f9d6 	bl	8003ef8 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(10);
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f001 ff37 	bl	80029c0 <HAL_Delay>
    ADC_Start_DMA();
 8000b52:	f000 f80b 	bl	8000b6c <ADC_Start_DMA>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000390 	.word	0x20000390
 8000b60:	20000388 	.word	0x20000388
 8000b64:	200001e4 	.word	0x200001e4
 8000b68:	20000250 	.word	0x20000250

08000b6c <ADC_Start_DMA>:


void ADC_Start_DMA(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer_adc_1, sizeof(buffer_adc_1)/sizeof(uint16_t));
 8000b70:	2202      	movs	r2, #2
 8000b72:	4905      	ldr	r1, [pc, #20]	@ (8000b88 <ADC_Start_DMA+0x1c>)
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <ADC_Start_DMA+0x20>)
 8000b76:	f002 fb31 	bl	80031dc <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)buffer_adc_2, sizeof(buffer_adc_2)/sizeof(uint16_t));
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	4904      	ldr	r1, [pc, #16]	@ (8000b90 <ADC_Start_DMA+0x24>)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <ADC_Start_DMA+0x28>)
 8000b80:	f002 fb2c 	bl	80031dc <HAL_ADC_Start_DMA>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000380 	.word	0x20000380
 8000b8c:	200001e4 	.word	0x200001e4
 8000b90:	20000384 	.word	0x20000384
 8000b94:	20000250 	.word	0x20000250

08000b98 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <MX_CRC_Init+0x40>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_CRC_Init+0x3c>)
 8000bc2:	f003 fbaf 	bl	8004324 <HAL_CRC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000bcc:	f000 fdc5 	bl	800175a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000398 	.word	0x20000398
 8000bd8:	40023000 	.word	0x40023000

08000bdc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_CRC_MspInit+0x38>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_CRC_MspInit+0x3c>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bf2:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <HAL_CRC_MspInit+0x3c>)
 8000bf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_CRC_MspInit+0x3c>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023000 	.word	0x40023000
 8000c18:	40021000 	.word	0x40021000

08000c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c26:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c3e:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_DMA_Init+0x70>)
 8000c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200b      	movs	r0, #11
 8000c58:	f003 fb2f 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c5c:	200b      	movs	r0, #11
 8000c5e:	f003 fb46 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200c      	movs	r0, #12
 8000c68:	f003 fb27 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c6c:	200c      	movs	r0, #12
 8000c6e:	f003 fb3e 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200d      	movs	r0, #13
 8000c78:	f003 fb1f 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c7c:	200d      	movs	r0, #13
 8000c7e:	f003 fb36 	bl	80042ee <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a2a      	ldr	r2, [pc, #168]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a24      	ldr	r2, [pc, #144]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <MX_GPIO_Init+0xc4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <MX_GPIO_Init+0xc8>)
 8000d0e:	f004 f985 	bl	800501c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <MX_GPIO_Init+0xc8>)
 8000d2c:	f003 ffdc 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESC_Buttom_Pin Mode_Buttom_Pin */
  GPIO_InitStruct.Pin = ESC_Buttom_Pin|Mode_Buttom_Pin;
 8000d30:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_GPIO_Init+0xcc>)
 8000d46:	f003 ffcf 	bl	8004ce8 <HAL_GPIO_Init>

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	@ 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000400 	.word	0x48000400

08000d60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d66:	4a1e      	ldr	r2, [pc, #120]	@ (8000de0 <MX_I2C1_Init+0x80>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <MX_I2C1_Init+0x84>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9a:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d9c:	f004 f956 	bl	800504c <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000da6:	f000 fcd8 	bl	800175a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000dae:	f004 fd1b 	bl	80057e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000db8:	f000 fccf 	bl	800175a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000dc0:	f004 fd5d 	bl	800587e <HAL_I2CEx_ConfigDigitalFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dca:	f000 fcc6 	bl	800175a <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000dce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000dd2:	f004 fda1 	bl	8005918 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003bc 	.word	0x200003bc
 8000de0:	40005400 	.word	0x40005400
 8000de4:	4052060f 	.word	0x4052060f

08000de8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09c      	sub	sp, #112	@ 0x70
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	2244      	movs	r2, #68	@ 0x44
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00d fc5c 	bl	800e6c6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2e      	ldr	r2, [pc, #184]	@ (8000ecc <HAL_I2C_MspInit+0xe4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d154      	bne.n	8000ec2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4618      	mov	r0, r3
 8000e26:	f007 f86f 	bl	8007f08 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e30:	f000 fc93 	bl	800175a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e38:	4a25      	ldr	r2, [pc, #148]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000e64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6a:	2312      	movs	r3, #18
 8000e6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e76:	2304      	movs	r3, #4
 8000e78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f003 ff30 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8000e88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <HAL_I2C_MspInit+0xec>)
 8000ea6:	f003 ff1f 	bl	8004ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_I2C_MspInit+0xe8>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3770      	adds	r7, #112	@ 0x70
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <Keyboard_Init>:
// 第1位为保留位0x00
// 第2-7位为普通按键(0x00-0xFF) 这里做的是4key键盘的协议(外加ESC)
uint8_t hid_buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void Keyboard_Init(void)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	@ 0x34
 8000edc:	af00      	add	r7, sp, #0
    ADC_Init();
 8000ede:	f7ff fe21 	bl	8000b24 <ADC_Init>
    HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	@ 0x64
 8000ee4:	f001 fd6c 	bl	80029c0 <HAL_Delay>
    RGB_Init();
 8000ee8:	f000 fd68 	bl	80019bc <RGB_Init>
    HAL_Delay(100);
 8000eec:	2064      	movs	r0, #100	@ 0x64
 8000eee:	f001 fd67 	bl	80029c0 <HAL_Delay>

    OLED_EnableDiffMode(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 fd34 	bl	8001960 <OLED_EnableDiffMode>
    OLED_EnableFastUpdate(1);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f000 fd4f 	bl	800199c <OLED_EnableFastUpdate>
    OLED_Init();
 8000efe:	f000 fca1 	bl	8001844 <OLED_Init>
    // USB已经在main中初始化

    // 初始化键盘状态
    Keyboard_Settings_Read();
 8000f02:	f000 fb63 	bl	80015cc <Keyboard_Settings_Read>

    HAL_Delay(100);
 8000f06:	2064      	movs	r0, #100	@ 0x64
 8000f08:	f001 fd5a 	bl	80029c0 <HAL_Delay>

    magnetic_key_info_t *keys_info_init[4] = {
 8000f0c:	4b42      	ldr	r3, [pc, #264]	@ (8001018 <Keyboard_Init+0x140>)
 8000f0e:	f107 041c 	add.w	r4, r7, #28
 8000f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        &keyboard_state.KEY_3_info,
        &keyboard_state.KEY_4_info
    };

    uint16_t keys_threshold_init[12] = {
        keyboard_settings._1trigger_position_threshold,
 8000f18:	4b40      	ldr	r3, [pc, #256]	@ (800101c <Keyboard_Init+0x144>)
 8000f1a:	889b      	ldrh	r3, [r3, #4]
    uint16_t keys_threshold_init[12] = {
 8000f1c:	80bb      	strh	r3, [r7, #4]
        keyboard_settings._2trigger_position_threshold,
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800101c <Keyboard_Init+0x144>)
 8000f20:	895b      	ldrh	r3, [r3, #10]
    uint16_t keys_threshold_init[12] = {
 8000f22:	80fb      	strh	r3, [r7, #6]
        keyboard_settings._3trigger_position_threshold,
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <Keyboard_Init+0x144>)
 8000f26:	8a1b      	ldrh	r3, [r3, #16]
    uint16_t keys_threshold_init[12] = {
 8000f28:	813b      	strh	r3, [r7, #8]
        keyboard_settings._4trigger_position_threshold,
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <Keyboard_Init+0x144>)
 8000f2c:	8adb      	ldrh	r3, [r3, #22]
    uint16_t keys_threshold_init[12] = {
 8000f2e:	817b      	strh	r3, [r7, #10]

        keyboard_settings._1trigger_speed_threshold,
 8000f30:	4b3a      	ldr	r3, [pc, #232]	@ (800101c <Keyboard_Init+0x144>)
 8000f32:	88db      	ldrh	r3, [r3, #6]
    uint16_t keys_threshold_init[12] = {
 8000f34:	81bb      	strh	r3, [r7, #12]
        keyboard_settings._2trigger_speed_threshold,
 8000f36:	4b39      	ldr	r3, [pc, #228]	@ (800101c <Keyboard_Init+0x144>)
 8000f38:	899b      	ldrh	r3, [r3, #12]
    uint16_t keys_threshold_init[12] = {
 8000f3a:	81fb      	strh	r3, [r7, #14]
        keyboard_settings._3trigger_speed_threshold,
 8000f3c:	4b37      	ldr	r3, [pc, #220]	@ (800101c <Keyboard_Init+0x144>)
 8000f3e:	8a5b      	ldrh	r3, [r3, #18]
    uint16_t keys_threshold_init[12] = {
 8000f40:	823b      	strh	r3, [r7, #16]
        keyboard_settings._4trigger_speed_threshold,
 8000f42:	4b36      	ldr	r3, [pc, #216]	@ (800101c <Keyboard_Init+0x144>)
 8000f44:	8b1b      	ldrh	r3, [r3, #24]
    uint16_t keys_threshold_init[12] = {
 8000f46:	827b      	strh	r3, [r7, #18]

        keyboard_settings._1release_speed_threshold,
 8000f48:	4b34      	ldr	r3, [pc, #208]	@ (800101c <Keyboard_Init+0x144>)
 8000f4a:	891b      	ldrh	r3, [r3, #8]
    uint16_t keys_threshold_init[12] = {
 8000f4c:	82bb      	strh	r3, [r7, #20]
        keyboard_settings._2release_speed_threshold,
 8000f4e:	4b33      	ldr	r3, [pc, #204]	@ (800101c <Keyboard_Init+0x144>)
 8000f50:	89db      	ldrh	r3, [r3, #14]
    uint16_t keys_threshold_init[12] = {
 8000f52:	82fb      	strh	r3, [r7, #22]
        keyboard_settings._3release_speed_threshold,
 8000f54:	4b31      	ldr	r3, [pc, #196]	@ (800101c <Keyboard_Init+0x144>)
 8000f56:	8a9b      	ldrh	r3, [r3, #20]
    uint16_t keys_threshold_init[12] = {
 8000f58:	833b      	strh	r3, [r7, #24]
        keyboard_settings._4release_speed_threshold
 8000f5a:	4b30      	ldr	r3, [pc, #192]	@ (800101c <Keyboard_Init+0x144>)
 8000f5c:	8b5b      	ldrh	r3, [r3, #26]
    uint16_t keys_threshold_init[12] = {
 8000f5e:	837b      	strh	r3, [r7, #26]
    };

    for (int i = 0; i < 4; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f64:	e046      	b.n	8000ff4 <Keyboard_Init+0x11c>
    {
        keys_info_init[i]->key_state = KEY_RELEASED;
 8000f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	3330      	adds	r3, #48	@ 0x30
 8000f6c:	443b      	add	r3, r7
 8000f6e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000f72:	2203      	movs	r2, #3
 8000f74:	701a      	strb	r2, [r3, #0]
        keys_info_init[i]->trigger_position_threshold = keys_threshold_init[i]; // 触发位置阈值
 8000f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	3330      	adds	r3, #48	@ 0x30
 8000f7c:	443b      	add	r3, r7
 8000f7e:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	3330      	adds	r3, #48	@ 0x30
 8000f88:	443b      	add	r3, r7
 8000f8a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000f8e:	8053      	strh	r3, [r2, #2]
        keys_info_init[i]->trigger_speed_threshold = keys_threshold_init[i + 4]; // 触发速度阈值
 8000f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f92:	1d19      	adds	r1, r3, #4
 8000f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	3330      	adds	r3, #48	@ 0x30
 8000f9a:	443b      	add	r3, r7
 8000f9c:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fa0:	004b      	lsls	r3, r1, #1
 8000fa2:	3330      	adds	r3, #48	@ 0x30
 8000fa4:	443b      	add	r3, r7
 8000fa6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000faa:	8093      	strh	r3, [r2, #4]
        keys_info_init[i]->release_speed_threshold = keys_threshold_init[i + 8]; // 释放速度阈值
 8000fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fae:	f103 0108 	add.w	r1, r3, #8
 8000fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	3330      	adds	r3, #48	@ 0x30
 8000fb8:	443b      	add	r3, r7
 8000fba:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fbe:	004b      	lsls	r3, r1, #1
 8000fc0:	3330      	adds	r3, #48	@ 0x30
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000fc8:	80d3      	strh	r3, [r2, #6]
        keys_info_init[i]->press_time = HAL_GetTick(); // 初始化按下时间戳
 8000fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	3330      	adds	r3, #48	@ 0x30
 8000fd0:	443b      	add	r3, r7
 8000fd2:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8000fd6:	f001 fce7 	bl	80029a8 <HAL_GetTick>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	60a3      	str	r3, [r4, #8]
        keys_info_init[i]->press_speed = 0; // 初始化按下速度
 8000fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	3330      	adds	r3, #48	@ 0x30
 8000fe4:	443b      	add	r3, r7
 8000fe6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000fea:	2200      	movs	r2, #0
 8000fec:	819a      	strh	r2, [r3, #12]
    for (int i = 0; i < 4; i++)
 8000fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	ddb5      	ble.n	8000f66 <Keyboard_Init+0x8e>
    }

    keyboard_state.TouchButton_1 = false;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <Keyboard_Init+0x148>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    keyboard_state.TouchButton_2 = false;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <Keyboard_Init+0x148>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    keyboard_settings.keyboard_mode = 1;
 800100a:	4b04      	ldr	r3, [pc, #16]	@ (800101c <Keyboard_Init+0x144>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	3734      	adds	r7, #52	@ 0x34
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	0800f42c 	.word	0x0800f42c
 800101c:	20000410 	.word	0x20000410
 8001020:	20000438 	.word	0x20000438

08001024 <update_key_state>:

// Helper Func
static void update_key_state(magnetic_key_info_t *key_info, float current_adc, uint16_t pos_threshold, int16_t speed_trigger, int16_t speed_release)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
 800103a:	460b      	mov	r3, r1
 800103c:	80bb      	strh	r3, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	807b      	strh	r3, [r7, #2]
    switch (key_info->key_state)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b03      	cmp	r3, #3
 8001048:	f200 80c1 	bhi.w	80011ce <update_key_state+0x1aa>
 800104c:	a201      	add	r2, pc, #4	@ (adr r2, 8001054 <update_key_state+0x30>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	080010b1 	.word	0x080010b1
 8001058:	0800111b 	.word	0x0800111b
 800105c:	08001165 	.word	0x08001165
 8001060:	08001065 	.word	0x08001065
    {
        case KEY_RELEASED:
            if (current_adc >= pos_threshold)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	db08      	blt.n	800108e <update_key_state+0x6a>
            {
                key_info->key_state = KEY_PRESSED;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001082:	f001 fc91 	bl	80029a8 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed >= speed_trigger)
            {
                key_info->key_state = KEY_PRESSING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 800108c:	e0a8      	b.n	80011e0 <update_key_state+0x1bc>
            else if (key_info->press_speed >= speed_trigger)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001094:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	f300 80a1 	bgt.w	80011e0 <update_key_state+0x1bc>
                key_info->key_state = KEY_PRESSING;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010a4:	f001 fc80 	bl	80029a8 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	609a      	str	r2, [r3, #8]
            break;
 80010ae:	e097      	b.n	80011e0 <update_key_state+0x1bc>
        case KEY_PRESSING:
            if (current_adc >= pos_threshold)
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80010be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c6:	db08      	blt.n	80010da <update_key_state+0xb6>
            {
                key_info->key_state = KEY_PRESSED;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010ce:	f001 fc6b 	bl	80029a8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed < speed_release)
            {
                key_info->key_state = KEY_RELEASING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 80010d8:	e084      	b.n	80011e4 <update_key_state+0x1c0>
            else if (key_info->press_speed < speed_trigger) // 可能是有点抖动造成的
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dd08      	ble.n	80010fa <update_key_state+0xd6>
                key_info->key_state = KEY_RELEASED;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2203      	movs	r2, #3
 80010ec:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010ee:	f001 fc5b 	bl	80029a8 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	609a      	str	r2, [r3, #8]
            break;
 80010f8:	e074      	b.n	80011e4 <update_key_state+0x1c0>
            else if (key_info->press_speed < speed_release)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001100:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001104:	429a      	cmp	r2, r3
 8001106:	dd6d      	ble.n	80011e4 <update_key_state+0x1c0>
                key_info->key_state = KEY_RELEASING;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 800110e:	f001 fc4b 	bl	80029a8 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	609a      	str	r2, [r3, #8]
            break;
 8001118:	e064      	b.n	80011e4 <update_key_state+0x1c0>
        case KEY_PRESSED:
            if (current_adc < pos_threshold)
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	ed97 7a02 	vldr	s14, [r7, #8]
 8001128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001130:	d508      	bpl.n	8001144 <update_key_state+0x120>
            {
                key_info->key_state = KEY_RELEASED;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2203      	movs	r2, #3
 8001136:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001138:	f001 fc36 	bl	80029a8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed < speed_release)
            {
                key_info->key_state = KEY_RELEASING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 8001142:	e051      	b.n	80011e8 <update_key_state+0x1c4>
            else if (key_info->press_speed < speed_release)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800114a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800114e:	429a      	cmp	r2, r3
 8001150:	dd4a      	ble.n	80011e8 <update_key_state+0x1c4>
                key_info->key_state = KEY_RELEASING;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2202      	movs	r2, #2
 8001156:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001158:	f001 fc26 	bl	80029a8 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	609a      	str	r2, [r3, #8]
            break;
 8001162:	e041      	b.n	80011e8 <update_key_state+0x1c4>
        case KEY_RELEASING:
            if (current_adc < pos_threshold)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	d508      	bpl.n	800118e <update_key_state+0x16a>
            {
                key_info->key_state = KEY_RELEASED;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2203      	movs	r2, #3
 8001180:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001182:	f001 fc11 	bl	80029a8 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed >= speed_trigger)
            {
                key_info->key_state = KEY_PRESSING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 800118c:	e02e      	b.n	80011ec <update_key_state+0x1c8>
            else if (key_info->press_speed > speed_release)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001194:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001198:	429a      	cmp	r2, r3
 800119a:	da08      	bge.n	80011ae <update_key_state+0x18a>
                key_info->key_state = KEY_PRESSED;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80011a2:	f001 fc01 	bl	80029a8 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	609a      	str	r2, [r3, #8]
            break;
 80011ac:	e01e      	b.n	80011ec <update_key_state+0x1c8>
            else if (key_info->press_speed >= speed_trigger)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dc17      	bgt.n	80011ec <update_key_state+0x1c8>
                key_info->key_state = KEY_PRESSING;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80011c2:	f001 fbf1 	bl	80029a8 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	609a      	str	r2, [r3, #8]
            break;
 80011cc:	e00e      	b.n	80011ec <update_key_state+0x1c8>

    default:
        key_info->key_state = KEY_RELEASED;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2203      	movs	r2, #3
 80011d2:	701a      	strb	r2, [r3, #0]
        key_info->press_time = HAL_GetTick();
 80011d4:	f001 fbe8 	bl	80029a8 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	609a      	str	r2, [r3, #8]
        break;
 80011de:	e006      	b.n	80011ee <update_key_state+0x1ca>
            break;
 80011e0:	bf00      	nop
 80011e2:	e004      	b.n	80011ee <update_key_state+0x1ca>
            break;
 80011e4:	bf00      	nop
 80011e6:	e002      	b.n	80011ee <update_key_state+0x1ca>
            break;
 80011e8:	bf00      	nop
 80011ea:	e000      	b.n	80011ee <update_key_state+0x1ca>
            break;
 80011ec:	bf00      	nop
    }
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop

080011f8 <Keyboard_Read_Input>:

void Keyboard_Read_Input(keyboard_settings_t *settings, keyboard_state_t *state)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    ADC_Filter();
 8001202:	f7ff fbf7 	bl	80009f4 <ADC_Filter>

    state->TouchButton_1 = (HAL_GPIO_ReadPin(ESC_Buttom_GPIO_Port, ESC_Buttom_Pin) == GPIO_PIN_RESET);
 8001206:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800120a:	484e      	ldr	r0, [pc, #312]	@ (8001344 <Keyboard_Read_Input+0x14c>)
 800120c:	f003 feee 	bl	8004fec <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2da      	uxtb	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    state->TouchButton_2 = (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET);
 8001222:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001226:	4847      	ldr	r0, [pc, #284]	@ (8001344 <Keyboard_Read_Input+0x14c>)
 8001228:	f003 fee0 	bl	8004fec <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2da      	uxtb	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    // 状态机部分
    magnetic_key_info_t *keys[4] = {
        &state->KEY_1_info,
 800123e:	683b      	ldr	r3, [r7, #0]
    magnetic_key_info_t *keys[4] = {
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
        &state->KEY_2_info,
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3310      	adds	r3, #16
    magnetic_key_info_t *keys[4] = {
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
        &state->KEY_3_info,
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3320      	adds	r3, #32
    magnetic_key_info_t *keys[4] = {
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        &state->KEY_4_info
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3330      	adds	r3, #48	@ 0x30
    magnetic_key_info_t *keys[4] = {
 8001252:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    uint16_t pos_thresholds[4] = {
        settings->_1trigger_position_threshold,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	889b      	ldrh	r3, [r3, #4]
    uint16_t pos_thresholds[4] = {
 8001258:	83bb      	strh	r3, [r7, #28]
        settings->_2trigger_position_threshold,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	895b      	ldrh	r3, [r3, #10]
    uint16_t pos_thresholds[4] = {
 800125e:	83fb      	strh	r3, [r7, #30]
        settings->_3trigger_position_threshold,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	8a1b      	ldrh	r3, [r3, #16]
    uint16_t pos_thresholds[4] = {
 8001264:	843b      	strh	r3, [r7, #32]
        settings->_4trigger_position_threshold
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	8adb      	ldrh	r3, [r3, #22]
    uint16_t pos_thresholds[4] = {
 800126a:	847b      	strh	r3, [r7, #34]	@ 0x22
    };

    int16_t speed_triggers[4] = {
        settings->_1trigger_speed_threshold,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	88db      	ldrh	r3, [r3, #6]
 8001270:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 8001272:	82bb      	strh	r3, [r7, #20]
        settings->_2trigger_speed_threshold,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	899b      	ldrh	r3, [r3, #12]
 8001278:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 800127a:	82fb      	strh	r3, [r7, #22]
        settings->_3trigger_speed_threshold,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	8a5b      	ldrh	r3, [r3, #18]
 8001280:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 8001282:	833b      	strh	r3, [r7, #24]
        settings->_4trigger_speed_threshold
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8b1b      	ldrh	r3, [r3, #24]
 8001288:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 800128a:	837b      	strh	r3, [r7, #26]
    };

    int16_t speed_releases[4] = {
        settings->_1release_speed_threshold,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 8001292:	81bb      	strh	r3, [r7, #12]
        settings->_2release_speed_threshold,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	89db      	ldrh	r3, [r3, #14]
 8001298:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 800129a:	81fb      	strh	r3, [r7, #14]
        settings->_3release_speed_threshold,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	8a9b      	ldrh	r3, [r3, #20]
 80012a0:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 80012a2:	823b      	strh	r3, [r7, #16]
        settings->_4release_speed_threshold
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8b5b      	ldrh	r3, [r3, #26]
 80012a8:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 80012aa:	827b      	strh	r3, [r7, #18]
    };

    for (int i = 0; i < 4; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b0:	e040      	b.n	8001334 <Keyboard_Read_Input+0x13c>
    {
        keys[i]->press_speed = CALCULATE_PRESS_SPEED(filter_adc_data[i], last_adc_data[i], 1);
 80012b2:	4a25      	ldr	r2, [pc, #148]	@ (8001348 <Keyboard_Read_Input+0x150>)
 80012b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4a23      	ldr	r2, [pc, #140]	@ (800134c <Keyboard_Read_Input+0x154>)
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c4:	1acb      	subs	r3, r1, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	0152      	lsls	r2, r2, #5
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	3338      	adds	r3, #56	@ 0x38
 80012dc:	443b      	add	r3, r7
 80012de:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80012e2:	b212      	sxth	r2, r2
 80012e4:	819a      	strh	r2, [r3, #12]
        update_key_state(keys[i], filter_adc_data[i], pos_thresholds[i], speed_triggers[i], speed_releases[i]);
 80012e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	3338      	adds	r3, #56	@ 0x38
 80012ec:	443b      	add	r3, r7
 80012ee:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <Keyboard_Read_Input+0x150>)
 80012f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	3338      	adds	r3, #56	@ 0x38
 8001308:	443b      	add	r3, r7
 800130a:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 800130e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	3338      	adds	r3, #56	@ 0x38
 8001314:	443b      	add	r3, r7
 8001316:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 800131a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3338      	adds	r3, #56	@ 0x38
 8001320:	443b      	add	r3, r7
 8001322:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8001326:	eeb0 0a67 	vmov.f32	s0, s15
 800132a:	f7ff fe7b 	bl	8001024 <update_key_state>
    for (int i = 0; i < 4; i++)
 800132e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001330:	3301      	adds	r3, #1
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
 8001334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001336:	2b03      	cmp	r3, #3
 8001338:	ddbb      	ble.n	80012b2 <Keyboard_Read_Input+0xba>
    }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3738      	adds	r7, #56	@ 0x38
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	48000400 	.word	0x48000400
 8001348:	20000388 	.word	0x20000388
 800134c:	20000390 	.word	0x20000390

08001350 <Handle_Mode_Switch>:

void Handle_Mode_Switch(keyboard_settings_t *settings, keyboard_state_t *state)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    static bool last_mode_button_state = false;
    if (state->TouchButton_2 && !last_mode_button_state) // 检测按钮下降沿
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <Handle_Mode_Switch+0x3c>
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <Handle_Mode_Switch+0x54>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00c      	beq.n	800138c <Handle_Mode_Switch+0x3c>
    {
        settings->keyboard_mode++;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	701a      	strb	r2, [r3, #0]
        if (settings->keyboard_mode > 3)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d902      	bls.n	800138c <Handle_Mode_Switch+0x3c>
        {
            settings->keyboard_mode = 1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
        }
    }
    last_mode_button_state = state->TouchButton_2;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <Handle_Mode_Switch+0x54>)
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000488 	.word	0x20000488

080013a8 <Keyboard_Updater>:

void Keyboard_Updater(keyboard_settings_t *settings, keyboard_state_t *state)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    Keyboard_Read_Input(settings, state);
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff1f 	bl	80011f8 <Keyboard_Read_Input>
    Handle_Mode_Switch(settings, state);
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ffc7 	bl	8001350 <Handle_Mode_Switch>
    hid_buffer[0] = KEYBOARD_BUTTON_NONE; // 特殊按键位
 80013c2:	4b66      	ldr	r3, [pc, #408]	@ (800155c <Keyboard_Updater+0x1b4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hid_buffer[1] = KEYBOARD_BUTTON_NONE; // 保留位
 80013c8:	4b64      	ldr	r3, [pc, #400]	@ (800155c <Keyboard_Updater+0x1b4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	705a      	strb	r2, [r3, #1]

    if (settings->enable_quick_trigger)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	789b      	ldrb	r3, [r3, #2]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d064      	beq.n	80014a0 <Keyboard_Updater+0xf8>
    {
        if (state->KEY_1_info.key_state == KEY_PRESSED || state->KEY_1_info.key_state == KEY_PRESSING)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d003      	beq.n	80013e6 <Keyboard_Updater+0x3e>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <Keyboard_Updater+0x46>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 80013e6:	4b5d      	ldr	r3, [pc, #372]	@ (800155c <Keyboard_Updater+0x1b4>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	709a      	strb	r2, [r3, #2]
 80013ec:	e00a      	b.n	8001404 <Keyboard_Updater+0x5c>
        }
        else if (state->KEY_1_info.key_state == KEY_RELEASED || state->KEY_1_info.key_state == KEY_RELEASING)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d003      	beq.n	80013fe <Keyboard_Updater+0x56>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d102      	bne.n	8001404 <Keyboard_Updater+0x5c>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 80013fe:	4b57      	ldr	r3, [pc, #348]	@ (800155c <Keyboard_Updater+0x1b4>)
 8001400:	2200      	movs	r2, #0
 8001402:	709a      	strb	r2, [r3, #2]
        }

        if (state->KEY_2_info.key_state == KEY_PRESSED || state->KEY_2_info.key_state == KEY_PRESSING)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	7c1b      	ldrb	r3, [r3, #16]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d003      	beq.n	8001414 <Keyboard_Updater+0x6c>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	7c1b      	ldrb	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <Keyboard_Updater+0x74>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 8001414:	4b51      	ldr	r3, [pc, #324]	@ (800155c <Keyboard_Updater+0x1b4>)
 8001416:	2209      	movs	r2, #9
 8001418:	70da      	strb	r2, [r3, #3]
 800141a:	e00a      	b.n	8001432 <Keyboard_Updater+0x8a>
        }
        else if (state->KEY_2_info.key_state == KEY_RELEASED || state->KEY_2_info.key_state == KEY_RELEASING)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	7c1b      	ldrb	r3, [r3, #16]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d003      	beq.n	800142c <Keyboard_Updater+0x84>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	7c1b      	ldrb	r3, [r3, #16]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d102      	bne.n	8001432 <Keyboard_Updater+0x8a>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 800142c:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <Keyboard_Updater+0x1b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	70da      	strb	r2, [r3, #3]
        }

        if (state->KEY_3_info.key_state == KEY_PRESSED || state->KEY_3_info.key_state == KEY_PRESSING)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d004      	beq.n	8001446 <Keyboard_Updater+0x9e>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <Keyboard_Updater+0xa6>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 8001446:	4b45      	ldr	r3, [pc, #276]	@ (800155c <Keyboard_Updater+0x1b4>)
 8001448:	220d      	movs	r2, #13
 800144a:	711a      	strb	r2, [r3, #4]
 800144c:	e00c      	b.n	8001468 <Keyboard_Updater+0xc0>
        }
        else if (state->KEY_3_info.key_state == KEY_RELEASED || state->KEY_3_info.key_state == KEY_RELEASING)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d004      	beq.n	8001462 <Keyboard_Updater+0xba>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d102      	bne.n	8001468 <Keyboard_Updater+0xc0>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 8001462:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <Keyboard_Updater+0x1b4>)
 8001464:	2200      	movs	r2, #0
 8001466:	711a      	strb	r2, [r3, #4]
        }

        if (state->KEY_4_info.key_state == KEY_PRESSED || state->KEY_4_info.key_state == KEY_PRESSING)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800146e:	2b01      	cmp	r3, #1
 8001470:	d004      	beq.n	800147c <Keyboard_Updater+0xd4>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <Keyboard_Updater+0xdc>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 800147c:	4b37      	ldr	r3, [pc, #220]	@ (800155c <Keyboard_Updater+0x1b4>)
 800147e:	220e      	movs	r2, #14
 8001480:	715a      	strb	r2, [r3, #5]
 8001482:	e04d      	b.n	8001520 <Keyboard_Updater+0x178>
        }
        else if (state->KEY_4_info.key_state == KEY_RELEASED || state->KEY_4_info.key_state == KEY_RELEASING)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800148a:	2b03      	cmp	r3, #3
 800148c:	d004      	beq.n	8001498 <Keyboard_Updater+0xf0>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001494:	2b02      	cmp	r3, #2
 8001496:	d143      	bne.n	8001520 <Keyboard_Updater+0x178>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <Keyboard_Updater+0x1b4>)
 800149a:	2200      	movs	r2, #0
 800149c:	715a      	strb	r2, [r3, #5]
 800149e:	e03f      	b.n	8001520 <Keyboard_Updater+0x178>
        }
    }
    else
    {
        if (state->KEY_1_info.key_state == KEY_PRESSED)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d103      	bne.n	80014b0 <Keyboard_Updater+0x108>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <Keyboard_Updater+0x1b4>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	709a      	strb	r2, [r3, #2]
 80014ae:	e006      	b.n	80014be <Keyboard_Updater+0x116>
        }
        else if (state->KEY_1_info.key_state == KEY_RELEASED)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d102      	bne.n	80014be <Keyboard_Updater+0x116>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 80014b8:	4b28      	ldr	r3, [pc, #160]	@ (800155c <Keyboard_Updater+0x1b4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	709a      	strb	r2, [r3, #2]
        }

        if (state->KEY_2_info.key_state == KEY_PRESSED)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d103      	bne.n	80014ce <Keyboard_Updater+0x126>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <Keyboard_Updater+0x1b4>)
 80014c8:	2209      	movs	r2, #9
 80014ca:	70da      	strb	r2, [r3, #3]
 80014cc:	e006      	b.n	80014dc <Keyboard_Updater+0x134>
        }
        else if (state->KEY_2_info.key_state == KEY_RELEASED)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7c1b      	ldrb	r3, [r3, #16]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d102      	bne.n	80014dc <Keyboard_Updater+0x134>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <Keyboard_Updater+0x1b4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	70da      	strb	r2, [r3, #3]
        }

        if (state->KEY_3_info.key_state == KEY_PRESSED)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d103      	bne.n	80014ee <Keyboard_Updater+0x146>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <Keyboard_Updater+0x1b4>)
 80014e8:	220d      	movs	r2, #13
 80014ea:	711a      	strb	r2, [r3, #4]
 80014ec:	e007      	b.n	80014fe <Keyboard_Updater+0x156>
        }
        else if (state->KEY_3_info.key_state == KEY_RELEASED)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d102      	bne.n	80014fe <Keyboard_Updater+0x156>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <Keyboard_Updater+0x1b4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	711a      	strb	r2, [r3, #4]
        }

        if (state->KEY_4_info.key_state == KEY_PRESSED)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001504:	2b01      	cmp	r3, #1
 8001506:	d103      	bne.n	8001510 <Keyboard_Updater+0x168>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <Keyboard_Updater+0x1b4>)
 800150a:	220e      	movs	r2, #14
 800150c:	715a      	strb	r2, [r3, #5]
 800150e:	e007      	b.n	8001520 <Keyboard_Updater+0x178>
        }
        else if (state->KEY_4_info.key_state == KEY_RELEASED)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001516:	2b03      	cmp	r3, #3
 8001518:	d102      	bne.n	8001520 <Keyboard_Updater+0x178>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <Keyboard_Updater+0x1b4>)
 800151c:	2200      	movs	r2, #0
 800151e:	715a      	strb	r2, [r3, #5]
        }

    }
    
    hid_buffer[6] = state->TouchButton_1 ? KEYBOARD_BUTTON_ESC : KEYBOARD_BUTTON_NONE;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <Keyboard_Updater+0x186>
 800152a:	2229      	movs	r2, #41	@ 0x29
 800152c:	e000      	b.n	8001530 <Keyboard_Updater+0x188>
 800152e:	2200      	movs	r2, #0
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <Keyboard_Updater+0x1b4>)
 8001532:	719a      	strb	r2, [r3, #6]
    hid_buffer[7] = KEYBOARD_BUTTON_NONE; // 这是padding
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <Keyboard_Updater+0x1b4>)
 8001536:	2200      	movs	r2, #0
 8001538:	71da      	strb	r2, [r3, #7]

    // 这里的TouchButton_2是模式切换按钮,不需要发送到USB HID
    // 发送USB HID报告
    if (settings->keyboard_mode == 1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d104      	bne.n	800154c <Keyboard_Updater+0x1a4>
    {
        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, sizeof(hid_buffer));
 8001542:	2208      	movs	r2, #8
 8001544:	4905      	ldr	r1, [pc, #20]	@ (800155c <Keyboard_Updater+0x1b4>)
 8001546:	4806      	ldr	r0, [pc, #24]	@ (8001560 <Keyboard_Updater+0x1b8>)
 8001548:	f00b fa46 	bl	800c9d8 <USBD_HID_SendReport>
    }

    keyboard_update_flag = 0; // 清除更新标志位
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <Keyboard_Updater+0x1bc>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000480 	.word	0x20000480
 8001560:	2000138c 	.word	0x2000138c
 8001564:	2000047c 	.word	0x2000047c

08001568 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 这里是1000hz的定时器中断
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6 && !keyboard_update_flag) // TIM6用于扫描&更新键盘状态
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10a      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0x28>
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        keyboard_update_flag = 1;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
        Keyboard_Updater(&keyboard_settings, &keyboard_state);
 8001588:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800158a:	480e      	ldr	r0, [pc, #56]	@ (80015c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800158c:	f7ff ff0c 	bl	80013a8 <Keyboard_Updater>
    }

    if (htim->Instance == TIM6)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10a      	bne.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0x48>
    {
        msg_counter++;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	1c54      	adds	r4, r2, #1
 80015a2:	f143 0500 	adc.w	r5, r3, #0
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015a8:	e9c3 4500 	strd	r4, r5, [r3]
        CPS_Counter(); // 计算CPS
 80015ac:	f000 f9a4 	bl	80018f8 <CPS_Counter>
    }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	40001000 	.word	0x40001000
 80015bc:	2000047c 	.word	0x2000047c
 80015c0:	20000438 	.word	0x20000438
 80015c4:	20000410 	.word	0x20000410
 80015c8:	20000c98 	.word	0x20000c98

080015cc <Keyboard_Settings_Read>:


#pragma region EEPROM Simulation

void Keyboard_Settings_Read(void)
{
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
    uint32_t* p_settings_in_flash = (uint32_t*)KEYBOARD_SETTINGS_FLASH_START_ADDRESS;
 80015d2:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <Keyboard_Settings_Read+0xa8>)
 80015d4:	60fb      	str	r3, [r7, #12]

    // 计算Flash中存储的数据的CRC值，并与数据自身存储的CRC值进行比较
    uint32_t crc_check = HAL_CRC_Calculate(&hcrc, p_settings_in_flash, BYTES_TO_WORDS(sizeof(keyboard_settings_t)) - 1);
 80015d6:	2209      	movs	r2, #9
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	4827      	ldr	r0, [pc, #156]	@ (8001678 <Keyboard_Settings_Read+0xac>)
 80015dc:	f002 ff06 	bl	80043ec <HAL_CRC_Calculate>
 80015e0:	60b8      	str	r0, [r7, #8]

    // 从Flash中读取CRC值
    uint32_t stored_crc = *(p_settings_in_flash + BYTES_TO_WORDS(sizeof(keyboard_settings_t)) - 1);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	607b      	str	r3, [r7, #4]

    // 比较CRC值
    if (crc_check == stored_crc)
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d10c      	bne.n	800160a <Keyboard_Settings_Read+0x3e>
    {
        memcpy(&keyboard_settings, (void*)KEYBOARD_SETTINGS_FLASH_START_ADDRESS, sizeof(keyboard_settings_t));
 80015f0:	4a22      	ldr	r2, [pc, #136]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <Keyboard_Settings_Read+0xa8>)
 80015f4:	4614      	mov	r4, r2
 80015f6:	461d      	mov	r5, r3
 80015f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001600:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001604:	e884 0003 	stmia.w	r4, {r0, r1}
        keyboard_settings._4trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
        keyboard_settings._4release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度

        // Keyboard_Settings_Save(); // Debug时候可以关闭
    }
}
 8001608:	e030      	b.n	800166c <Keyboard_Settings_Read+0xa0>
        keyboard_settings.keyboard_mode = 1; // 默认模式
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
        keyboard_settings.rgb_style = 1; // 默认RGB风格
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001612:	2201      	movs	r2, #1
 8001614:	705a      	strb	r2, [r3, #1]
        keyboard_settings.enable_quick_trigger = 0; // 默认不开启快速触发
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001618:	2200      	movs	r2, #0
 800161a:	709a      	strb	r2, [r3, #2]
        keyboard_settings._1trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 800161e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001622:	809a      	strh	r2, [r3, #4]
        keyboard_settings._1trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度阈值
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001626:	2264      	movs	r2, #100	@ 0x64
 8001628:	80da      	strh	r2, [r3, #6]
        keyboard_settings._1release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 800162a:	4b14      	ldr	r3, [pc, #80]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 800162c:	2232      	movs	r2, #50	@ 0x32
 800162e:	811a      	strh	r2, [r3, #8]
        keyboard_settings._2trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001632:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001636:	815a      	strh	r2, [r3, #10]
        keyboard_settings._2trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 8001638:	4b10      	ldr	r3, [pc, #64]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 800163a:	2264      	movs	r2, #100	@ 0x64
 800163c:	819a      	strh	r2, [r3, #12]
        keyboard_settings._2release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001640:	2232      	movs	r2, #50	@ 0x32
 8001642:	81da      	strh	r2, [r3, #14]
        keyboard_settings._3trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 8001644:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800164a:	821a      	strh	r2, [r3, #16]
        keyboard_settings._3trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 800164e:	2264      	movs	r2, #100	@ 0x64
 8001650:	825a      	strh	r2, [r3, #18]
        keyboard_settings._3release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001654:	2232      	movs	r2, #50	@ 0x32
 8001656:	829a      	strh	r2, [r3, #20]
        keyboard_settings._4trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 800165a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800165e:	82da      	strh	r2, [r3, #22]
        keyboard_settings._4trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001662:	2264      	movs	r2, #100	@ 0x64
 8001664:	831a      	strh	r2, [r3, #24]
        keyboard_settings._4release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <Keyboard_Settings_Read+0xb0>)
 8001668:	2232      	movs	r2, #50	@ 0x32
 800166a:	835a      	strh	r2, [r3, #26]
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	0801f800 	.word	0x0801f800
 8001678:	20000398 	.word	0x20000398
 800167c:	20000410 	.word	0x20000410

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f001 f92b 	bl	80028de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f81c 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f7ff fb00 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001690:	f7ff fac4 	bl	8000c1c <MX_DMA_Init>
  MX_ADC2_Init();
 8001694:	f7ff f832 	bl	80006fc <MX_ADC2_Init>
  MX_I2C1_Init();
 8001698:	f7ff fb62 	bl	8000d60 <MX_I2C1_Init>
  MX_USB_Device_Init();
 800169c:	f00c faf0 	bl	800dc80 <MX_USB_Device_Init>
  MX_ADC1_Init();
 80016a0:	f7fe ffa4 	bl	80005ec <MX_ADC1_Init>
  MX_TIM3_Init();
 80016a4:	f000 ff02 	bl	80024ac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80016a8:	f001 f84c 	bl	8002744 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80016ac:	f7ff fa74 	bl	8000b98 <MX_CRC_Init>
  MX_TIM6_Init();
 80016b0:	f000 ff72 	bl	8002598 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 80016b4:	f7ff fc10 	bl	8000ed8 <Keyboard_Init>
  HAL_Delay(100);
 80016b8:	2064      	movs	r0, #100	@ 0x64
 80016ba:	f001 f981 	bl	80029c0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    RGB_Loop();
 80016be:	f000 fcfb 	bl	80020b8 <RGB_Loop>
 80016c2:	e7fc      	b.n	80016be <main+0x3e>

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	@ 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	2238      	movs	r2, #56	@ 0x38
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00c fff7 	bl	800e6c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f005 fe2c 	bl	8007344 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80016ec:	2321      	movs	r3, #33	@ 0x21
 80016ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016f6:	2301      	movs	r3, #1
 80016f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fe:	2303      	movs	r3, #3
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001702:	2302      	movs	r3, #2
 8001704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001706:	2355      	movs	r3, #85	@ 0x55
 8001708:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170a:	2302      	movs	r3, #2
 800170c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800170e:	2302      	movs	r3, #2
 8001710:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fec6 	bl	80074ac <HAL_RCC_OscConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001726:	f000 f818 	bl	800175a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	230f      	movs	r3, #15
 800172c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	2303      	movs	r3, #3
 8001730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2104      	movs	r1, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f006 f9c4 	bl	8007ad0 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800174e:	f000 f804 	bl	800175a <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3750      	adds	r7, #80	@ 0x50
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175e:	b672      	cpsid	i
}
 8001760:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001762:	bf00      	nop
 8001764:	e7fd      	b.n	8001762 <Error_Handler+0x8>
	...

08001768 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 800176e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001772:	2100      	movs	r1, #0
 8001774:	4811      	ldr	r0, [pc, #68]	@ (80017bc <OLED_InitBuffer+0x54>)
 8001776:	f00c ffa6 	bl	800e6c6 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 800177a:	f240 4201 	movw	r2, #1025	@ 0x401
 800177e:	2100      	movs	r1, #0
 8001780:	480f      	ldr	r0, [pc, #60]	@ (80017c0 <OLED_InitBuffer+0x58>)
 8001782:	f00c ffa0 	bl	800e6c6 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <OLED_InitBuffer+0x58>)
 8001788:	2240      	movs	r2, #64	@ 0x40
 800178a:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <OLED_InitBuffer+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <OLED_InitBuffer+0x60>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	e006      	b.n	80017ac <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <OLED_InitBuffer+0x64>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b07      	cmp	r3, #7
 80017b0:	d9f5      	bls.n	800179e <OLED_InitBuffer+0x36>
    }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000494 	.word	0x20000494
 80017c0:	20000894 	.word	0x20000894
 80017c4:	20000489 	.word	0x20000489
 80017c8:	2000048a 	.word	0x2000048a
 80017cc:	2000048c 	.word	0x2000048c

080017d0 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80017d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017da:	2100      	movs	r1, #0
 80017dc:	480a      	ldr	r0, [pc, #40]	@ (8001808 <OLED_ClearBuffer+0x38>)
 80017de:	f00c ff72 	bl	800e6c6 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	e006      	b.n	80017f6 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <OLED_ClearBuffer+0x3c>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	3301      	adds	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b07      	cmp	r3, #7
 80017fa:	d9f5      	bls.n	80017e8 <OLED_ClearBuffer+0x18>
    }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000494 	.word	0x20000494
 800180c:	2000048c 	.word	0x2000048c

08001810 <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af02      	add	r7, sp, #8
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 800181a:	2300      	movs	r3, #0
 800181c:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001822:	f107 020c 	add.w	r2, r7, #12
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2302      	movs	r3, #2
 800182e:	2178      	movs	r1, #120	@ 0x78
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <OLED_SendCommand+0x30>)
 8001832:	f003 fca7 	bl	8005184 <HAL_I2C_Master_Transmit>
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200003bc 	.word	0x200003bc

08001844 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001848:	2064      	movs	r0, #100	@ 0x64
 800184a:	f001 f8b9 	bl	80029c0 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 800184e:	20ae      	movs	r0, #174	@ 0xae
 8001850:	f7ff ffde 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001854:	20d5      	movs	r0, #213	@ 0xd5
 8001856:	f7ff ffdb 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 800185a:	2080      	movs	r0, #128	@ 0x80
 800185c:	f7ff ffd8 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001860:	20a8      	movs	r0, #168	@ 0xa8
 8001862:	f7ff ffd5 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001866:	203f      	movs	r0, #63	@ 0x3f
 8001868:	f7ff ffd2 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 800186c:	20d3      	movs	r0, #211	@ 0xd3
 800186e:	f7ff ffcf 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff ffcc 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001878:	2040      	movs	r0, #64	@ 0x40
 800187a:	f7ff ffc9 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 800187e:	208d      	movs	r0, #141	@ 0x8d
 8001880:	f7ff ffc6 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001884:	2014      	movs	r0, #20
 8001886:	f7ff ffc3 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 800188a:	2020      	movs	r0, #32
 800188c:	f7ff ffc0 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff ffbd 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001896:	20a1      	movs	r0, #161	@ 0xa1
 8001898:	f7ff ffba 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 800189c:	20c8      	movs	r0, #200	@ 0xc8
 800189e:	f7ff ffb7 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 80018a2:	20da      	movs	r0, #218	@ 0xda
 80018a4:	f7ff ffb4 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 80018a8:	2012      	movs	r0, #18
 80018aa:	f7ff ffb1 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 80018ae:	2081      	movs	r0, #129	@ 0x81
 80018b0:	f7ff ffae 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 80018b4:	20cf      	movs	r0, #207	@ 0xcf
 80018b6:	f7ff ffab 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 80018ba:	20d9      	movs	r0, #217	@ 0xd9
 80018bc:	f7ff ffa8 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 80018c0:	20f1      	movs	r0, #241	@ 0xf1
 80018c2:	f7ff ffa5 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 80018c6:	20db      	movs	r0, #219	@ 0xdb
 80018c8:	f7ff ffa2 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 80018cc:	2030      	movs	r0, #48	@ 0x30
 80018ce:	f7ff ff9f 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 80018d2:	20a4      	movs	r0, #164	@ 0xa4
 80018d4:	f7ff ff9c 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 80018d8:	20a6      	movs	r0, #166	@ 0xa6
 80018da:	f7ff ff99 	bl	8001810 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 80018de:	202e      	movs	r0, #46	@ 0x2e
 80018e0:	f7ff ff96 	bl	8001810 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 80018e4:	f7ff ff40 	bl	8001768 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 80018e8:	f7ff ff72 	bl	80017d0 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 80018ec:	20af      	movs	r0, #175	@ 0xaf
 80018ee:	f7ff ff8f 	bl	8001810 <OLED_SendCommand>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <CPS_Counter>:
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新全局动画管理器
    OLED_SmartUpdate(); // 使用智能更新模式
}

void CPS_Counter(void)
{
 80018f8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80018fc:	af00      	add	r7, sp, #0
    static uint64_t last_counter = 0;

    if (msg_counter - last_counter >= 100) // 每100ms计算一次CPS
 80018fe:	4915      	ldr	r1, [pc, #84]	@ (8001954 <CPS_Counter+0x5c>)
 8001900:	e9d1 4500 	ldrd	r4, r5, [r1]
 8001904:	4914      	ldr	r1, [pc, #80]	@ (8001958 <CPS_Counter+0x60>)
 8001906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800190a:	1a22      	subs	r2, r4, r0
 800190c:	eb65 0301 	sbc.w	r3, r5, r1
 8001910:	2a64      	cmp	r2, #100	@ 0x64
 8001912:	f173 0300 	sbcs.w	r3, r3, #0
 8001916:	d318      	bcc.n	800194a <CPS_Counter+0x52>
    {
        cps = (uint16_t) ((msg_counter - last_counter) * 10);
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <CPS_Counter+0x5c>)
 800191a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <CPS_Counter+0x60>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	ebb0 0802 	subs.w	r8, r0, r2
 8001928:	eb61 0903 	sbc.w	r9, r1, r3
 800192c:	fa1f f388 	uxth.w	r3, r8
 8001930:	461a      	mov	r2, r3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <CPS_Counter+0x64>)
 800193c:	801a      	strh	r2, [r3, #0]
        last_counter = msg_counter;
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <CPS_Counter+0x5c>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	4904      	ldr	r1, [pc, #16]	@ (8001958 <CPS_Counter+0x60>)
 8001946:	e9c1 2300 	strd	r2, r3, [r1]
    }
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001952:	4770      	bx	lr
 8001954:	20000c98 	.word	0x20000c98
 8001958:	20000ca0 	.word	0x20000ca0
 800195c:	20000c96 	.word	0x20000c96

08001960 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 800196a:	4a09      	ldr	r2, [pc, #36]	@ (8001990 <OLED_EnableDiffMode+0x30>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	7013      	strb	r3, [r2, #0]
    if (enable)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <OLED_EnableDiffMode+0x34>)
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <OLED_EnableDiffMode+0x38>)
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001982:	461a      	mov	r2, r3
 8001984:	f00c ff1b 	bl	800e7be <memcpy>
    }
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200010a8 	.word	0x200010a8
 8001994:	20000ca8 	.word	0x20000ca8
 8001998:	20000494 	.word	0x20000494

0800199c <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 80019a6:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <OLED_EnableFastUpdate+0x1c>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	7013      	strb	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000000 	.word	0x20000000

080019bc <RGB_Init>:
static led_fade_t led_fade_states[NUM_LEDS];
static uint8_t led_colors[NUM_LEDS][3];
static uint16_t pwm_buffer[PWM_BUFFER_LEN];

void RGB_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    RGB_Clear();
 80019c0:	f000 f838 	bl	8001a34 <RGB_Clear>
    RGB_Update();
 80019c4:	f000 f84e 	bl	8001a64 <RGB_Update>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <RGB_SetColor>:

// RGB范围是0-255
// led_index: 0-3
void RGB_SetColor(uint8_t led_index, uint8_t red, uint8_t green, uint8_t blue)
{
 80019cc:	b490      	push	{r4, r7}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	4603      	mov	r3, r0
 80019e0:	71bb      	strb	r3, [r7, #6]
 80019e2:	460b      	mov	r3, r1
 80019e4:	717b      	strb	r3, [r7, #5]
 80019e6:	4613      	mov	r3, r2
 80019e8:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d819      	bhi.n	8001a24 <RGB_SetColor+0x58>
    {
        led_colors[led_index][0] = red;
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	490f      	ldr	r1, [pc, #60]	@ (8001a30 <RGB_SetColor+0x64>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	79ba      	ldrb	r2, [r7, #6]
 80019fe:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][1] = green;
 8001a00:	79fa      	ldrb	r2, [r7, #7]
 8001a02:	490b      	ldr	r1, [pc, #44]	@ (8001a30 <RGB_SetColor+0x64>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	797a      	ldrb	r2, [r7, #5]
 8001a10:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][2] = blue;
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	4906      	ldr	r1, [pc, #24]	@ (8001a30 <RGB_SetColor+0x64>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3302      	adds	r3, #2
 8001a20:	793a      	ldrb	r2, [r7, #4]
 8001a22:	701a      	strb	r2, [r3, #0]
    }
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc90      	pop	{r4, r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200010d0 	.word	0x200010d0

08001a34 <RGB_Clear>:

void RGB_Clear(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	e009      	b.n	8001a54 <RGB_Clear+0x20>
    {
        RGB_SetColor(i, 0, 0, 0);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	b2d8      	uxtb	r0, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f7ff ffbf 	bl	80019cc <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3301      	adds	r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	ddf2      	ble.n	8001a40 <RGB_Clear+0xc>
    }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <RGB_Update>:

//! setColor之后请直接调用这个来更新LED颜色
void RGB_Update(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	e067      	b.n	8001b44 <RGB_Update+0xe0>
    {
        // Green
        for (int j = 7; j >= 0; j--)
 8001a74:	2307      	movs	r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e01b      	b.n	8001ab2 <RGB_Update+0x4e>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][1] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001a7a:	4941      	ldr	r1, [pc, #260]	@ (8001b80 <RGB_Update+0x11c>)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	3301      	adds	r3, #1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	fa42 f303 	asr.w	r3, r2, r3
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <RGB_Update+0x3a>
 8001a9a:	2188      	movs	r1, #136	@ 0x88
 8001a9c:	e000      	b.n	8001aa0 <RGB_Update+0x3c>
 8001a9e:	2144      	movs	r1, #68	@ 0x44
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	617a      	str	r2, [r7, #20]
 8001aa6:	4a37      	ldr	r2, [pc, #220]	@ (8001b84 <RGB_Update+0x120>)
 8001aa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	dae0      	bge.n	8001a7a <RGB_Update+0x16>
        }
        // Red
        for (int j = 7; j >= 0; j--)
 8001ab8:	2307      	movs	r3, #7
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	e01a      	b.n	8001af4 <RGB_Update+0x90>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][0] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001abe:	4930      	ldr	r1, [pc, #192]	@ (8001b80 <RGB_Update+0x11c>)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	fa42 f303 	asr.w	r3, r2, r3
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <RGB_Update+0x7c>
 8001adc:	2188      	movs	r1, #136	@ 0x88
 8001ade:	e000      	b.n	8001ae2 <RGB_Update+0x7e>
 8001ae0:	2144      	movs	r1, #68	@ 0x44
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	617a      	str	r2, [r7, #20]
 8001ae8:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <RGB_Update+0x120>)
 8001aea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	dae1      	bge.n	8001abe <RGB_Update+0x5a>
        }
        // Blue
        for (int j = 7; j >= 0; j--)
 8001afa:	2307      	movs	r3, #7
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	e01b      	b.n	8001b38 <RGB_Update+0xd4>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][2] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001b00:	491f      	ldr	r1, [pc, #124]	@ (8001b80 <RGB_Update+0x11c>)
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	fa42 f303 	asr.w	r3, r2, r3
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <RGB_Update+0xc0>
 8001b20:	2188      	movs	r1, #136	@ 0x88
 8001b22:	e000      	b.n	8001b26 <RGB_Update+0xc2>
 8001b24:	2144      	movs	r1, #68	@ 0x44
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	617a      	str	r2, [r7, #20]
 8001b2c:	4a15      	ldr	r2, [pc, #84]	@ (8001b84 <RGB_Update+0x120>)
 8001b2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	dae0      	bge.n	8001b00 <RGB_Update+0x9c>
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	3301      	adds	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	dd94      	ble.n	8001a74 <RGB_Update+0x10>
        }
    }

    // Reset pulse
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	e009      	b.n	8001b64 <RGB_Update+0x100>
    {
        pwm_buffer[buffer_index++] = 0;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	617a      	str	r2, [r7, #20]
 8001b56:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <RGB_Update+0x120>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b29      	cmp	r3, #41	@ 0x29
 8001b68:	ddf2      	ble.n	8001b50 <RGB_Update+0xec>
    }

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwm_buffer, PWM_BUFFER_LEN);
 8001b6a:	238a      	movs	r3, #138	@ 0x8a
 8001b6c:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <RGB_Update+0x120>)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <RGB_Update+0x124>)
 8001b72:	f006 fc71 	bl	8008458 <HAL_TIM_PWM_Start_DMA>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200010d0 	.word	0x200010d0
 8001b84:	200010dc 	.word	0x200010dc
 8001b88:	200011f8 	.word	0x200011f8

08001b8c <Hue_To_RGB>:

// --- Helper function for rainbow effect ---
// Converts a hue value (0-255) to an RGB color.
static void Hue_To_RGB(uint8_t hue, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	4603      	mov	r3, r0
 8001b9a:	73fb      	strb	r3, [r7, #15]
    if (hue < 85)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b54      	cmp	r3, #84	@ 0x54
 8001ba0:	d814      	bhi.n	8001bcc <Hue_To_RGB+0x40>
    { // Red -> Green
        *r = (85 - hue) * 3;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	0052      	lsls	r2, r2, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	701a      	strb	r2, [r3, #0]
        *g = hue * 3;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	0052      	lsls	r2, r2, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        hue -= 170;
        *r = hue * 3;
        *g = 0;
        *b = (85 - hue) * 3;
    }
}
 8001bca:	e031      	b.n	8001c30 <Hue_To_RGB+0xa4>
    else if (hue < 170)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	2ba9      	cmp	r3, #169	@ 0xa9
 8001bd0:	d817      	bhi.n	8001c02 <Hue_To_RGB+0x76>
        hue -= 85;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	3b55      	subs	r3, #85	@ 0x55
 8001bd6:	73fb      	strb	r3, [r7, #15]
        *r = 0;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
        *g = (85 - hue) * 3;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	0052      	lsls	r2, r2, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	701a      	strb	r2, [r3, #0]
        *b = hue * 3;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	701a      	strb	r2, [r3, #0]
}
 8001c00:	e016      	b.n	8001c30 <Hue_To_RGB+0xa4>
        hue -= 170;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3356      	adds	r3, #86	@ 0x56
 8001c06:	73fb      	strb	r3, [r7, #15]
        *r = hue * 3;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	0052      	lsls	r2, r2, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
        *b = (85 - hue) * 3;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	0052      	lsls	r2, r2, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	701a      	strb	r2, [r3, #0]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <RGB_RainbowCycle>:

static uint16_t rainbow_hue = 0;

void RGB_RainbowCycle(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
    uint8_t r, g, b;
    for (int i = 0; i < NUM_LEDS; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	e018      	b.n	8001c7a <RGB_RainbowCycle+0x3e>
    {
        // Calculate the hue for each LED, offset by its position to create the rainbow.
        uint8_t hue = (rainbow_hue + (i * 256 / NUM_LEDS)) & 0xFF;
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <RGB_RainbowCycle+0x6c>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	019b      	lsls	r3, r3, #6
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	70fb      	strb	r3, [r7, #3]
        Hue_To_RGB(hue, &r, &g, &b);
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	1c7a      	adds	r2, r7, #1
 8001c5e:	1cb9      	adds	r1, r7, #2
 8001c60:	78f8      	ldrb	r0, [r7, #3]
 8001c62:	f7ff ff93 	bl	8001b8c <Hue_To_RGB>
        RGB_SetColor(i, r, g, b);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b2d8      	uxtb	r0, r3
 8001c6a:	78b9      	ldrb	r1, [r7, #2]
 8001c6c:	787a      	ldrb	r2, [r7, #1]
 8001c6e:	783b      	ldrb	r3, [r7, #0]
 8001c70:	f7ff feac 	bl	80019cc <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	dde3      	ble.n	8001c48 <RGB_RainbowCycle+0xc>
    }
    RGB_Update();
 8001c80:	f7ff fef0 	bl	8001a64 <RGB_Update>

    // Increment the hue for the next cycle to make the rainbow move.
    rainbow_hue++;
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <RGB_RainbowCycle+0x6c>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <RGB_RainbowCycle+0x6c>)
 8001c8e:	801a      	strh	r2, [r3, #0]
    if (rainbow_hue >= 256)
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <RGB_RainbowCycle+0x6c>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	2bff      	cmp	r3, #255	@ 0xff
 8001c96:	d902      	bls.n	8001c9e <RGB_RainbowCycle+0x62>
    {
        rainbow_hue = 0;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <RGB_RainbowCycle+0x6c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	801a      	strh	r2, [r3, #0]
    }
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200011f0 	.word	0x200011f0

08001cac <RGB_InitFade>:

void RGB_InitFade(uint8_t led_index)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
    if (led_index < NUM_LEDS)
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d874      	bhi.n	8001da6 <RGB_InitFade+0xfa>
    {
        if (led_fade_states[led_index].is_first_trigger == 1)
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	493c      	ldr	r1, [pc, #240]	@ (8001db0 <RGB_InitFade+0x104>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3308      	adds	r3, #8
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d13e      	bne.n	8001d4e <RGB_InitFade+0xa2>
        {
            led_fade_states[led_index].is_first_trigger = 0;
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	4937      	ldr	r1, [pc, #220]	@ (8001db0 <RGB_InitFade+0x104>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3308      	adds	r3, #8
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
            led_fade_states[led_index].current_r = rand() % 256;
 8001ce2:	f00c fbad 	bl	800e440 <rand>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	425a      	negs	r2, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	bf58      	it	pl
 8001cf0:	4253      	negpl	r3, r2
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	b2d8      	uxtb	r0, r3
 8001cf6:	492e      	ldr	r1, [pc, #184]	@ (8001db0 <RGB_InitFade+0x104>)
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3303      	adds	r3, #3
 8001d02:	4602      	mov	r2, r0
 8001d04:	701a      	strb	r2, [r3, #0]
            led_fade_states[led_index].current_g = rand() % 256;
 8001d06:	f00c fb9b 	bl	800e440 <rand>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	425a      	negs	r2, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	bf58      	it	pl
 8001d14:	4253      	negpl	r3, r2
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	b2d8      	uxtb	r0, r3
 8001d1a:	4925      	ldr	r1, [pc, #148]	@ (8001db0 <RGB_InitFade+0x104>)
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	3304      	adds	r3, #4
 8001d26:	4602      	mov	r2, r0
 8001d28:	701a      	strb	r2, [r3, #0]
            led_fade_states[led_index].current_b = rand() % 256;
 8001d2a:	f00c fb89 	bl	800e440 <rand>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	425a      	negs	r2, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	bf58      	it	pl
 8001d38:	4253      	negpl	r3, r2
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	b2d8      	uxtb	r0, r3
 8001d3e:	491c      	ldr	r1, [pc, #112]	@ (8001db0 <RGB_InitFade+0x104>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	3305      	adds	r3, #5
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	701a      	strb	r2, [r3, #0]
        }

        led_fade_states[led_index].target_r = 0;
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	4917      	ldr	r1, [pc, #92]	@ (8001db0 <RGB_InitFade+0x104>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_g = 0;
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	4913      	ldr	r1, [pc, #76]	@ (8001db0 <RGB_InitFade+0x104>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_b = 0;
 8001d70:	79fa      	ldrb	r2, [r7, #7]
 8001d72:	490f      	ldr	r1, [pc, #60]	@ (8001db0 <RGB_InitFade+0x104>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].is_fading = 0;
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	490a      	ldr	r1, [pc, #40]	@ (8001db0 <RGB_InitFade+0x104>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3307      	adds	r3, #7
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].fade_step = 5;
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	4906      	ldr	r1, [pc, #24]	@ (8001db0 <RGB_InitFade+0x104>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3306      	adds	r3, #6
 8001da2:	2205      	movs	r2, #5
 8001da4:	701a      	strb	r2, [r3, #0]
    }
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200010ac 	.word	0x200010ac

08001db4 <RGB_TriggerFade>:

// 触发LED渐暗效果
void RGB_TriggerFade(uint8_t led_index, uint8_t target_r, uint8_t target_g, uint8_t target_b)
{
 8001db4:	b490      	push	{r4, r7}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4604      	mov	r4, r0
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71bb      	strb	r3, [r7, #6]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	717b      	strb	r3, [r7, #5]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d822      	bhi.n	8001e1e <RGB_TriggerFade+0x6a>
    {
        // 设置目标颜色
        led_fade_states[led_index].target_r = target_r;
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	4913      	ldr	r1, [pc, #76]	@ (8001e28 <RGB_TriggerFade+0x74>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	79ba      	ldrb	r2, [r7, #6]
 8001de6:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_g = target_g;
 8001de8:	79fa      	ldrb	r2, [r7, #7]
 8001dea:	490f      	ldr	r1, [pc, #60]	@ (8001e28 <RGB_TriggerFade+0x74>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	3301      	adds	r3, #1
 8001df6:	797a      	ldrb	r2, [r7, #5]
 8001df8:	701a      	strb	r2, [r3, #0]
        led_fade_states[led_index].target_b = target_b;
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	490a      	ldr	r1, [pc, #40]	@ (8001e28 <RGB_TriggerFade+0x74>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	3302      	adds	r3, #2
 8001e08:	793a      	ldrb	r2, [r7, #4]
 8001e0a:	701a      	strb	r2, [r3, #0]

        // 开始渐暗
        led_fade_states[led_index].is_fading = 1;
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	4906      	ldr	r1, [pc, #24]	@ (8001e28 <RGB_TriggerFade+0x74>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	3307      	adds	r3, #7
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
    }
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc90      	pop	{r4, r7}
 8001e26:	4770      	bx	lr
 8001e28:	200010ac 	.word	0x200010ac

08001e2c <RGB_ProcessFade>:

// 处理渐暗效果
void RGB_ProcessFade(void)
{    
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	e133      	b.n	80020a0 <RGB_ProcessFade+0x274>
    {
        if (led_fade_states[i].is_fading)
 8001e38:	499e      	ldr	r1, [pc, #632]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	3307      	adds	r3, #7
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8126 	beq.w	800209a <RGB_ProcessFade+0x26e>
        {
            // 渐暗处理
            if (led_fade_states[i].current_r + led_fade_states[i].target_r > led_fade_states[i].fade_step)
 8001e4e:	4999      	ldr	r1, [pc, #612]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4994      	ldr	r1, [pc, #592]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	18c1      	adds	r1, r0, r3
 8001e70:	4890      	ldr	r0, [pc, #576]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	4403      	add	r3, r0
 8001e7c:	3306      	adds	r3, #6
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4299      	cmp	r1, r3
 8001e82:	dd1b      	ble.n	8001ebc <RGB_ProcessFade+0x90>
                led_fade_states[i].current_r -= led_fade_states[i].fade_step;
 8001e84:	498b      	ldr	r1, [pc, #556]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3303      	adds	r3, #3
 8001e92:	7819      	ldrb	r1, [r3, #0]
 8001e94:	4887      	ldr	r0, [pc, #540]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4403      	add	r3, r0
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	1acb      	subs	r3, r1, r3
 8001ea6:	b2d8      	uxtb	r0, r3
 8001ea8:	4982      	ldr	r1, [pc, #520]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e008      	b.n	8001ece <RGB_ProcessFade+0xa2>
            else
                led_fade_states[i].current_r = 0;
 8001ebc:	497d      	ldr	r1, [pc, #500]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3303      	adds	r3, #3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]

            if (led_fade_states[i].current_g + led_fade_states[i].target_g > led_fade_states[i].fade_step)
 8001ece:	4979      	ldr	r1, [pc, #484]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	3304      	adds	r3, #4
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4974      	ldr	r1, [pc, #464]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	3301      	adds	r3, #1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	18c1      	adds	r1, r0, r3
 8001ef2:	4870      	ldr	r0, [pc, #448]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	4403      	add	r3, r0
 8001efe:	3306      	adds	r3, #6
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4299      	cmp	r1, r3
 8001f04:	dd1b      	ble.n	8001f3e <RGB_ProcessFade+0x112>
                led_fade_states[i].current_g -= led_fade_states[i].fade_step;
 8001f06:	496b      	ldr	r1, [pc, #428]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	3304      	adds	r3, #4
 8001f14:	7819      	ldrb	r1, [r3, #0]
 8001f16:	4867      	ldr	r0, [pc, #412]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	4403      	add	r3, r0
 8001f22:	3306      	adds	r3, #6
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	b2d8      	uxtb	r0, r3
 8001f2a:	4962      	ldr	r1, [pc, #392]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	3304      	adds	r3, #4
 8001f38:	4602      	mov	r2, r0
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e008      	b.n	8001f50 <RGB_ProcessFade+0x124>
            else
                led_fade_states[i].current_g = 0;
 8001f3e:	495d      	ldr	r1, [pc, #372]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]

            if (led_fade_states[i].current_b + led_fade_states[i].target_b > led_fade_states[i].fade_step)
 8001f50:	4958      	ldr	r1, [pc, #352]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3305      	adds	r3, #5
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	4954      	ldr	r1, [pc, #336]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3302      	adds	r3, #2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	18c1      	adds	r1, r0, r3
 8001f74:	484f      	ldr	r0, [pc, #316]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4403      	add	r3, r0
 8001f80:	3306      	adds	r3, #6
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4299      	cmp	r1, r3
 8001f86:	dd1b      	ble.n	8001fc0 <RGB_ProcessFade+0x194>
                led_fade_states[i].current_b -= led_fade_states[i].fade_step;
 8001f88:	494a      	ldr	r1, [pc, #296]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	3305      	adds	r3, #5
 8001f96:	7819      	ldrb	r1, [r3, #0]
 8001f98:	4846      	ldr	r0, [pc, #280]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4403      	add	r3, r0
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	1acb      	subs	r3, r1, r3
 8001faa:	b2d8      	uxtb	r0, r3
 8001fac:	4941      	ldr	r1, [pc, #260]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3305      	adds	r3, #5
 8001fba:	4602      	mov	r2, r0
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e008      	b.n	8001fd2 <RGB_ProcessFade+0x1a6>
            else
                led_fade_states[i].current_b = 0;
 8001fc0:	493c      	ldr	r1, [pc, #240]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3305      	adds	r3, #5
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
            
            // 设置LED颜色
            RGB_SetColor(i, led_fade_states[i].current_r, 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	b2d8      	uxtb	r0, r3
 8001fd6:	4937      	ldr	r1, [pc, #220]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3303      	adds	r3, #3
 8001fe4:	7819      	ldrb	r1, [r3, #0]
 8001fe6:	4c33      	ldr	r4, [pc, #204]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	4423      	add	r3, r4
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	781c      	ldrb	r4, [r3, #0]
 8001ff6:	4d2f      	ldr	r5, [pc, #188]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	442b      	add	r3, r5
 8002002:	3305      	adds	r3, #5
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4622      	mov	r2, r4
 8002008:	f7ff fce0 	bl	80019cc <RGB_SetColor>
                           led_fade_states[i].current_g, 
                           led_fade_states[i].current_b);
            
            // 检查是否渐暗完成
            if (led_fade_states[i].current_r == led_fade_states[i].target_r && 
 800200c:	4929      	ldr	r1, [pc, #164]	@ (80020b4 <RGB_ProcessFade+0x288>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	440b      	add	r3, r1
 8002018:	3303      	adds	r3, #3
 800201a:	7819      	ldrb	r1, [r3, #0]
 800201c:	4825      	ldr	r0, [pc, #148]	@ (80020b4 <RGB_ProcessFade+0x288>)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	4403      	add	r3, r0
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4299      	cmp	r1, r3
 800202c:	d135      	bne.n	800209a <RGB_ProcessFade+0x26e>
                led_fade_states[i].current_g == led_fade_states[i].target_g && 
 800202e:	4921      	ldr	r1, [pc, #132]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	440b      	add	r3, r1
 800203a:	3304      	adds	r3, #4
 800203c:	7819      	ldrb	r1, [r3, #0]
 800203e:	481d      	ldr	r0, [pc, #116]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	4403      	add	r3, r0
 800204a:	3301      	adds	r3, #1
 800204c:	781b      	ldrb	r3, [r3, #0]
            if (led_fade_states[i].current_r == led_fade_states[i].target_r && 
 800204e:	4299      	cmp	r1, r3
 8002050:	d123      	bne.n	800209a <RGB_ProcessFade+0x26e>
                led_fade_states[i].current_b == led_fade_states[i].target_b)
 8002052:	4918      	ldr	r1, [pc, #96]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	440b      	add	r3, r1
 800205e:	3305      	adds	r3, #5
 8002060:	7819      	ldrb	r1, [r3, #0]
 8002062:	4814      	ldr	r0, [pc, #80]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	4403      	add	r3, r0
 800206e:	3302      	adds	r3, #2
 8002070:	781b      	ldrb	r3, [r3, #0]
                led_fade_states[i].current_g == led_fade_states[i].target_g && 
 8002072:	4299      	cmp	r1, r3
 8002074:	d111      	bne.n	800209a <RGB_ProcessFade+0x26e>
            {
                led_fade_states[i].is_fading = 0;
 8002076:	490f      	ldr	r1, [pc, #60]	@ (80020b4 <RGB_ProcessFade+0x288>)
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	440b      	add	r3, r1
 8002082:	3307      	adds	r3, #7
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
                led_fade_states[i].is_first_trigger = 1;
 8002088:	490a      	ldr	r1, [pc, #40]	@ (80020b4 <RGB_ProcessFade+0x288>)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	440b      	add	r3, r1
 8002094:	3308      	adds	r3, #8
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3301      	adds	r3, #1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	f77f aec8 	ble.w	8001e38 <RGB_ProcessFade+0xc>
            }
        }
    }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdb0      	pop	{r4, r5, r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200010ac 	.word	0x200010ac

080020b8 <RGB_Loop>:


void RGB_Loop(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
    if (keyboard_settings.rgb_style == 1)
 80020bc:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <RGB_Loop+0xfc>)
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <RGB_Loop+0x18>
    {
        RGB_RainbowCycle();
 80020c4:	f7ff fdba 	bl	8001c3c <RGB_RainbowCycle>
        HAL_Delay(100); // 控制速度
 80020c8:	2064      	movs	r0, #100	@ 0x64
 80020ca:	f000 fc79 	bl	80029c0 <HAL_Delay>
    {
        RGB_Clear(); // 清除颜色
        RGB_Update(); // 更新LED颜色
        HAL_Delay(100); // 控制速度
    }
}
 80020ce:	e06f      	b.n	80021b0 <RGB_Loop+0xf8>
    else if (keyboard_settings.rgb_style == 2)
 80020d0:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <RGB_Loop+0xfc>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d160      	bne.n	800219a <RGB_Loop+0xe2>
        if (keyboard_state.KEY_1_info.key_state == KEY_PRESSED)
 80020d8:	4b37      	ldr	r3, [pc, #220]	@ (80021b8 <RGB_Loop+0x100>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d103      	bne.n	80020e8 <RGB_Loop+0x30>
            RGB_InitFade(0); // 触发LED 1渐暗
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff fde3 	bl	8001cac <RGB_InitFade>
 80020e6:	e00c      	b.n	8002102 <RGB_Loop+0x4a>
        else if (keyboard_state.KEY_1_info.key_state == KEY_RELEASED)
 80020e8:	4b33      	ldr	r3, [pc, #204]	@ (80021b8 <RGB_Loop+0x100>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d108      	bne.n	8002102 <RGB_Loop+0x4a>
            led_fade_states[0].is_first_trigger = 1;
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <RGB_Loop+0x104>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	721a      	strb	r2, [r3, #8]
            RGB_TriggerFade(0, 0, 0, 0);
 80020f6:	2300      	movs	r3, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fe59 	bl	8001db4 <RGB_TriggerFade>
        if (keyboard_state.KEY_2_info.key_state == KEY_PRESSED)
 8002102:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <RGB_Loop+0x100>)
 8002104:	7c1b      	ldrb	r3, [r3, #16]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d103      	bne.n	8002112 <RGB_Loop+0x5a>
            RGB_InitFade(1); // 触发LED 2渐暗
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff fdce 	bl	8001cac <RGB_InitFade>
 8002110:	e00c      	b.n	800212c <RGB_Loop+0x74>
        else if (keyboard_state.KEY_2_info.key_state == KEY_RELEASED)
 8002112:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <RGB_Loop+0x100>)
 8002114:	7c1b      	ldrb	r3, [r3, #16]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d108      	bne.n	800212c <RGB_Loop+0x74>
            led_fade_states[1].is_first_trigger = 1;
 800211a:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <RGB_Loop+0x104>)
 800211c:	2201      	movs	r2, #1
 800211e:	745a      	strb	r2, [r3, #17]
            RGB_TriggerFade(1, 0, 0, 0);
 8002120:	2300      	movs	r3, #0
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff fe44 	bl	8001db4 <RGB_TriggerFade>
        if (keyboard_state.KEY_3_info.key_state == KEY_PRESSED)
 800212c:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <RGB_Loop+0x100>)
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d103      	bne.n	800213e <RGB_Loop+0x86>
            RGB_InitFade(2); // 触发LED 3渐暗
 8002136:	2002      	movs	r0, #2
 8002138:	f7ff fdb8 	bl	8001cac <RGB_InitFade>
 800213c:	e00d      	b.n	800215a <RGB_Loop+0xa2>
        else if (keyboard_state.KEY_3_info.key_state == KEY_RELEASED)
 800213e:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <RGB_Loop+0x100>)
 8002140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d108      	bne.n	800215a <RGB_Loop+0xa2>
            led_fade_states[2].is_first_trigger = 1;
 8002148:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <RGB_Loop+0x104>)
 800214a:	2201      	movs	r2, #1
 800214c:	769a      	strb	r2, [r3, #26]
            RGB_TriggerFade(2, 0, 0, 0);
 800214e:	2300      	movs	r3, #0
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2002      	movs	r0, #2
 8002156:	f7ff fe2d 	bl	8001db4 <RGB_TriggerFade>
        if (keyboard_state.KEY_4_info.key_state == KEY_PRESSED)
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <RGB_Loop+0x100>)
 800215c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002160:	2b01      	cmp	r3, #1
 8002162:	d103      	bne.n	800216c <RGB_Loop+0xb4>
            RGB_InitFade(3); // 触发LED 4渐暗
 8002164:	2003      	movs	r0, #3
 8002166:	f7ff fda1 	bl	8001cac <RGB_InitFade>
 800216a:	e00e      	b.n	800218a <RGB_Loop+0xd2>
        else if (keyboard_state.KEY_4_info.key_state == KEY_RELEASED)
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <RGB_Loop+0x100>)
 800216e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002172:	2b03      	cmp	r3, #3
 8002174:	d109      	bne.n	800218a <RGB_Loop+0xd2>
            led_fade_states[3].is_first_trigger = 1;
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <RGB_Loop+0x104>)
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            RGB_TriggerFade(3, 0, 0, 0);
 800217e:	2300      	movs	r3, #0
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2003      	movs	r0, #3
 8002186:	f7ff fe15 	bl	8001db4 <RGB_TriggerFade>
        RGB_ProcessFade(); // 处理渐暗效果
 800218a:	f7ff fe4f 	bl	8001e2c <RGB_ProcessFade>
        RGB_Update(); // 更新LED颜色
 800218e:	f7ff fc69 	bl	8001a64 <RGB_Update>
        HAL_Delay(50); // 控制渐暗速度
 8002192:	2032      	movs	r0, #50	@ 0x32
 8002194:	f000 fc14 	bl	80029c0 <HAL_Delay>
}
 8002198:	e00a      	b.n	80021b0 <RGB_Loop+0xf8>
    else if (keyboard_settings.rgb_style == 0)
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <RGB_Loop+0xfc>)
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <RGB_Loop+0xf8>
        RGB_Clear(); // 清除颜色
 80021a2:	f7ff fc47 	bl	8001a34 <RGB_Clear>
        RGB_Update(); // 更新LED颜色
 80021a6:	f7ff fc5d 	bl	8001a64 <RGB_Update>
        HAL_Delay(100); // 控制速度
 80021aa:	2064      	movs	r0, #100	@ 0x64
 80021ac:	f000 fc08 	bl	80029c0 <HAL_Delay>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000410 	.word	0x20000410
 80021b8:	20000438 	.word	0x20000438
 80021bc:	200010ac 	.word	0x200010ac

080021c0 <HAL_TIM_PWM_PulseFinishedCallback>:


// 自动回调函数停止DMA
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d103      	bne.n	80021da <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80021d2:	2100      	movs	r1, #0
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f006 fb57 	bl	8008888 <HAL_TIM_PWM_Stop_DMA>
    }
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40000400 	.word	0x40000400

080021e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_MspInit+0x4c>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	4a10      	ldr	r2, [pc, #64]	@ (8002234 <HAL_MspInit+0x4c>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <HAL_MspInit+0x4c>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_MspInit+0x4c>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <HAL_MspInit+0x4c>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	@ 0x58
 8002212:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <HAL_MspInit+0x4c>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800221e:	2002      	movs	r0, #2
 8002220:	f000 fbf0 	bl	8002a04 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8002224:	f000 fc02 	bl	8002a2c <HAL_SYSCFG_DisableVREFBUF>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002228:	f005 f930 	bl	800748c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <NMI_Handler+0x4>

08002240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <HardFault_Handler+0x4>

08002248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <MemManage_Handler+0x4>

08002250 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <UsageFault_Handler+0x4>

08002260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228e:	f000 fb79 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <DMA1_Channel1_IRQHandler+0x10>)
 800229e:	f002 fbd3 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200002bc 	.word	0x200002bc

080022ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <DMA1_Channel2_IRQHandler+0x10>)
 80022b2:	f002 fbc9 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000031c 	.word	0x2000031c

080022c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <DMA1_Channel3_IRQHandler+0x10>)
 80022c6:	f002 fbbf 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20001290 	.word	0x20001290

080022d4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <USB_LP_IRQHandler+0x10>)
 80022da:	f003 fc2d 	bl	8005b38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000185c 	.word	0x2000185c

080022e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <TIM6_DAC_IRQHandler+0x10>)
 80022ee:	f006 fbc3 	bl	8008a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20001244 	.word	0x20001244

080022fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return 1;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_kill>:

int _kill(int pid, int sig)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002316:	f00c fa25 	bl	800e764 <__errno>
 800231a:	4603      	mov	r3, r0
 800231c:	2216      	movs	r2, #22
 800231e:	601a      	str	r2, [r3, #0]
  return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_exit>:

void _exit (int status)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ffe7 	bl	800230c <_kill>
  while (1) {}    /* Make sure we hang here */
 800233e:	bf00      	nop
 8002340:	e7fd      	b.n	800233e <_exit+0x12>

08002342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e00a      	b.n	800236a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002354:	f3af 8000 	nop.w
 8002358:	4601      	mov	r1, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	60ba      	str	r2, [r7, #8]
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	dbf0      	blt.n	8002354 <_read+0x12>
  }

  return len;
 8002372:	687b      	ldr	r3, [r7, #4]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e009      	b.n	80023a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dbf1      	blt.n	800238e <_write+0x12>
  }
  return len;
 80023aa:	687b      	ldr	r3, [r7, #4]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_close>:

int _close(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023dc:	605a      	str	r2, [r3, #4]
  return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_isatty>:

int _isatty(int file)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f00c f98a 	bl	800e764 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20008000 	.word	0x20008000
 800247c:	00000400 	.word	0x00000400
 8002480:	200011f4 	.word	0x200011f4
 8002484:	20001c98 	.word	0x20001c98

08002488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	@ 0x38
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024cc:	463b      	mov	r3, r7
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	615a      	str	r2, [r3, #20]
 80024dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024de:	4b2c      	ldr	r3, [pc, #176]	@ (8002590 <MX_TIM3_Init+0xe4>)
 80024e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002594 <MX_TIM3_Init+0xe8>)
 80024e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <MX_TIM3_Init+0xe4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <MX_TIM3_Init+0xe4>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 80024f0:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <MX_TIM3_Init+0xe4>)
 80024f2:	22d4      	movs	r2, #212	@ 0xd4
 80024f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <MX_TIM3_Init+0xe4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fc:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <MX_TIM3_Init+0xe4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002502:	4823      	ldr	r0, [pc, #140]	@ (8002590 <MX_TIM3_Init+0xe4>)
 8002504:	f005 fef0 	bl	80082e8 <HAL_TIM_Base_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800250e:	f7ff f924 	bl	800175a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002518:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800251c:	4619      	mov	r1, r3
 800251e:	481c      	ldr	r0, [pc, #112]	@ (8002590 <MX_TIM3_Init+0xe4>)
 8002520:	f006 fd0e 	bl	8008f40 <HAL_TIM_ConfigClockSource>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800252a:	f7ff f916 	bl	800175a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800252e:	4818      	ldr	r0, [pc, #96]	@ (8002590 <MX_TIM3_Init+0xe4>)
 8002530:	f005 ff31 	bl	8008396 <HAL_TIM_PWM_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800253a:	f7ff f90e 	bl	800175a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	4619      	mov	r1, r3
 800254c:	4810      	ldr	r0, [pc, #64]	@ (8002590 <MX_TIM3_Init+0xe4>)
 800254e:	f007 fb49 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002558:	f7ff f8ff 	bl	800175a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255c:	2360      	movs	r3, #96	@ 0x60
 800255e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	4807      	ldr	r0, [pc, #28]	@ (8002590 <MX_TIM3_Init+0xe4>)
 8002574:	f006 fbd0 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800257e:	f7ff f8ec 	bl	800175a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002582:	4803      	ldr	r0, [pc, #12]	@ (8002590 <MX_TIM3_Init+0xe4>)
 8002584:	f000 f8a6 	bl	80026d4 <HAL_TIM_MspPostInit>

}
 8002588:	bf00      	nop
 800258a:	3738      	adds	r7, #56	@ 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200011f8 	.word	0x200011f8
 8002594:	40000400 	.word	0x40000400

08002598 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025a8:	4b14      	ldr	r3, [pc, #80]	@ (80025fc <MX_TIM6_Init+0x64>)
 80025aa:	4a15      	ldr	r2, [pc, #84]	@ (8002600 <MX_TIM6_Init+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 80025ae:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <MX_TIM6_Init+0x64>)
 80025b0:	22a9      	movs	r2, #169	@ 0xa9
 80025b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <MX_TIM6_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <MX_TIM6_Init+0x64>)
 80025bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80025c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <MX_TIM6_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025c8:	480c      	ldr	r0, [pc, #48]	@ (80025fc <MX_TIM6_Init+0x64>)
 80025ca:	f005 fe8d 	bl	80082e8 <HAL_TIM_Base_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025d4:	f7ff f8c1 	bl	800175a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d8:	2300      	movs	r3, #0
 80025da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	@ (80025fc <MX_TIM6_Init+0x64>)
 80025e6:	f007 fafd 	bl	8009be4 <HAL_TIMEx_MasterConfigSynchronization>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80025f0:	f7ff f8b3 	bl	800175a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20001244 	.word	0x20001244
 8002600:	40001000 	.word	0x40001000

08002604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2b      	ldr	r2, [pc, #172]	@ (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d137      	bne.n	8002686 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002616:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_TIM_Base_MspInit+0xc0>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	4a2a      	ldr	r2, [pc, #168]	@ (80026c4 <HAL_TIM_Base_MspInit+0xc0>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6593      	str	r3, [r2, #88]	@ 0x58
 8002622:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_TIM_Base_MspInit+0xc0>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel3;
 800262e:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002630:	4a26      	ldr	r2, [pc, #152]	@ (80026cc <HAL_TIM_Base_MspInit+0xc8>)
 8002632:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002634:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002636:	223d      	movs	r2, #61	@ 0x3d
 8002638:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800263a:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 800263c:	2210      	movs	r2, #16
 800263e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002640:	4b21      	ldr	r3, [pc, #132]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800264c:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 800264e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002652:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002654:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800265a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002662:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002668:	4817      	ldr	r0, [pc, #92]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 800266a:	f002 f863 	bl	8004734 <HAL_DMA_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002674:	f7ff f871 	bl	800175a <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
 800267e:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002684:	e018      	b.n	80026b8 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM6)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a11      	ldr	r2, [pc, #68]	@ (80026d0 <HAL_TIM_Base_MspInit+0xcc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d113      	bne.n	80026b8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <HAL_TIM_Base_MspInit+0xc0>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_TIM_Base_MspInit+0xc0>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6593      	str	r3, [r2, #88]	@ 0x58
 800269c:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <HAL_TIM_Base_MspInit+0xc0>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	2036      	movs	r0, #54	@ 0x36
 80026ae:	f001 fe04 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026b2:	2036      	movs	r0, #54	@ 0x36
 80026b4:	f001 fe1b 	bl	80042ee <HAL_NVIC_EnableIRQ>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40021000 	.word	0x40021000
 80026c8:	20001290 	.word	0x20001290
 80026cc:	40020030 	.word	0x40020030
 80026d0:	40001000 	.word	0x40001000

080026d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_TIM_MspPostInit+0x64>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d11b      	bne.n	800272e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_TIM_MspPostInit+0x68>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	4a10      	ldr	r2, [pc, #64]	@ (800273c <HAL_TIM_MspPostInit+0x68>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_TIM_MspPostInit+0x68>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RGB_PWM_Pin;
 800270e:	2310      	movs	r3, #16
 8002710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800271e:	2302      	movs	r3, #2
 8002720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_PWM_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	@ (8002740 <HAL_TIM_MspPostInit+0x6c>)
 800272a:	f002 fadd 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800272e:	bf00      	nop
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40000400 	.word	0x40000400
 800273c:	40021000 	.word	0x40021000
 8002740:	48000400 	.word	0x48000400

08002744 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002748:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 800274a:	4a23      	ldr	r2, [pc, #140]	@ (80027d8 <MX_USART2_UART_Init+0x94>)
 800274c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800274e:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 8002750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002756:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002762:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002768:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 800276a:	220c      	movs	r2, #12
 800276c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002774:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800277a:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002780:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800278c:	4811      	ldr	r0, [pc, #68]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 800278e:	f007 faf1 	bl	8009d74 <HAL_UART_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002798:	f7fe ffdf 	bl	800175a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800279c:	2100      	movs	r1, #0
 800279e:	480d      	ldr	r0, [pc, #52]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 80027a0:	f008 f85c 	bl	800a85c <HAL_UARTEx_SetTxFifoThreshold>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027aa:	f7fe ffd6 	bl	800175a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ae:	2100      	movs	r1, #0
 80027b0:	4808      	ldr	r0, [pc, #32]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 80027b2:	f008 f891 	bl	800a8d8 <HAL_UARTEx_SetRxFifoThreshold>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027bc:	f7fe ffcd 	bl	800175a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	@ (80027d4 <MX_USART2_UART_Init+0x90>)
 80027c2:	f008 f812 	bl	800a7ea <HAL_UARTEx_DisableFifoMode>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027cc:	f7fe ffc5 	bl	800175a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200012f0 	.word	0x200012f0
 80027d8:	40004400 	.word	0x40004400

080027dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b09a      	sub	sp, #104	@ 0x68
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	2244      	movs	r2, #68	@ 0x44
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00b ff62 	bl	800e6c6 <memset>
  if(uartHandle->Instance==USART2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <HAL_UART_MspInit+0xa8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d136      	bne.n	800287a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800280c:	2302      	movs	r3, #2
 800280e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4618      	mov	r0, r3
 800281a:	f005 fb75 	bl	8007f08 <HAL_RCCEx_PeriphCLKConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002824:	f7fe ff99 	bl	800175a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_UART_MspInit+0xac>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <HAL_UART_MspInit+0xac>)
 800282e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002832:	6593      	str	r3, [r2, #88]	@ 0x58
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_UART_MspInit+0xac>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_UART_MspInit+0xac>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002844:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <HAL_UART_MspInit+0xac>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_UART_MspInit+0xac>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002858:	230c      	movs	r3, #12
 800285a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002868:	2307      	movs	r3, #7
 800286a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002876:	f002 fa37 	bl	8004ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800287a:	bf00      	nop
 800287c:	3768      	adds	r7, #104	@ 0x68
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40004400 	.word	0x40004400
 8002888:	40021000 	.word	0x40021000

0800288c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800288c:	480d      	ldr	r0, [pc, #52]	@ (80028c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800288e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002890:	f7ff fdfa 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	@ (80028cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <LoopForever+0xe>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <LoopForever+0x16>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80028ba:	f00b ff59 	bl	800e770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028be:	f7fe fedf 	bl	8001680 <main>

080028c2 <LoopForever>:

LoopForever:
    b LoopForever
 80028c2:	e7fe      	b.n	80028c2 <LoopForever>
  ldr   r0, =_estack
 80028c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 80028d0:	0800f5b4 	.word	0x0800f5b4
  ldr r2, =_sbss
 80028d4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80028d8:	20001c98 	.word	0x20001c98

080028dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_2_IRQHandler>

080028de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f001 fcdb 	bl	80042a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ee:	200f      	movs	r0, #15
 80028f0:	f000 f80e 	bl	8002910 <HAL_InitTick>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	e001      	b.n	8002904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002900:	f7ff fc72 	bl	80021e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002904:	79fb      	ldrb	r3, [r7, #7]

}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <HAL_InitTick+0x68>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d022      	beq.n	800296a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002924:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_InitTick+0x6c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <HAL_InitTick+0x68>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002930:	fbb1 f3f3 	udiv	r3, r1, r3
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	4618      	mov	r0, r3
 800293a:	f001 fce6 	bl	800430a <HAL_SYSTICK_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10f      	bne.n	8002964 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d809      	bhi.n	800295e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294a:	2200      	movs	r2, #0
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	f04f 30ff 	mov.w	r0, #4294967295
 8002952:	f001 fcb2 	bl	80042ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <HAL_InitTick+0x70>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e007      	b.n	800296e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e004      	b.n	800296e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e001      	b.n	800296e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	2000000c 	.word	0x2000000c
 800297c:	20000004 	.word	0x20000004
 8002980:	20000008 	.word	0x20000008

08002984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_IncTick+0x1c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_IncTick+0x20>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4413      	add	r3, r2
 8002992:	4a03      	ldr	r2, [pc, #12]	@ (80029a0 <HAL_IncTick+0x1c>)
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20001384 	.word	0x20001384
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20001384 	.word	0x20001384

080029c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff ffee 	bl	80029a8 <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d004      	beq.n	80029e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029da:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_Delay+0x40>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e4:	bf00      	nop
 80029e6:	f7ff ffdf 	bl	80029a8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d8f7      	bhi.n	80029e6 <HAL_Delay+0x26>
  {
  }
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000000c 	.word	0x2000000c

08002a04 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 0202 	bic.w	r2, r3, #2
 8002a14:	4904      	ldr	r1, [pc, #16]	@ (8002a28 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40010030 	.word	0x40010030

08002a2c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010030 	.word	0x40010030

08002a4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3360      	adds	r3, #96	@ 0x60
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <LL_ADC_SetOffset+0x44>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	03fff000 	.word	0x03fff000

08002afc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3360      	adds	r3, #96	@ 0x60
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3360      	adds	r3, #96	@ 0x60
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3360      	adds	r3, #96	@ 0x60
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3360      	adds	r3, #96	@ 0x60
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	615a      	str	r2, [r3, #20]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3330      	adds	r3, #48	@ 0x30
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	4413      	add	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	211f      	movs	r1, #31
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	401a      	ands	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	f003 011f 	and.w	r1, r3, #31
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	0e5b      	lsrs	r3, r3, #25
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0d1b      	lsrs	r3, r3, #20
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2107      	movs	r1, #7
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0d1b      	lsrs	r3, r3, #20
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0318 	and.w	r3, r3, #24
 8002ce6:	4908      	ldr	r1, [pc, #32]	@ (8002d08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	400b      	ands	r3, r1
 8002cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	0007ffff 	.word	0x0007ffff

08002d0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 031f 	and.w	r3, r3, #31
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6093      	str	r3, [r2, #8]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002db0:	d101      	bne.n	8002db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e00:	f043 0202 	orr.w	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <LL_ADC_IsEnabled+0x18>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_ADC_IsEnabled+0x1a>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d101      	bne.n	8002e52 <LL_ADC_IsDisableOngoing+0x18>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <LL_ADC_IsDisableOngoing+0x1a>
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e74:	f043 0204 	orr.w	r2, r3, #4
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d101      	bne.n	8002ea0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d101      	bne.n	8002ec6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b089      	sub	sp, #36	@ 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e167      	b.n	80031be <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fd fc73 	bl	80007e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff19 	bl	8002d4c <LL_ADC_IsDeepPowerDownEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff feff 	bl	8002d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff34 	bl	8002d9c <LL_ADC_IsInternalRegulatorEnabled>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d115      	bne.n	8002f66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff18 	bl	8002d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f44:	4ba0      	ldr	r3, [pc, #640]	@ (80031c8 <HAL_ADC_Init+0x2f4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	4aa0      	ldr	r2, [pc, #640]	@ (80031cc <HAL_ADC_Init+0x2f8>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f58:	e002      	b.n	8002f60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f9      	bne.n	8002f5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ff16 	bl	8002d9c <LL_ADC_IsInternalRegulatorEnabled>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7a:	f043 0210 	orr.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff76 	bl	8002e88 <LL_ADC_REG_IsConversionOngoing>
 8002f9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 8100 	bne.w	80031ac <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 80fc 	bne.w	80031ac <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fbc:	f043 0202 	orr.w	r2, r3, #2
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff23 	bl	8002e14 <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fd8:	f7ff ff1c 	bl	8002e14 <LL_ADC_IsEnabled>
 8002fdc:	4604      	mov	r4, r0
 8002fde:	487c      	ldr	r0, [pc, #496]	@ (80031d0 <HAL_ADC_Init+0x2fc>)
 8002fe0:	f7ff ff18 	bl	8002e14 <LL_ADC_IsEnabled>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4323      	orrs	r3, r4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4878      	ldr	r0, [pc, #480]	@ (80031d4 <HAL_ADC_Init+0x300>)
 8002ff4:	f7ff fd2a 	bl	8002a4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7f5b      	ldrb	r3, [r3, #29]
 8002ffc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003002:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003008:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800300e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003016:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003022:	2b01      	cmp	r3, #1
 8003024:	d106      	bne.n	8003034 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	045b      	lsls	r3, r3, #17
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	4b60      	ldr	r3, [pc, #384]	@ (80031d8 <HAL_ADC_Init+0x304>)
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	430b      	orrs	r3, r1
 8003062:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff15 	bl	8002eae <LL_ADC_INJ_IsConversionOngoing>
 8003084:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d16d      	bne.n	8003168 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d16a      	bne.n	8003168 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003096:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800309e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ae:	f023 0302 	bic.w	r3, r3, #2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d017      	beq.n	80030f4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6911      	ldr	r1, [r2, #16]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030f2:	e013      	b.n	800311c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003102:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003114:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003118:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003122:	2b01      	cmp	r3, #1
 8003124:	d118      	bne.n	8003158 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003148:	430a      	orrs	r2, r1
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	611a      	str	r2, [r3, #16]
 8003156:	e007      	b.n	8003168 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10c      	bne.n	800318a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f023 010f 	bic.w	r1, r3, #15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
 8003188:	e007      	b.n	800319a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 020f 	bic.w	r2, r2, #15
 8003198:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031aa:	e007      	b.n	80031bc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b0:	f043 0210 	orr.w	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	@ 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000004 	.word	0x20000004
 80031cc:	053e2d63 	.word	0x053e2d63
 80031d0:	50000100 	.word	0x50000100
 80031d4:	50000300 	.word	0x50000300
 80031d8:	fff04007 	.word	0xfff04007

080031dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e8:	4851      	ldr	r0, [pc, #324]	@ (8003330 <HAL_ADC_Start_DMA+0x154>)
 80031ea:	f7ff fd8f 	bl	8002d0c <LL_ADC_GetMultimode>
 80031ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fe47 	bl	8002e88 <LL_ADC_REG_IsConversionOngoing>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 808f 	bne.w	8003320 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_ADC_Start_DMA+0x34>
 800320c:	2302      	movs	r3, #2
 800320e:	e08a      	b.n	8003326 <HAL_ADC_Start_DMA+0x14a>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b05      	cmp	r3, #5
 8003222:	d002      	beq.n	800322a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b09      	cmp	r3, #9
 8003228:	d173      	bne.n	8003312 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fc98 	bl	8003b60 <ADC_Enable>
 8003230:	4603      	mov	r3, r0
 8003232:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d166      	bne.n	8003308 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a38      	ldr	r2, [pc, #224]	@ (8003334 <HAL_ADC_Start_DMA+0x158>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d002      	beq.n	800325e <HAL_ADC_Start_DMA+0x82>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	e001      	b.n	8003262 <HAL_ADC_Start_DMA+0x86>
 800325e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	4293      	cmp	r3, r2
 8003268:	d002      	beq.n	8003270 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328c:	f023 0206 	bic.w	r2, r3, #6
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	661a      	str	r2, [r3, #96]	@ 0x60
 8003294:	e002      	b.n	800329c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	4a25      	ldr	r2, [pc, #148]	@ (8003338 <HAL_ADC_Start_DMA+0x15c>)
 80032a2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	4a24      	ldr	r2, [pc, #144]	@ (800333c <HAL_ADC_Start_DMA+0x160>)
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	4a23      	ldr	r2, [pc, #140]	@ (8003340 <HAL_ADC_Start_DMA+0x164>)
 80032b2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	221c      	movs	r2, #28
 80032ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0210 	orr.w	r2, r2, #16
 80032d2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3340      	adds	r3, #64	@ 0x40
 80032ee:	4619      	mov	r1, r3
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f001 fac6 	bl	8004884 <HAL_DMA_Start_IT>
 80032f8:	4603      	mov	r3, r0
 80032fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fdad 	bl	8002e60 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003306:	e00d      	b.n	8003324 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003310:	e008      	b.n	8003324 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800331e:	e001      	b.n	8003324 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003320:	2302      	movs	r3, #2
 8003322:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	50000300 	.word	0x50000300
 8003334:	50000100 	.word	0x50000100
 8003338:	08003d2b 	.word	0x08003d2b
 800333c:	08003e03 	.word	0x08003e03
 8003340:	08003e1f 	.word	0x08003e1f

08003344 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b0b6      	sub	sp, #216	@ 0xd8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x22>
 800339e:	2302      	movs	r3, #2
 80033a0:	e3c8      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x7b4>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fd6a 	bl	8002e88 <LL_ADC_REG_IsConversionOngoing>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 83ad 	bne.w	8003b16 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	f7ff fc24 	bl	8002c16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fd58 	bl	8002e88 <LL_ADC_REG_IsConversionOngoing>
 80033d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fd64 	bl	8002eae <LL_ADC_INJ_IsConversionOngoing>
 80033e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 81d9 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f040 81d4 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003406:	d10f      	bne.n	8003428 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	4619      	mov	r1, r3
 8003414:	f7ff fc2b 	bl	8002c6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fbd2 	bl	8002bca <LL_ADC_SetSamplingTimeCommonConfig>
 8003426:	e00e      	b.n	8003446 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	461a      	mov	r2, r3
 8003436:	f7ff fc1a 	bl	8002c6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fbc2 	bl	8002bca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	08db      	lsrs	r3, r3, #3
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d022      	beq.n	80034ae <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6919      	ldr	r1, [r3, #16]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003478:	f7ff fb1c 	bl	8002ab4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6919      	ldr	r1, [r3, #16]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	461a      	mov	r2, r3
 800348a:	f7ff fb68 	bl	8002b5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x124>
 800349e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a2:	e000      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x126>
 80034a4:	2300      	movs	r3, #0
 80034a6:	461a      	mov	r2, r3
 80034a8:	f7ff fb74 	bl	8002b94 <LL_ADC_SetOffsetSaturation>
 80034ac:	e17b      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fb21 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_ADC_ConfigChannel+0x15a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fb16 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	e01e      	b.n	8003518 <HAL_ADC_ConfigChannel+0x198>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fb0b 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800350c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1b0>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e018      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1e2>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800354c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e004      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003562:	429a      	cmp	r2, r3
 8003564:	d106      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fada 	bl	8002b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fabe 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x220>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fab3 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	e01e      	b.n	80035de <HAL_ADC_ConfigChannel+0x25e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff faa8 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80035be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80035c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e004      	b.n	80035dc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80035d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x276>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	e018      	b.n	8003628 <HAL_ADC_ConfigChannel+0x2a8>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800360a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003612:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e004      	b.n	8003628 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800361e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fa77 	bl	8002b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fa5b 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x2e6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2102      	movs	r1, #2
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fa50 	bl	8002afc <LL_ADC_GetOffsetChannel>
 800365c:	4603      	mov	r3, r0
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	e01e      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x324>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2102      	movs	r1, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fa45 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003688:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800368c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003698:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x33c>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	e016      	b.n	80036ea <HAL_ADC_ConfigChannel+0x36a>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80036ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80036d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e004      	b.n	80036ea <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80036e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2102      	movs	r1, #2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fa16 	bl	8002b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2103      	movs	r1, #3
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f9fa 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x3a8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2103      	movs	r1, #3
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f9ef 	bl	8002afc <LL_ADC_GetOffsetChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	e017      	b.n	8003758 <HAL_ADC_ConfigChannel+0x3d8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2103      	movs	r1, #3
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f9e4 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003742:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800374a:	2320      	movs	r3, #32
 800374c:	e003      	b.n	8003756 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800374e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x3f0>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0e9b      	lsrs	r3, r3, #26
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	e011      	b.n	8003794 <HAL_ADC_ConfigChannel+0x414>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800377e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003780:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003788:	2320      	movs	r3, #32
 800378a:	e003      	b.n	8003794 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800378c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003794:	429a      	cmp	r2, r3
 8003796:	d106      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	2103      	movs	r1, #3
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff f9c1 	bl	8002b28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fb32 	bl	8002e14 <LL_ADC_IsEnabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 8140 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	461a      	mov	r2, r3
 80037c6:	f7ff fa7d 	bl	8002cc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4a8f      	ldr	r2, [pc, #572]	@ (8003a0c <HAL_ADC_ConfigChannel+0x68c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	f040 8131 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x47e>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	3301      	adds	r3, #1
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	bf94      	ite	ls
 80037f6:	2301      	movls	r3, #1
 80037f8:	2300      	movhi	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e019      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4b2>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800380c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003816:	2320      	movs	r3, #32
 8003818:	e003      	b.n	8003822 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800381a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2b09      	cmp	r3, #9
 800382a:	bf94      	ite	ls
 800382c:	2301      	movls	r3, #1
 800382e:	2300      	movhi	r3, #0
 8003830:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003832:	2b00      	cmp	r3, #0
 8003834:	d079      	beq.n	800392a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x4d2>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	3301      	adds	r3, #1
 800384a:	069b      	lsls	r3, r3, #26
 800384c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003850:	e015      	b.n	800387e <HAL_ADC_ConfigChannel+0x4fe>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003862:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800386a:	2320      	movs	r3, #32
 800386c:	e003      	b.n	8003876 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800386e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3301      	adds	r3, #1
 8003878:	069b      	lsls	r3, r3, #26
 800387a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_ADC_ConfigChannel+0x51e>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	3301      	adds	r3, #1
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	e017      	b.n	80038ce <HAL_ADC_ConfigChannel+0x54e>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80038ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80038b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e003      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80038ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	ea42 0103 	orr.w	r1, r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x574>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0e9b      	lsrs	r3, r3, #26
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 021f 	and.w	r2, r3, #31
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	051b      	lsls	r3, r3, #20
 80038f2:	e018      	b.n	8003926 <HAL_ADC_ConfigChannel+0x5a6>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003904:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e003      	b.n	8003918 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f003 021f 	and.w	r2, r3, #31
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003926:	430b      	orrs	r3, r1
 8003928:	e081      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x5c6>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	3301      	adds	r3, #1
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003944:	e015      	b.n	8003972 <HAL_ADC_ConfigChannel+0x5f2>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800395e:	2320      	movs	r3, #32
 8003960:	e003      	b.n	800396a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	3301      	adds	r3, #1
 800396c:	069b      	lsls	r3, r3, #26
 800396e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x612>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	3301      	adds	r3, #1
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	e017      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x642>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	61fb      	str	r3, [r7, #28]
  return result;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80039aa:	2320      	movs	r3, #32
 80039ac:	e003      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2101      	movs	r1, #1
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	ea42 0103 	orr.w	r1, r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x66e>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	0e9b      	lsrs	r3, r3, #26
 80039d8:	3301      	adds	r3, #1
 80039da:	f003 021f 	and.w	r2, r3, #31
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	3b1e      	subs	r3, #30
 80039e6:	051b      	lsls	r3, r3, #20
 80039e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039ec:	e01e      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x6ac>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	613b      	str	r3, [r7, #16]
  return result;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e006      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x698>
 8003a0a:	bf00      	nop
 8003a0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f003 021f 	and.w	r2, r3, #31
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	3b1e      	subs	r3, #30
 8003a26:	051b      	lsls	r3, r3, #20
 8003a28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a32:	4619      	mov	r1, r3
 8003a34:	f7ff f91b 	bl	8002c6e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b3c <HAL_ADC_ConfigChannel+0x7bc>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d071      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a44:	483e      	ldr	r0, [pc, #248]	@ (8003b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a46:	f7ff f827 	bl	8002a98 <LL_ADC_GetCommonPathInternalCh>
 8003a4a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3c      	ldr	r2, [pc, #240]	@ (8003b44 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x6e2>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b48 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d127      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d121      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a76:	d157      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a80:	4619      	mov	r1, r3
 8003a82:	482f      	ldr	r0, [pc, #188]	@ (8003b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a84:	f7fe fff5 	bl	8002a72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a88:	4b30      	ldr	r3, [pc, #192]	@ (8003b4c <HAL_ADC_ConfigChannel+0x7cc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	4a30      	ldr	r2, [pc, #192]	@ (8003b50 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aa2:	e002      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f9      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab0:	e03a      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d113      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a22      	ldr	r2, [pc, #136]	@ (8003b58 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02a      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	4619      	mov	r1, r3
 8003adc:	4818      	ldr	r0, [pc, #96]	@ (8003b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ade:	f7fe ffc8 	bl	8002a72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae2:	e021      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <HAL_ADC_ConfigChannel+0x7dc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d11c      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d011      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	480c      	ldr	r0, [pc, #48]	@ (8003b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b10:	f7fe ffaf 	bl	8002a72 <LL_ADC_SetCommonPathInternalCh>
 8003b14:	e008      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1a:	f043 0220 	orr.w	r2, r3, #32
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b30:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	37d8      	adds	r7, #216	@ 0xd8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	80080000 	.word	0x80080000
 8003b40:	50000300 	.word	0x50000300
 8003b44:	c3210000 	.word	0xc3210000
 8003b48:	90c00010 	.word	0x90c00010
 8003b4c:	20000004 	.word	0x20000004
 8003b50:	053e2d63 	.word	0x053e2d63
 8003b54:	c7520000 	.word	0xc7520000
 8003b58:	50000100 	.word	0x50000100
 8003b5c:	cb840000 	.word	0xcb840000

08003b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f94f 	bl	8002e14 <LL_ADC_IsEnabled>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d169      	bne.n	8003c50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	4b36      	ldr	r3, [pc, #216]	@ (8003c5c <ADC_Enable+0xfc>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e055      	b.n	8003c52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff f90a 	bl	8002dc4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bb0:	482b      	ldr	r0, [pc, #172]	@ (8003c60 <ADC_Enable+0x100>)
 8003bb2:	f7fe ff71 	bl	8002a98 <LL_ADC_GetCommonPathInternalCh>
 8003bb6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003bb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d013      	beq.n	8003be8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc0:	4b28      	ldr	r3, [pc, #160]	@ (8003c64 <ADC_Enable+0x104>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <ADC_Enable+0x108>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	099b      	lsrs	r3, r3, #6
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bda:	e002      	b.n	8003be2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f9      	bne.n	8003bdc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003be8:	f7fe fede 	bl	80029a8 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bee:	e028      	b.n	8003c42 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f90d 	bl	8002e14 <LL_ADC_IsEnabled>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff f8dd 	bl	8002dc4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c0a:	f7fe fecd 	bl	80029a8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d914      	bls.n	8003c42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d00d      	beq.n	8003c42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	f043 0210 	orr.w	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e007      	b.n	8003c52 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d1cf      	bne.n	8003bf0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	8000003f 	.word	0x8000003f
 8003c60:	50000300 	.word	0x50000300
 8003c64:	20000004 	.word	0x20000004
 8003c68:	053e2d63 	.word	0x053e2d63

08003c6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff f8de 	bl	8002e3a <LL_ADC_IsDisableOngoing>
 8003c7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff f8c5 	bl	8002e14 <LL_ADC_IsEnabled>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d047      	beq.n	8003d20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d144      	bne.n	8003d20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030d 	and.w	r3, r3, #13
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10c      	bne.n	8003cbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f89f 	bl	8002dec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cb6:	f7fe fe77 	bl	80029a8 <HAL_GetTick>
 8003cba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cbc:	e029      	b.n	8003d12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e023      	b.n	8003d22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cda:	f7fe fe65 	bl	80029a8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d914      	bls.n	8003d12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	f043 0210 	orr.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e007      	b.n	8003d22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1dc      	bne.n	8003cda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d14b      	bne.n	8003ddc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d021      	beq.n	8003da2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe ff44 	bl	8002bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d032      	beq.n	8003dd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d12b      	bne.n	8003dd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d11f      	bne.n	8003dd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	f043 0201 	orr.w	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003da0:	e018      	b.n	8003dd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff fab5 	bl	8003344 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dda:	e00e      	b.n	8003dfa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff fabf 	bl	800336c <HAL_ADC_ErrorCallback>
}
 8003dee:	e004      	b.n	8003dfa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff faa1 	bl	8003358 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff fa91 	bl	800336c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <LL_ADC_IsEnabled>:
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <LL_ADC_IsEnabled+0x18>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <LL_ADC_IsEnabled+0x1a>
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_ADC_StartCalibration>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003e8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_ADC_IsCalibrationOnGoing>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ebe:	d101      	bne.n	8003ec4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e04d      	b.n	8003fb0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fea5 	bl	8003c6c <ADC_Disable>
 8003f22:	4603      	mov	r3, r0
 8003f24:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d136      	bne.n	8003f9a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f34:	f023 0302 	bic.w	r3, r3, #2
 8003f38:	f043 0202 	orr.w	r2, r3, #2
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6839      	ldr	r1, [r7, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff96 	bl	8003e78 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f4c:	e014      	b.n	8003f78 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3301      	adds	r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4a18      	ldr	r2, [pc, #96]	@ (8003fb8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d90d      	bls.n	8003f78 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	f023 0312 	bic.w	r3, r3, #18
 8003f64:	f043 0210 	orr.w	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01b      	b.n	8003fb0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff94 	bl	8003eaa <LL_ADC_IsCalibrationOnGoing>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e2      	bne.n	8003f4e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8c:	f023 0303 	bic.w	r3, r3, #3
 8003f90:	f043 0201 	orr.w	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f98:	e005      	b.n	8003fa6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	0004de01 	.word	0x0004de01

08003fbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b0a1      	sub	sp, #132	@ 0x84
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e08b      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ff2:	d102      	bne.n	8003ffa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ff4:	4b41      	ldr	r3, [pc, #260]	@ (80040fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	e001      	b.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e06a      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff57 	bl	8003ed2 <LL_ADC_REG_IsConversionOngoing>
 8004024:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff51 	bl	8003ed2 <LL_ADC_REG_IsConversionOngoing>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d14c      	bne.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004036:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004038:	2b00      	cmp	r3, #0
 800403a:	d149      	bne.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800403c:	4b30      	ldr	r3, [pc, #192]	@ (8004100 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800403e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d028      	beq.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004048:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800405a:	035b      	lsls	r3, r3, #13
 800405c:	430b      	orrs	r3, r1
 800405e:	431a      	orrs	r2, r3
 8004060:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004062:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004064:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004068:	f7ff fef3 	bl	8003e52 <LL_ADC_IsEnabled>
 800406c:	4604      	mov	r4, r0
 800406e:	4823      	ldr	r0, [pc, #140]	@ (80040fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004070:	f7ff feef 	bl	8003e52 <LL_ADC_IsEnabled>
 8004074:	4603      	mov	r3, r0
 8004076:	4323      	orrs	r3, r4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d133      	bne.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800407c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004084:	f023 030f 	bic.w	r3, r3, #15
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	6811      	ldr	r1, [r2, #0]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	6892      	ldr	r2, [r2, #8]
 8004090:	430a      	orrs	r2, r1
 8004092:	431a      	orrs	r2, r3
 8004094:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004096:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004098:	e024      	b.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800409a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040a4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040aa:	f7ff fed2 	bl	8003e52 <LL_ADC_IsEnabled>
 80040ae:	4604      	mov	r4, r0
 80040b0:	4812      	ldr	r0, [pc, #72]	@ (80040fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040b2:	f7ff fece 	bl	8003e52 <LL_ADC_IsEnabled>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4323      	orrs	r3, r4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d112      	bne.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80040c6:	f023 030f 	bic.w	r3, r3, #15
 80040ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80040cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040ce:	e009      	b.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80040e2:	e000      	b.n	80040e6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80040ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3784      	adds	r7, #132	@ 0x84
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}
 80040fa:	bf00      	nop
 80040fc:	50000100 	.word	0x50000100
 8004100:	50000300 	.word	0x50000300

08004104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004114:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <__NVIC_SetPriorityGrouping+0x44>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004120:	4013      	ands	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800412c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004136:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <__NVIC_SetPriorityGrouping+0x44>)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	60d3      	str	r3, [r2, #12]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004150:	4b04      	ldr	r3, [pc, #16]	@ (8004164 <__NVIC_GetPriorityGrouping+0x18>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 0307 	and.w	r3, r3, #7
}
 800415a:	4618      	mov	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	db0b      	blt.n	8004192 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	f003 021f 	and.w	r2, r3, #31
 8004180:	4907      	ldr	r1, [pc, #28]	@ (80041a0 <__NVIC_EnableIRQ+0x38>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2001      	movs	r0, #1
 800418a:	fa00 f202 	lsl.w	r2, r0, r2
 800418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	e000e100 	.word	0xe000e100

080041a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db0a      	blt.n	80041ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	490c      	ldr	r1, [pc, #48]	@ (80041f0 <__NVIC_SetPriority+0x4c>)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	440b      	add	r3, r1
 80041c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041cc:	e00a      	b.n	80041e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4908      	ldr	r1, [pc, #32]	@ (80041f4 <__NVIC_SetPriority+0x50>)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	3b04      	subs	r3, #4
 80041dc:	0112      	lsls	r2, r2, #4
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	440b      	add	r3, r1
 80041e2:	761a      	strb	r2, [r3, #24]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000e100 	.word	0xe000e100
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	@ 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f1c3 0307 	rsb	r3, r3, #7
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf28      	it	cs
 8004216:	2304      	movcs	r3, #4
 8004218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3304      	adds	r3, #4
 800421e:	2b06      	cmp	r3, #6
 8004220:	d902      	bls.n	8004228 <NVIC_EncodePriority+0x30>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3b03      	subs	r3, #3
 8004226:	e000      	b.n	800422a <NVIC_EncodePriority+0x32>
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	401a      	ands	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004240:	f04f 31ff 	mov.w	r1, #4294967295
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43d9      	mvns	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	4313      	orrs	r3, r2
         );
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	@ 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004270:	d301      	bcc.n	8004276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004272:	2301      	movs	r3, #1
 8004274:	e00f      	b.n	8004296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004276:	4a0a      	ldr	r2, [pc, #40]	@ (80042a0 <SysTick_Config+0x40>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427e:	210f      	movs	r1, #15
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	f7ff ff8e 	bl	80041a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <SysTick_Config+0x40>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428e:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <SysTick_Config+0x40>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	e000e010 	.word	0xe000e010

080042a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff29 	bl	8004104 <__NVIC_SetPriorityGrouping>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b086      	sub	sp, #24
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042c8:	f7ff ff40 	bl	800414c <__NVIC_GetPriorityGrouping>
 80042cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	6978      	ldr	r0, [r7, #20]
 80042d4:	f7ff ff90 	bl	80041f8 <NVIC_EncodePriority>
 80042d8:	4602      	mov	r2, r0
 80042da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff5f 	bl	80041a4 <__NVIC_SetPriority>
}
 80042e6:	bf00      	nop
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff33 	bl	8004168 <__NVIC_EnableIRQ>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ffa4 	bl	8004260 <SysTick_Config>
 8004318:	4603      	mov	r3, r0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e054      	b.n	80043e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7f5b      	ldrb	r3, [r3, #29]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fc fc48 	bl	8000bdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	791b      	ldrb	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a22      	ldr	r2, [pc, #136]	@ (80043e8 <HAL_CRC_Init+0xc4>)
 8004360:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0218 	bic.w	r2, r2, #24
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	e00c      	b.n	800438e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6899      	ldr	r1, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	461a      	mov	r2, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f94a 	bl	8004618 <HAL_CRCEx_Polynomial_Set>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e028      	b.n	80043e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	795b      	ldrb	r3, [r3, #5]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	611a      	str	r2, [r3, #16]
 80043a0:	e004      	b.n	80043ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6912      	ldr	r2, [r2, #16]
 80043aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	04c11db7 	.word	0x04c11db7

080043ec <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2202      	movs	r2, #2
 8004400:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d006      	beq.n	8004428 <HAL_CRC_Calculate+0x3c>
 800441a:	2b03      	cmp	r3, #3
 800441c:	d829      	bhi.n	8004472 <HAL_CRC_Calculate+0x86>
 800441e:	2b01      	cmp	r3, #1
 8004420:	d019      	beq.n	8004456 <HAL_CRC_Calculate+0x6a>
 8004422:	2b02      	cmp	r3, #2
 8004424:	d01e      	beq.n	8004464 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004426:	e024      	b.n	8004472 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e00a      	b.n	8004444 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	3301      	adds	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	d3f0      	bcc.n	800442e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	613b      	str	r3, [r7, #16]
      break;
 8004454:	e00e      	b.n	8004474 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f812 	bl	8004484 <CRC_Handle_8>
 8004460:	6138      	str	r0, [r7, #16]
      break;
 8004462:	e007      	b.n	8004474 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f89b 	bl	80045a4 <CRC_Handle_16>
 800446e:	6138      	str	r0, [r7, #16]
      break;
 8004470:	e000      	b.n	8004474 <HAL_CRC_Calculate+0x88>
      break;
 8004472:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800447a:	693b      	ldr	r3, [r7, #16]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	e023      	b.n	80044de <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	3301      	adds	r3, #1
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	440b      	add	r3, r1
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80044b0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	3302      	adds	r3, #2
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	440b      	add	r3, r1
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80044c0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	3303      	adds	r3, #3
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	440b      	add	r3, r1
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80044d4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80044d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d3d6      	bcc.n	8004496 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04f      	beq.n	8004592 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	4413      	add	r3, r2
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d117      	bne.n	8004546 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4413      	add	r3, r2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b21b      	sxth	r3, r3
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	b21a      	sxth	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3301      	adds	r3, #1
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	440b      	add	r3, r1
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	b21b      	sxth	r3, r3
 8004534:	4313      	orrs	r3, r2
 8004536:	b21b      	sxth	r3, r3
 8004538:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	8b7a      	ldrh	r2, [r7, #26]
 8004544:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d120      	bne.n	8004592 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	4413      	add	r3, r2
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	b21b      	sxth	r3, r3
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	b21a      	sxth	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	3301      	adds	r3, #1
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	440b      	add	r3, r1
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b21b      	sxth	r3, r3
 800456e:	4313      	orrs	r3, r2
 8004570:	b21b      	sxth	r3, r3
 8004572:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	8b7a      	ldrh	r2, [r7, #26]
 800457e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	3302      	adds	r3, #2
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3724      	adds	r7, #36	@ 0x24
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e013      	b.n	80045de <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	041a      	lsls	r2, r3, #16
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	3302      	adds	r3, #2
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	440b      	add	r3, r1
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	4619      	mov	r1, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3301      	adds	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3e6      	bcc.n	80045b6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	4413      	add	r3, r2
 8004600:	881a      	ldrh	r2, [r3, #0]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004628:	231f      	movs	r3, #31
 800462a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
 800463a:	e063      	b.n	8004704 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800463c:	bf00      	nop
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	613a      	str	r2, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_CRCEx_Polynomial_Set+0x44>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b18      	cmp	r3, #24
 8004660:	d846      	bhi.n	80046f0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	080046f7 	.word	0x080046f7
 800466c:	080046f1 	.word	0x080046f1
 8004670:	080046f1 	.word	0x080046f1
 8004674:	080046f1 	.word	0x080046f1
 8004678:	080046f1 	.word	0x080046f1
 800467c:	080046f1 	.word	0x080046f1
 8004680:	080046f1 	.word	0x080046f1
 8004684:	080046f1 	.word	0x080046f1
 8004688:	080046e5 	.word	0x080046e5
 800468c:	080046f1 	.word	0x080046f1
 8004690:	080046f1 	.word	0x080046f1
 8004694:	080046f1 	.word	0x080046f1
 8004698:	080046f1 	.word	0x080046f1
 800469c:	080046f1 	.word	0x080046f1
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	080046f1 	.word	0x080046f1
 80046a8:	080046d9 	.word	0x080046d9
 80046ac:	080046f1 	.word	0x080046f1
 80046b0:	080046f1 	.word	0x080046f1
 80046b4:	080046f1 	.word	0x080046f1
 80046b8:	080046f1 	.word	0x080046f1
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	080046f1 	.word	0x080046f1
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	080046cd 	.word	0x080046cd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d913      	bls.n	80046fa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80046d6:	e010      	b.n	80046fa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d90f      	bls.n	80046fe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80046e2:	e00c      	b.n	80046fe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	d90b      	bls.n	8004702 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80046ee:	e008      	b.n	8004702 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
        break;
 80046f4:	e006      	b.n	8004704 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80046f6:	bf00      	nop
 80046f8:	e004      	b.n	8004704 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004702:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 0118 	bic.w	r1, r3, #24
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e08d      	b.n	8004862 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	4b47      	ldr	r3, [pc, #284]	@ (800486c <HAL_DMA_Init+0x138>)
 800474e:	429a      	cmp	r2, r3
 8004750:	d80f      	bhi.n	8004772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	4b45      	ldr	r3, [pc, #276]	@ (8004870 <HAL_DMA_Init+0x13c>)
 800475a:	4413      	add	r3, r2
 800475c:	4a45      	ldr	r2, [pc, #276]	@ (8004874 <HAL_DMA_Init+0x140>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	009a      	lsls	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a42      	ldr	r2, [pc, #264]	@ (8004878 <HAL_DMA_Init+0x144>)
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004770:	e00e      	b.n	8004790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	4b40      	ldr	r3, [pc, #256]	@ (800487c <HAL_DMA_Init+0x148>)
 800477a:	4413      	add	r3, r2
 800477c:	4a3d      	ldr	r2, [pc, #244]	@ (8004874 <HAL_DMA_Init+0x140>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	009a      	lsls	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a3c      	ldr	r2, [pc, #240]	@ (8004880 <HAL_DMA_Init+0x14c>)
 800478e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa1e 	bl	8004c24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047f0:	d102      	bne.n	80047f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800480c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d010      	beq.n	8004838 <HAL_DMA_Init+0x104>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d80c      	bhi.n	8004838 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa3e 	bl	8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	e008      	b.n	800484a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40020407 	.word	0x40020407
 8004870:	bffdfff8 	.word	0xbffdfff8
 8004874:	cccccccd 	.word	0xcccccccd
 8004878:	40020000 	.word	0x40020000
 800487c:	bffdfbf8 	.word	0xbffdfbf8
 8004880:	40020400 	.word	0x40020400

08004884 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_DMA_Start_IT+0x20>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e066      	b.n	8004972 <HAL_DMA_Start_IT+0xee>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d155      	bne.n	8004964 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f962 	bl	8004ba6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 020e 	orr.w	r2, r2, #14
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e00f      	b.n	800491c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0204 	bic.w	r2, r2, #4
 800490a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 020a 	orr.w	r2, r2, #10
 800491a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004938:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004950:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0201 	orr.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e005      	b.n	8004970 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800496c:	2302      	movs	r3, #2
 800496e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d00d      	beq.n	80049ae <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e047      	b.n	8004a3e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 020e 	bic.w	r2, r2, #14
 80049bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	f003 021f 	and.w	r2, r3, #31
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	2101      	movs	r1, #1
 80049ec:	fa01 f202 	lsl.w	r2, r1, r2
 80049f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
    }
  }
  return status;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2204      	movs	r2, #4
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d026      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x7a>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d021      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa0:	f003 021f 	and.w	r2, r3, #31
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	2104      	movs	r1, #4
 8004aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004aae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d071      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ac0:	e06c      	b.n	8004b9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2202      	movs	r2, #2
 8004acc:	409a      	lsls	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d02e      	beq.n	8004b34 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d029      	beq.n	8004b34 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 020a 	bic.w	r2, r2, #10
 8004afc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f003 021f 	and.w	r2, r3, #31
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	2102      	movs	r1, #2
 8004b14:	fa01 f202 	lsl.w	r2, r1, r2
 8004b18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d038      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b32:	e033      	b.n	8004b9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d02a      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d025      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 020e 	bic.w	r2, r2, #14
 8004b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	f003 021f 	and.w	r2, r3, #31
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	2101      	movs	r1, #1
 8004b70:	fa01 f202 	lsl.w	r2, r1, r2
 8004b74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
}
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bbc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd4:	f003 021f 	and.w	r2, r3, #31
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f202 	lsl.w	r2, r1, r2
 8004be2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d108      	bne.n	8004c06 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c04:	e007      	b.n	8004c16 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	60da      	str	r2, [r3, #12]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d802      	bhi.n	8004c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c38:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e001      	b.n	8004c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004c3e:	4b15      	ldr	r3, [pc, #84]	@ (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c40:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	3b08      	subs	r3, #8
 8004c4e:	4a12      	ldr	r2, [pc, #72]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	009a      	lsls	r2, r3, #2
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	2201      	movs	r2, #1
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40020407 	.word	0x40020407
 8004c90:	40020800 	.word	0x40020800
 8004c94:	40020820 	.word	0x40020820
 8004c98:	cccccccd 	.word	0xcccccccd
 8004c9c:	40020880 	.word	0x40020880

08004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a08      	ldr	r2, [pc, #32]	@ (8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cc2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2201      	movs	r2, #1
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	1000823f 	.word	0x1000823f
 8004ce4:	40020940 	.word	0x40020940

08004ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cf6:	e15a      	b.n	8004fae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 814c 	beq.w	8004fa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d005      	beq.n	8004d28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d130      	bne.n	8004d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	2203      	movs	r2, #3
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d5e:	2201      	movs	r2, #1
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 0201 	and.w	r2, r3, #1
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d017      	beq.n	8004dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	2203      	movs	r2, #3
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d123      	bne.n	8004e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	08da      	lsrs	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3208      	adds	r2, #8
 8004dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	220f      	movs	r2, #15
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4013      	ands	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	08da      	lsrs	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3208      	adds	r2, #8
 8004e14:	6939      	ldr	r1, [r7, #16]
 8004e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	2203      	movs	r2, #3
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 0203 	and.w	r2, r3, #3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80a6 	beq.w	8004fa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fcc <HAL_GPIO_Init+0x2e4>)
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	4a5a      	ldr	r2, [pc, #360]	@ (8004fcc <HAL_GPIO_Init+0x2e4>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e68:	4b58      	ldr	r3, [pc, #352]	@ (8004fcc <HAL_GPIO_Init+0x2e4>)
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e74:	4a56      	ldr	r2, [pc, #344]	@ (8004fd0 <HAL_GPIO_Init+0x2e8>)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	220f      	movs	r2, #15
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e9e:	d01f      	beq.n	8004ee0 <HAL_GPIO_Init+0x1f8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d019      	beq.n	8004edc <HAL_GPIO_Init+0x1f4>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a4b      	ldr	r2, [pc, #300]	@ (8004fd8 <HAL_GPIO_Init+0x2f0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <HAL_GPIO_Init+0x1f0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a4a      	ldr	r2, [pc, #296]	@ (8004fdc <HAL_GPIO_Init+0x2f4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_GPIO_Init+0x1ec>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a49      	ldr	r2, [pc, #292]	@ (8004fe0 <HAL_GPIO_Init+0x2f8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <HAL_GPIO_Init+0x1e8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a48      	ldr	r2, [pc, #288]	@ (8004fe4 <HAL_GPIO_Init+0x2fc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <HAL_GPIO_Init+0x1e4>
 8004ec8:	2305      	movs	r3, #5
 8004eca:	e00a      	b.n	8004ee2 <HAL_GPIO_Init+0x1fa>
 8004ecc:	2306      	movs	r3, #6
 8004ece:	e008      	b.n	8004ee2 <HAL_GPIO_Init+0x1fa>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	e006      	b.n	8004ee2 <HAL_GPIO_Init+0x1fa>
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e004      	b.n	8004ee2 <HAL_GPIO_Init+0x1fa>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e002      	b.n	8004ee2 <HAL_GPIO_Init+0x1fa>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_GPIO_Init+0x1fa>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	f002 0203 	and.w	r2, r2, #3
 8004ee8:	0092      	lsls	r2, r2, #2
 8004eea:	4093      	lsls	r3, r2
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ef2:	4937      	ldr	r1, [pc, #220]	@ (8004fd0 <HAL_GPIO_Init+0x2e8>)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	089b      	lsrs	r3, r3, #2
 8004ef8:	3302      	adds	r3, #2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f00:	4b39      	ldr	r3, [pc, #228]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f24:	4a30      	ldr	r2, [pc, #192]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f4e:	4a26      	ldr	r2, [pc, #152]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f54:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4013      	ands	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f78:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fa2:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <HAL_GPIO_Init+0x300>)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f47f ae9d 	bne.w	8004cf8 <HAL_GPIO_Init+0x10>
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	48000400 	.word	0x48000400
 8004fd8:	48000800 	.word	0x48000800
 8004fdc:	48000c00 	.word	0x48000c00
 8004fe0:	48001000 	.word	0x48001000
 8004fe4:	48001400 	.word	0x48001400
 8004fe8:	40010400 	.word	0x40010400

08004fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e001      	b.n	800500e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	807b      	strh	r3, [r7, #2]
 8005028:	4613      	mov	r3, r2
 800502a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800502c:	787b      	ldrb	r3, [r7, #1]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005038:	e002      	b.n	8005040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e08d      	b.n	800517a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fb feb8 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	@ 0x24
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800509c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	e006      	b.n	80050d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80050d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d108      	bne.n	80050ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	e007      	b.n	80050fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800510c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005110:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005120:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	461a      	mov	r2, r3
 8005190:	460b      	mov	r3, r1
 8005192:	817b      	strh	r3, [r7, #10]
 8005194:	4613      	mov	r3, r2
 8005196:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	f040 80fd 	bne.w	80053a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_I2C_Master_Transmit+0x30>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0f6      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x21e>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051bc:	f7fd fbf4 	bl	80029a8 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2319      	movs	r3, #25
 80051c8:	2201      	movs	r2, #1
 80051ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f914 	bl	80053fc <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e0e1      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2221      	movs	r2, #33	@ 0x21
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2210      	movs	r2, #16
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	893a      	ldrh	r2, [r7, #8]
 80051fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2bff      	cmp	r3, #255	@ 0xff
 800520e:	d906      	bls.n	800521e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	22ff      	movs	r2, #255	@ 0xff
 8005214:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005216:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e007      	b.n	800522e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005228:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800522c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	d024      	beq.n	8005280 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526a:	b2db      	uxtb	r3, r3
 800526c:	3301      	adds	r3, #1
 800526e:	b2da      	uxtb	r2, r3
 8005270:	8979      	ldrh	r1, [r7, #10]
 8005272:	4b4e      	ldr	r3, [pc, #312]	@ (80053ac <HAL_I2C_Master_Transmit+0x228>)
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fa83 	bl	8005784 <I2C_TransferConfig>
 800527e:	e066      	b.n	800534e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005284:	b2da      	uxtb	r2, r3
 8005286:	8979      	ldrh	r1, [r7, #10]
 8005288:	4b48      	ldr	r3, [pc, #288]	@ (80053ac <HAL_I2C_Master_Transmit+0x228>)
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 fa78 	bl	8005784 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005294:	e05b      	b.n	800534e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	6a39      	ldr	r1, [r7, #32]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f907 	bl	80054ae <I2C_WaitOnTXISFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07b      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d034      	beq.n	800534e <HAL_I2C_Master_Transmit+0x1ca>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d130      	bne.n	800534e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2180      	movs	r1, #128	@ 0x80
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f880 	bl	80053fc <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e04d      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	2bff      	cmp	r3, #255	@ 0xff
 800530e:	d90e      	bls.n	800532e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	22ff      	movs	r2, #255	@ 0xff
 8005314:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531a:	b2da      	uxtb	r2, r3
 800531c:	8979      	ldrh	r1, [r7, #10]
 800531e:	2300      	movs	r3, #0
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fa2c 	bl	8005784 <I2C_TransferConfig>
 800532c:	e00f      	b.n	800534e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533c:	b2da      	uxtb	r2, r3
 800533e:	8979      	ldrh	r1, [r7, #10]
 8005340:	2300      	movs	r3, #0
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fa1b 	bl	8005784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d19e      	bne.n	8005296 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	6a39      	ldr	r1, [r7, #32]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f8ed 	bl	800553c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e01a      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2220      	movs	r2, #32
 8005372:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <HAL_I2C_Master_Transmit+0x22c>)
 8005380:	400b      	ands	r3, r1
 8005382:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	80002000 	.word	0x80002000
 80053b0:	fe00e800 	.word	0xfe00e800

080053b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d103      	bne.n	80053d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d007      	beq.n	80053f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	619a      	str	r2, [r3, #24]
  }
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800540c:	e03b      	b.n	8005486 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f8d6 	bl	80055c4 <I2C_IsErrorOccurred>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e041      	b.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d02d      	beq.n	8005486 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fd fabd 	bl	80029a8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <I2C_WaitOnFlagUntilTimeout+0x44>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d122      	bne.n	8005486 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	429a      	cmp	r2, r3
 800545c:	d113      	bne.n	8005486 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e00f      	b.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699a      	ldr	r2, [r3, #24]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d0b4      	beq.n	800540e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054ba:	e033      	b.n	8005524 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f87f 	bl	80055c4 <I2C_IsErrorOccurred>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e031      	b.n	8005534 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d025      	beq.n	8005524 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d8:	f7fd fa66 	bl	80029a8 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11a      	bne.n	8005524 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d013      	beq.n	8005524 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005500:	f043 0220 	orr.w	r2, r3, #32
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e007      	b.n	8005534 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d1c4      	bne.n	80054bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005548:	e02f      	b.n	80055aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f838 	bl	80055c4 <I2C_IsErrorOccurred>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e02d      	b.n	80055ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fd fa23 	bl	80029a8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d11a      	bne.n	80055aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d013      	beq.n	80055aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e007      	b.n	80055ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d1c8      	bne.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	@ 0x28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d068      	beq.n	80056c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2210      	movs	r2, #16
 80055f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055f8:	e049      	b.n	800568e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d045      	beq.n	800568e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fd f9d1 	bl	80029a8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <I2C_IsErrorOccurred+0x54>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d13a      	bne.n	800568e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005622:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800562a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800563a:	d121      	bne.n	8005680 <I2C_IsErrorOccurred+0xbc>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005642:	d01d      	beq.n	8005680 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	2b20      	cmp	r3, #32
 8005648:	d01a      	beq.n	8005680 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005658:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800565a:	f7fd f9a5 	bl	80029a8 <HAL_GetTick>
 800565e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005660:	e00e      	b.n	8005680 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005662:	f7fd f9a1 	bl	80029a8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b19      	cmp	r3, #25
 800566e:	d907      	bls.n	8005680 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	f043 0320 	orr.w	r3, r3, #32
 8005676:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800567e:	e006      	b.n	800568e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b20      	cmp	r3, #32
 800568c:	d1e9      	bne.n	8005662 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b20      	cmp	r3, #32
 800569a:	d003      	beq.n	80056a4 <I2C_IsErrorOccurred+0xe0>
 800569c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0aa      	beq.n	80055fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2220      	movs	r2, #32
 80056b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	f043 0304 	orr.w	r3, r3, #4
 80056ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f043 0308 	orr.w	r3, r3, #8
 80056fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005706:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01c      	beq.n	8005772 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff fe3b 	bl	80053b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <I2C_IsErrorOccurred+0x1bc>)
 800574a:	400b      	ands	r3, r1
 800574c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	431a      	orrs	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005776:	4618      	mov	r0, r3
 8005778:	3728      	adds	r7, #40	@ 0x28
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	fe00e800 	.word	0xfe00e800

08005784 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	817b      	strh	r3, [r7, #10]
 8005792:	4613      	mov	r3, r2
 8005794:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800579c:	7a7b      	ldrb	r3, [r7, #9]
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	0d5b      	lsrs	r3, r3, #21
 80057be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80057c2:	4b08      	ldr	r3, [pc, #32]	@ (80057e4 <I2C_TransferConfig+0x60>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	43db      	mvns	r3, r3
 80057c8:	ea02 0103 	and.w	r1, r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	03ff63ff 	.word	0x03ff63ff

080057e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d138      	bne.n	8005870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005808:	2302      	movs	r3, #2
 800580a:	e032      	b.n	8005872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	@ 0x24
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800583a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b20      	cmp	r3, #32
 8005892:	d139      	bne.n	8005908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800589e:	2302      	movs	r3, #2
 80058a0:	e033      	b.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2224      	movs	r2, #36	@ 0x24
 80058ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0201 	bic.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005924:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	6613      	str	r3, [r2, #96]	@ 0x60
 800592c:	4b08      	ldr	r3, [pc, #32]	@ (8005950 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005938:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4905      	ldr	r1, [pc, #20]	@ (8005954 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40021000 	.word	0x40021000
 8005954:	40010000 	.word	0x40010000

08005958 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e0c0      	b.n	8005aec <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f008 fab4 	bl	800deec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2203      	movs	r2, #3
 8005988:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f005 f844 	bl	800aa1e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
 800599a:	e03e      	b.n	8005a1a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800599c:	7bfa      	ldrb	r2, [r7, #15]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	440b      	add	r3, r1
 80059aa:	3311      	adds	r3, #17
 80059ac:	2201      	movs	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059b0:	7bfa      	ldrb	r2, [r7, #15]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	440b      	add	r3, r1
 80059be:	3310      	adds	r3, #16
 80059c0:	7bfa      	ldrb	r2, [r7, #15]
 80059c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059c4:	7bfa      	ldrb	r2, [r7, #15]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	440b      	add	r3, r1
 80059d2:	3313      	adds	r3, #19
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059d8:	7bfa      	ldrb	r2, [r7, #15]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	440b      	add	r3, r1
 80059e6:	3320      	adds	r3, #32
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059ec:	7bfa      	ldrb	r2, [r7, #15]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	440b      	add	r3, r1
 80059fa:	3324      	adds	r3, #36	@ 0x24
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	3301      	adds	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	791b      	ldrb	r3, [r3, #4]
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d3bb      	bcc.n	800599c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e044      	b.n	8005ab4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a40:	7bfa      	ldrb	r2, [r7, #15]
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a56:	7bfa      	ldrb	r2, [r7, #15]
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a6c:	7bfa      	ldrb	r2, [r7, #15]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a82:	7bfa      	ldrb	r2, [r7, #15]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	440b      	add	r3, r1
 8005a90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	791b      	ldrb	r3, [r3, #4]
 8005ab8:	7bfa      	ldrb	r2, [r7, #15]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3b5      	bcc.n	8005a2a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005aca:	f004 ffc3 	bl	800aa54 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7a9b      	ldrb	r3, [r3, #10]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d102      	bne.n	8005aea <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 fbf6 	bl	80072d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_PCD_Start+0x16>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e012      	b.n	8005b30 <HAL_PCD_Start+0x3c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f004 ff6a 	bl	800a9f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f006 fd47 	bl	800c5b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f006 fd4c 	bl	800c5e2 <USB_ReadInterrupts>
 8005b4a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 faee 	bl	8006138 <PCD_EP_ISR_Handler>

    return;
 8005b5c:	e110      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d013      	beq.n	8005b90 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f008 fa44 	bl	800e00e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b86:	2100      	movs	r1, #0
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8fc 	bl	8005d86 <HAL_PCD_SetAddress>

    return;
 8005b8e:	e0f7      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bac:	b292      	uxth	r2, r2
 8005bae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005bb2:	e0e5      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005bd6:	e0d3      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d034      	beq.n	8005c4c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0204 	bic.w	r2, r2, #4
 8005bf4:	b292      	uxth	r2, r2
 8005bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0208 	bic.w	r2, r2, #8
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d107      	bne.n	8005c2c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c24:	2100      	movs	r1, #0
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 fb7f 	bl	800732a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f008 fa27 	bl	800e080 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c44:	b292      	uxth	r2, r2
 8005c46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c4a:	e099      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d027      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0208 	orr.w	r2, r2, #8
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c80:	b292      	uxth	r2, r2
 8005c82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0204 	orr.w	r2, r2, #4
 8005c98:	b292      	uxth	r2, r2
 8005c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f008 f9d4 	bl	800e04c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ca4:	e06c      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d040      	beq.n	8005d32 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cc2:	b292      	uxth	r2, r2
 8005cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d12b      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0204 	orr.w	r2, r2, #4
 8005ce4:	b292      	uxth	r2, r2
 8005ce6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0208 	orr.w	r2, r2, #8
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	089b      	lsrs	r3, r3, #2
 8005d16:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d20:	2101      	movs	r1, #1
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 fb01 	bl	800732a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005d28:	e02a      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f008 f98e 	bl	800e04c <HAL_PCD_SuspendCallback>
    return;
 8005d30:	e026      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00f      	beq.n	8005d5c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f008 f94c 	bl	800dff2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005d5a:	e011      	b.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d78:	b292      	uxth	r2, r2
 8005d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005d7e:	bf00      	nop
  }
}
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_PCD_SetAddress+0x1a>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e012      	b.n	8005dc6 <HAL_PCD_SetAddress+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f006 fbe8 	bl	800c58c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	4608      	mov	r0, r1
 8005dd8:	4611      	mov	r1, r2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	70fb      	strb	r3, [r7, #3]
 8005de0:	460b      	mov	r3, r1
 8005de2:	803b      	strh	r3, [r7, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	da0e      	bge.n	8005e12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	f003 0207 	and.w	r2, r3, #7
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	3310      	adds	r3, #16
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	705a      	strb	r2, [r3, #1]
 8005e10:	e00e      	b.n	8005e30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	f003 0207 	and.w	r2, r3, #7
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005e3c:	883b      	ldrh	r3, [r7, #0]
 8005e3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	78ba      	ldrb	r2, [r7, #2]
 8005e4a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e4c:	78bb      	ldrb	r3, [r7, #2]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d102      	bne.n	8005e58 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_PCD_EP_Open+0x98>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e00e      	b.n	8005e84 <HAL_PCD_EP_Open+0xb6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f004 fe0b 	bl	800aa90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005e82:	7afb      	ldrb	r3, [r7, #11]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da0e      	bge.n	8005ebe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	f003 0207 	and.w	r2, r3, #7
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	3310      	adds	r3, #16
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	705a      	strb	r2, [r3, #1]
 8005ebc:	e00e      	b.n	8005edc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	f003 0207 	and.w	r2, r3, #7
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_PCD_EP_Close+0x6a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e00e      	b.n	8005f14 <HAL_PCD_EP_Close+0x88>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f005 faab 	bl	800b460 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	f003 0207 	and.w	r2, r3, #7
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f5c:	7afb      	ldrb	r3, [r7, #11]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f005 fc63 	bl	800b83a <USB_EPStartXfer>

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f8e:	7afb      	ldrb	r3, [r7, #11]
 8005f90:	f003 0207 	and.w	r2, r3, #7
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	3310      	adds	r3, #16
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6979      	ldr	r1, [r7, #20]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f005 fc2c 	bl	800b83a <USB_EPStartXfer>

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	7912      	ldrb	r2, [r2, #4]
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e03e      	b.n	8006088 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800600a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800600e:	2b00      	cmp	r3, #0
 8006010:	da0e      	bge.n	8006030 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	f003 0207 	and.w	r2, r3, #7
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	3310      	adds	r3, #16
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	705a      	strb	r2, [r3, #1]
 800602e:	e00c      	b.n	800604a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_PCD_EP_SetStall+0x7e>
 8006066:	2302      	movs	r3, #2
 8006068:	e00e      	b.n	8006088 <HAL_PCD_EP_SetStall+0x9c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	4618      	mov	r0, r3
 800607a:	f006 f98d 	bl	800c398 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	7912      	ldrb	r2, [r2, #4]
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e040      	b.n	8006130 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da0e      	bge.n	80060d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 0207 	and.w	r2, r3, #7
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	3310      	adds	r3, #16
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	705a      	strb	r2, [r3, #1]
 80060d2:	e00e      	b.n	80060f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 0207 	and.w	r2, r3, #7
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4413      	add	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_PCD_EP_ClrStall+0x82>
 800610e:	2302      	movs	r3, #2
 8006110:	e00e      	b.n	8006130 <HAL_PCD_EP_ClrStall+0xa0>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	4618      	mov	r0, r3
 8006122:	f006 f98a 	bl	800c43a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b092      	sub	sp, #72	@ 0x48
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006140:	e333      	b.n	80067aa <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800614a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800614c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006158:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800615c:	2b00      	cmp	r3, #0
 800615e:	f040 8108 	bne.w	8006372 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006162:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d14c      	bne.n	8006206 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617c:	813b      	strh	r3, [r7, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	893b      	ldrh	r3, [r7, #8]
 8006184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3310      	adds	r3, #16
 8006194:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4413      	add	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	4413      	add	r3, r2
 80061b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80061be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	441a      	add	r2, r3
 80061c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80061cc:	2100      	movs	r1, #0
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f007 fef5 	bl	800dfbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	7b1b      	ldrb	r3, [r3, #12]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 82e5 	beq.w	80067aa <PCD_EP_ISR_Handler+0x672>
 80061e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 82e0 	bne.w	80067aa <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	7b1b      	ldrb	r3, [r3, #12]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	731a      	strb	r2, [r3, #12]
 8006204:	e2d1      	b.n	80067aa <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800620c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006216:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800621c:	2b00      	cmp	r3, #0
 800621e:	d032      	beq.n	8006286 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	4413      	add	r3, r2
 800623a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006246:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006254:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006258:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800625a:	b29b      	uxth	r3, r3
 800625c:	f006 fa14 	bl	800c688 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29a      	uxth	r2, r3
 8006268:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800626c:	4013      	ands	r3, r2
 800626e:	817b      	strh	r3, [r7, #10]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	897a      	ldrh	r2, [r7, #10]
 8006276:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800627a:	b292      	uxth	r2, r2
 800627c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f007 fe70 	bl	800df64 <HAL_PCD_SetupStageCallback>
 8006284:	e291      	b.n	80067aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006286:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800628a:	2b00      	cmp	r3, #0
 800628c:	f280 828d 	bge.w	80067aa <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29a      	uxth	r2, r3
 8006298:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800629c:	4013      	ands	r3, r2
 800629e:	81fb      	strh	r3, [r7, #14]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	89fa      	ldrh	r2, [r7, #14]
 80062a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80062aa:	b292      	uxth	r2, r2
 80062ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4413      	add	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80062d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d019      	beq.n	8006312 <PCD_EP_ISR_Handler+0x1da>
 80062de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d015      	beq.n	8006312 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ec:	6959      	ldr	r1, [r3, #20]
 80062ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80062f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f006 f9c6 	bl	800c688 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80062fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	441a      	add	r2, r3
 8006306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006308:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800630a:	2100      	movs	r1, #0
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f007 fe3b 	bl	800df88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800631a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800631c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 8242 	bne.w	80067aa <PCD_EP_ISR_Handler+0x672>
 8006326:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006328:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800632c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006330:	f000 823b 	beq.w	80067aa <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006344:	81bb      	strh	r3, [r7, #12]
 8006346:	89bb      	ldrh	r3, [r7, #12]
 8006348:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800634c:	81bb      	strh	r3, [r7, #12]
 800634e:	89bb      	ldrh	r3, [r7, #12]
 8006350:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006354:	81bb      	strh	r3, [r7, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	89bb      	ldrh	r3, [r7, #12]
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]
 8006370:	e21b      	b.n	80067aa <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006384:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006388:	2b00      	cmp	r3, #0
 800638a:	f280 80f1 	bge.w	8006570 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80063a4:	4013      	ands	r3, r2
 80063a6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80063b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063bc:	b292      	uxth	r2, r2
 80063be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80063c0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4413      	add	r3, r2
 80063d4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80063d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063d8:	7b1b      	ldrb	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d123      	bne.n	8006426 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4413      	add	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	4413      	add	r3, r2
 80063f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006402:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006406:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 808b 	beq.w	8006526 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006416:	6959      	ldr	r1, [r3, #20]
 8006418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800641a:	88da      	ldrh	r2, [r3, #6]
 800641c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006420:	f006 f932 	bl	800c688 <USB_ReadPMA>
 8006424:	e07f      	b.n	8006526 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d109      	bne.n	8006442 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800642e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006430:	461a      	mov	r2, r3
 8006432:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f9c6 	bl	80067c6 <HAL_PCD_EP_DB_Receive>
 800643a:	4603      	mov	r3, r0
 800643c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006440:	e071      	b.n	8006526 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800647a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d022      	beq.n	80064e2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	4413      	add	r3, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80064c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d02c      	beq.n	8006526 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d2:	6959      	ldr	r1, [r3, #20]
 80064d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d6:	891a      	ldrh	r2, [r3, #8]
 80064d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80064dc:	f006 f8d4 	bl	800c688 <USB_ReadPMA>
 80064e0:	e021      	b.n	8006526 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	4413      	add	r3, r2
 80064fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006506:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800650a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006518:	6959      	ldr	r1, [r3, #20]
 800651a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800651c:	895a      	ldrh	r2, [r3, #10]
 800651e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006522:	f006 f8b1 	bl	800c688 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800652e:	441a      	add	r2, r3
 8006530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006532:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006536:	695a      	ldr	r2, [r3, #20]
 8006538:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800653c:	441a      	add	r2, r3
 800653e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006540:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <PCD_EP_ISR_Handler+0x41e>
 800654a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800654e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d206      	bcs.n	8006564 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f007 fd13 	bl	800df88 <HAL_PCD_DataOutStageCallback>
 8006562:	e005      	b.n	8006570 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800656a:	4618      	mov	r0, r3
 800656c:	f005 f965 	bl	800b83a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006570:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8117 	beq.w	80067aa <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800657c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	3310      	adds	r3, #16
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80065a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80065bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80065c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ca:	78db      	ldrb	r3, [r3, #3]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	f040 80a1 	bne.w	8006714 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80065d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065d4:	2200      	movs	r2, #0
 80065d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80065d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065da:	7b1b      	ldrb	r3, [r3, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 8092 	beq.w	8006706 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d046      	beq.n	800667a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d126      	bne.n	8006642 <PCD_EP_ISR_Handler+0x50a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006602:	b29b      	uxth	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	00da      	lsls	r2, r3, #3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4413      	add	r3, r2
 8006616:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006626:	b29a      	uxth	r2, r3
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663a:	b29a      	uxth	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	e061      	b.n	8006706 <PCD_EP_ISR_Handler+0x5ce>
 8006642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d15d      	bne.n	8006706 <PCD_EP_ISR_Handler+0x5ce>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006658:	b29b      	uxth	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	00da      	lsls	r2, r3, #3
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2200      	movs	r2, #0
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e045      	b.n	8006706 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d126      	bne.n	80066d6 <PCD_EP_ISR_Handler+0x59e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	627b      	str	r3, [r7, #36]	@ 0x24
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	4413      	add	r3, r2
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	00da      	lsls	r2, r3, #3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	4413      	add	r3, r2
 80066aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066ae:	623b      	str	r3, [r7, #32]
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e017      	b.n	8006706 <PCD_EP_ISR_Handler+0x5ce>
 80066d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d113      	bne.n	8006706 <PCD_EP_ISR_Handler+0x5ce>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	4413      	add	r3, r2
 80066ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	00da      	lsls	r2, r3, #3
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	4413      	add	r3, r2
 80066fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	2200      	movs	r2, #0
 8006704:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f007 fc56 	bl	800dfbe <HAL_PCD_DataInStageCallback>
 8006712:	e04a      	b.n	80067aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006714:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d13f      	bne.n	800679e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	4413      	add	r3, r2
 8006738:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006742:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800674a:	429a      	cmp	r2, r3
 800674c:	d906      	bls.n	800675c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800674e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006758:	619a      	str	r2, [r3, #24]
 800675a:	e002      	b.n	8006762 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800675c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800675e:	2200      	movs	r2, #0
 8006760:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800676a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f007 fc24 	bl	800dfbe <HAL_PCD_DataInStageCallback>
 8006776:	e018      	b.n	80067aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800677e:	441a      	add	r2, r3
 8006780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006782:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800678a:	441a      	add	r2, r3
 800678c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800678e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006796:	4618      	mov	r0, r3
 8006798:	f005 f84f 	bl	800b83a <USB_EPStartXfer>
 800679c:	e005      	b.n	80067aa <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800679e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067a0:	461a      	mov	r2, r3
 80067a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f917 	bl	80069d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	b21b      	sxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f6ff acc3 	blt.w	8006142 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3748      	adds	r7, #72	@ 0x48
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b088      	sub	sp, #32
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d07c      	beq.n	80068d8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	4413      	add	r3, r2
 80067f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006802:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	8b7b      	ldrh	r3, [r7, #26]
 800680a:	429a      	cmp	r2, r3
 800680c:	d306      	bcc.n	800681c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	8b7b      	ldrh	r3, [r7, #26]
 8006814:	1ad2      	subs	r2, r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	619a      	str	r2, [r3, #24]
 800681a:	e002      	b.n	8006822 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d123      	bne.n	8006872 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006844:	833b      	strh	r3, [r7, #24]
 8006846:	8b3b      	ldrh	r3, [r7, #24]
 8006848:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800684c:	833b      	strh	r3, [r7, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	8b3b      	ldrh	r3, [r7, #24]
 800685e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800686e:	b29b      	uxth	r3, r3
 8006870:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01f      	beq.n	80068bc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	82fb      	strh	r3, [r7, #22]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	441a      	add	r2, r3
 80068a6:	8afb      	ldrh	r3, [r7, #22]
 80068a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80068bc:	8b7b      	ldrh	r3, [r7, #26]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8085 	beq.w	80069ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6959      	ldr	r1, [r3, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	891a      	ldrh	r2, [r3, #8]
 80068d0:	8b7b      	ldrh	r3, [r7, #26]
 80068d2:	f005 fed9 	bl	800c688 <USB_ReadPMA>
 80068d6:	e07a      	b.n	80069ce <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	8b7b      	ldrh	r3, [r7, #26]
 8006904:	429a      	cmp	r2, r3
 8006906:	d306      	bcc.n	8006916 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	8b7b      	ldrh	r3, [r7, #26]
 800690e:	1ad2      	subs	r2, r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	619a      	str	r2, [r3, #24]
 8006914:	e002      	b.n	800691c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d123      	bne.n	800696c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800693a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693e:	83fb      	strh	r3, [r7, #30]
 8006940:	8bfb      	ldrh	r3, [r7, #30]
 8006942:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006946:	83fb      	strh	r3, [r7, #30]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	8bfb      	ldrh	r3, [r7, #30]
 8006958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006968:	b29b      	uxth	r3, r3
 800696a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d11f      	bne.n	80069b6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006990:	83bb      	strh	r3, [r7, #28]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8bbb      	ldrh	r3, [r7, #28]
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069b6:	8b7b      	ldrh	r3, [r7, #26]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6959      	ldr	r1, [r3, #20]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	895a      	ldrh	r2, [r3, #10]
 80069c8:	8b7b      	ldrh	r3, [r7, #26]
 80069ca:	f005 fe5d 	bl	800c688 <USB_ReadPMA>
    }
  }

  return count;
 80069ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b0a6      	sub	sp, #152	@ 0x98
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 81f7 	beq.w	8006de0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4413      	add	r3, r2
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a16:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d907      	bls.n	8006a36 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	619a      	str	r2, [r3, #24]
 8006a34:	e002      	b.n	8006a3c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f040 80e1 	bne.w	8006c08 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d126      	bne.n	8006a9c <HAL_PCD_EP_DB_Transmit+0xc4>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	4413      	add	r3, r2
 8006a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	00da      	lsls	r2, r3, #3
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	4413      	add	r3, r2
 8006a70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	e01a      	b.n	8006ad2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d116      	bne.n	8006ad2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	4413      	add	r3, r2
 8006aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	00da      	lsls	r2, r3, #3
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	2200      	movs	r2, #0
 8006ad0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d126      	bne.n	8006b2e <HAL_PCD_EP_DB_Transmit+0x156>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	4413      	add	r3, r2
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	00da      	lsls	r2, r3, #3
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	4413      	add	r3, r2
 8006b02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e017      	b.n	8006b5e <HAL_PCD_EP_DB_Transmit+0x186>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d113      	bne.n	8006b5e <HAL_PCD_EP_DB_Transmit+0x186>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	4413      	add	r3, r2
 8006b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	00da      	lsls	r2, r3, #3
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	4413      	add	r3, r2
 8006b52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	78db      	ldrb	r3, [r3, #3]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d123      	bne.n	8006bae <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b80:	837b      	strh	r3, [r7, #26]
 8006b82:	8b7b      	ldrh	r3, [r7, #26]
 8006b84:	f083 0320 	eor.w	r3, r3, #32
 8006b88:	837b      	strh	r3, [r7, #26]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8b7b      	ldrh	r3, [r7, #26]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f007 fa02 	bl	800dfbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01f      	beq.n	8006c04 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bde:	833b      	strh	r3, [r7, #24]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	8b3b      	ldrh	r3, [r7, #24]
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e31f      	b.n	8007248 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d021      	beq.n	8006c56 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	f040 82ca 	bne.w	80071f6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	695a      	ldr	r2, [r3, #20]
 8006c66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c6a:	441a      	add	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c78:	441a      	add	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6a1a      	ldr	r2, [r3, #32]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d309      	bcc.n	8006c9e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	621a      	str	r2, [r3, #32]
 8006c9c:	e015      	b.n	8006cca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d107      	bne.n	8006cb6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006ca6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006caa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006cb4:	e009      	b.n	8006cca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	785b      	ldrb	r3, [r3, #1]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d15f      	bne.n	8006d92 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce6:	4413      	add	r3, r2
 8006ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	00da      	lsls	r2, r3, #3
 8006cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <HAL_PCD_EP_DB_Transmit+0x34e>
 8006d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e051      	b.n	8006dca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d28:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d2a:	d816      	bhi.n	8006d5a <HAL_PCD_EP_DB_Transmit+0x382>
 8006d2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3e:	3301      	adds	r3, #1
 8006d40:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4313      	orrs	r3, r2
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e037      	b.n	8006dca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <HAL_PCD_EP_DB_Transmit+0x398>
 8006d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	029b      	lsls	r3, r3, #10
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e01b      	b.n	8006dca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d117      	bne.n	8006dca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	461a      	mov	r2, r3
 8006dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dae:	4413      	add	r3, r2
 8006db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	00da      	lsls	r2, r3, #3
 8006db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dba:	4413      	add	r3, r2
 8006dbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6959      	ldr	r1, [r3, #20]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	891a      	ldrh	r2, [r3, #8]
 8006dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f005 fc12 	bl	800c602 <USB_WritePMA>
 8006dde:	e20a      	b.n	80071f6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4413      	add	r3, r2
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e04:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d307      	bcc.n	8006e24 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	699a      	ldr	r2, [r3, #24]
 8006e18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e1c:	1ad2      	subs	r2, r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	619a      	str	r2, [r3, #24]
 8006e22:	e002      	b.n	8006e2a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2200      	movs	r2, #0
 8006e28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 80f6 	bne.w	8007020 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d126      	bne.n	8006e8a <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e50:	4413      	add	r3, r2
 8006e52:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	00da      	lsls	r2, r3, #3
 8006e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e62:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	e01a      	b.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d116      	bne.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ea6:	4413      	add	r3, r2
 8006ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	00da      	lsls	r2, r3, #3
 8006eb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d12f      	bne.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x558>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ee8:	4413      	add	r3, r2
 8006eea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	00da      	lsls	r2, r3, #3
 8006ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	e01c      	b.n	8006f6a <HAL_PCD_EP_DB_Transmit+0x592>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d118      	bne.n	8006f6a <HAL_PCD_EP_DB_Transmit+0x592>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f48:	4413      	add	r3, r2
 8006f4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	00da      	lsls	r2, r3, #3
 8006f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f58:	4413      	add	r3, r2
 8006f5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f66:	2200      	movs	r2, #0
 8006f68:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	78db      	ldrb	r3, [r3, #3]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d127      	bne.n	8006fc2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006f90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006f94:	f083 0320 	eor.w	r3, r3, #32
 8006f98:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f006 fff8 	bl	800dfbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d121      	bne.n	800701c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800700c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007010:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007018:	b29b      	uxth	r3, r3
 800701a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e113      	b.n	8007248 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d121      	bne.n	800706e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007044:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800705a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800705e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007062:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706a:	b29b      	uxth	r3, r3
 800706c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007074:	2b01      	cmp	r3, #1
 8007076:	f040 80be 	bne.w	80071f6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007082:	441a      	add	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007090:	441a      	add	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6a1a      	ldr	r2, [r3, #32]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d309      	bcc.n	80070b6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	621a      	str	r2, [r3, #32]
 80070b4:	e015      	b.n	80070e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d107      	bne.n	80070ce <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80070be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80070c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80070cc:	e009      	b.n	80070e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d15f      	bne.n	80071b0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070fe:	b29b      	uxth	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007104:	4413      	add	r3, r2
 8007106:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	00da      	lsls	r2, r3, #3
 800710e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007110:	4413      	add	r3, r2
 8007112:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007116:	667b      	str	r3, [r7, #100]	@ 0x64
 8007118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007122:	b29a      	uxth	r2, r3
 8007124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <HAL_PCD_EP_DB_Transmit+0x76c>
 800712e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713c:	b29a      	uxth	r2, r3
 800713e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	e04e      	b.n	80071e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007146:	2b3e      	cmp	r3, #62	@ 0x3e
 8007148:	d816      	bhi.n	8007178 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800714a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800714c:	085b      	lsrs	r3, r3, #1
 800714e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <HAL_PCD_EP_DB_Transmit+0x788>
 800715a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800715c:	3301      	adds	r3, #1
 800715e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29a      	uxth	r2, r3
 8007166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007168:	b29b      	uxth	r3, r3
 800716a:	029b      	lsls	r3, r3, #10
 800716c:	b29b      	uxth	r3, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	b29a      	uxth	r2, r3
 8007172:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	e034      	b.n	80071e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	663b      	str	r3, [r7, #96]	@ 0x60
 800717e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800718a:	3b01      	subs	r3, #1
 800718c:	663b      	str	r3, [r7, #96]	@ 0x60
 800718e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29a      	uxth	r2, r3
 8007194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007196:	b29b      	uxth	r3, r3
 8007198:	029b      	lsls	r3, r3, #10
 800719a:	b29b      	uxth	r3, r3
 800719c:	4313      	orrs	r3, r2
 800719e:	b29b      	uxth	r3, r3
 80071a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	e018      	b.n	80071e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d114      	bne.n	80071e2 <HAL_PCD_EP_DB_Transmit+0x80a>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071c6:	4413      	add	r3, r2
 80071c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	00da      	lsls	r2, r3, #3
 80071d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d2:	4413      	add	r3, r2
 80071d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	6959      	ldr	r1, [r3, #20]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	895a      	ldrh	r2, [r3, #10]
 80071ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f005 fa06 	bl	800c602 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800720c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007210:	82fb      	strh	r3, [r7, #22]
 8007212:	8afb      	ldrh	r3, [r7, #22]
 8007214:	f083 0310 	eor.w	r3, r3, #16
 8007218:	82fb      	strh	r3, [r7, #22]
 800721a:	8afb      	ldrh	r3, [r7, #22]
 800721c:	f083 0320 	eor.w	r3, r3, #32
 8007220:	82fb      	strh	r3, [r7, #22]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	8afb      	ldrh	r3, [r7, #22]
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800723e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3798      	adds	r7, #152	@ 0x98
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	607b      	str	r3, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	817b      	strh	r3, [r7, #10]
 800725e:	4613      	mov	r3, r2
 8007260:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007262:	897b      	ldrh	r3, [r7, #10]
 8007264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800726e:	897b      	ldrh	r3, [r7, #10]
 8007270:	f003 0207 	and.w	r2, r3, #7
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	3310      	adds	r3, #16
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e009      	b.n	800729a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007286:	897a      	ldrh	r2, [r7, #10]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800729a:	893b      	ldrh	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	80da      	strh	r2, [r3, #6]
 80072ae:	e00b      	b.n	80072c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2201      	movs	r2, #1
 80072b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800730e:	b29b      	uxth	r3, r3
 8007310:	f043 0302 	orr.w	r3, r3, #2
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d141      	bne.n	80073d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007352:	4b4b      	ldr	r3, [pc, #300]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800735e:	d131      	bne.n	80073c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007360:	4b47      	ldr	r3, [pc, #284]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007366:	4a46      	ldr	r2, [pc, #280]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800736c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007370:	4b43      	ldr	r3, [pc, #268]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007378:	4a41      	ldr	r2, [pc, #260]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800737a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800737e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007380:	4b40      	ldr	r3, [pc, #256]	@ (8007484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2232      	movs	r2, #50	@ 0x32
 8007386:	fb02 f303 	mul.w	r3, r2, r3
 800738a:	4a3f      	ldr	r2, [pc, #252]	@ (8007488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800738c:	fba2 2303 	umull	r2, r3, r2, r3
 8007390:	0c9b      	lsrs	r3, r3, #18
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007396:	e002      	b.n	800739e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3b01      	subs	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800739e:	4b38      	ldr	r3, [pc, #224]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073aa:	d102      	bne.n	80073b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f2      	bne.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073b2:	4b33      	ldr	r3, [pc, #204]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073be:	d158      	bne.n	8007472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e057      	b.n	8007474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80073d4:	e04d      	b.n	8007472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073dc:	d141      	bne.n	8007462 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073de:	4b28      	ldr	r3, [pc, #160]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ea:	d131      	bne.n	8007450 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073ec:	4b24      	ldr	r3, [pc, #144]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073f2:	4a23      	ldr	r2, [pc, #140]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073fc:	4b20      	ldr	r3, [pc, #128]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007404:	4a1e      	ldr	r2, [pc, #120]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800740a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800740c:	4b1d      	ldr	r3, [pc, #116]	@ (8007484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2232      	movs	r2, #50	@ 0x32
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	4a1c      	ldr	r2, [pc, #112]	@ (8007488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007418:	fba2 2303 	umull	r2, r3, r2, r3
 800741c:	0c9b      	lsrs	r3, r3, #18
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007422:	e002      	b.n	800742a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3b01      	subs	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800742a:	4b15      	ldr	r3, [pc, #84]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007436:	d102      	bne.n	800743e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f2      	bne.n	8007424 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800743e:	4b10      	ldr	r3, [pc, #64]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744a:	d112      	bne.n	8007472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e011      	b.n	8007474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007450:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007456:	4a0a      	ldr	r2, [pc, #40]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800745c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007460:	e007      	b.n	8007472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007462:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800746a:	4a05      	ldr	r2, [pc, #20]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800746c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007470:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	40007000 	.word	0x40007000
 8007484:	20000004 	.word	0x20000004
 8007488:	431bde83 	.word	0x431bde83

0800748c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4a04      	ldr	r2, [pc, #16]	@ (80074a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800749a:	6093      	str	r3, [r2, #8]
}
 800749c:	bf00      	nop
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40007000 	.word	0x40007000

080074ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e2fe      	b.n	8007abc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d075      	beq.n	80075b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ca:	4b97      	ldr	r3, [pc, #604]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 030c 	and.w	r3, r3, #12
 80074d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d4:	4b94      	ldr	r3, [pc, #592]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d102      	bne.n	80074ea <HAL_RCC_OscConfig+0x3e>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d002      	beq.n	80074f0 <HAL_RCC_OscConfig+0x44>
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d10b      	bne.n	8007508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d05b      	beq.n	80075b4 <HAL_RCC_OscConfig+0x108>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d157      	bne.n	80075b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e2d9      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007510:	d106      	bne.n	8007520 <HAL_RCC_OscConfig+0x74>
 8007512:	4b85      	ldr	r3, [pc, #532]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a84      	ldr	r2, [pc, #528]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	e01d      	b.n	800755c <HAL_RCC_OscConfig+0xb0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007528:	d10c      	bne.n	8007544 <HAL_RCC_OscConfig+0x98>
 800752a:	4b7f      	ldr	r3, [pc, #508]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a7e      	ldr	r2, [pc, #504]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b7c      	ldr	r3, [pc, #496]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a7b      	ldr	r2, [pc, #492]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 800753c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e00b      	b.n	800755c <HAL_RCC_OscConfig+0xb0>
 8007544:	4b78      	ldr	r3, [pc, #480]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a77      	ldr	r2, [pc, #476]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 800754a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4b75      	ldr	r3, [pc, #468]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a74      	ldr	r2, [pc, #464]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800755a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d013      	beq.n	800758c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007564:	f7fb fa20 	bl	80029a8 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800756c:	f7fb fa1c 	bl	80029a8 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b64      	cmp	r3, #100	@ 0x64
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e29e      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800757e:	4b6a      	ldr	r3, [pc, #424]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0f0      	beq.n	800756c <HAL_RCC_OscConfig+0xc0>
 800758a:	e014      	b.n	80075b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758c:	f7fb fa0c 	bl	80029a8 <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007594:	f7fb fa08 	bl	80029a8 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b64      	cmp	r3, #100	@ 0x64
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e28a      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075a6:	4b60      	ldr	r3, [pc, #384]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f0      	bne.n	8007594 <HAL_RCC_OscConfig+0xe8>
 80075b2:	e000      	b.n	80075b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d075      	beq.n	80076ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075c2:	4b59      	ldr	r3, [pc, #356]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 030c 	and.w	r3, r3, #12
 80075ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075cc:	4b56      	ldr	r3, [pc, #344]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2b0c      	cmp	r3, #12
 80075da:	d102      	bne.n	80075e2 <HAL_RCC_OscConfig+0x136>
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d002      	beq.n	80075e8 <HAL_RCC_OscConfig+0x13c>
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d11f      	bne.n	8007628 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075e8:	4b4f      	ldr	r3, [pc, #316]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_OscConfig+0x154>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e25d      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007600:	4b49      	ldr	r3, [pc, #292]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	061b      	lsls	r3, r3, #24
 800760e:	4946      	ldr	r1, [pc, #280]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007610:	4313      	orrs	r3, r2
 8007612:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007614:	4b45      	ldr	r3, [pc, #276]	@ (800772c <HAL_RCC_OscConfig+0x280>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f7fb f979 	bl	8002910 <HAL_InitTick>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d043      	beq.n	80076ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e249      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d023      	beq.n	8007678 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007630:	4b3d      	ldr	r3, [pc, #244]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a3c      	ldr	r2, [pc, #240]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800763a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763c:	f7fb f9b4 	bl	80029a8 <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007644:	f7fb f9b0 	bl	80029a8 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e232      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007656:	4b34      	ldr	r3, [pc, #208]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f0      	beq.n	8007644 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007662:	4b31      	ldr	r3, [pc, #196]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	492d      	ldr	r1, [pc, #180]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007672:	4313      	orrs	r3, r2
 8007674:	604b      	str	r3, [r1, #4]
 8007676:	e01a      	b.n	80076ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007678:	4b2b      	ldr	r3, [pc, #172]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2a      	ldr	r2, [pc, #168]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 800767e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fb f990 	bl	80029a8 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800768c:	f7fb f98c 	bl	80029a8 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e20e      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800769e:	4b22      	ldr	r3, [pc, #136]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f0      	bne.n	800768c <HAL_RCC_OscConfig+0x1e0>
 80076aa:	e000      	b.n	80076ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d041      	beq.n	800773e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01c      	beq.n	80076fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076c2:	4b19      	ldr	r3, [pc, #100]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80076c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076c8:	4a17      	ldr	r2, [pc, #92]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d2:	f7fb f969 	bl	80029a8 <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076da:	f7fb f965 	bl	80029a8 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e1e7      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80076ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0ef      	beq.n	80076da <HAL_RCC_OscConfig+0x22e>
 80076fa:	e020      	b.n	800773e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 80076fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007702:	4a09      	ldr	r2, [pc, #36]	@ (8007728 <HAL_RCC_OscConfig+0x27c>)
 8007704:	f023 0301 	bic.w	r3, r3, #1
 8007708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770c:	f7fb f94c 	bl	80029a8 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007712:	e00d      	b.n	8007730 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007714:	f7fb f948 	bl	80029a8 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d906      	bls.n	8007730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e1ca      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
 8007726:	bf00      	nop
 8007728:	40021000 	.word	0x40021000
 800772c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007730:	4b8c      	ldr	r3, [pc, #560]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1ea      	bne.n	8007714 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0304 	and.w	r3, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 80a6 	beq.w	8007898 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800774c:	2300      	movs	r3, #0
 800774e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007750:	4b84      	ldr	r3, [pc, #528]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_RCC_OscConfig+0x2b4>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <HAL_RCC_OscConfig+0x2b6>
 8007760:	2300      	movs	r3, #0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00d      	beq.n	8007782 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007766:	4b7f      	ldr	r3, [pc, #508]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776a:	4a7e      	ldr	r2, [pc, #504]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 800776c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007770:	6593      	str	r3, [r2, #88]	@ 0x58
 8007772:	4b7c      	ldr	r3, [pc, #496]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800777e:	2301      	movs	r3, #1
 8007780:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007782:	4b79      	ldr	r3, [pc, #484]	@ (8007968 <HAL_RCC_OscConfig+0x4bc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778a:	2b00      	cmp	r3, #0
 800778c:	d118      	bne.n	80077c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800778e:	4b76      	ldr	r3, [pc, #472]	@ (8007968 <HAL_RCC_OscConfig+0x4bc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a75      	ldr	r2, [pc, #468]	@ (8007968 <HAL_RCC_OscConfig+0x4bc>)
 8007794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800779a:	f7fb f905 	bl	80029a8 <HAL_GetTick>
 800779e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a0:	e008      	b.n	80077b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a2:	f7fb f901 	bl	80029a8 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d901      	bls.n	80077b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e183      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007968 <HAL_RCC_OscConfig+0x4bc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0f0      	beq.n	80077a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d108      	bne.n	80077da <HAL_RCC_OscConfig+0x32e>
 80077c8:	4b66      	ldr	r3, [pc, #408]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ce:	4a65      	ldr	r2, [pc, #404]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80077d8:	e024      	b.n	8007824 <HAL_RCC_OscConfig+0x378>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d110      	bne.n	8007804 <HAL_RCC_OscConfig+0x358>
 80077e2:	4b60      	ldr	r3, [pc, #384]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80077e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e8:	4a5e      	ldr	r2, [pc, #376]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80077ea:	f043 0304 	orr.w	r3, r3, #4
 80077ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80077f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f8:	4a5a      	ldr	r2, [pc, #360]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007802:	e00f      	b.n	8007824 <HAL_RCC_OscConfig+0x378>
 8007804:	4b57      	ldr	r3, [pc, #348]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780a:	4a56      	ldr	r2, [pc, #344]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007814:	4b53      	ldr	r3, [pc, #332]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781a:	4a52      	ldr	r2, [pc, #328]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 800781c:	f023 0304 	bic.w	r3, r3, #4
 8007820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d016      	beq.n	800785a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782c:	f7fb f8bc 	bl	80029a8 <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007832:	e00a      	b.n	800784a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007834:	f7fb f8b8 	bl	80029a8 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007842:	4293      	cmp	r3, r2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e138      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800784a:	4b46      	ldr	r3, [pc, #280]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0ed      	beq.n	8007834 <HAL_RCC_OscConfig+0x388>
 8007858:	e015      	b.n	8007886 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785a:	f7fb f8a5 	bl	80029a8 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007860:	e00a      	b.n	8007878 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007862:	f7fb f8a1 	bl	80029a8 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007870:	4293      	cmp	r3, r2
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e121      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007878:	4b3a      	ldr	r3, [pc, #232]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1ed      	bne.n	8007862 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007886:	7ffb      	ldrb	r3, [r7, #31]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d105      	bne.n	8007898 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800788c:	4b35      	ldr	r3, [pc, #212]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 800788e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007890:	4a34      	ldr	r2, [pc, #208]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007896:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d03c      	beq.n	800791e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01c      	beq.n	80078e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078ac:	4b2d      	ldr	r3, [pc, #180]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80078ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078bc:	f7fb f874 	bl	80029a8 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078c4:	f7fb f870 	bl	80029a8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e0f2      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078d6:	4b23      	ldr	r3, [pc, #140]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80078d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0ef      	beq.n	80078c4 <HAL_RCC_OscConfig+0x418>
 80078e4:	e01b      	b.n	800791e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80078e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f6:	f7fb f857 	bl	80029a8 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078fe:	f7fb f853 	bl	80029a8 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e0d5      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007910:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1ef      	bne.n	80078fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80c9 	beq.w	8007aba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007928:	4b0e      	ldr	r3, [pc, #56]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 030c 	and.w	r3, r3, #12
 8007930:	2b0c      	cmp	r3, #12
 8007932:	f000 8083 	beq.w	8007a3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d15e      	bne.n	80079fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793e:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a08      	ldr	r2, [pc, #32]	@ (8007964 <HAL_RCC_OscConfig+0x4b8>)
 8007944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794a:	f7fb f82d 	bl	80029a8 <HAL_GetTick>
 800794e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007950:	e00c      	b.n	800796c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007952:	f7fb f829 	bl	80029a8 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d905      	bls.n	800796c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e0ab      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
 8007964:	40021000 	.word	0x40021000
 8007968:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800796c:	4b55      	ldr	r3, [pc, #340]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1ec      	bne.n	8007952 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007978:	4b52      	ldr	r3, [pc, #328]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	4b52      	ldr	r3, [pc, #328]	@ (8007ac8 <HAL_RCC_OscConfig+0x61c>)
 800797e:	4013      	ands	r3, r2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6a11      	ldr	r1, [r2, #32]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007988:	3a01      	subs	r2, #1
 800798a:	0112      	lsls	r2, r2, #4
 800798c:	4311      	orrs	r1, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007992:	0212      	lsls	r2, r2, #8
 8007994:	4311      	orrs	r1, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800799a:	0852      	lsrs	r2, r2, #1
 800799c:	3a01      	subs	r2, #1
 800799e:	0552      	lsls	r2, r2, #21
 80079a0:	4311      	orrs	r1, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80079a6:	0852      	lsrs	r2, r2, #1
 80079a8:	3a01      	subs	r2, #1
 80079aa:	0652      	lsls	r2, r2, #25
 80079ac:	4311      	orrs	r1, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80079b2:	06d2      	lsls	r2, r2, #27
 80079b4:	430a      	orrs	r2, r1
 80079b6:	4943      	ldr	r1, [pc, #268]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079bc:	4b41      	ldr	r3, [pc, #260]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a40      	ldr	r2, [pc, #256]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 80079c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079c8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	4a3d      	ldr	r2, [pc, #244]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 80079ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d4:	f7fa ffe8 	bl	80029a8 <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079dc:	f7fa ffe4 	bl	80029a8 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e066      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079ee:	4b35      	ldr	r3, [pc, #212]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0f0      	beq.n	80079dc <HAL_RCC_OscConfig+0x530>
 80079fa:	e05e      	b.n	8007aba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079fc:	4b31      	ldr	r3, [pc, #196]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a30      	ldr	r2, [pc, #192]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 8007a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a08:	f7fa ffce 	bl	80029a8 <HAL_GetTick>
 8007a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a0e:	e008      	b.n	8007a22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a10:	f7fa ffca 	bl	80029a8 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e04c      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a22:	4b28      	ldr	r3, [pc, #160]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f0      	bne.n	8007a10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007a2e:	4b25      	ldr	r3, [pc, #148]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	4924      	ldr	r1, [pc, #144]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 8007a34:	4b25      	ldr	r3, [pc, #148]	@ (8007acc <HAL_RCC_OscConfig+0x620>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	60cb      	str	r3, [r1, #12]
 8007a3a:	e03e      	b.n	8007aba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e039      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007a48:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac4 <HAL_RCC_OscConfig+0x618>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f003 0203 	and.w	r2, r3, #3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d12c      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	3b01      	subs	r3, #1
 8007a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d123      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d11b      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d113      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d001      	beq.n	8007aba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	019f800c 	.word	0x019f800c
 8007acc:	feeefffc 	.word	0xfeeefffc

08007ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e11e      	b.n	8007d26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae8:	4b91      	ldr	r3, [pc, #580]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d910      	bls.n	8007b18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af6:	4b8e      	ldr	r3, [pc, #568]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f023 020f 	bic.w	r2, r3, #15
 8007afe:	498c      	ldr	r1, [pc, #560]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b06:	4b8a      	ldr	r3, [pc, #552]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d001      	beq.n	8007b18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e106      	b.n	8007d26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d073      	beq.n	8007c0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d129      	bne.n	8007b80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b2c:	4b81      	ldr	r3, [pc, #516]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0f4      	b.n	8007d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007b3c:	f000 f99e 	bl	8007e7c <RCC_GetSysClockFreqFromPLLSource>
 8007b40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4a7c      	ldr	r2, [pc, #496]	@ (8007d38 <HAL_RCC_ClockConfig+0x268>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d93f      	bls.n	8007bca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d009      	beq.n	8007b6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d033      	beq.n	8007bca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d12f      	bne.n	8007bca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b6a:	4b72      	ldr	r3, [pc, #456]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b72:	4a70      	ldr	r2, [pc, #448]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b7a:	2380      	movs	r3, #128	@ 0x80
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	e024      	b.n	8007bca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d107      	bne.n	8007b98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b88:	4b6a      	ldr	r3, [pc, #424]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0c6      	b.n	8007d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b98:	4b66      	ldr	r3, [pc, #408]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e0be      	b.n	8007d26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007ba8:	f000 f8ce 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8007bac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4a61      	ldr	r2, [pc, #388]	@ (8007d38 <HAL_RCC_ClockConfig+0x268>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d909      	bls.n	8007bca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007bc6:	2380      	movs	r3, #128	@ 0x80
 8007bc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bca:	4b5a      	ldr	r3, [pc, #360]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f023 0203 	bic.w	r2, r3, #3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	4957      	ldr	r1, [pc, #348]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bdc:	f7fa fee4 	bl	80029a8 <HAL_GetTick>
 8007be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007be2:	e00a      	b.n	8007bfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007be4:	f7fa fee0 	bl	80029a8 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e095      	b.n	8007d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 020c 	and.w	r2, r3, #12
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d1eb      	bne.n	8007be4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d023      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c24:	4b43      	ldr	r3, [pc, #268]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	4a42      	ldr	r2, [pc, #264]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007c2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d007      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c44:	4a3b      	ldr	r2, [pc, #236]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007c4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c4c:	4b39      	ldr	r3, [pc, #228]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4936      	ldr	r1, [pc, #216]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2b80      	cmp	r3, #128	@ 0x80
 8007c64:	d105      	bne.n	8007c72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c66:	4b33      	ldr	r3, [pc, #204]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	4a32      	ldr	r2, [pc, #200]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007c6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c72:	4b2f      	ldr	r3, [pc, #188]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d21d      	bcs.n	8007cbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c80:	4b2b      	ldr	r3, [pc, #172]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f023 020f 	bic.w	r2, r3, #15
 8007c88:	4929      	ldr	r1, [pc, #164]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c90:	f7fa fe8a 	bl	80029a8 <HAL_GetTick>
 8007c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c96:	e00a      	b.n	8007cae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c98:	f7fa fe86 	bl	80029a8 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e03b      	b.n	8007d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cae:	4b20      	ldr	r3, [pc, #128]	@ (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 030f 	and.w	r3, r3, #15
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d1ed      	bne.n	8007c98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	4917      	ldr	r1, [pc, #92]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d009      	beq.n	8007cfa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ce6:	4b13      	ldr	r3, [pc, #76]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	490f      	ldr	r1, [pc, #60]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cfa:	f000 f825 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	4b0c      	ldr	r3, [pc, #48]	@ (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	091b      	lsrs	r3, r3, #4
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	490c      	ldr	r1, [pc, #48]	@ (8007d3c <HAL_RCC_ClockConfig+0x26c>)
 8007d0c:	5ccb      	ldrb	r3, [r1, r3]
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	fa22 f303 	lsr.w	r3, r2, r3
 8007d16:	4a0a      	ldr	r2, [pc, #40]	@ (8007d40 <HAL_RCC_ClockConfig+0x270>)
 8007d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <HAL_RCC_ClockConfig+0x274>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fa fdf6 	bl	8002910 <HAL_InitTick>
 8007d24:	4603      	mov	r3, r0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40022000 	.word	0x40022000
 8007d34:	40021000 	.word	0x40021000
 8007d38:	04c4b400 	.word	0x04c4b400
 8007d3c:	0800f484 	.word	0x0800f484
 8007d40:	20000004 	.word	0x20000004
 8007d44:	20000008 	.word	0x20000008

08007d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 030c 	and.w	r3, r3, #12
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d102      	bne.n	8007d60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	e047      	b.n	8007df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d60:	4b27      	ldr	r3, [pc, #156]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 030c 	and.w	r3, r3, #12
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d102      	bne.n	8007d72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d6c:	4b26      	ldr	r3, [pc, #152]	@ (8007e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	e03e      	b.n	8007df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d72:	4b23      	ldr	r3, [pc, #140]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f003 030c 	and.w	r3, r3, #12
 8007d7a:	2b0c      	cmp	r3, #12
 8007d7c:	d136      	bne.n	8007dec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d7e:	4b20      	ldr	r3, [pc, #128]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d88:	4b1d      	ldr	r3, [pc, #116]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	3301      	adds	r3, #1
 8007d94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d10c      	bne.n	8007db6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8007e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	4a16      	ldr	r2, [pc, #88]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007da6:	68d2      	ldr	r2, [r2, #12]
 8007da8:	0a12      	lsrs	r2, r2, #8
 8007daa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	617b      	str	r3, [r7, #20]
      break;
 8007db4:	e00c      	b.n	8007dd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007db6:	4a13      	ldr	r2, [pc, #76]	@ (8007e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbe:	4a10      	ldr	r2, [pc, #64]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dc0:	68d2      	ldr	r2, [r2, #12]
 8007dc2:	0a12      	lsrs	r2, r2, #8
 8007dc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007dc8:	fb02 f303 	mul.w	r3, r2, r3
 8007dcc:	617b      	str	r3, [r7, #20]
      break;
 8007dce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	0e5b      	lsrs	r3, r3, #25
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	3301      	adds	r3, #1
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	e001      	b.n	8007df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007df0:	693b      	ldr	r3, [r7, #16]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40021000 	.word	0x40021000
 8007e04:	00f42400 	.word	0x00f42400
 8007e08:	007a1200 	.word	0x007a1200

08007e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e10:	4b03      	ldr	r3, [pc, #12]	@ (8007e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e12:	681b      	ldr	r3, [r3, #0]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20000004 	.word	0x20000004

08007e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e28:	f7ff fff0 	bl	8007e0c <HAL_RCC_GetHCLKFreq>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	4b06      	ldr	r3, [pc, #24]	@ (8007e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0a1b      	lsrs	r3, r3, #8
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	4904      	ldr	r1, [pc, #16]	@ (8007e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e3a:	5ccb      	ldrb	r3, [r1, r3]
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	0800f494 	.word	0x0800f494

08007e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e54:	f7ff ffda 	bl	8007e0c <HAL_RCC_GetHCLKFreq>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	4b06      	ldr	r3, [pc, #24]	@ (8007e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	0adb      	lsrs	r3, r3, #11
 8007e60:	f003 0307 	and.w	r3, r3, #7
 8007e64:	4904      	ldr	r1, [pc, #16]	@ (8007e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e66:	5ccb      	ldrb	r3, [r1, r3]
 8007e68:	f003 031f 	and.w	r3, r3, #31
 8007e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	40021000 	.word	0x40021000
 8007e78:	0800f494 	.word	0x0800f494

08007e7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e82:	4b1e      	ldr	r3, [pc, #120]	@ (8007efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	091b      	lsrs	r3, r3, #4
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d10c      	bne.n	8007eba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ea0:	4a17      	ldr	r2, [pc, #92]	@ (8007f00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	4a14      	ldr	r2, [pc, #80]	@ (8007efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007eaa:	68d2      	ldr	r2, [r2, #12]
 8007eac:	0a12      	lsrs	r2, r2, #8
 8007eae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	617b      	str	r3, [r7, #20]
    break;
 8007eb8:	e00c      	b.n	8007ed4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007eba:	4a12      	ldr	r2, [pc, #72]	@ (8007f04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8007efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ec4:	68d2      	ldr	r2, [r2, #12]
 8007ec6:	0a12      	lsrs	r2, r2, #8
 8007ec8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	617b      	str	r3, [r7, #20]
    break;
 8007ed2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ed4:	4b09      	ldr	r3, [pc, #36]	@ (8007efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	0e5b      	lsrs	r3, r3, #25
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	3301      	adds	r3, #1
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007eee:	687b      	ldr	r3, [r7, #4]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40021000 	.word	0x40021000
 8007f00:	007a1200 	.word	0x007a1200
 8007f04:	00f42400 	.word	0x00f42400

08007f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f10:	2300      	movs	r3, #0
 8007f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f14:	2300      	movs	r3, #0
 8007f16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8098 	beq.w	8008056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f26:	2300      	movs	r3, #0
 8007f28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f2a:	4b43      	ldr	r3, [pc, #268]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10d      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f36:	4b40      	ldr	r3, [pc, #256]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f42:	4b3d      	ldr	r3, [pc, #244]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f4a:	60bb      	str	r3, [r7, #8]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f52:	4b3a      	ldr	r3, [pc, #232]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a39      	ldr	r2, [pc, #228]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f5e:	f7fa fd23 	bl	80029a8 <HAL_GetTick>
 8007f62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f64:	e009      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f66:	f7fa fd1f 	bl	80029a8 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d902      	bls.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	74fb      	strb	r3, [r7, #19]
        break;
 8007f78:	e005      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f7a:	4b30      	ldr	r3, [pc, #192]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0ef      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007f86:	7cfb      	ldrb	r3, [r7, #19]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d159      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01e      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d019      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fa8:	4b23      	ldr	r3, [pc, #140]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fb4:	4b20      	ldr	r3, [pc, #128]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fba:	4a1f      	ldr	r2, [pc, #124]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fca:	4a1b      	ldr	r2, [pc, #108]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fd4:	4a18      	ldr	r2, [pc, #96]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d016      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe6:	f7fa fcdf 	bl	80029a8 <HAL_GetTick>
 8007fea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fec:	e00b      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fee:	f7fa fcdb 	bl	80029a8 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d902      	bls.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	74fb      	strb	r3, [r7, #19]
            break;
 8008004:	e006      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008006:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0ec      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008014:	7cfb      	ldrb	r3, [r7, #19]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800801a:	4b07      	ldr	r3, [pc, #28]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800801c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008028:	4903      	ldr	r1, [pc, #12]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008030:	e008      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008032:	7cfb      	ldrb	r3, [r7, #19]
 8008034:	74bb      	strb	r3, [r7, #18]
 8008036:	e005      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008038:	40021000 	.word	0x40021000
 800803c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008040:	7cfb      	ldrb	r3, [r7, #19]
 8008042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008044:	7c7b      	ldrb	r3, [r7, #17]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d105      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800804a:	4ba6      	ldr	r3, [pc, #664]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800804c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800804e:	4aa5      	ldr	r2, [pc, #660]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008054:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008062:	4ba0      	ldr	r3, [pc, #640]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008068:	f023 0203 	bic.w	r2, r3, #3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	499c      	ldr	r1, [pc, #624]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008084:	4b97      	ldr	r3, [pc, #604]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808a:	f023 020c 	bic.w	r2, r3, #12
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	4994      	ldr	r1, [pc, #592]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008094:	4313      	orrs	r3, r2
 8008096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0304 	and.w	r3, r3, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080a6:	4b8f      	ldr	r3, [pc, #572]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	498b      	ldr	r1, [pc, #556]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80080c8:	4b86      	ldr	r3, [pc, #536]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	4983      	ldr	r1, [pc, #524]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080ea:	4b7e      	ldr	r3, [pc, #504]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	497a      	ldr	r1, [pc, #488]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800810c:	4b75      	ldr	r3, [pc, #468]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008112:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	4972      	ldr	r1, [pc, #456]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800812e:	4b6d      	ldr	r3, [pc, #436]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008134:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	4969      	ldr	r1, [pc, #420]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800813e:	4313      	orrs	r3, r2
 8008140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008150:	4b64      	ldr	r3, [pc, #400]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008156:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	4961      	ldr	r1, [pc, #388]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008160:	4313      	orrs	r3, r2
 8008162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008172:	4b5c      	ldr	r3, [pc, #368]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008178:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008180:	4958      	ldr	r1, [pc, #352]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008190:	2b00      	cmp	r3, #0
 8008192:	d015      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008194:	4b53      	ldr	r3, [pc, #332]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	4950      	ldr	r1, [pc, #320]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b2:	d105      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081b4:	4b4b      	ldr	r3, [pc, #300]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	4a4a      	ldr	r2, [pc, #296]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081cc:	4b45      	ldr	r3, [pc, #276]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081da:	4942      	ldr	r1, [pc, #264]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081ea:	d105      	bne.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081ec:	4b3d      	ldr	r3, [pc, #244]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	4a3c      	ldr	r2, [pc, #240]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d015      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008204:	4b37      	ldr	r3, [pc, #220]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800820a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	4934      	ldr	r1, [pc, #208]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008214:	4313      	orrs	r3, r2
 8008216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008222:	d105      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008224:	4b2f      	ldr	r3, [pc, #188]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	4a2e      	ldr	r2, [pc, #184]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800822a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800822e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d015      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800823c:	4b29      	ldr	r3, [pc, #164]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800823e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008242:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800824a:	4926      	ldr	r1, [pc, #152]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800824c:	4313      	orrs	r3, r2
 800824e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800825a:	d105      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800825c:	4b21      	ldr	r3, [pc, #132]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	4a20      	ldr	r2, [pc, #128]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008266:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d015      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008274:	4b1b      	ldr	r3, [pc, #108]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800827a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008282:	4918      	ldr	r1, [pc, #96]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008292:	d105      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008294:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	4a12      	ldr	r2, [pc, #72]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800829a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800829e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d015      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80082ac:	4b0d      	ldr	r3, [pc, #52]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ba:	490a      	ldr	r1, [pc, #40]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082ca:	d105      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082cc:	4b05      	ldr	r3, [pc, #20]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	4a04      	ldr	r2, [pc, #16]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80082d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	40021000 	.word	0x40021000

080082e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e049      	b.n	800838e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7fa f978 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f001 f808 	bl	800933c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e049      	b.n	800843c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f841 	bl	8008444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f000 ffb1 	bl	800933c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d109      	bne.n	8008484 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	bf0c      	ite	eq
 800847c:	2301      	moveq	r3, #1
 800847e:	2300      	movne	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	e03c      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0xa6>
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b04      	cmp	r3, #4
 8008488:	d109      	bne.n	800849e <HAL_TIM_PWM_Start_DMA+0x46>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	bf0c      	ite	eq
 8008496:	2301      	moveq	r3, #1
 8008498:	2300      	movne	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	e02f      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0xa6>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d109      	bne.n	80084b8 <HAL_TIM_PWM_Start_DMA+0x60>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	bf0c      	ite	eq
 80084b0:	2301      	moveq	r3, #1
 80084b2:	2300      	movne	r3, #0
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	e022      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0xa6>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b0c      	cmp	r3, #12
 80084bc:	d109      	bne.n	80084d2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	bf0c      	ite	eq
 80084ca:	2301      	moveq	r3, #1
 80084cc:	2300      	movne	r3, #0
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	e015      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0xa6>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b10      	cmp	r3, #16
 80084d6:	d109      	bne.n	80084ec <HAL_TIM_PWM_Start_DMA+0x94>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	e008      	b.n	80084fe <HAL_TIM_PWM_Start_DMA+0xa6>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	bf0c      	ite	eq
 80084f8:	2301      	moveq	r3, #1
 80084fa:	2300      	movne	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008502:	2302      	movs	r3, #2
 8008504:	e1a6      	b.n	8008854 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <HAL_TIM_PWM_Start_DMA+0xc8>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b01      	cmp	r3, #1
 8008516:	bf0c      	ite	eq
 8008518:	2301      	moveq	r3, #1
 800851a:	2300      	movne	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	e03c      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x142>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b04      	cmp	r3, #4
 8008524:	d109      	bne.n	800853a <HAL_TIM_PWM_Start_DMA+0xe2>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b01      	cmp	r3, #1
 8008530:	bf0c      	ite	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	2300      	movne	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	e02f      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x142>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b08      	cmp	r3, #8
 800853e:	d109      	bne.n	8008554 <HAL_TIM_PWM_Start_DMA+0xfc>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b01      	cmp	r3, #1
 800854a:	bf0c      	ite	eq
 800854c:	2301      	moveq	r3, #1
 800854e:	2300      	movne	r3, #0
 8008550:	b2db      	uxtb	r3, r3
 8008552:	e022      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x142>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b0c      	cmp	r3, #12
 8008558:	d109      	bne.n	800856e <HAL_TIM_PWM_Start_DMA+0x116>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b01      	cmp	r3, #1
 8008564:	bf0c      	ite	eq
 8008566:	2301      	moveq	r3, #1
 8008568:	2300      	movne	r3, #0
 800856a:	b2db      	uxtb	r3, r3
 800856c:	e015      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x142>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b10      	cmp	r3, #16
 8008572:	d109      	bne.n	8008588 <HAL_TIM_PWM_Start_DMA+0x130>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b01      	cmp	r3, #1
 800857e:	bf0c      	ite	eq
 8008580:	2301      	moveq	r3, #1
 8008582:	2300      	movne	r3, #0
 8008584:	b2db      	uxtb	r3, r3
 8008586:	e008      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x142>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b01      	cmp	r3, #1
 8008592:	bf0c      	ite	eq
 8008594:	2301      	moveq	r3, #1
 8008596:	2300      	movne	r3, #0
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d034      	beq.n	8008608 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <HAL_TIM_PWM_Start_DMA+0x152>
 80085a4:	887b      	ldrh	r3, [r7, #2]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e152      	b.n	8008854 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <HAL_TIM_PWM_Start_DMA+0x166>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085bc:	e026      	b.n	800860c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d104      	bne.n	80085ce <HAL_TIM_PWM_Start_DMA+0x176>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085cc:	e01e      	b.n	800860c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d104      	bne.n	80085de <HAL_TIM_PWM_Start_DMA+0x186>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085dc:	e016      	b.n	800860c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b0c      	cmp	r3, #12
 80085e2:	d104      	bne.n	80085ee <HAL_TIM_PWM_Start_DMA+0x196>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085ec:	e00e      	b.n	800860c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d104      	bne.n	80085fe <HAL_TIM_PWM_Start_DMA+0x1a6>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085fc:	e006      	b.n	800860c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2202      	movs	r2, #2
 8008602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008606:	e001      	b.n	800860c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e123      	b.n	8008854 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b0c      	cmp	r3, #12
 8008610:	f200 80ae 	bhi.w	8008770 <HAL_TIM_PWM_Start_DMA+0x318>
 8008614:	a201      	add	r2, pc, #4	@ (adr r2, 800861c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	08008651 	.word	0x08008651
 8008620:	08008771 	.word	0x08008771
 8008624:	08008771 	.word	0x08008771
 8008628:	08008771 	.word	0x08008771
 800862c:	08008699 	.word	0x08008699
 8008630:	08008771 	.word	0x08008771
 8008634:	08008771 	.word	0x08008771
 8008638:	08008771 	.word	0x08008771
 800863c:	080086e1 	.word	0x080086e1
 8008640:	08008771 	.word	0x08008771
 8008644:	08008771 	.word	0x08008771
 8008648:	08008771 	.word	0x08008771
 800864c:	08008729 	.word	0x08008729
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008654:	4a81      	ldr	r2, [pc, #516]	@ (800885c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008656:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865c:	4a80      	ldr	r2, [pc, #512]	@ (8008860 <HAL_TIM_PWM_Start_DMA+0x408>)
 800865e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008664:	4a7f      	ldr	r2, [pc, #508]	@ (8008864 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008666:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3334      	adds	r3, #52	@ 0x34
 8008674:	461a      	mov	r2, r3
 8008676:	887b      	ldrh	r3, [r7, #2]
 8008678:	f7fc f904 	bl	8004884 <HAL_DMA_Start_IT>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e0e6      	b.n	8008854 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008694:	60da      	str	r2, [r3, #12]
      break;
 8008696:	e06e      	b.n	8008776 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869c:	4a6f      	ldr	r2, [pc, #444]	@ (800885c <HAL_TIM_PWM_Start_DMA+0x404>)
 800869e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a4:	4a6e      	ldr	r2, [pc, #440]	@ (8008860 <HAL_TIM_PWM_Start_DMA+0x408>)
 80086a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ac:	4a6d      	ldr	r2, [pc, #436]	@ (8008864 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80086ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3338      	adds	r3, #56	@ 0x38
 80086bc:	461a      	mov	r2, r3
 80086be:	887b      	ldrh	r3, [r7, #2]
 80086c0:	f7fc f8e0 	bl	8004884 <HAL_DMA_Start_IT>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e0c2      	b.n	8008854 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086dc:	60da      	str	r2, [r3, #12]
      break;
 80086de:	e04a      	b.n	8008776 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	4a5d      	ldr	r2, [pc, #372]	@ (800885c <HAL_TIM_PWM_Start_DMA+0x404>)
 80086e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ec:	4a5c      	ldr	r2, [pc, #368]	@ (8008860 <HAL_TIM_PWM_Start_DMA+0x408>)
 80086ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	4a5b      	ldr	r2, [pc, #364]	@ (8008864 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80086f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	333c      	adds	r3, #60	@ 0x3c
 8008704:	461a      	mov	r2, r3
 8008706:	887b      	ldrh	r3, [r7, #2]
 8008708:	f7fc f8bc 	bl	8004884 <HAL_DMA_Start_IT>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e09e      	b.n	8008854 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008724:	60da      	str	r2, [r3, #12]
      break;
 8008726:	e026      	b.n	8008776 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872c:	4a4b      	ldr	r2, [pc, #300]	@ (800885c <HAL_TIM_PWM_Start_DMA+0x404>)
 800872e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008734:	4a4a      	ldr	r2, [pc, #296]	@ (8008860 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008736:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873c:	4a49      	ldr	r2, [pc, #292]	@ (8008864 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800873e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3340      	adds	r3, #64	@ 0x40
 800874c:	461a      	mov	r2, r3
 800874e:	887b      	ldrh	r3, [r7, #2]
 8008750:	f7fc f898 	bl	8004884 <HAL_DMA_Start_IT>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e07a      	b.n	8008854 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800876c:	60da      	str	r2, [r3, #12]
      break;
 800876e:	e002      	b.n	8008776 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
      break;
 8008774:	bf00      	nop
  }

  if (status == HAL_OK)
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d16a      	bne.n	8008852 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2201      	movs	r2, #1
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fa07 	bl	8009b98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a36      	ldr	r2, [pc, #216]	@ (8008868 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d013      	beq.n	80087bc <HAL_TIM_PWM_Start_DMA+0x364>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a34      	ldr	r2, [pc, #208]	@ (800886c <HAL_TIM_PWM_Start_DMA+0x414>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00e      	beq.n	80087bc <HAL_TIM_PWM_Start_DMA+0x364>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a33      	ldr	r2, [pc, #204]	@ (8008870 <HAL_TIM_PWM_Start_DMA+0x418>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d009      	beq.n	80087bc <HAL_TIM_PWM_Start_DMA+0x364>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a31      	ldr	r2, [pc, #196]	@ (8008874 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d004      	beq.n	80087bc <HAL_TIM_PWM_Start_DMA+0x364>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a30      	ldr	r2, [pc, #192]	@ (8008878 <HAL_TIM_PWM_Start_DMA+0x420>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d101      	bne.n	80087c0 <HAL_TIM_PWM_Start_DMA+0x368>
 80087bc:	2301      	movs	r3, #1
 80087be:	e000      	b.n	80087c2 <HAL_TIM_PWM_Start_DMA+0x36a>
 80087c0:	2300      	movs	r3, #0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d007      	beq.n	80087d6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a23      	ldr	r2, [pc, #140]	@ (8008868 <HAL_TIM_PWM_Start_DMA+0x410>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d018      	beq.n	8008812 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e8:	d013      	beq.n	8008812 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a23      	ldr	r2, [pc, #140]	@ (800887c <HAL_TIM_PWM_Start_DMA+0x424>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00e      	beq.n	8008812 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a21      	ldr	r2, [pc, #132]	@ (8008880 <HAL_TIM_PWM_Start_DMA+0x428>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d009      	beq.n	8008812 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a1a      	ldr	r2, [pc, #104]	@ (800886c <HAL_TIM_PWM_Start_DMA+0x414>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d004      	beq.n	8008812 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a18      	ldr	r2, [pc, #96]	@ (8008870 <HAL_TIM_PWM_Start_DMA+0x418>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d115      	bne.n	800883e <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	4b1a      	ldr	r3, [pc, #104]	@ (8008884 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800881a:	4013      	ands	r3, r2
 800881c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b06      	cmp	r3, #6
 8008822:	d015      	beq.n	8008850 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800882a:	d011      	beq.n	8008850 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883c:	e008      	b.n	8008850 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0201 	orr.w	r2, r2, #1
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e000      	b.n	8008852 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008850:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	0800922b 	.word	0x0800922b
 8008860:	080092d3 	.word	0x080092d3
 8008864:	08009199 	.word	0x08009199
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40013400 	.word	0x40013400
 8008870:	40014000 	.word	0x40014000
 8008874:	40014400 	.word	0x40014400
 8008878:	40014800 	.word	0x40014800
 800887c:	40000400 	.word	0x40000400
 8008880:	40000800 	.word	0x40000800
 8008884:	00010007 	.word	0x00010007

08008888 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2b0c      	cmp	r3, #12
 800889a:	d855      	bhi.n	8008948 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800889c:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088d9 	.word	0x080088d9
 80088a8:	08008949 	.word	0x08008949
 80088ac:	08008949 	.word	0x08008949
 80088b0:	08008949 	.word	0x08008949
 80088b4:	080088f5 	.word	0x080088f5
 80088b8:	08008949 	.word	0x08008949
 80088bc:	08008949 	.word	0x08008949
 80088c0:	08008949 	.word	0x08008949
 80088c4:	08008911 	.word	0x08008911
 80088c8:	08008949 	.word	0x08008949
 80088cc:	08008949 	.word	0x08008949
 80088d0:	08008949 	.word	0x08008949
 80088d4:	0800892d 	.word	0x0800892d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80088e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fc f844 	bl	800497a <HAL_DMA_Abort_IT>
      break;
 80088f2:	e02c      	b.n	800894e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008902:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008908:	4618      	mov	r0, r3
 800890a:	f7fc f836 	bl	800497a <HAL_DMA_Abort_IT>
      break;
 800890e:	e01e      	b.n	800894e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800891e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008924:	4618      	mov	r0, r3
 8008926:	f7fc f828 	bl	800497a <HAL_DMA_Abort_IT>
      break;
 800892a:	e010      	b.n	800894e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800893a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008940:	4618      	mov	r0, r3
 8008942:	f7fc f81a 	bl	800497a <HAL_DMA_Abort_IT>
      break;
 8008946:	e002      	b.n	800894e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
      break;
 800894c:	bf00      	nop
  }

  if (status == HAL_OK)
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f040 8081 	bne.w	8008a58 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f001 f91a 	bl	8009b98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a3e      	ldr	r2, [pc, #248]	@ (8008a64 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a3d      	ldr	r2, [pc, #244]	@ (8008a68 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00e      	beq.n	8008996 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a3b      	ldr	r2, [pc, #236]	@ (8008a6c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a3a      	ldr	r2, [pc, #232]	@ (8008a70 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d004      	beq.n	8008996 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a38      	ldr	r2, [pc, #224]	@ (8008a74 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d101      	bne.n	800899a <HAL_TIM_PWM_Stop_DMA+0x112>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <HAL_TIM_PWM_Stop_DMA+0x114>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d017      	beq.n	80089d0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10f      	bne.n	80089d0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d107      	bne.n	80089d0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80089ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6a1a      	ldr	r2, [r3, #32]
 80089d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10f      	bne.n	8008a00 <HAL_TIM_PWM_Stop_DMA+0x178>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a1a      	ldr	r2, [r3, #32]
 80089e6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <HAL_TIM_PWM_Stop_DMA+0x178>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0201 	bic.w	r2, r2, #1
 80089fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <HAL_TIM_PWM_Stop_DMA+0x188>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a0e:	e023      	b.n	8008a58 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d104      	bne.n	8008a20 <HAL_TIM_PWM_Stop_DMA+0x198>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a1e:	e01b      	b.n	8008a58 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	d104      	bne.n	8008a30 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a2e:	e013      	b.n	8008a58 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b0c      	cmp	r3, #12
 8008a34:	d104      	bne.n	8008a40 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a3e:	e00b      	b.n	8008a58 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b10      	cmp	r3, #16
 8008a44:	d104      	bne.n	8008a50 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a4e:	e003      	b.n	8008a58 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	40013400 	.word	0x40013400
 8008a6c:	40014000 	.word	0x40014000
 8008a70:	40014400 	.word	0x40014400
 8008a74:	40014800 	.word	0x40014800

08008a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d020      	beq.n	8008adc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01b      	beq.n	8008adc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f06f 0202 	mvn.w	r2, #2
 8008aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fb40 	bl	8009148 <HAL_TIM_IC_CaptureCallback>
 8008ac8:	e005      	b.n	8008ad6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fb32 	bl	8009134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7f9 fb75 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f003 0304 	and.w	r3, r3, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d020      	beq.n	8008b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01b      	beq.n	8008b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0204 	mvn.w	r2, #4
 8008af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fb1a 	bl	8009148 <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fb0c 	bl	8009134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7f9 fb4f 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d020      	beq.n	8008b74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01b      	beq.n	8008b74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f06f 0208 	mvn.w	r2, #8
 8008b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2204      	movs	r2, #4
 8008b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 faf4 	bl	8009148 <HAL_TIM_IC_CaptureCallback>
 8008b60:	e005      	b.n	8008b6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fae6 	bl	8009134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7f9 fb29 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f003 0310 	and.w	r3, r3, #16
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d020      	beq.n	8008bc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f003 0310 	and.w	r3, r3, #16
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01b      	beq.n	8008bc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0210 	mvn.w	r2, #16
 8008b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2208      	movs	r2, #8
 8008b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 face 	bl	8009148 <HAL_TIM_IC_CaptureCallback>
 8008bac:	e005      	b.n	8008bba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fac0 	bl	8009134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7f9 fb03 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00c      	beq.n	8008be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0201 	mvn.w	r2, #1
 8008bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7f8 fcc2 	bl	8001568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d104      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00c      	beq.n	8008c12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 f875 	bl	8009cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00c      	beq.n	8008c36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d007      	beq.n	8008c36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 f86d 	bl	8009d10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00c      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa8b 	bl	8009170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00c      	beq.n	8008c7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d007      	beq.n	8008c7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f06f 0220 	mvn.w	r2, #32
 8008c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 f835 	bl	8009ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00c      	beq.n	8008ca2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d007      	beq.n	8008ca2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f001 f841 	bl	8009d24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00c      	beq.n	8008cc6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d007      	beq.n	8008cc6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 f839 	bl	8009d38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00c      	beq.n	8008cea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 f831 	bl	8009d4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00c      	beq.n	8008d0e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d007      	beq.n	8008d0e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 f829 	bl	8009d60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e0ff      	b.n	8008f36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b14      	cmp	r3, #20
 8008d42:	f200 80f0 	bhi.w	8008f26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d46:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008f27 	.word	0x08008f27
 8008d54:	08008f27 	.word	0x08008f27
 8008d58:	08008f27 	.word	0x08008f27
 8008d5c:	08008de1 	.word	0x08008de1
 8008d60:	08008f27 	.word	0x08008f27
 8008d64:	08008f27 	.word	0x08008f27
 8008d68:	08008f27 	.word	0x08008f27
 8008d6c:	08008e23 	.word	0x08008e23
 8008d70:	08008f27 	.word	0x08008f27
 8008d74:	08008f27 	.word	0x08008f27
 8008d78:	08008f27 	.word	0x08008f27
 8008d7c:	08008e63 	.word	0x08008e63
 8008d80:	08008f27 	.word	0x08008f27
 8008d84:	08008f27 	.word	0x08008f27
 8008d88:	08008f27 	.word	0x08008f27
 8008d8c:	08008ea5 	.word	0x08008ea5
 8008d90:	08008f27 	.word	0x08008f27
 8008d94:	08008f27 	.word	0x08008f27
 8008d98:	08008f27 	.word	0x08008f27
 8008d9c:	08008ee5 	.word	0x08008ee5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fb64 	bl	8009474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699a      	ldr	r2, [r3, #24]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0208 	orr.w	r2, r2, #8
 8008dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	699a      	ldr	r2, [r3, #24]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 0204 	bic.w	r2, r2, #4
 8008dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6999      	ldr	r1, [r3, #24]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	691a      	ldr	r2, [r3, #16]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	619a      	str	r2, [r3, #24]
      break;
 8008dde:	e0a5      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fbd4 	bl	8009594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699a      	ldr	r2, [r3, #24]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6999      	ldr	r1, [r3, #24]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	021a      	lsls	r2, r3, #8
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	619a      	str	r2, [r3, #24]
      break;
 8008e20:	e084      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68b9      	ldr	r1, [r7, #8]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 fc3d 	bl	80096a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69da      	ldr	r2, [r3, #28]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0208 	orr.w	r2, r2, #8
 8008e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69da      	ldr	r2, [r3, #28]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0204 	bic.w	r2, r2, #4
 8008e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69d9      	ldr	r1, [r3, #28]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	691a      	ldr	r2, [r3, #16]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	61da      	str	r2, [r3, #28]
      break;
 8008e60:	e064      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fca5 	bl	80097b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69da      	ldr	r2, [r3, #28]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69da      	ldr	r2, [r3, #28]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69d9      	ldr	r1, [r3, #28]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	021a      	lsls	r2, r3, #8
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	61da      	str	r2, [r3, #28]
      break;
 8008ea2:	e043      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fd0e 	bl	80098cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0208 	orr.w	r2, r2, #8
 8008ebe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0204 	bic.w	r2, r2, #4
 8008ece:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ee2:	e023      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fd52 	bl	8009994 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008efe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	021a      	lsls	r2, r3, #8
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f24:	e002      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop

08008f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e0de      	b.n	800911a <HAL_TIM_ConfigClockSource+0x1da>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a63      	ldr	r2, [pc, #396]	@ (8009124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	f000 80a9 	beq.w	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8008f9c:	4a61      	ldr	r2, [pc, #388]	@ (8009124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	f200 80ae 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fa4:	4a60      	ldr	r2, [pc, #384]	@ (8009128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	f000 80a1 	beq.w	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8008fac:	4a5e      	ldr	r2, [pc, #376]	@ (8009128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	f200 80a6 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800912c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	f000 8099 	beq.w	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8008fbc:	4a5b      	ldr	r2, [pc, #364]	@ (800912c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	f200 809e 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8009130 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	f000 8091 	beq.w	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8008fcc:	4a58      	ldr	r2, [pc, #352]	@ (8009130 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	f200 8096 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fd8:	f000 8089 	beq.w	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8008fdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fe0:	f200 808e 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe8:	d03e      	beq.n	8009068 <HAL_TIM_ConfigClockSource+0x128>
 8008fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fee:	f200 8087 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff6:	f000 8086 	beq.w	8009106 <HAL_TIM_ConfigClockSource+0x1c6>
 8008ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ffe:	d87f      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8009000:	2b70      	cmp	r3, #112	@ 0x70
 8009002:	d01a      	beq.n	800903a <HAL_TIM_ConfigClockSource+0xfa>
 8009004:	2b70      	cmp	r3, #112	@ 0x70
 8009006:	d87b      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8009008:	2b60      	cmp	r3, #96	@ 0x60
 800900a:	d050      	beq.n	80090ae <HAL_TIM_ConfigClockSource+0x16e>
 800900c:	2b60      	cmp	r3, #96	@ 0x60
 800900e:	d877      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8009010:	2b50      	cmp	r3, #80	@ 0x50
 8009012:	d03c      	beq.n	800908e <HAL_TIM_ConfigClockSource+0x14e>
 8009014:	2b50      	cmp	r3, #80	@ 0x50
 8009016:	d873      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8009018:	2b40      	cmp	r3, #64	@ 0x40
 800901a:	d058      	beq.n	80090ce <HAL_TIM_ConfigClockSource+0x18e>
 800901c:	2b40      	cmp	r3, #64	@ 0x40
 800901e:	d86f      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8009020:	2b30      	cmp	r3, #48	@ 0x30
 8009022:	d064      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8009024:	2b30      	cmp	r3, #48	@ 0x30
 8009026:	d86b      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8009028:	2b20      	cmp	r3, #32
 800902a:	d060      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 800902c:	2b20      	cmp	r3, #32
 800902e:	d867      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d05c      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8009034:	2b10      	cmp	r3, #16
 8009036:	d05a      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x1ae>
 8009038:	e062      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800904a:	f000 fd85 	bl	8009b58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800905c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	609a      	str	r2, [r3, #8]
      break;
 8009066:	e04f      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009078:	f000 fd6e 	bl	8009b58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800908a:	609a      	str	r2, [r3, #8]
      break;
 800908c:	e03c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800909a:	461a      	mov	r2, r3
 800909c:	f000 fce0 	bl	8009a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2150      	movs	r1, #80	@ 0x50
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fd39 	bl	8009b1e <TIM_ITRx_SetConfig>
      break;
 80090ac:	e02c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ba:	461a      	mov	r2, r3
 80090bc:	f000 fcff 	bl	8009abe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2160      	movs	r1, #96	@ 0x60
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fd29 	bl	8009b1e <TIM_ITRx_SetConfig>
      break;
 80090cc:	e01c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090da:	461a      	mov	r2, r3
 80090dc:	f000 fcc0 	bl	8009a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2140      	movs	r1, #64	@ 0x40
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fd19 	bl	8009b1e <TIM_ITRx_SetConfig>
      break;
 80090ec:	e00c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f000 fd10 	bl	8009b1e <TIM_ITRx_SetConfig>
      break;
 80090fe:	e003      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]
      break;
 8009104:	e000      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	00100070 	.word	0x00100070
 8009128:	00100040 	.word	0x00100040
 800912c:	00100030 	.word	0x00100030
 8009130:	00100020 	.word	0x00100020

08009134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d107      	bne.n	80091c0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091be:	e02a      	b.n	8009216 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d107      	bne.n	80091da <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2202      	movs	r2, #2
 80091ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091d8:	e01d      	b.n	8009216 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d107      	bne.n	80091f4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2204      	movs	r2, #4
 80091e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091f2:	e010      	b.n	8009216 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d107      	bne.n	800920e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2208      	movs	r2, #8
 8009202:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800920c:	e003      	b.n	8009216 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff ffb4 	bl	8009184 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	771a      	strb	r2, [r3, #28]
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009236:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	429a      	cmp	r2, r3
 8009240:	d10b      	bne.n	800925a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d136      	bne.n	80092be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009258:	e031      	b.n	80092be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	429a      	cmp	r2, r3
 8009262:	d10b      	bne.n	800927c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2202      	movs	r2, #2
 8009268:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d125      	bne.n	80092be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800927a:	e020      	b.n	80092be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d10b      	bne.n	800929e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2204      	movs	r2, #4
 800928a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d114      	bne.n	80092be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800929c:	e00f      	b.n	80092be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d10a      	bne.n	80092be <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2208      	movs	r2, #8
 80092ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d103      	bne.n	80092be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f7f8 ff7e 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	771a      	strb	r2, [r3, #28]
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d103      	bne.n	80092f2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	771a      	strb	r2, [r3, #28]
 80092f0:	e019      	b.n	8009326 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d103      	bne.n	8009304 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2202      	movs	r2, #2
 8009300:	771a      	strb	r2, [r3, #28]
 8009302:	e010      	b.n	8009326 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d103      	bne.n	8009316 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2204      	movs	r2, #4
 8009312:	771a      	strb	r2, [r3, #28]
 8009314:	e007      	b.n	8009326 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d102      	bne.n	8009326 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2208      	movs	r2, #8
 8009324:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff ff18 	bl	800915c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	771a      	strb	r2, [r3, #28]
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a42      	ldr	r2, [pc, #264]	@ (8009458 <TIM_Base_SetConfig+0x11c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00f      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800935a:	d00b      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a3f      	ldr	r2, [pc, #252]	@ (800945c <TIM_Base_SetConfig+0x120>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d007      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a3e      	ldr	r2, [pc, #248]	@ (8009460 <TIM_Base_SetConfig+0x124>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a3d      	ldr	r2, [pc, #244]	@ (8009464 <TIM_Base_SetConfig+0x128>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d108      	bne.n	8009386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a33      	ldr	r2, [pc, #204]	@ (8009458 <TIM_Base_SetConfig+0x11c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d01b      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009394:	d017      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a30      	ldr	r2, [pc, #192]	@ (800945c <TIM_Base_SetConfig+0x120>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d013      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a2f      	ldr	r2, [pc, #188]	@ (8009460 <TIM_Base_SetConfig+0x124>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00f      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a2e      	ldr	r2, [pc, #184]	@ (8009464 <TIM_Base_SetConfig+0x128>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d00b      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009468 <TIM_Base_SetConfig+0x12c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d007      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a2c      	ldr	r2, [pc, #176]	@ (800946c <TIM_Base_SetConfig+0x130>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d003      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a2b      	ldr	r2, [pc, #172]	@ (8009470 <TIM_Base_SetConfig+0x134>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d108      	bne.n	80093d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a16      	ldr	r2, [pc, #88]	@ (8009458 <TIM_Base_SetConfig+0x11c>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d00f      	beq.n	8009424 <TIM_Base_SetConfig+0xe8>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a17      	ldr	r2, [pc, #92]	@ (8009464 <TIM_Base_SetConfig+0x128>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d00b      	beq.n	8009424 <TIM_Base_SetConfig+0xe8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a16      	ldr	r2, [pc, #88]	@ (8009468 <TIM_Base_SetConfig+0x12c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d007      	beq.n	8009424 <TIM_Base_SetConfig+0xe8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a15      	ldr	r2, [pc, #84]	@ (800946c <TIM_Base_SetConfig+0x130>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d003      	beq.n	8009424 <TIM_Base_SetConfig+0xe8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a14      	ldr	r2, [pc, #80]	@ (8009470 <TIM_Base_SetConfig+0x134>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d103      	bne.n	800942c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b01      	cmp	r3, #1
 800943c:	d105      	bne.n	800944a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f023 0201 	bic.w	r2, r3, #1
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	611a      	str	r2, [r3, #16]
  }
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40012c00 	.word	0x40012c00
 800945c:	40000400 	.word	0x40000400
 8009460:	40000800 	.word	0x40000800
 8009464:	40013400 	.word	0x40013400
 8009468:	40014000 	.word	0x40014000
 800946c:	40014400 	.word	0x40014400
 8009470:	40014800 	.word	0x40014800

08009474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	f023 0201 	bic.w	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0303 	bic.w	r3, r3, #3
 80094ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f023 0302 	bic.w	r3, r3, #2
 80094c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009580 <TIM_OC1_SetConfig+0x10c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d00f      	beq.n	80094f4 <TIM_OC1_SetConfig+0x80>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009584 <TIM_OC1_SetConfig+0x110>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00b      	beq.n	80094f4 <TIM_OC1_SetConfig+0x80>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a2a      	ldr	r2, [pc, #168]	@ (8009588 <TIM_OC1_SetConfig+0x114>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d007      	beq.n	80094f4 <TIM_OC1_SetConfig+0x80>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a29      	ldr	r2, [pc, #164]	@ (800958c <TIM_OC1_SetConfig+0x118>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d003      	beq.n	80094f4 <TIM_OC1_SetConfig+0x80>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a28      	ldr	r2, [pc, #160]	@ (8009590 <TIM_OC1_SetConfig+0x11c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d10c      	bne.n	800950e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f023 0308 	bic.w	r3, r3, #8
 80094fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f023 0304 	bic.w	r3, r3, #4
 800950c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a1b      	ldr	r2, [pc, #108]	@ (8009580 <TIM_OC1_SetConfig+0x10c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d00f      	beq.n	8009536 <TIM_OC1_SetConfig+0xc2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a1a      	ldr	r2, [pc, #104]	@ (8009584 <TIM_OC1_SetConfig+0x110>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d00b      	beq.n	8009536 <TIM_OC1_SetConfig+0xc2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a19      	ldr	r2, [pc, #100]	@ (8009588 <TIM_OC1_SetConfig+0x114>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d007      	beq.n	8009536 <TIM_OC1_SetConfig+0xc2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a18      	ldr	r2, [pc, #96]	@ (800958c <TIM_OC1_SetConfig+0x118>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d003      	beq.n	8009536 <TIM_OC1_SetConfig+0xc2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a17      	ldr	r2, [pc, #92]	@ (8009590 <TIM_OC1_SetConfig+0x11c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d111      	bne.n	800955a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800953c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	4313      	orrs	r3, r2
 800954e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	621a      	str	r2, [r3, #32]
}
 8009574:	bf00      	nop
 8009576:	371c      	adds	r7, #28
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	40012c00 	.word	0x40012c00
 8009584:	40013400 	.word	0x40013400
 8009588:	40014000 	.word	0x40014000
 800958c:	40014400 	.word	0x40014400
 8009590:	40014800 	.word	0x40014800

08009594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	f023 0210 	bic.w	r2, r3, #16
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	021b      	lsls	r3, r3, #8
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f023 0320 	bic.w	r3, r3, #32
 80095e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a28      	ldr	r2, [pc, #160]	@ (8009694 <TIM_OC2_SetConfig+0x100>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_OC2_SetConfig+0x6c>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a27      	ldr	r2, [pc, #156]	@ (8009698 <TIM_OC2_SetConfig+0x104>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d10d      	bne.n	800961c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	4313      	orrs	r3, r2
 8009612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800961a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a1d      	ldr	r2, [pc, #116]	@ (8009694 <TIM_OC2_SetConfig+0x100>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00f      	beq.n	8009644 <TIM_OC2_SetConfig+0xb0>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a1c      	ldr	r2, [pc, #112]	@ (8009698 <TIM_OC2_SetConfig+0x104>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00b      	beq.n	8009644 <TIM_OC2_SetConfig+0xb0>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a1b      	ldr	r2, [pc, #108]	@ (800969c <TIM_OC2_SetConfig+0x108>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d007      	beq.n	8009644 <TIM_OC2_SetConfig+0xb0>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a1a      	ldr	r2, [pc, #104]	@ (80096a0 <TIM_OC2_SetConfig+0x10c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d003      	beq.n	8009644 <TIM_OC2_SetConfig+0xb0>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a19      	ldr	r2, [pc, #100]	@ (80096a4 <TIM_OC2_SetConfig+0x110>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d113      	bne.n	800966c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800964a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	4313      	orrs	r3, r2
 800965e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	4313      	orrs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	621a      	str	r2, [r3, #32]
}
 8009686:	bf00      	nop
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40012c00 	.word	0x40012c00
 8009698:	40013400 	.word	0x40013400
 800969c:	40014000 	.word	0x40014000
 80096a0:	40014400 	.word	0x40014400
 80096a4:	40014800 	.word	0x40014800

080096a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0303 	bic.w	r3, r3, #3
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	021b      	lsls	r3, r3, #8
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	4313      	orrs	r3, r2
 8009700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a27      	ldr	r2, [pc, #156]	@ (80097a4 <TIM_OC3_SetConfig+0xfc>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d003      	beq.n	8009712 <TIM_OC3_SetConfig+0x6a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a26      	ldr	r2, [pc, #152]	@ (80097a8 <TIM_OC3_SetConfig+0x100>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d10d      	bne.n	800972e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800972c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a1c      	ldr	r2, [pc, #112]	@ (80097a4 <TIM_OC3_SetConfig+0xfc>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d00f      	beq.n	8009756 <TIM_OC3_SetConfig+0xae>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a1b      	ldr	r2, [pc, #108]	@ (80097a8 <TIM_OC3_SetConfig+0x100>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00b      	beq.n	8009756 <TIM_OC3_SetConfig+0xae>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a1a      	ldr	r2, [pc, #104]	@ (80097ac <TIM_OC3_SetConfig+0x104>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d007      	beq.n	8009756 <TIM_OC3_SetConfig+0xae>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a19      	ldr	r2, [pc, #100]	@ (80097b0 <TIM_OC3_SetConfig+0x108>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d003      	beq.n	8009756 <TIM_OC3_SetConfig+0xae>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a18      	ldr	r2, [pc, #96]	@ (80097b4 <TIM_OC3_SetConfig+0x10c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d113      	bne.n	800977e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800975c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4313      	orrs	r3, r2
 800977c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40012c00 	.word	0x40012c00
 80097a8:	40013400 	.word	0x40013400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	031b      	lsls	r3, r3, #12
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4313      	orrs	r3, r2
 8009812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a28      	ldr	r2, [pc, #160]	@ (80098b8 <TIM_OC4_SetConfig+0x100>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d003      	beq.n	8009824 <TIM_OC4_SetConfig+0x6c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a27      	ldr	r2, [pc, #156]	@ (80098bc <TIM_OC4_SetConfig+0x104>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d10d      	bne.n	8009840 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800982a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	031b      	lsls	r3, r3, #12
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	4313      	orrs	r3, r2
 8009836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800983e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a1d      	ldr	r2, [pc, #116]	@ (80098b8 <TIM_OC4_SetConfig+0x100>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00f      	beq.n	8009868 <TIM_OC4_SetConfig+0xb0>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a1c      	ldr	r2, [pc, #112]	@ (80098bc <TIM_OC4_SetConfig+0x104>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00b      	beq.n	8009868 <TIM_OC4_SetConfig+0xb0>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a1b      	ldr	r2, [pc, #108]	@ (80098c0 <TIM_OC4_SetConfig+0x108>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d007      	beq.n	8009868 <TIM_OC4_SetConfig+0xb0>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a1a      	ldr	r2, [pc, #104]	@ (80098c4 <TIM_OC4_SetConfig+0x10c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_OC4_SetConfig+0xb0>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a19      	ldr	r2, [pc, #100]	@ (80098c8 <TIM_OC4_SetConfig+0x110>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d113      	bne.n	8009890 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800986e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009876:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	019b      	lsls	r3, r3, #6
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	019b      	lsls	r3, r3, #6
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	621a      	str	r2, [r3, #32]
}
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40014400 	.word	0x40014400
 80098c8:	40014800 	.word	0x40014800

080098cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009910:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	041b      	lsls	r3, r3, #16
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4313      	orrs	r3, r2
 800991c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a17      	ldr	r2, [pc, #92]	@ (8009980 <TIM_OC5_SetConfig+0xb4>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00f      	beq.n	8009946 <TIM_OC5_SetConfig+0x7a>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a16      	ldr	r2, [pc, #88]	@ (8009984 <TIM_OC5_SetConfig+0xb8>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00b      	beq.n	8009946 <TIM_OC5_SetConfig+0x7a>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a15      	ldr	r2, [pc, #84]	@ (8009988 <TIM_OC5_SetConfig+0xbc>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d007      	beq.n	8009946 <TIM_OC5_SetConfig+0x7a>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a14      	ldr	r2, [pc, #80]	@ (800998c <TIM_OC5_SetConfig+0xc0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d003      	beq.n	8009946 <TIM_OC5_SetConfig+0x7a>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a13      	ldr	r2, [pc, #76]	@ (8009990 <TIM_OC5_SetConfig+0xc4>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d109      	bne.n	800995a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800994c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	621a      	str	r2, [r3, #32]
}
 8009974:	bf00      	nop
 8009976:	371c      	adds	r7, #28
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	40012c00 	.word	0x40012c00
 8009984:	40013400 	.word	0x40013400
 8009988:	40014000 	.word	0x40014000
 800998c:	40014400 	.word	0x40014400
 8009990:	40014800 	.word	0x40014800

08009994 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	051b      	lsls	r3, r3, #20
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <TIM_OC6_SetConfig+0xb8>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00f      	beq.n	8009a10 <TIM_OC6_SetConfig+0x7c>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a17      	ldr	r2, [pc, #92]	@ (8009a50 <TIM_OC6_SetConfig+0xbc>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00b      	beq.n	8009a10 <TIM_OC6_SetConfig+0x7c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a16      	ldr	r2, [pc, #88]	@ (8009a54 <TIM_OC6_SetConfig+0xc0>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d007      	beq.n	8009a10 <TIM_OC6_SetConfig+0x7c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <TIM_OC6_SetConfig+0xc4>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_OC6_SetConfig+0x7c>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a14      	ldr	r2, [pc, #80]	@ (8009a5c <TIM_OC6_SetConfig+0xc8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d109      	bne.n	8009a24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	029b      	lsls	r3, r3, #10
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	621a      	str	r2, [r3, #32]
}
 8009a3e:	bf00      	nop
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	40012c00 	.word	0x40012c00
 8009a50:	40013400 	.word	0x40013400
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40014400 	.word	0x40014400
 8009a5c:	40014800 	.word	0x40014800

08009a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	f023 0201 	bic.w	r2, r3, #1
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f023 030a 	bic.w	r3, r3, #10
 8009a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	621a      	str	r2, [r3, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b087      	sub	sp, #28
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	f023 0210 	bic.w	r2, r3, #16
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	031b      	lsls	r3, r3, #12
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009afa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	621a      	str	r2, [r3, #32]
}
 8009b12:	bf00      	nop
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	f043 0307 	orr.w	r3, r3, #7
 8009b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	609a      	str	r2, [r3, #8]
}
 8009b4c:	bf00      	nop
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	021a      	lsls	r2, r3, #8
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	609a      	str	r2, [r3, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f003 031f 	and.w	r3, r3, #31
 8009baa:	2201      	movs	r2, #1
 8009bac:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a1a      	ldr	r2, [r3, #32]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	401a      	ands	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1a      	ldr	r2, [r3, #32]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f003 031f 	and.w	r3, r3, #31
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	621a      	str	r2, [r3, #32]
}
 8009bd6:	bf00      	nop
 8009bd8:	371c      	adds	r7, #28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e065      	b.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a2c      	ldr	r2, [pc, #176]	@ (8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d004      	beq.n	8009c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d108      	bne.n	8009c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d018      	beq.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c72:	d013      	beq.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a18      	ldr	r2, [pc, #96]	@ (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00e      	beq.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a17      	ldr	r2, [pc, #92]	@ (8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d009      	beq.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a12      	ldr	r2, [pc, #72]	@ (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d004      	beq.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a13      	ldr	r2, [pc, #76]	@ (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d10c      	bne.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ca2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	40012c00 	.word	0x40012c00
 8009cd8:	40013400 	.word	0x40013400
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40014000 	.word	0x40014000

08009ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e042      	b.n	8009e0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d106      	bne.n	8009d9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7f8 fd1f 	bl	80027dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2224      	movs	r2, #36	@ 0x24
 8009da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0201 	bic.w	r2, r2, #1
 8009db4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 faf4 	bl	800a3ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f825 	bl	8009e14 <UART_SetConfig>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e01b      	b.n	8009e0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689a      	ldr	r2, [r3, #8]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0201 	orr.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fb73 	bl	800a4f0 <UART_CheckIdleState>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e18:	b08c      	sub	sp, #48	@ 0x30
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	431a      	orrs	r2, r3
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4bab      	ldr	r3, [pc, #684]	@ (800a0f0 <UART_SetConfig+0x2dc>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4aa0      	ldr	r2, [pc, #640]	@ (800a0f4 <UART_SetConfig+0x2e0>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d004      	beq.n	8009e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009e8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e94:	430b      	orrs	r3, r1
 8009e96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9e:	f023 010f 	bic.w	r1, r3, #15
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a91      	ldr	r2, [pc, #580]	@ (800a0f8 <UART_SetConfig+0x2e4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d125      	bne.n	8009f04 <UART_SetConfig+0xf0>
 8009eb8:	4b90      	ldr	r3, [pc, #576]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d81a      	bhi.n	8009efc <UART_SetConfig+0xe8>
 8009ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ecc <UART_SetConfig+0xb8>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009edd 	.word	0x08009edd
 8009ed0:	08009eed 	.word	0x08009eed
 8009ed4:	08009ee5 	.word	0x08009ee5
 8009ed8:	08009ef5 	.word	0x08009ef5
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e0d6      	b.n	800a092 <UART_SetConfig+0x27e>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eea:	e0d2      	b.n	800a092 <UART_SetConfig+0x27e>
 8009eec:	2304      	movs	r3, #4
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef2:	e0ce      	b.n	800a092 <UART_SetConfig+0x27e>
 8009ef4:	2308      	movs	r3, #8
 8009ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efa:	e0ca      	b.n	800a092 <UART_SetConfig+0x27e>
 8009efc:	2310      	movs	r3, #16
 8009efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f02:	e0c6      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a7d      	ldr	r2, [pc, #500]	@ (800a100 <UART_SetConfig+0x2ec>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d138      	bne.n	8009f80 <UART_SetConfig+0x16c>
 8009f0e:	4b7b      	ldr	r3, [pc, #492]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f14:	f003 030c 	and.w	r3, r3, #12
 8009f18:	2b0c      	cmp	r3, #12
 8009f1a:	d82d      	bhi.n	8009f78 <UART_SetConfig+0x164>
 8009f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <UART_SetConfig+0x110>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009f59 	.word	0x08009f59
 8009f28:	08009f79 	.word	0x08009f79
 8009f2c:	08009f79 	.word	0x08009f79
 8009f30:	08009f79 	.word	0x08009f79
 8009f34:	08009f69 	.word	0x08009f69
 8009f38:	08009f79 	.word	0x08009f79
 8009f3c:	08009f79 	.word	0x08009f79
 8009f40:	08009f79 	.word	0x08009f79
 8009f44:	08009f61 	.word	0x08009f61
 8009f48:	08009f79 	.word	0x08009f79
 8009f4c:	08009f79 	.word	0x08009f79
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5e:	e098      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f60:	2302      	movs	r3, #2
 8009f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f66:	e094      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6e:	e090      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f70:	2308      	movs	r3, #8
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e08c      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e088      	b.n	800a092 <UART_SetConfig+0x27e>
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a5f      	ldr	r2, [pc, #380]	@ (800a104 <UART_SetConfig+0x2f0>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d125      	bne.n	8009fd6 <UART_SetConfig+0x1c2>
 8009f8a:	4b5c      	ldr	r3, [pc, #368]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f94:	2b30      	cmp	r3, #48	@ 0x30
 8009f96:	d016      	beq.n	8009fc6 <UART_SetConfig+0x1b2>
 8009f98:	2b30      	cmp	r3, #48	@ 0x30
 8009f9a:	d818      	bhi.n	8009fce <UART_SetConfig+0x1ba>
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	d00a      	beq.n	8009fb6 <UART_SetConfig+0x1a2>
 8009fa0:	2b20      	cmp	r3, #32
 8009fa2:	d814      	bhi.n	8009fce <UART_SetConfig+0x1ba>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <UART_SetConfig+0x19a>
 8009fa8:	2b10      	cmp	r3, #16
 8009faa:	d008      	beq.n	8009fbe <UART_SetConfig+0x1aa>
 8009fac:	e00f      	b.n	8009fce <UART_SetConfig+0x1ba>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb4:	e06d      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbc:	e069      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fbe:	2304      	movs	r3, #4
 8009fc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc4:	e065      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fc6:	2308      	movs	r3, #8
 8009fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fcc:	e061      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fce:	2310      	movs	r3, #16
 8009fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd4:	e05d      	b.n	800a092 <UART_SetConfig+0x27e>
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a4b      	ldr	r2, [pc, #300]	@ (800a108 <UART_SetConfig+0x2f4>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d125      	bne.n	800a02c <UART_SetConfig+0x218>
 8009fe0:	4b46      	ldr	r3, [pc, #280]	@ (800a0fc <UART_SetConfig+0x2e8>)
 8009fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fe6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fec:	d016      	beq.n	800a01c <UART_SetConfig+0x208>
 8009fee:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ff0:	d818      	bhi.n	800a024 <UART_SetConfig+0x210>
 8009ff2:	2b80      	cmp	r3, #128	@ 0x80
 8009ff4:	d00a      	beq.n	800a00c <UART_SetConfig+0x1f8>
 8009ff6:	2b80      	cmp	r3, #128	@ 0x80
 8009ff8:	d814      	bhi.n	800a024 <UART_SetConfig+0x210>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <UART_SetConfig+0x1f0>
 8009ffe:	2b40      	cmp	r3, #64	@ 0x40
 800a000:	d008      	beq.n	800a014 <UART_SetConfig+0x200>
 800a002:	e00f      	b.n	800a024 <UART_SetConfig+0x210>
 800a004:	2300      	movs	r3, #0
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00a:	e042      	b.n	800a092 <UART_SetConfig+0x27e>
 800a00c:	2302      	movs	r3, #2
 800a00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a012:	e03e      	b.n	800a092 <UART_SetConfig+0x27e>
 800a014:	2304      	movs	r3, #4
 800a016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a01a:	e03a      	b.n	800a092 <UART_SetConfig+0x27e>
 800a01c:	2308      	movs	r3, #8
 800a01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a022:	e036      	b.n	800a092 <UART_SetConfig+0x27e>
 800a024:	2310      	movs	r3, #16
 800a026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02a:	e032      	b.n	800a092 <UART_SetConfig+0x27e>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a30      	ldr	r2, [pc, #192]	@ (800a0f4 <UART_SetConfig+0x2e0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d12a      	bne.n	800a08c <UART_SetConfig+0x278>
 800a036:	4b31      	ldr	r3, [pc, #196]	@ (800a0fc <UART_SetConfig+0x2e8>)
 800a038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a03c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a044:	d01a      	beq.n	800a07c <UART_SetConfig+0x268>
 800a046:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a04a:	d81b      	bhi.n	800a084 <UART_SetConfig+0x270>
 800a04c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a050:	d00c      	beq.n	800a06c <UART_SetConfig+0x258>
 800a052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a056:	d815      	bhi.n	800a084 <UART_SetConfig+0x270>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <UART_SetConfig+0x250>
 800a05c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a060:	d008      	beq.n	800a074 <UART_SetConfig+0x260>
 800a062:	e00f      	b.n	800a084 <UART_SetConfig+0x270>
 800a064:	2300      	movs	r3, #0
 800a066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a06a:	e012      	b.n	800a092 <UART_SetConfig+0x27e>
 800a06c:	2302      	movs	r3, #2
 800a06e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a072:	e00e      	b.n	800a092 <UART_SetConfig+0x27e>
 800a074:	2304      	movs	r3, #4
 800a076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a07a:	e00a      	b.n	800a092 <UART_SetConfig+0x27e>
 800a07c:	2308      	movs	r3, #8
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a082:	e006      	b.n	800a092 <UART_SetConfig+0x27e>
 800a084:	2310      	movs	r3, #16
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e002      	b.n	800a092 <UART_SetConfig+0x27e>
 800a08c:	2310      	movs	r3, #16
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a17      	ldr	r2, [pc, #92]	@ (800a0f4 <UART_SetConfig+0x2e0>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	f040 80a8 	bne.w	800a1ee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a09e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	d834      	bhi.n	800a110 <UART_SetConfig+0x2fc>
 800a0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ac <UART_SetConfig+0x298>)
 800a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ac:	0800a0d1 	.word	0x0800a0d1
 800a0b0:	0800a111 	.word	0x0800a111
 800a0b4:	0800a0d9 	.word	0x0800a0d9
 800a0b8:	0800a111 	.word	0x0800a111
 800a0bc:	0800a0df 	.word	0x0800a0df
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a111 	.word	0x0800a111
 800a0c8:	0800a111 	.word	0x0800a111
 800a0cc:	0800a0e7 	.word	0x0800a0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0d0:	f7fd fea8 	bl	8007e24 <HAL_RCC_GetPCLK1Freq>
 800a0d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0d6:	e021      	b.n	800a11c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <UART_SetConfig+0x2f8>)
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0dc:	e01e      	b.n	800a11c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0de:	f7fd fe33 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 800a0e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0e4:	e01a      	b.n	800a11c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0ec:	e016      	b.n	800a11c <UART_SetConfig+0x308>
 800a0ee:	bf00      	nop
 800a0f0:	cfff69f3 	.word	0xcfff69f3
 800a0f4:	40008000 	.word	0x40008000
 800a0f8:	40013800 	.word	0x40013800
 800a0fc:	40021000 	.word	0x40021000
 800a100:	40004400 	.word	0x40004400
 800a104:	40004800 	.word	0x40004800
 800a108:	40004c00 	.word	0x40004c00
 800a10c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a11a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 812a 	beq.w	800a378 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a128:	4a9e      	ldr	r2, [pc, #632]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a12e:	461a      	mov	r2, r3
 800a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a132:	fbb3 f3f2 	udiv	r3, r3, r2
 800a136:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	4613      	mov	r3, r2
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	4413      	add	r3, r2
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	429a      	cmp	r2, r3
 800a146:	d305      	bcc.n	800a154 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a14e:	69ba      	ldr	r2, [r7, #24]
 800a150:	429a      	cmp	r2, r3
 800a152:	d903      	bls.n	800a15c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a15a:	e10d      	b.n	800a378 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	2200      	movs	r2, #0
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	60fa      	str	r2, [r7, #12]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a168:	4a8e      	ldr	r2, [pc, #568]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a16a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2200      	movs	r2, #0
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	607a      	str	r2, [r7, #4]
 800a176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a17a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a17e:	f7f6 f89f 	bl	80002c0 <__aeabi_uldivmod>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4610      	mov	r0, r2
 800a188:	4619      	mov	r1, r3
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	f04f 0300 	mov.w	r3, #0
 800a192:	020b      	lsls	r3, r1, #8
 800a194:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a198:	0202      	lsls	r2, r0, #8
 800a19a:	6979      	ldr	r1, [r7, #20]
 800a19c:	6849      	ldr	r1, [r1, #4]
 800a19e:	0849      	lsrs	r1, r1, #1
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	eb12 0804 	adds.w	r8, r2, r4
 800a1aa:	eb43 0905 	adc.w	r9, r3, r5
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	469a      	mov	sl, r3
 800a1b6:	4693      	mov	fp, r2
 800a1b8:	4652      	mov	r2, sl
 800a1ba:	465b      	mov	r3, fp
 800a1bc:	4640      	mov	r0, r8
 800a1be:	4649      	mov	r1, r9
 800a1c0:	f7f6 f87e 	bl	80002c0 <__aeabi_uldivmod>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1d2:	d308      	bcc.n	800a1e6 <UART_SetConfig+0x3d2>
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1da:	d204      	bcs.n	800a1e6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6a3a      	ldr	r2, [r7, #32]
 800a1e2:	60da      	str	r2, [r3, #12]
 800a1e4:	e0c8      	b.n	800a378 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1ec:	e0c4      	b.n	800a378 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1f6:	d167      	bne.n	800a2c8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a1f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d828      	bhi.n	800a252 <UART_SetConfig+0x43e>
 800a200:	a201      	add	r2, pc, #4	@ (adr r2, 800a208 <UART_SetConfig+0x3f4>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a22d 	.word	0x0800a22d
 800a20c:	0800a235 	.word	0x0800a235
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	0800a253 	.word	0x0800a253
 800a218:	0800a243 	.word	0x0800a243
 800a21c:	0800a253 	.word	0x0800a253
 800a220:	0800a253 	.word	0x0800a253
 800a224:	0800a253 	.word	0x0800a253
 800a228:	0800a24b 	.word	0x0800a24b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a22c:	f7fd fdfa 	bl	8007e24 <HAL_RCC_GetPCLK1Freq>
 800a230:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a232:	e014      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a234:	f7fd fe0c 	bl	8007e50 <HAL_RCC_GetPCLK2Freq>
 800a238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a23a:	e010      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a23c:	4b5a      	ldr	r3, [pc, #360]	@ (800a3a8 <UART_SetConfig+0x594>)
 800a23e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a240:	e00d      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a242:	f7fd fd81 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 800a246:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a248:	e009      	b.n	800a25e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a24e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a250:	e005      	b.n	800a25e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a25c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 8089 	beq.w	800a378 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26a:	4a4e      	ldr	r2, [pc, #312]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a270:	461a      	mov	r2, r3
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	fbb3 f3f2 	udiv	r3, r3, r2
 800a278:	005a      	lsls	r2, r3, #1
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	085b      	lsrs	r3, r3, #1
 800a280:	441a      	add	r2, r3
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	2b0f      	cmp	r3, #15
 800a290:	d916      	bls.n	800a2c0 <UART_SetConfig+0x4ac>
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a298:	d212      	bcs.n	800a2c0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f023 030f 	bic.w	r3, r3, #15
 800a2a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	085b      	lsrs	r3, r3, #1
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	8bfb      	ldrh	r3, [r7, #30]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	8bfa      	ldrh	r2, [r7, #30]
 800a2bc:	60da      	str	r2, [r3, #12]
 800a2be:	e05b      	b.n	800a378 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2c6:	e057      	b.n	800a378 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d828      	bhi.n	800a322 <UART_SetConfig+0x50e>
 800a2d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d8 <UART_SetConfig+0x4c4>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a2fd 	.word	0x0800a2fd
 800a2dc:	0800a305 	.word	0x0800a305
 800a2e0:	0800a30d 	.word	0x0800a30d
 800a2e4:	0800a323 	.word	0x0800a323
 800a2e8:	0800a313 	.word	0x0800a313
 800a2ec:	0800a323 	.word	0x0800a323
 800a2f0:	0800a323 	.word	0x0800a323
 800a2f4:	0800a323 	.word	0x0800a323
 800a2f8:	0800a31b 	.word	0x0800a31b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2fc:	f7fd fd92 	bl	8007e24 <HAL_RCC_GetPCLK1Freq>
 800a300:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a302:	e014      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a304:	f7fd fda4 	bl	8007e50 <HAL_RCC_GetPCLK2Freq>
 800a308:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a30a:	e010      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a30c:	4b26      	ldr	r3, [pc, #152]	@ (800a3a8 <UART_SetConfig+0x594>)
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a310:	e00d      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a312:	f7fd fd19 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 800a316:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a318:	e009      	b.n	800a32e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a31a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a31e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a320:	e005      	b.n	800a32e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a32c:	bf00      	nop
    }

    if (pclk != 0U)
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	2b00      	cmp	r3, #0
 800a332:	d021      	beq.n	800a378 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a338:	4a1a      	ldr	r2, [pc, #104]	@ (800a3a4 <UART_SetConfig+0x590>)
 800a33a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a33e:	461a      	mov	r2, r3
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	fbb3 f2f2 	udiv	r2, r3, r2
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	085b      	lsrs	r3, r3, #1
 800a34c:	441a      	add	r2, r3
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	fbb2 f3f3 	udiv	r3, r2, r3
 800a356:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	2b0f      	cmp	r3, #15
 800a35c:	d909      	bls.n	800a372 <UART_SetConfig+0x55e>
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a364:	d205      	bcs.n	800a372 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	b29a      	uxth	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60da      	str	r2, [r3, #12]
 800a370:	e002      	b.n	800a378 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2201      	movs	r2, #1
 800a384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2200      	movs	r2, #0
 800a38c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2200      	movs	r2, #0
 800a392:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a394:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3730      	adds	r7, #48	@ 0x30
 800a39c:	46bd      	mov	sp, r7
 800a39e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800f49c 	.word	0x0800f49c
 800a3a8:	00f42400 	.word	0x00f42400

0800a3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4aa:	d10a      	bne.n	800a4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b098      	sub	sp, #96	@ 0x60
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a500:	f7f8 fa52 	bl	80029a8 <HAL_GetTick>
 800a504:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0308 	and.w	r3, r3, #8
 800a510:	2b08      	cmp	r3, #8
 800a512:	d12f      	bne.n	800a574 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a51c:	2200      	movs	r2, #0
 800a51e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f88e 	bl	800a644 <UART_WaitOnFlagUntilTimeout>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d022      	beq.n	800a574 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a542:	653b      	str	r3, [r7, #80]	@ 0x50
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a54c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a54e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e6      	bne.n	800a52e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2220      	movs	r2, #32
 800a564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e063      	b.n	800a63c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0304 	and.w	r3, r3, #4
 800a57e:	2b04      	cmp	r3, #4
 800a580:	d149      	bne.n	800a616 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a582:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a58a:	2200      	movs	r2, #0
 800a58c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f857 	bl	800a644 <UART_WaitOnFlagUntilTimeout>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d03c      	beq.n	800a616 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e6      	bne.n	800a59c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f023 0301 	bic.w	r3, r3, #1
 800a5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ee:	61fa      	str	r2, [r7, #28]
 800a5f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	69b9      	ldr	r1, [r7, #24]
 800a5f4:	69fa      	ldr	r2, [r7, #28]
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	617b      	str	r3, [r7, #20]
   return(result);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e5      	bne.n	800a5ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e012      	b.n	800a63c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3758      	adds	r7, #88	@ 0x58
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	4613      	mov	r3, r2
 800a652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a654:	e04f      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65c:	d04b      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65e:	f7f8 f9a3 	bl	80029a8 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d302      	bcc.n	800a674 <UART_WaitOnFlagUntilTimeout+0x30>
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e04e      	b.n	800a716 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d037      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b80      	cmp	r3, #128	@ 0x80
 800a68a:	d034      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	2b40      	cmp	r3, #64	@ 0x40
 800a690:	d031      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d110      	bne.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2208      	movs	r2, #8
 800a6a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f838 	bl	800a71e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e029      	b.n	800a716 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6d0:	d111      	bne.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 f81e 	bl	800a71e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e00f      	b.n	800a716 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	69da      	ldr	r2, [r3, #28]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4013      	ands	r3, r2
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	429a      	cmp	r2, r3
 800a704:	bf0c      	ite	eq
 800a706:	2301      	moveq	r3, #1
 800a708:	2300      	movne	r3, #0
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	461a      	mov	r2, r3
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	429a      	cmp	r2, r3
 800a712:	d0a0      	beq.n	800a656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a71e:	b480      	push	{r7}
 800a720:	b095      	sub	sp, #84	@ 0x54
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a73a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a744:	643b      	str	r3, [r7, #64]	@ 0x40
 800a746:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a74a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e6      	bne.n	800a726 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3308      	adds	r3, #8
 800a75e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	e853 3f00 	ldrex	r3, [r3]
 800a766:	61fb      	str	r3, [r7, #28]
   return(result);
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a76e:	f023 0301 	bic.w	r3, r3, #1
 800a772:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a77c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a77e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e3      	bne.n	800a758 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a794:	2b01      	cmp	r3, #1
 800a796:	d118      	bne.n	800a7ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f023 0310 	bic.w	r3, r3, #16
 800a7ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b6:	61bb      	str	r3, [r7, #24]
 800a7b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	6979      	ldr	r1, [r7, #20]
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e6      	bne.n	800a798 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7de:	bf00      	nop
 800a7e0:	3754      	adds	r7, #84	@ 0x54
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d101      	bne.n	800a800 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	e027      	b.n	800a850 <HAL_UARTEx_DisableFifoMode+0x66>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2224      	movs	r2, #36	@ 0x24
 800a80c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f022 0201 	bic.w	r2, r2, #1
 800a826:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a82e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d101      	bne.n	800a874 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a870:	2302      	movs	r3, #2
 800a872:	e02d      	b.n	800a8d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2224      	movs	r2, #36	@ 0x24
 800a880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0201 	bic.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f84f 	bl	800a954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e02d      	b.n	800a94c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2224      	movs	r2, #36	@ 0x24
 800a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 0201 	bic.w	r2, r2, #1
 800a916:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	430a      	orrs	r2, r1
 800a92a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f811 	bl	800a954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2220      	movs	r2, #32
 800a93e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a960:	2b00      	cmp	r3, #0
 800a962:	d108      	bne.n	800a976 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a974:	e031      	b.n	800a9da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a976:	2308      	movs	r3, #8
 800a978:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a97a:	2308      	movs	r3, #8
 800a97c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	0e5b      	lsrs	r3, r3, #25
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	0f5b      	lsrs	r3, r3, #29
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f003 0307 	and.w	r3, r3, #7
 800a99c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
 800a9a0:	7b3a      	ldrb	r2, [r7, #12]
 800a9a2:	4911      	ldr	r1, [pc, #68]	@ (800a9e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a9a4:	5c8a      	ldrb	r2, [r1, r2]
 800a9a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9aa:	7b3a      	ldrb	r2, [r7, #12]
 800a9ac:	490f      	ldr	r1, [pc, #60]	@ (800a9ec <UARTEx_SetNbDataToProcess+0x98>)
 800a9ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	7b7a      	ldrb	r2, [r7, #13]
 800a9c0:	4909      	ldr	r1, [pc, #36]	@ (800a9e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a9c2:	5c8a      	ldrb	r2, [r1, r2]
 800a9c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9c8:	7b7a      	ldrb	r2, [r7, #13]
 800a9ca:	4908      	ldr	r1, [pc, #32]	@ (800a9ec <UARTEx_SetNbDataToProcess+0x98>)
 800a9cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	0800f4b4 	.word	0x0800f4b4
 800a9ec:	0800f4bc 	.word	0x0800f4bc

0800a9f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aa00:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800aa04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr

0800aa1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b085      	sub	sp, #20
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aa26:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800aa2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	43db      	mvns	r3, r3
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	1d3b      	adds	r3, r7, #4
 800aa5e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b0a7      	sub	sp, #156	@ 0x9c
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800aab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aab6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	78db      	ldrb	r3, [r3, #3]
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d81f      	bhi.n	800ab02 <USB_ActivateEndpoint+0x72>
 800aac2:	a201      	add	r2, pc, #4	@ (adr r2, 800aac8 <USB_ActivateEndpoint+0x38>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800aaf5 	.word	0x0800aaf5
 800aad0:	0800ab0b 	.word	0x0800ab0b
 800aad4:	0800aae7 	.word	0x0800aae7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800aad8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aadc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aae0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800aae4:	e012      	b.n	800ab0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800aae6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aaea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800aaee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800aaf2:	e00b      	b.n	800ab0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800aaf4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aaf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aafc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ab00:	e004      	b.n	800ab0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800ab08:	e000      	b.n	800ab0c <USB_ActivateEndpoint+0x7c>
      break;
 800ab0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	441a      	add	r2, r3
 800ab16:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ab1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	b21b      	sxth	r3, r3
 800ab3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab46:	b21a      	sxth	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	b21b      	sxth	r3, r3
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	b21b      	sxth	r3, r3
 800ab52:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	441a      	add	r2, r3
 800ab60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800ab64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	7b1b      	ldrb	r3, [r3, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f040 8180 	bne.w	800ae82 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	785b      	ldrb	r3, [r3, #1]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 8084 	beq.w	800ac94 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	61bb      	str	r3, [r7, #24]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	461a      	mov	r2, r3
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	61bb      	str	r3, [r7, #24]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	00da      	lsls	r2, r3, #3
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abae:	617b      	str	r3, [r7, #20]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	88db      	ldrh	r3, [r3, #6]
 800abb4:	085b      	lsrs	r3, r3, #1
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	827b      	strh	r3, [r7, #18]
 800abce:	8a7b      	ldrh	r3, [r7, #18]
 800abd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01b      	beq.n	800ac10 <USB_ActivateEndpoint+0x180>
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abee:	823b      	strh	r3, [r7, #16]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	441a      	add	r2, r3
 800abfa:	8a3b      	ldrh	r3, [r7, #16]
 800abfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	78db      	ldrb	r3, [r3, #3]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d020      	beq.n	800ac5a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac2e:	81bb      	strh	r3, [r7, #12]
 800ac30:	89bb      	ldrh	r3, [r7, #12]
 800ac32:	f083 0320 	eor.w	r3, r3, #32
 800ac36:	81bb      	strh	r3, [r7, #12]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	441a      	add	r2, r3
 800ac42:	89bb      	ldrh	r3, [r7, #12]
 800ac44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	8013      	strh	r3, [r2, #0]
 800ac58:	e3f9      	b.n	800b44e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac70:	81fb      	strh	r3, [r7, #14]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	441a      	add	r2, r3
 800ac7c:	89fb      	ldrh	r3, [r7, #14]
 800ac7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	8013      	strh	r3, [r2, #0]
 800ac92:	e3dc      	b.n	800b44e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	461a      	mov	r2, r3
 800aca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca4:	4413      	add	r3, r2
 800aca6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	00da      	lsls	r2, r3, #3
 800acae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb0:	4413      	add	r3, r2
 800acb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800acb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	88db      	ldrh	r3, [r3, #6]
 800acbc:	085b      	lsrs	r3, r3, #1
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	4413      	add	r3, r2
 800acda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	00da      	lsls	r2, r3, #3
 800ace2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace4:	4413      	add	r3, r2
 800ace6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acea:	627b      	str	r3, [r7, #36]	@ 0x24
 800acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10a      	bne.n	800ad1a <USB_ActivateEndpoint+0x28a>
 800ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad16:	801a      	strh	r2, [r3, #0]
 800ad18:	e041      	b.n	800ad9e <USB_ActivateEndpoint+0x30e>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad20:	d81c      	bhi.n	800ad5c <USB_ActivateEndpoint+0x2cc>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	085b      	lsrs	r3, r3, #1
 800ad28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <USB_ActivateEndpoint+0x2b2>
 800ad38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	029b      	lsls	r3, r3, #10
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	4313      	orrs	r3, r2
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad58:	801a      	strh	r2, [r3, #0]
 800ad5a:	e020      	b.n	800ad9e <USB_ActivateEndpoint+0x30e>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	095b      	lsrs	r3, r3, #5
 800ad62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	f003 031f 	and.w	r3, r3, #31
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d104      	bne.n	800ad7c <USB_ActivateEndpoint+0x2ec>
 800ad72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad76:	3b01      	subs	r3, #1
 800ad78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	029b      	lsls	r3, r3, #10
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800adac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800adae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d01b      	beq.n	800adee <USB_ActivateEndpoint+0x35e>
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adcc:	843b      	strh	r3, [r7, #32]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	441a      	add	r2, r3
 800add8:	8c3b      	ldrh	r3, [r7, #32]
 800adda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ade2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ade6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adea:	b29b      	uxth	r3, r3
 800adec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d124      	bne.n	800ae40 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae0c:	83bb      	strh	r3, [r7, #28]
 800ae0e:	8bbb      	ldrh	r3, [r7, #28]
 800ae10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae14:	83bb      	strh	r3, [r7, #28]
 800ae16:	8bbb      	ldrh	r3, [r7, #28]
 800ae18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae1c:	83bb      	strh	r3, [r7, #28]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	441a      	add	r2, r3
 800ae28:	8bbb      	ldrh	r3, [r7, #28]
 800ae2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	8013      	strh	r3, [r2, #0]
 800ae3e:	e306      	b.n	800b44e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae56:	83fb      	strh	r3, [r7, #30]
 800ae58:	8bfb      	ldrh	r3, [r7, #30]
 800ae5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae5e:	83fb      	strh	r3, [r7, #30]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	441a      	add	r2, r3
 800ae6a:	8bfb      	ldrh	r3, [r7, #30]
 800ae6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	8013      	strh	r3, [r2, #0]
 800ae80:	e2e5      	b.n	800b44e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	78db      	ldrb	r3, [r3, #3]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d11e      	bne.n	800aec8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aea0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	441a      	add	r2, r3
 800aeae:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800aeb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	8013      	strh	r3, [r2, #0]
 800aec6:	e01d      	b.n	800af04 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aeda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aede:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	441a      	add	r2, r3
 800aeec:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800aef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aefc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af00:	b29b      	uxth	r3, r3
 800af02:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af0e:	b29b      	uxth	r3, r3
 800af10:	461a      	mov	r2, r3
 800af12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af14:	4413      	add	r3, r2
 800af16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	00da      	lsls	r2, r3, #3
 800af1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af20:	4413      	add	r3, r2
 800af22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af26:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	891b      	ldrh	r3, [r3, #8]
 800af2c:	085b      	lsrs	r3, r3, #1
 800af2e:	b29b      	uxth	r3, r3
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	b29a      	uxth	r2, r3
 800af34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af36:	801a      	strh	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	677b      	str	r3, [r7, #116]	@ 0x74
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af42:	b29b      	uxth	r3, r3
 800af44:	461a      	mov	r2, r3
 800af46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af48:	4413      	add	r3, r2
 800af4a:	677b      	str	r3, [r7, #116]	@ 0x74
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	00da      	lsls	r2, r3, #3
 800af52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af54:	4413      	add	r3, r2
 800af56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800af5a:	673b      	str	r3, [r7, #112]	@ 0x70
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	895b      	ldrh	r3, [r3, #10]
 800af60:	085b      	lsrs	r3, r3, #1
 800af62:	b29b      	uxth	r3, r3
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	b29a      	uxth	r2, r3
 800af68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	785b      	ldrb	r3, [r3, #1]
 800af70:	2b00      	cmp	r3, #0
 800af72:	f040 81af 	bne.w	800b2d4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800af86:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800af8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d01d      	beq.n	800afce <USB_ActivateEndpoint+0x53e>
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afa8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	441a      	add	r2, r3
 800afb6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800afba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afca:	b29b      	uxth	r3, r3
 800afcc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800afde:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800afe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d01d      	beq.n	800b026 <USB_ActivateEndpoint+0x596>
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800affc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b000:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	441a      	add	r2, r3
 800b00e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800b012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b01a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b01e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b022:	b29b      	uxth	r3, r3
 800b024:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d16b      	bne.n	800b106 <USB_ActivateEndpoint+0x676>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b038:	b29b      	uxth	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b03e:	4413      	add	r3, r2
 800b040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	00da      	lsls	r2, r3, #3
 800b048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b04a:	4413      	add	r3, r2
 800b04c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b050:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b060:	801a      	strh	r2, [r3, #0]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10a      	bne.n	800b080 <USB_ActivateEndpoint+0x5f0>
 800b06a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b078:	b29a      	uxth	r2, r3
 800b07a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b07c:	801a      	strh	r2, [r3, #0]
 800b07e:	e05d      	b.n	800b13c <USB_ActivateEndpoint+0x6ac>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b3e      	cmp	r3, #62	@ 0x3e
 800b086:	d81c      	bhi.n	800b0c2 <USB_ActivateEndpoint+0x632>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	085b      	lsrs	r3, r3, #1
 800b08e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <USB_ActivateEndpoint+0x618>
 800b09e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	029b      	lsls	r3, r3, #10
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0be:	801a      	strh	r2, [r3, #0]
 800b0c0:	e03c      	b.n	800b13c <USB_ActivateEndpoint+0x6ac>
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	095b      	lsrs	r3, r3, #5
 800b0c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	f003 031f 	and.w	r3, r3, #31
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d104      	bne.n	800b0e2 <USB_ActivateEndpoint+0x652>
 800b0d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	029b      	lsls	r3, r3, #10
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b102:	801a      	strh	r2, [r3, #0]
 800b104:	e01a      	b.n	800b13c <USB_ActivateEndpoint+0x6ac>
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	785b      	ldrb	r3, [r3, #1]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d116      	bne.n	800b13c <USB_ActivateEndpoint+0x6ac>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	657b      	str	r3, [r7, #84]	@ 0x54
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b118:	b29b      	uxth	r3, r3
 800b11a:	461a      	mov	r2, r3
 800b11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b11e:	4413      	add	r3, r2
 800b120:	657b      	str	r3, [r7, #84]	@ 0x54
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	00da      	lsls	r2, r3, #3
 800b128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b12a:	4413      	add	r3, r2
 800b12c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b130:	653b      	str	r3, [r7, #80]	@ 0x50
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	b29a      	uxth	r2, r3
 800b138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b13a:	801a      	strh	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d16b      	bne.n	800b220 <USB_ActivateEndpoint+0x790>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b152:	b29b      	uxth	r3, r3
 800b154:	461a      	mov	r2, r3
 800b156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b158:	4413      	add	r3, r2
 800b15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	00da      	lsls	r2, r3, #3
 800b162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b164:	4413      	add	r3, r2
 800b166:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b16a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	b29b      	uxth	r3, r3
 800b172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b176:	b29a      	uxth	r2, r3
 800b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17a:	801a      	strh	r2, [r3, #0]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <USB_ActivateEndpoint+0x70a>
 800b184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b192:	b29a      	uxth	r2, r3
 800b194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	e05b      	b.n	800b252 <USB_ActivateEndpoint+0x7c2>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b1a0:	d81c      	bhi.n	800b1dc <USB_ActivateEndpoint+0x74c>
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	085b      	lsrs	r3, r3, #1
 800b1a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	f003 0301 	and.w	r3, r3, #1
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <USB_ActivateEndpoint+0x732>
 800b1b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1bc:	3301      	adds	r3, #1
 800b1be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	029b      	lsls	r3, r3, #10
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d8:	801a      	strh	r2, [r3, #0]
 800b1da:	e03a      	b.n	800b252 <USB_ActivateEndpoint+0x7c2>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	095b      	lsrs	r3, r3, #5
 800b1e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f003 031f 	and.w	r3, r3, #31
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d104      	bne.n	800b1fc <USB_ActivateEndpoint+0x76c>
 800b1f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29a      	uxth	r2, r3
 800b202:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b206:	b29b      	uxth	r3, r3
 800b208:	029b      	lsls	r3, r3, #10
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b29b      	uxth	r3, r3
 800b210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b218:	b29a      	uxth	r2, r3
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	801a      	strh	r2, [r3, #0]
 800b21e:	e018      	b.n	800b252 <USB_ActivateEndpoint+0x7c2>
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	785b      	ldrb	r3, [r3, #1]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d114      	bne.n	800b252 <USB_ActivateEndpoint+0x7c2>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b22e:	b29b      	uxth	r3, r3
 800b230:	461a      	mov	r2, r3
 800b232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b234:	4413      	add	r3, r2
 800b236:	647b      	str	r3, [r7, #68]	@ 0x44
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	00da      	lsls	r2, r3, #3
 800b23e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b240:	4413      	add	r3, r2
 800b242:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b246:	643b      	str	r3, [r7, #64]	@ 0x40
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b250:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b268:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b26a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b26c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b270:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b272:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b274:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b278:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	441a      	add	r2, r3
 800b284:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b28a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b28e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b296:	b29b      	uxth	r3, r3
 800b298:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2b0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	441a      	add	r2, r3
 800b2bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b2be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	8013      	strh	r3, [r2, #0]
 800b2d2:	e0bc      	b.n	800b44e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800b2e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b2e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d01d      	beq.n	800b32c <USB_ActivateEndpoint+0x89c>
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b306:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	441a      	add	r2, r3
 800b314:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b31c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b328:	b29b      	uxth	r3, r3
 800b32a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800b33c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800b340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b344:	2b00      	cmp	r3, #0
 800b346:	d01d      	beq.n	800b384 <USB_ActivateEndpoint+0x8f4>
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	b29b      	uxth	r3, r3
 800b356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b35e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	441a      	add	r2, r3
 800b36c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800b370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b37c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b380:	b29b      	uxth	r3, r3
 800b382:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	78db      	ldrb	r3, [r3, #3]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d024      	beq.n	800b3d6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b39e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b3a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b3aa:	f083 0320 	eor.w	r3, r3, #32
 800b3ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	441a      	add	r2, r3
 800b3bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b3c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	8013      	strh	r3, [r2, #0]
 800b3d4:	e01d      	b.n	800b412 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	441a      	add	r2, r3
 800b3fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b3fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b40e:	b29b      	uxth	r3, r3
 800b410:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b428:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	441a      	add	r2, r3
 800b436:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b43a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b43e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b44e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800b452:	4618      	mov	r0, r3
 800b454:	379c      	adds	r7, #156	@ 0x9c
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop

0800b460 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b460:	b480      	push	{r7}
 800b462:	b08d      	sub	sp, #52	@ 0x34
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	7b1b      	ldrb	r3, [r3, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f040 808e 	bne.w	800b590 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d044      	beq.n	800b506 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	81bb      	strh	r3, [r7, #12]
 800b48a:	89bb      	ldrh	r3, [r7, #12]
 800b48c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01b      	beq.n	800b4cc <USB_DeactivateEndpoint+0x6c>
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4aa:	817b      	strh	r3, [r7, #10]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	441a      	add	r2, r3
 800b4b6:	897b      	ldrh	r3, [r7, #10]
 800b4b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4e2:	813b      	strh	r3, [r7, #8]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	441a      	add	r2, r3
 800b4ee:	893b      	ldrh	r3, [r7, #8]
 800b4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b500:	b29b      	uxth	r3, r3
 800b502:	8013      	strh	r3, [r2, #0]
 800b504:	e192      	b.n	800b82c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	827b      	strh	r3, [r7, #18]
 800b514:	8a7b      	ldrh	r3, [r7, #18]
 800b516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d01b      	beq.n	800b556 <USB_DeactivateEndpoint+0xf6>
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b534:	823b      	strh	r3, [r7, #16]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	441a      	add	r2, r3
 800b540:	8a3b      	ldrh	r3, [r7, #16]
 800b542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b54a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b54e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b552:	b29b      	uxth	r3, r3
 800b554:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	b29b      	uxth	r3, r3
 800b564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b56c:	81fb      	strh	r3, [r7, #14]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	441a      	add	r2, r3
 800b578:	89fb      	ldrh	r3, [r7, #14]
 800b57a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b57e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	8013      	strh	r3, [r2, #0]
 800b58e:	e14d      	b.n	800b82c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	785b      	ldrb	r3, [r3, #1]
 800b594:	2b00      	cmp	r3, #0
 800b596:	f040 80a5 	bne.w	800b6e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	843b      	strh	r3, [r7, #32]
 800b5a8:	8c3b      	ldrh	r3, [r7, #32]
 800b5aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d01b      	beq.n	800b5ea <USB_DeactivateEndpoint+0x18a>
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5c8:	83fb      	strh	r3, [r7, #30]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	441a      	add	r2, r3
 800b5d4:	8bfb      	ldrh	r3, [r7, #30]
 800b5d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	83bb      	strh	r3, [r7, #28]
 800b5f8:	8bbb      	ldrh	r3, [r7, #28]
 800b5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d01b      	beq.n	800b63a <USB_DeactivateEndpoint+0x1da>
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b618:	837b      	strh	r3, [r7, #26]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	441a      	add	r2, r3
 800b624:	8b7b      	ldrh	r3, [r7, #26]
 800b626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b62a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b62e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b632:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b636:	b29b      	uxth	r3, r3
 800b638:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	b29b      	uxth	r3, r3
 800b648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b64c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b650:	833b      	strh	r3, [r7, #24]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	441a      	add	r2, r3
 800b65c:	8b3b      	ldrh	r3, [r7, #24]
 800b65e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b66a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b66e:	b29b      	uxth	r3, r3
 800b670:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	b29b      	uxth	r3, r3
 800b680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b688:	82fb      	strh	r3, [r7, #22]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	441a      	add	r2, r3
 800b694:	8afb      	ldrh	r3, [r7, #22]
 800b696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b69a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b69e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6c0:	82bb      	strh	r3, [r7, #20]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	441a      	add	r2, r3
 800b6cc:	8abb      	ldrh	r3, [r7, #20]
 800b6ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	8013      	strh	r3, [r2, #0]
 800b6e2:	e0a3      	b.n	800b82c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b6f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b6f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01b      	beq.n	800b734 <USB_DeactivateEndpoint+0x2d4>
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	881b      	ldrh	r3, [r3, #0]
 800b708:	b29b      	uxth	r3, r3
 800b70a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b70e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b712:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	441a      	add	r2, r3
 800b71e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b72c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b730:	b29b      	uxth	r3, r3
 800b732:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b742:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01b      	beq.n	800b784 <USB_DeactivateEndpoint+0x324>
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b75e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b762:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	441a      	add	r2, r3
 800b76e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b77c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b780:	b29b      	uxth	r3, r3
 800b782:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	b29b      	uxth	r3, r3
 800b792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b79a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	441a      	add	r2, r3
 800b7a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b7a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	881b      	ldrh	r3, [r3, #0]
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	441a      	add	r2, r3
 800b7de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	881b      	ldrh	r3, [r3, #0]
 800b800:	b29b      	uxth	r3, r3
 800b802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b80a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	441a      	add	r2, r3
 800b816:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b81c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b828:	b29b      	uxth	r3, r3
 800b82a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3734      	adds	r7, #52	@ 0x34
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b0ac      	sub	sp, #176	@ 0xb0
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	f040 84ca 	bne.w	800c1e2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	699a      	ldr	r2, [r3, #24]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	429a      	cmp	r2, r3
 800b858:	d904      	bls.n	800b864 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b862:	e003      	b.n	800b86c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	7b1b      	ldrb	r3, [r3, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d122      	bne.n	800b8ba <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	6959      	ldr	r1, [r3, #20]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	88da      	ldrh	r2, [r3, #6]
 800b87c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b880:	b29b      	uxth	r3, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 febd 	bl	800c602 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	613b      	str	r3, [r7, #16]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b892:	b29b      	uxth	r3, r3
 800b894:	461a      	mov	r2, r3
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	4413      	add	r3, r2
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	00da      	lsls	r2, r3, #3
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	801a      	strh	r2, [r3, #0]
 800b8b6:	f000 bc6f 	b.w	800c198 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	78db      	ldrb	r3, [r3, #3]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	f040 831e 	bne.w	800bf00 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	6a1a      	ldr	r2, [r3, #32]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	f240 82cf 	bls.w	800be70 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	441a      	add	r2, r3
 800b8f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b8fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b902:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	6a1a      	ldr	r2, [r3, #32]
 800b912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	b29b      	uxth	r3, r3
 800b92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 814f 	beq.w	800bbd2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	633b      	str	r3, [r7, #48]	@ 0x30
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d16b      	bne.n	800ba18 <USB_EPStartXfer+0x1de>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	461a      	mov	r2, r3
 800b94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b950:	4413      	add	r3, r2
 800b952:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	00da      	lsls	r2, r3, #3
 800b95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95c:	4413      	add	r3, r2
 800b95e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b962:	627b      	str	r3, [r7, #36]	@ 0x24
 800b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b96e:	b29a      	uxth	r2, r3
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	801a      	strh	r2, [r3, #0]
 800b974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <USB_EPStartXfer+0x158>
 800b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	b29b      	uxth	r3, r3
 800b982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98e:	801a      	strh	r2, [r3, #0]
 800b990:	e05b      	b.n	800ba4a <USB_EPStartXfer+0x210>
 800b992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b996:	2b3e      	cmp	r3, #62	@ 0x3e
 800b998:	d81c      	bhi.n	800b9d4 <USB_EPStartXfer+0x19a>
 800b99a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b99e:	085b      	lsrs	r3, r3, #1
 800b9a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b9a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d004      	beq.n	800b9ba <USB_EPStartXfer+0x180>
 800b9b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	029b      	lsls	r3, r3, #10
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d0:	801a      	strh	r2, [r3, #0]
 800b9d2:	e03a      	b.n	800ba4a <USB_EPStartXfer+0x210>
 800b9d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9d8:	095b      	lsrs	r3, r3, #5
 800b9da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b9de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9e2:	f003 031f 	and.w	r3, r3, #31
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d104      	bne.n	800b9f4 <USB_EPStartXfer+0x1ba>
 800b9ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	881b      	ldrh	r3, [r3, #0]
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	029b      	lsls	r3, r3, #10
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4313      	orrs	r3, r2
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba14:	801a      	strh	r2, [r3, #0]
 800ba16:	e018      	b.n	800ba4a <USB_EPStartXfer+0x210>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	785b      	ldrb	r3, [r3, #1]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d114      	bne.n	800ba4a <USB_EPStartXfer+0x210>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	461a      	mov	r2, r3
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2c:	4413      	add	r3, r2
 800ba2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	00da      	lsls	r2, r3, #3
 800ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba38:	4413      	add	r3, r2
 800ba3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	895b      	ldrh	r3, [r3, #10]
 800ba4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	6959      	ldr	r1, [r3, #20]
 800ba56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fdce 	bl	800c602 <USB_WritePMA>
            ep->xfer_buff += len;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695a      	ldr	r2, [r3, #20]
 800ba6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba6e:	441a      	add	r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	6a1a      	ldr	r2, [r3, #32]
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d907      	bls.n	800ba90 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	6a1a      	ldr	r2, [r3, #32]
 800ba84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba88:	1ad2      	subs	r2, r2, r3
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	621a      	str	r2, [r3, #32]
 800ba8e:	e006      	b.n	800ba9e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	6a1b      	ldr	r3, [r3, #32]
 800ba94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d16b      	bne.n	800bb7e <USB_EPStartXfer+0x344>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	461a      	mov	r2, r3
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	4413      	add	r3, r2
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	00da      	lsls	r2, r3, #3
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	4413      	add	r3, r2
 800bac4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bac8:	617b      	str	r3, [r7, #20]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	b29b      	uxth	r3, r3
 800bad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	801a      	strh	r2, [r3, #0]
 800bada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10a      	bne.n	800baf8 <USB_EPStartXfer+0x2be>
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	801a      	strh	r2, [r3, #0]
 800baf6:	e05d      	b.n	800bbb4 <USB_EPStartXfer+0x37a>
 800baf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bafc:	2b3e      	cmp	r3, #62	@ 0x3e
 800bafe:	d81c      	bhi.n	800bb3a <USB_EPStartXfer+0x300>
 800bb00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb04:	085b      	lsrs	r3, r3, #1
 800bb06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d004      	beq.n	800bb20 <USB_EPStartXfer+0x2e6>
 800bb16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	029b      	lsls	r3, r3, #10
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	4313      	orrs	r3, r2
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	801a      	strh	r2, [r3, #0]
 800bb38:	e03c      	b.n	800bbb4 <USB_EPStartXfer+0x37a>
 800bb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb3e:	095b      	lsrs	r3, r3, #5
 800bb40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb48:	f003 031f 	and.w	r3, r3, #31
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d104      	bne.n	800bb5a <USB_EPStartXfer+0x320>
 800bb50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb54:	3b01      	subs	r3, #1
 800bb56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	029b      	lsls	r3, r3, #10
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	801a      	strh	r2, [r3, #0]
 800bb7c:	e01a      	b.n	800bbb4 <USB_EPStartXfer+0x37a>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	785b      	ldrb	r3, [r3, #1]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d116      	bne.n	800bbb4 <USB_EPStartXfer+0x37a>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	623b      	str	r3, [r7, #32]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	461a      	mov	r2, r3
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	4413      	add	r3, r2
 800bb98:	623b      	str	r3, [r7, #32]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	00da      	lsls	r2, r3, #3
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	4413      	add	r3, r2
 800bba4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	891b      	ldrh	r3, [r3, #8]
 800bbb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	6959      	ldr	r1, [r3, #20]
 800bbc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fd19 	bl	800c602 <USB_WritePMA>
 800bbd0:	e2e2      	b.n	800c198 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	785b      	ldrb	r3, [r3, #1]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d16b      	bne.n	800bcb2 <USB_EPStartXfer+0x478>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbea:	4413      	add	r3, r2
 800bbec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	00da      	lsls	r2, r3, #3
 800bbf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bbfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc0c:	801a      	strh	r2, [r3, #0]
 800bc0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10a      	bne.n	800bc2c <USB_EPStartXfer+0x3f2>
 800bc16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc28:	801a      	strh	r2, [r3, #0]
 800bc2a:	e05d      	b.n	800bce8 <USB_EPStartXfer+0x4ae>
 800bc2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc30:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc32:	d81c      	bhi.n	800bc6e <USB_EPStartXfer+0x434>
 800bc34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d004      	beq.n	800bc54 <USB_EPStartXfer+0x41a>
 800bc4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc4e:	3301      	adds	r3, #1
 800bc50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	029b      	lsls	r3, r3, #10
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	4313      	orrs	r3, r2
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc6a:	801a      	strh	r2, [r3, #0]
 800bc6c:	e03c      	b.n	800bce8 <USB_EPStartXfer+0x4ae>
 800bc6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc72:	095b      	lsrs	r3, r3, #5
 800bc74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc7c:	f003 031f 	and.w	r3, r3, #31
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <USB_EPStartXfer+0x454>
 800bc84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	029b      	lsls	r3, r3, #10
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcae:	801a      	strh	r2, [r3, #0]
 800bcb0:	e01a      	b.n	800bce8 <USB_EPStartXfer+0x4ae>
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	785b      	ldrb	r3, [r3, #1]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d116      	bne.n	800bce8 <USB_EPStartXfer+0x4ae>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcca:	4413      	add	r3, r2
 800bccc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	00da      	lsls	r2, r3, #3
 800bcd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bce6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	891b      	ldrh	r3, [r3, #8]
 800bcec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	6959      	ldr	r1, [r3, #20]
 800bcf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fc7f 	bl	800c602 <USB_WritePMA>
            ep->xfer_buff += len;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	695a      	ldr	r2, [r3, #20]
 800bd08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd0c:	441a      	add	r2, r3
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	6a1a      	ldr	r2, [r3, #32]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d907      	bls.n	800bd2e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	6a1a      	ldr	r2, [r3, #32]
 800bd22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd26:	1ad2      	subs	r2, r2, r3
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	621a      	str	r2, [r3, #32]
 800bd2c:	e006      	b.n	800bd3c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	785b      	ldrb	r3, [r3, #1]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d16b      	bne.n	800be20 <USB_EPStartXfer+0x5e6>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	461a      	mov	r2, r3
 800bd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd58:	4413      	add	r3, r2
 800bd5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	00da      	lsls	r2, r3, #3
 800bd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd64:	4413      	add	r3, r2
 800bd66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7a:	801a      	strh	r2, [r3, #0]
 800bd7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10a      	bne.n	800bd9a <USB_EPStartXfer+0x560>
 800bd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd96:	801a      	strh	r2, [r3, #0]
 800bd98:	e05b      	b.n	800be52 <USB_EPStartXfer+0x618>
 800bd9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bda0:	d81c      	bhi.n	800bddc <USB_EPStartXfer+0x5a2>
 800bda2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bda6:	085b      	lsrs	r3, r3, #1
 800bda8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bdac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d004      	beq.n	800bdc2 <USB_EPStartXfer+0x588>
 800bdb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bdc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	029b      	lsls	r3, r3, #10
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdd8:	801a      	strh	r2, [r3, #0]
 800bdda:	e03a      	b.n	800be52 <USB_EPStartXfer+0x618>
 800bddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bde0:	095b      	lsrs	r3, r3, #5
 800bde2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bde6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdea:	f003 031f 	and.w	r3, r3, #31
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d104      	bne.n	800bdfc <USB_EPStartXfer+0x5c2>
 800bdf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bdfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	b29a      	uxth	r2, r3
 800be02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be06:	b29b      	uxth	r3, r3
 800be08:	029b      	lsls	r3, r3, #10
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4313      	orrs	r3, r2
 800be0e:	b29b      	uxth	r3, r3
 800be10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be18:	b29a      	uxth	r2, r3
 800be1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be1c:	801a      	strh	r2, [r3, #0]
 800be1e:	e018      	b.n	800be52 <USB_EPStartXfer+0x618>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	785b      	ldrb	r3, [r3, #1]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d114      	bne.n	800be52 <USB_EPStartXfer+0x618>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be2e:	b29b      	uxth	r3, r3
 800be30:	461a      	mov	r2, r3
 800be32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be34:	4413      	add	r3, r2
 800be36:	643b      	str	r3, [r7, #64]	@ 0x40
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	00da      	lsls	r2, r3, #3
 800be3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be40:	4413      	add	r3, r2
 800be42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	895b      	ldrh	r3, [r3, #10]
 800be56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	6959      	ldr	r1, [r3, #20]
 800be5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be62:	b29b      	uxth	r3, r3
 800be64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fbca 	bl	800c602 <USB_WritePMA>
 800be6e:	e193      	b.n	800c198 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	6a1b      	ldr	r3, [r3, #32]
 800be74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	b29b      	uxth	r3, r3
 800be86:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800be8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be8e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	441a      	add	r2, r3
 800be9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800beac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	461a      	mov	r2, r3
 800bec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bec4:	4413      	add	r3, r2
 800bec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	00da      	lsls	r2, r3, #3
 800bece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bed0:	4413      	add	r3, r2
 800bed2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bedc:	b29a      	uxth	r2, r3
 800bede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bee0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	891b      	ldrh	r3, [r3, #8]
 800bee6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	6959      	ldr	r1, [r3, #20]
 800beee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fb82 	bl	800c602 <USB_WritePMA>
 800befe:	e14b      	b.n	800c198 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	6a1a      	ldr	r2, [r3, #32]
 800bf04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf08:	1ad2      	subs	r2, r2, r3
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	881b      	ldrh	r3, [r3, #0]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 809a 	beq.w	800c05a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d16b      	bne.n	800c00a <USB_EPStartXfer+0x7d0>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf42:	4413      	add	r3, r2
 800bf44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	00da      	lsls	r2, r3, #3
 800bf4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf4e:	4413      	add	r3, r2
 800bf50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf54:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf58:	881b      	ldrh	r3, [r3, #0]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf64:	801a      	strh	r2, [r3, #0]
 800bf66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d10a      	bne.n	800bf84 <USB_EPStartXfer+0x74a>
 800bf6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf80:	801a      	strh	r2, [r3, #0]
 800bf82:	e05b      	b.n	800c03c <USB_EPStartXfer+0x802>
 800bf84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf88:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf8a:	d81c      	bhi.n	800bfc6 <USB_EPStartXfer+0x78c>
 800bf8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf90:	085b      	lsrs	r3, r3, #1
 800bf92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d004      	beq.n	800bfac <USB_EPStartXfer+0x772>
 800bfa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bfac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	029b      	lsls	r3, r3, #10
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfc2:	801a      	strh	r2, [r3, #0]
 800bfc4:	e03a      	b.n	800c03c <USB_EPStartXfer+0x802>
 800bfc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfca:	095b      	lsrs	r3, r3, #5
 800bfcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bfd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfd4:	f003 031f 	and.w	r3, r3, #31
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <USB_EPStartXfer+0x7ac>
 800bfdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bfe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	029b      	lsls	r3, r3, #10
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	4313      	orrs	r3, r2
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c002:	b29a      	uxth	r2, r3
 800c004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c006:	801a      	strh	r2, [r3, #0]
 800c008:	e018      	b.n	800c03c <USB_EPStartXfer+0x802>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	785b      	ldrb	r3, [r3, #1]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d114      	bne.n	800c03c <USB_EPStartXfer+0x802>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c018:	b29b      	uxth	r3, r3
 800c01a:	461a      	mov	r2, r3
 800c01c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c01e:	4413      	add	r3, r2
 800c020:	673b      	str	r3, [r7, #112]	@ 0x70
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	00da      	lsls	r2, r3, #3
 800c028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c02a:	4413      	add	r3, r2
 800c02c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c030:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c036:	b29a      	uxth	r2, r3
 800c038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c03a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	895b      	ldrh	r3, [r3, #10]
 800c040:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	6959      	ldr	r1, [r3, #20]
 800c048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fad5 	bl	800c602 <USB_WritePMA>
 800c058:	e09e      	b.n	800c198 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	785b      	ldrb	r3, [r3, #1]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d16b      	bne.n	800c13a <USB_EPStartXfer+0x900>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	461a      	mov	r2, r3
 800c070:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c072:	4413      	add	r3, r2
 800c074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	00da      	lsls	r2, r3, #3
 800c07c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c07e:	4413      	add	r3, r2
 800c080:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c084:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c090:	b29a      	uxth	r2, r3
 800c092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c094:	801a      	strh	r2, [r3, #0]
 800c096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10a      	bne.n	800c0b4 <USB_EPStartXfer+0x87a>
 800c09e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0b0:	801a      	strh	r2, [r3, #0]
 800c0b2:	e063      	b.n	800c17c <USB_EPStartXfer+0x942>
 800c0b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c0ba:	d81c      	bhi.n	800c0f6 <USB_EPStartXfer+0x8bc>
 800c0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0c0:	085b      	lsrs	r3, r3, #1
 800c0c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <USB_EPStartXfer+0x8a2>
 800c0d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	029b      	lsls	r3, r3, #10
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0f2:	801a      	strh	r2, [r3, #0]
 800c0f4:	e042      	b.n	800c17c <USB_EPStartXfer+0x942>
 800c0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0fa:	095b      	lsrs	r3, r3, #5
 800c0fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c104:	f003 031f 	and.w	r3, r3, #31
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d104      	bne.n	800c116 <USB_EPStartXfer+0x8dc>
 800c10c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c110:	3b01      	subs	r3, #1
 800c112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c116:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c120:	b29b      	uxth	r3, r3
 800c122:	029b      	lsls	r3, r3, #10
 800c124:	b29b      	uxth	r3, r3
 800c126:	4313      	orrs	r3, r2
 800c128:	b29b      	uxth	r3, r3
 800c12a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c12e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c132:	b29a      	uxth	r2, r3
 800c134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c136:	801a      	strh	r2, [r3, #0]
 800c138:	e020      	b.n	800c17c <USB_EPStartXfer+0x942>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	785b      	ldrb	r3, [r3, #1]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d11c      	bne.n	800c17c <USB_EPStartXfer+0x942>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c14e:	b29b      	uxth	r3, r3
 800c150:	461a      	mov	r2, r3
 800c152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c156:	4413      	add	r3, r2
 800c158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	00da      	lsls	r2, r3, #3
 800c162:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c166:	4413      	add	r3, r2
 800c168:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c16c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c174:	b29a      	uxth	r2, r3
 800c176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c17a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	891b      	ldrh	r3, [r3, #8]
 800c180:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	6959      	ldr	r1, [r3, #20]
 800c188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fa35 	bl	800c602 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	881b      	ldrh	r3, [r3, #0]
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1ae:	817b      	strh	r3, [r7, #10]
 800c1b0:	897b      	ldrh	r3, [r7, #10]
 800c1b2:	f083 0310 	eor.w	r3, r3, #16
 800c1b6:	817b      	strh	r3, [r7, #10]
 800c1b8:	897b      	ldrh	r3, [r7, #10]
 800c1ba:	f083 0320 	eor.w	r3, r3, #32
 800c1be:	817b      	strh	r3, [r7, #10]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	441a      	add	r2, r3
 800c1ca:	897b      	ldrh	r3, [r7, #10]
 800c1cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	8013      	strh	r3, [r2, #0]
 800c1e0:	e0d5      	b.n	800c38e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	7b1b      	ldrb	r3, [r3, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d156      	bne.n	800c298 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d122      	bne.n	800c238 <USB_EPStartXfer+0x9fe>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	78db      	ldrb	r3, [r3, #3]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d11e      	bne.n	800c238 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	b29b      	uxth	r3, r3
 800c208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c20c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c210:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	441a      	add	r2, r3
 800c21e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c22a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c22e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c232:	b29b      	uxth	r3, r3
 800c234:	8013      	strh	r3, [r2, #0]
 800c236:	e01d      	b.n	800c274 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4413      	add	r3, r2
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	b29b      	uxth	r3, r3
 800c246:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c24a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c24e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	441a      	add	r2, r3
 800c25c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800c260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c26c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c270:	b29b      	uxth	r3, r3
 800c272:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	699a      	ldr	r2, [r3, #24]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d907      	bls.n	800c290 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	699a      	ldr	r2, [r3, #24]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	1ad2      	subs	r2, r2, r3
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	619a      	str	r2, [r3, #24]
 800c28e:	e054      	b.n	800c33a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2200      	movs	r2, #0
 800c294:	619a      	str	r2, [r3, #24]
 800c296:	e050      	b.n	800c33a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	78db      	ldrb	r3, [r3, #3]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d142      	bne.n	800c326 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	69db      	ldr	r3, [r3, #28]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d048      	beq.n	800c33a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c2b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c2bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <USB_EPStartXfer+0xa96>
 800c2c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c2c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10b      	bne.n	800c2e8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c2d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c2d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d12e      	bne.n	800c33a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c2dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c2e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d128      	bne.n	800c33a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2fe:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	441a      	add	r2, r3
 800c30c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800c310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c31c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c320:	b29b      	uxth	r3, r3
 800c322:	8013      	strh	r3, [r2, #0]
 800c324:	e009      	b.n	800c33a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	78db      	ldrb	r3, [r3, #3]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d103      	bne.n	800c336 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2200      	movs	r2, #0
 800c332:	619a      	str	r2, [r3, #24]
 800c334:	e001      	b.n	800c33a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e02a      	b.n	800c390 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	4413      	add	r3, r2
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	b29b      	uxth	r3, r3
 800c348:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c34c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c350:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c354:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c358:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c35c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c360:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c364:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c368:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	441a      	add	r2, r3
 800c376:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c37a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c37e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	37b0      	adds	r7, #176	@ 0xb0
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	785b      	ldrb	r3, [r3, #1]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d020      	beq.n	800c3ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3c0:	81bb      	strh	r3, [r7, #12]
 800c3c2:	89bb      	ldrh	r3, [r7, #12]
 800c3c4:	f083 0310 	eor.w	r3, r3, #16
 800c3c8:	81bb      	strh	r3, [r7, #12]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	441a      	add	r2, r3
 800c3d4:	89bb      	ldrh	r3, [r7, #12]
 800c3d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	8013      	strh	r3, [r2, #0]
 800c3ea:	e01f      	b.n	800c42c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c402:	81fb      	strh	r3, [r7, #14]
 800c404:	89fb      	ldrh	r3, [r7, #14]
 800c406:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c40a:	81fb      	strh	r3, [r7, #14]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	441a      	add	r2, r3
 800c416:	89fb      	ldrh	r3, [r7, #14]
 800c418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c41c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c428:	b29b      	uxth	r3, r3
 800c42a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b087      	sub	sp, #28
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	785b      	ldrb	r3, [r3, #1]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d04c      	beq.n	800c4e6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	823b      	strh	r3, [r7, #16]
 800c45a:	8a3b      	ldrh	r3, [r7, #16]
 800c45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d01b      	beq.n	800c49c <USB_EPClearStall+0x62>
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	b29b      	uxth	r3, r3
 800c472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c47a:	81fb      	strh	r3, [r7, #14]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	441a      	add	r2, r3
 800c486:	89fb      	ldrh	r3, [r7, #14]
 800c488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c48c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c494:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c498:	b29b      	uxth	r3, r3
 800c49a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	78db      	ldrb	r3, [r3, #3]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d06c      	beq.n	800c57e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4ba:	81bb      	strh	r3, [r7, #12]
 800c4bc:	89bb      	ldrh	r3, [r7, #12]
 800c4be:	f083 0320 	eor.w	r3, r3, #32
 800c4c2:	81bb      	strh	r3, [r7, #12]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	441a      	add	r2, r3
 800c4ce:	89bb      	ldrh	r3, [r7, #12]
 800c4d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	8013      	strh	r3, [r2, #0]
 800c4e4:	e04b      	b.n	800c57e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	4413      	add	r3, r2
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	82fb      	strh	r3, [r7, #22]
 800c4f4:	8afb      	ldrh	r3, [r7, #22]
 800c4f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d01b      	beq.n	800c536 <USB_EPClearStall+0xfc>
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c514:	82bb      	strh	r3, [r7, #20]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	441a      	add	r2, r3
 800c520:	8abb      	ldrh	r3, [r7, #20]
 800c522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c52a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c532:	b29b      	uxth	r3, r3
 800c534:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	b29b      	uxth	r3, r3
 800c544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c54c:	827b      	strh	r3, [r7, #18]
 800c54e:	8a7b      	ldrh	r3, [r7, #18]
 800c550:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c554:	827b      	strh	r3, [r7, #18]
 800c556:	8a7b      	ldrh	r3, [r7, #18]
 800c558:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c55c:	827b      	strh	r3, [r7, #18]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	441a      	add	r2, r3
 800c568:	8a7b      	ldrh	r3, [r7, #18]
 800c56a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c56e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	371c      	adds	r7, #28
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	460b      	mov	r3, r1
 800c596:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c598:	78fb      	ldrb	r3, [r7, #3]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d103      	bne.n	800c5a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2280      	movs	r2, #128	@ 0x80
 800c5a2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b085      	sub	sp, #20
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c602:	b480      	push	{r7}
 800c604:	b08b      	sub	sp, #44	@ 0x2c
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	4611      	mov	r1, r2
 800c60e:	461a      	mov	r2, r3
 800c610:	460b      	mov	r3, r1
 800c612:	80fb      	strh	r3, [r7, #6]
 800c614:	4613      	mov	r3, r2
 800c616:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c618:	88bb      	ldrh	r3, [r7, #4]
 800c61a:	3301      	adds	r3, #1
 800c61c:	085b      	lsrs	r3, r3, #1
 800c61e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c628:	88fa      	ldrh	r2, [r7, #6]
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	4413      	add	r3, r2
 800c62e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c632:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	627b      	str	r3, [r7, #36]	@ 0x24
 800c638:	e01c      	b.n	800c674 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	3301      	adds	r3, #1
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	b21b      	sxth	r3, r3
 800c648:	021b      	lsls	r3, r3, #8
 800c64a:	b21a      	sxth	r2, r3
 800c64c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c650:	4313      	orrs	r3, r2
 800c652:	b21b      	sxth	r3, r3
 800c654:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	8a7a      	ldrh	r2, [r7, #18]
 800c65a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	3302      	adds	r3, #2
 800c660:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	3301      	adds	r3, #1
 800c666:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	3301      	adds	r3, #1
 800c66c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c670:	3b01      	subs	r3, #1
 800c672:	627b      	str	r3, [r7, #36]	@ 0x24
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1df      	bne.n	800c63a <USB_WritePMA+0x38>
  }
}
 800c67a:	bf00      	nop
 800c67c:	bf00      	nop
 800c67e:	372c      	adds	r7, #44	@ 0x2c
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c688:	b480      	push	{r7}
 800c68a:	b08b      	sub	sp, #44	@ 0x2c
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	4611      	mov	r1, r2
 800c694:	461a      	mov	r2, r3
 800c696:	460b      	mov	r3, r1
 800c698:	80fb      	strh	r3, [r7, #6]
 800c69a:	4613      	mov	r3, r2
 800c69c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c69e:	88bb      	ldrh	r3, [r7, #4]
 800c6a0:	085b      	lsrs	r3, r3, #1
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c6ae:	88fa      	ldrh	r2, [r7, #6]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c6b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6be:	e018      	b.n	800c6f2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c6c0:	6a3b      	ldr	r3, [r7, #32]
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	3302      	adds	r3, #2
 800c6cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	0a1b      	lsrs	r3, r3, #8
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e3      	bne.n	800c6c0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c6f8:	88bb      	ldrh	r3, [r7, #4]
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	2b00      	cmp	r3, #0
 800c702:	d007      	beq.n	800c714 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	701a      	strb	r2, [r3, #0]
  }
}
 800c714:	bf00      	nop
 800c716:	372c      	adds	r7, #44	@ 0x2c
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <USBD_HID_Init>:
	0x29, 0x65, // USAGE_MAXIMUM (Keyboard Application)

	0x81, 0x00, // INPUT (Data,Ary,Abs)

	0xc0,       // END_COLLECTION

 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	70fb      	strb	r3, [r7, #3]
};

/**
  * @}
  */
 800c72c:	2010      	movs	r0, #16
 800c72e:	f001 fe3d 	bl	800e3ac <USBD_static_malloc>
 800c732:	60f8      	str	r0, [r7, #12]

/** @defgroup USBD_HID_Private_Functions
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d105      	bne.n	800c746 <USBD_HID_Init+0x26>
  * @{
  */
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

 800c742:	2302      	movs	r3, #2
 800c744:	e01b      	b.n	800c77e <USBD_HID_Init+0x5e>
/**
  * @brief  USBD_HID_Init
  *         Initialize the HID interface
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	7c1b      	ldrb	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d103      	bne.n	800c75e <USBD_HID_Init+0x3e>
  * @retval status
  */
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2207      	movs	r2, #7
 800c75a:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800c75c:	e002      	b.n	800c764 <USBD_HID_Init+0x44>
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  UNUSED(cfgidx);

 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	875a      	strh	r2, [r3, #58]	@ 0x3a
  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));

 800c764:	2304      	movs	r3, #4
 800c766:	2203      	movs	r2, #3
 800c768:	2181      	movs	r1, #129	@ 0x81
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f001 fd0d 	bl	800e18a <USBD_LL_OpenEP>
  if (hhid == NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	871a      	strh	r2, [r3, #56]	@ 0x38
  {
    pdev->pClassData = NULL;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	731a      	strb	r2, [r3, #12]
    return (uint8_t)USBD_EMEM;
  }
 800c77c:	2300      	movs	r3, #0

 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_HID_DeInit>:
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
  }
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	460b      	mov	r3, r1
 800c790:	70fb      	strb	r3, [r7, #3]

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800c792:	2181      	movs	r1, #129	@ 0x81
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f001 fd1e 	bl	800e1d6 <USBD_LL_CloseEP>

 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	871a      	strh	r2, [r3, #56]	@ 0x38
  hhid->state = HID_IDLE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	875a      	strh	r2, [r3, #58]	@ 0x3a

  return (uint8_t)USBD_OK;
}
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d009      	beq.n	800c7c4 <USBD_HID_DeInit+0x3e>

/**
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f001 fe06 	bl	800e3c8 <USBD_static_free>
  * @brief  USBD_HID_DeInit
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  *         DeInitialize the HID layer
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
 800c7c4:	2300      	movs	r3, #0
  * @retval status
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <USBD_HID_Setup>:

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;

 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  /* Free allocated memory */
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7e0:	60fb      	str	r3, [r7, #12]
  if (pdev->pClassData != NULL)
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	75fb      	strb	r3, [r7, #23]
  {
    (void)USBD_free(pdev->pClassData);
    pdev->pClassData = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	817b      	strh	r3, [r7, #10]
  }

 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <USBD_HID_Setup+0x24>
  return (uint8_t)USBD_OK;
}
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	e0e8      	b.n	800c9c6 <USBD_HID_Setup+0x1f6>

/**
  * @brief  USBD_HID_Setup
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d046      	beq.n	800c88e <USBD_HID_Setup+0xbe>
 800c800:	2b20      	cmp	r3, #32
 800c802:	f040 80d8 	bne.w	800c9b6 <USBD_HID_Setup+0x1e6>
  *         Handle the HID specific requests
  * @param  pdev: instance
  * @param  req: usb requests
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	785b      	ldrb	r3, [r3, #1]
 800c80a:	3b02      	subs	r3, #2
 800c80c:	2b09      	cmp	r3, #9
 800c80e:	d836      	bhi.n	800c87e <USBD_HID_Setup+0xae>
 800c810:	a201      	add	r2, pc, #4	@ (adr r2, 800c818 <USBD_HID_Setup+0x48>)
 800c812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c816:	bf00      	nop
 800c818:	0800c86f 	.word	0x0800c86f
 800c81c:	0800c84f 	.word	0x0800c84f
 800c820:	0800c87f 	.word	0x0800c87f
 800c824:	0800c87f 	.word	0x0800c87f
 800c828:	0800c87f 	.word	0x0800c87f
 800c82c:	0800c87f 	.word	0x0800c87f
 800c830:	0800c87f 	.word	0x0800c87f
 800c834:	0800c87f 	.word	0x0800c87f
 800c838:	0800c85d 	.word	0x0800c85d
 800c83c:	0800c841 	.word	0x0800c841
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	885b      	ldrh	r3, [r3, #2]
 800c844:	b2db      	uxtb	r3, r3
 800c846:	461a      	mov	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	601a      	str	r2, [r3, #0]
{
 800c84c:	e01e      	b.n	800c88c <USBD_HID_Setup+0xbc>
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
  USBD_StatusTypeDef ret = USBD_OK;
  uint16_t len;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2201      	movs	r2, #1
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f001 f9b0 	bl	800dbba <USBD_CtlSendData>
  uint8_t *pbuf;
 800c85a:	e017      	b.n	800c88c <USBD_HID_Setup+0xbc>
  uint16_t status_info = 0U;

  if (hhid == NULL)
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	885b      	ldrh	r3, [r3, #2]
 800c860:	0a1b      	lsrs	r3, r3, #8
 800c862:	b29b      	uxth	r3, r3
 800c864:	b2db      	uxtb	r3, r3
 800c866:	461a      	mov	r2, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	605a      	str	r2, [r3, #4]
  {
 800c86c:	e00e      	b.n	800c88c <USBD_HID_Setup+0xbc>
    return (uint8_t)USBD_FAIL;
  }

 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3304      	adds	r3, #4
 800c872:	2201      	movs	r2, #1
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f001 f99f 	bl	800dbba <USBD_CtlSendData>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c87c:	e006      	b.n	800c88c <USBD_HID_Setup+0xbc>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f001 f929 	bl	800dad8 <USBD_CtlError>
      {
 800c886:	2303      	movs	r3, #3
 800c888:	75fb      	strb	r3, [r7, #23]
        case HID_REQ_SET_PROTOCOL:
 800c88a:	bf00      	nop
          hhid->Protocol = (uint8_t)(req->wValue);
          break;
 800c88c:	e09a      	b.n	800c9c4 <USBD_HID_Setup+0x1f4>

        case HID_REQ_GET_PROTOCOL:
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	785b      	ldrb	r3, [r3, #1]
 800c892:	2b0b      	cmp	r3, #11
 800c894:	f200 8086 	bhi.w	800c9a4 <USBD_HID_Setup+0x1d4>
 800c898:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a0 <USBD_HID_Setup+0xd0>)
 800c89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89e:	bf00      	nop
 800c8a0:	0800c8d1 	.word	0x0800c8d1
 800c8a4:	0800c9b3 	.word	0x0800c9b3
 800c8a8:	0800c9a5 	.word	0x0800c9a5
 800c8ac:	0800c9a5 	.word	0x0800c9a5
 800c8b0:	0800c9a5 	.word	0x0800c9a5
 800c8b4:	0800c9a5 	.word	0x0800c9a5
 800c8b8:	0800c8fb 	.word	0x0800c8fb
 800c8bc:	0800c9a5 	.word	0x0800c9a5
 800c8c0:	0800c9a5 	.word	0x0800c9a5
 800c8c4:	0800c9a5 	.word	0x0800c9a5
 800c8c8:	0800c953 	.word	0x0800c953
 800c8cc:	0800c97d 	.word	0x0800c97d
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
          break;

 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d107      	bne.n	800c8ec <USBD_HID_Setup+0x11c>
        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c8dc:	f107 030a 	add.w	r3, r7, #10
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f001 f968 	bl	800dbba <USBD_CtlSendData>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
          break;

        default:
 800c8ea:	e063      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f001 f8f2 	bl	800dad8 <USBD_CtlError>
          break;
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	75fb      	strb	r3, [r7, #23]
        default:
 800c8f8:	e05c      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
          USBD_CtlError(pdev, req);
          ret = USBD_FAIL;
          break;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	885b      	ldrh	r3, [r3, #2]
 800c8fe:	0a1b      	lsrs	r3, r3, #8
 800c900:	b29b      	uxth	r3, r3
 800c902:	2b22      	cmp	r3, #34	@ 0x22
 800c904:	d108      	bne.n	800c918 <USBD_HID_Setup+0x148>
      }
      break;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	88db      	ldrh	r3, [r3, #6]
 800c90a:	2b4a      	cmp	r3, #74	@ 0x4a
 800c90c:	bf28      	it	cs
 800c90e:	234a      	movcs	r3, #74	@ 0x4a
 800c910:	82bb      	strh	r3, [r7, #20]
    case USB_REQ_TYPE_STANDARD:
 800c912:	4b2f      	ldr	r3, [pc, #188]	@ (800c9d0 <USBD_HID_Setup+0x200>)
 800c914:	613b      	str	r3, [r7, #16]
 800c916:	e015      	b.n	800c944 <USBD_HID_Setup+0x174>
      switch (req->bRequest)
      {
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	885b      	ldrh	r3, [r3, #2]
 800c91c:	0a1b      	lsrs	r3, r3, #8
 800c91e:	b29b      	uxth	r3, r3
 800c920:	2b21      	cmp	r3, #33	@ 0x21
 800c922:	d108      	bne.n	800c936 <USBD_HID_Setup+0x166>
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c924:	4b2b      	ldr	r3, [pc, #172]	@ (800c9d4 <USBD_HID_Setup+0x204>)
 800c926:	613b      	str	r3, [r7, #16]
          {
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	88db      	ldrh	r3, [r3, #6]
 800c92c:	2b09      	cmp	r3, #9
 800c92e:	bf28      	it	cs
 800c930:	2309      	movcs	r3, #9
 800c932:	82bb      	strh	r3, [r7, #20]
 800c934:	e006      	b.n	800c944 <USBD_HID_Setup+0x174>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
          }
          else
          {
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 f8cd 	bl	800dad8 <USBD_CtlError>
            USBD_CtlError(pdev, req);
 800c93e:	2303      	movs	r3, #3
 800c940:	75fb      	strb	r3, [r7, #23]
            ret = USBD_FAIL;
 800c942:	e037      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
          }
          break;
 800c944:	8abb      	ldrh	r3, [r7, #20]
 800c946:	461a      	mov	r2, r3
 800c948:	6939      	ldr	r1, [r7, #16]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f001 f935 	bl	800dbba <USBD_CtlSendData>

 800c950:	e030      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
          {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d107      	bne.n	800c96e <USBD_HID_Setup+0x19e>
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3308      	adds	r3, #8
 800c962:	2201      	movs	r2, #1
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f001 f927 	bl	800dbba <USBD_CtlSendData>
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
          {
            pbuf = USBD_HID_Desc;
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
          }
          else
 800c96c:	e022      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
            pbuf = USBD_HID_Desc;
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f001 f8b1 	bl	800dad8 <USBD_CtlError>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800c976:	2303      	movs	r3, #3
 800c978:	75fb      	strb	r3, [r7, #23]
          else
 800c97a:	e01b      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b03      	cmp	r3, #3
 800c986:	d106      	bne.n	800c996 <USBD_HID_Setup+0x1c6>
            break;
          }
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	885b      	ldrh	r3, [r3, #2]
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	461a      	mov	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	609a      	str	r2, [r3, #8]
          break;

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c994:	e00e      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
        case USB_REQ_GET_INTERFACE :
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f001 f89d 	bl	800dad8 <USBD_CtlError>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c99e:	2303      	movs	r3, #3
 800c9a0:	75fb      	strb	r3, [r7, #23]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c9a2:	e007      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
          }
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f001 f896 	bl	800dad8 <USBD_CtlError>
          break;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	75fb      	strb	r3, [r7, #23]

 800c9b0:	e000      	b.n	800c9b4 <USBD_HID_Setup+0x1e4>
          {
 800c9b2:	bf00      	nop
        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9b4:	e006      	b.n	800c9c4 <USBD_HID_Setup+0x1f4>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
          }
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f001 f88d 	bl	800dad8 <USBD_CtlError>
          else
 800c9be:	2303      	movs	r3, #3
 800c9c0:	75fb      	strb	r3, [r7, #23]
          {
 800c9c2:	bf00      	nop
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
          break;
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3718      	adds	r7, #24
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	200000cc 	.word	0x200000cc
 800c9d4:	200000b4 	.word	0x200000b4

0800c9d8 <USBD_HID_SendReport>:
        default:
          USBD_CtlError(pdev, req);
          ret = USBD_FAIL;
          break;
      }
      break;
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	80fb      	strh	r3, [r7, #6]

 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c9ec:	617b      	str	r3, [r7, #20]
    default:
      USBD_CtlError(pdev, req);
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <USBD_HID_SendReport+0x20>
      ret = USBD_FAIL;
      break;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e013      	b.n	800ca20 <USBD_HID_SendReport+0x48>
  }

  return (uint8_t)ret;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d10c      	bne.n	800ca1e <USBD_HID_SendReport+0x46>
}

 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	7b1b      	ldrb	r3, [r3, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d108      	bne.n	800ca1e <USBD_HID_SendReport+0x46>
/**
  * @brief  USBD_HID_SendReport
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	731a      	strb	r2, [r3, #12]
  *         Send HID Report
 800ca12:	88fb      	ldrh	r3, [r7, #6]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	2181      	movs	r1, #129	@ 0x81
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f001 fc84 	bl	800e326 <USBD_LL_Transmit>
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
 800ca1e:	2300      	movs	r3, #0
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <USBD_HID_GetFSCfgDesc>:
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
  }
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  else   /* LOW and FULL-speed endpoints */
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2222      	movs	r2, #34	@ 0x22
 800ca34:	801a      	strh	r2, [r3, #0]
  {
    /* Sets the data transfer polling interval for low and full
 800ca36:	4b03      	ldr	r3, [pc, #12]	@ (800ca44 <USBD_HID_GetFSCfgDesc+0x1c>)
    speed transfers */
 800ca38:	4618      	mov	r0, r3
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	20000048 	.word	0x20000048

0800ca48 <USBD_HID_GetHSCfgDesc>:
}

/**
  * @brief  USBD_HID_GetCfgFSDesc
  *         return FS configuration descriptor
  * @param  speed : current device speed
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  * @param  length : pointer data length
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2222      	movs	r2, #34	@ 0x22
 800ca54:	801a      	strh	r2, [r3, #0]
  * @retval pointer to descriptor buffer
  */
 800ca56:	4b03      	ldr	r3, [pc, #12]	@ (800ca64 <USBD_HID_GetHSCfgDesc+0x1c>)
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
 800ca58:	4618      	mov	r0, r3
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	2000006c 	.word	0x2000006c

0800ca68 <USBD_HID_GetOtherSpeedCfgDesc>:
}

/**
  * @brief  USBD_HID_GetCfgHSDesc
  *         return HS configuration descriptor
  * @param  speed : current device speed
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  * @param  length : pointer data length
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2222      	movs	r2, #34	@ 0x22
 800ca74:	801a      	strh	r2, [r3, #0]
  * @retval pointer to descriptor buffer
  */
 800ca76:	4b03      	ldr	r3, [pc, #12]	@ (800ca84 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	20000090 	.word	0x20000090

0800ca88 <USBD_HID_DataIn>:
}

/**
  * @brief  USBD_HID_GetOtherSpeedCfgDesc
  *         return other speed configuration descriptor
  * @param  speed : current device speed
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	731a      	strb	r2, [r3, #12]
{
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800ca9e:	2300      	movs	r3, #0

 800caa0:	4618      	mov	r0, r3
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <USBD_HID_GetDeviceQualifierDesc>:
  * @brief  USBD_HID_DataIn
  *         handle data IN Stage
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	220a      	movs	r2, #10
 800cab8:	801a      	strh	r2, [r3, #0]
{
  UNUSED(epnum);
 800caba:	4b03      	ldr	r3, [pc, #12]	@ (800cac8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
  /* Ensure that the FIFO is empty before a new transfer, this condition could
 800cabc:	4618      	mov	r0, r3
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	200000c0 	.word	0x200000c0

0800cacc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4613      	mov	r3, r2
 800cad8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d101      	bne.n	800cae4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cae0:	2303      	movs	r3, #3
 800cae2:	e01f      	b.n	800cb24 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	79fa      	ldrb	r2, [r7, #7]
 800cb16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f001 facd 	bl	800e0b8 <USBD_LL_Init>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb36:	2300      	movs	r3, #0
 800cb38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d101      	bne.n	800cb44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e016      	b.n	800cb72 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00b      	beq.n	800cb70 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb60:	f107 020e 	add.w	r2, r7, #14
 800cb64:	4610      	mov	r0, r2
 800cb66:	4798      	blx	r3
 800cb68:	4602      	mov	r2, r0
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b082      	sub	sp, #8
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f001 fae6 	bl	800e154 <USBD_LL_Start>
 800cb88:	4603      	mov	r3, r0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	78fa      	ldrb	r2, [r7, #3]
 800cbcc:	4611      	mov	r1, r2
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	4798      	blx	r3
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d007      	beq.n	800cc06 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	78fa      	ldrb	r2, [r7, #3]
 800cc00:	4611      	mov	r1, r2
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	4798      	blx	r3
  }

  return USBD_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 ff1e 	bl	800da64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cc36:	461a      	mov	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cc44:	f003 031f 	and.w	r3, r3, #31
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d01a      	beq.n	800cc82 <USBD_LL_SetupStage+0x72>
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d822      	bhi.n	800cc96 <USBD_LL_SetupStage+0x86>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <USBD_LL_SetupStage+0x4a>
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d00a      	beq.n	800cc6e <USBD_LL_SetupStage+0x5e>
 800cc58:	e01d      	b.n	800cc96 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f9f0 	bl	800d048 <USBD_StdDevReq>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc6c:	e020      	b.n	800ccb0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc74:	4619      	mov	r1, r3
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fa54 	bl	800d124 <USBD_StdItfReq>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc80:	e016      	b.n	800ccb0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fa93 	bl	800d1b6 <USBD_StdEPReq>
 800cc90:	4603      	mov	r3, r0
 800cc92:	73fb      	strb	r3, [r7, #15]
      break;
 800cc94:	e00c      	b.n	800ccb0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cc9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f001 fab5 	bl	800e214 <USBD_LL_StallEP>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	73fb      	strb	r3, [r7, #15]
      break;
 800ccae:	bf00      	nop
  }

  return ret;
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b086      	sub	sp, #24
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	607a      	str	r2, [r7, #4]
 800ccc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ccc8:	7afb      	ldrb	r3, [r7, #11]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d138      	bne.n	800cd40 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ccd4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ccdc:	2b03      	cmp	r3, #3
 800ccde:	d14a      	bne.n	800cd76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	689a      	ldr	r2, [r3, #8]
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d913      	bls.n	800cd14 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	689a      	ldr	r2, [r3, #8]
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	1ad2      	subs	r2, r2, r3
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	4293      	cmp	r3, r2
 800cd04:	bf28      	it	cs
 800cd06:	4613      	movcs	r3, r2
 800cd08:	461a      	mov	r2, r3
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 ff80 	bl	800dc12 <USBD_CtlContinueRx>
 800cd12:	e030      	b.n	800cd76 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d10b      	bne.n	800cd38 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d005      	beq.n	800cd38 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f000 ff7b 	bl	800dc34 <USBD_CtlSendStatus>
 800cd3e:	e01a      	b.n	800cd76 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	2b03      	cmp	r3, #3
 800cd4a:	d114      	bne.n	800cd76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd52:	699b      	ldr	r3, [r3, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00e      	beq.n	800cd76 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd5e:	699b      	ldr	r3, [r3, #24]
 800cd60:	7afa      	ldrb	r2, [r7, #11]
 800cd62:	4611      	mov	r1, r2
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	4798      	blx	r3
 800cd68:	4603      	mov	r3, r0
 800cd6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	e000      	b.n	800cd78 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	607a      	str	r2, [r7, #4]
 800cd8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cd8e:	7afb      	ldrb	r3, [r7, #11]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d16b      	bne.n	800ce6c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3314      	adds	r3, #20
 800cd98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d156      	bne.n	800ce52 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	689a      	ldr	r2, [r3, #8]
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d914      	bls.n	800cdda <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	689a      	ldr	r2, [r3, #8]
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	1ad2      	subs	r2, r2, r3
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	6879      	ldr	r1, [r7, #4]
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f000 ff12 	bl	800dbf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdcc:	2300      	movs	r3, #0
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f001 fac8 	bl	800e368 <USBD_LL_PrepareReceive>
 800cdd8:	e03b      	b.n	800ce52 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	68da      	ldr	r2, [r3, #12]
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d11c      	bne.n	800ce20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d316      	bcc.n	800ce20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d20f      	bcs.n	800ce20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce00:	2200      	movs	r2, #0
 800ce02:	2100      	movs	r1, #0
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 fef3 	bl	800dbf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce12:	2300      	movs	r3, #0
 800ce14:	2200      	movs	r2, #0
 800ce16:	2100      	movs	r1, #0
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f001 faa5 	bl	800e368 <USBD_LL_PrepareReceive>
 800ce1e:	e018      	b.n	800ce52 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d10b      	bne.n	800ce44 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce44:	2180      	movs	r1, #128	@ 0x80
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f001 f9e4 	bl	800e214 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 ff04 	bl	800dc5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d122      	bne.n	800cea2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f7ff fe98 	bl	800cb92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ce6a:	e01a      	b.n	800cea2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d114      	bne.n	800cea2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00e      	beq.n	800cea2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	7afa      	ldrb	r2, [r7, #11]
 800ce8e:	4611      	mov	r1, r2
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	4798      	blx	r3
 800ce94:	4603      	mov	r3, r0
 800ce96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ce98:	7dfb      	ldrb	r3, [r7, #23]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	e000      	b.n	800cea4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d101      	bne.n	800cee0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cedc:	2303      	movs	r3, #3
 800cede:	e02f      	b.n	800cf40 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00f      	beq.n	800cf0a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d009      	beq.n	800cf0a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	6852      	ldr	r2, [r2, #4]
 800cf02:	b2d2      	uxtb	r2, r2
 800cf04:	4611      	mov	r1, r2
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf0a:	2340      	movs	r3, #64	@ 0x40
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	2100      	movs	r1, #0
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f001 f93a 	bl	800e18a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2240      	movs	r2, #64	@ 0x40
 800cf22:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf26:	2340      	movs	r3, #64	@ 0x40
 800cf28:	2200      	movs	r2, #0
 800cf2a:	2180      	movs	r1, #128	@ 0x80
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f001 f92c 	bl	800e18a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2240      	movs	r2, #64	@ 0x40
 800cf3c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	460b      	mov	r3, r1
 800cf52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	78fa      	ldrb	r2, [r7, #3]
 800cf58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2204      	movs	r2, #4
 800cf82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	d106      	bne.n	800cfb6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	e012      	b.n	800d000 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d10b      	bne.n	800cffe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfec:	69db      	ldr	r3, [r3, #28]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d005      	beq.n	800cffe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d008:	b480      	push	{r7}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	3301      	adds	r3, #1
 800d01e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d026:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d02a:	021b      	lsls	r3, r3, #8
 800d02c:	b21a      	sxth	r2, r3
 800d02e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d032:	4313      	orrs	r3, r2
 800d034:	b21b      	sxth	r3, r3
 800d036:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d038:	89fb      	ldrh	r3, [r7, #14]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	371c      	adds	r7, #28
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
	...

0800d048 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d05e:	2b40      	cmp	r3, #64	@ 0x40
 800d060:	d005      	beq.n	800d06e <USBD_StdDevReq+0x26>
 800d062:	2b40      	cmp	r3, #64	@ 0x40
 800d064:	d853      	bhi.n	800d10e <USBD_StdDevReq+0xc6>
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <USBD_StdDevReq+0x3a>
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	d14f      	bne.n	800d10e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	4798      	blx	r3
 800d07c:	4603      	mov	r3, r0
 800d07e:	73fb      	strb	r3, [r7, #15]
      break;
 800d080:	e04a      	b.n	800d118 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	785b      	ldrb	r3, [r3, #1]
 800d086:	2b09      	cmp	r3, #9
 800d088:	d83b      	bhi.n	800d102 <USBD_StdDevReq+0xba>
 800d08a:	a201      	add	r2, pc, #4	@ (adr r2, 800d090 <USBD_StdDevReq+0x48>)
 800d08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d090:	0800d0e5 	.word	0x0800d0e5
 800d094:	0800d0f9 	.word	0x0800d0f9
 800d098:	0800d103 	.word	0x0800d103
 800d09c:	0800d0ef 	.word	0x0800d0ef
 800d0a0:	0800d103 	.word	0x0800d103
 800d0a4:	0800d0c3 	.word	0x0800d0c3
 800d0a8:	0800d0b9 	.word	0x0800d0b9
 800d0ac:	0800d103 	.word	0x0800d103
 800d0b0:	0800d0db 	.word	0x0800d0db
 800d0b4:	0800d0cd 	.word	0x0800d0cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f9de 	bl	800d47c <USBD_GetDescriptor>
          break;
 800d0c0:	e024      	b.n	800d10c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 fb43 	bl	800d750 <USBD_SetAddress>
          break;
 800d0ca:	e01f      	b.n	800d10c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fb82 	bl	800d7d8 <USBD_SetConfig>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]
          break;
 800d0d8:	e018      	b.n	800d10c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fc21 	bl	800d924 <USBD_GetConfig>
          break;
 800d0e2:	e013      	b.n	800d10c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fc52 	bl	800d990 <USBD_GetStatus>
          break;
 800d0ec:	e00e      	b.n	800d10c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 fc81 	bl	800d9f8 <USBD_SetFeature>
          break;
 800d0f6:	e009      	b.n	800d10c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fc90 	bl	800da20 <USBD_ClrFeature>
          break;
 800d100:	e004      	b.n	800d10c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fce7 	bl	800dad8 <USBD_CtlError>
          break;
 800d10a:	bf00      	nop
      }
      break;
 800d10c:	e004      	b.n	800d118 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 fce1 	bl	800dad8 <USBD_CtlError>
      break;
 800d116:	bf00      	nop
  }

  return ret;
 800d118:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop

0800d124 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d12e:	2300      	movs	r3, #0
 800d130:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d13a:	2b40      	cmp	r3, #64	@ 0x40
 800d13c:	d005      	beq.n	800d14a <USBD_StdItfReq+0x26>
 800d13e:	2b40      	cmp	r3, #64	@ 0x40
 800d140:	d82f      	bhi.n	800d1a2 <USBD_StdItfReq+0x7e>
 800d142:	2b00      	cmp	r3, #0
 800d144:	d001      	beq.n	800d14a <USBD_StdItfReq+0x26>
 800d146:	2b20      	cmp	r3, #32
 800d148:	d12b      	bne.n	800d1a2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d150:	b2db      	uxtb	r3, r3
 800d152:	3b01      	subs	r3, #1
 800d154:	2b02      	cmp	r3, #2
 800d156:	d81d      	bhi.n	800d194 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	889b      	ldrh	r3, [r3, #4]
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d813      	bhi.n	800d18a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	4798      	blx	r3
 800d170:	4603      	mov	r3, r0
 800d172:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	88db      	ldrh	r3, [r3, #6]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d110      	bne.n	800d19e <USBD_StdItfReq+0x7a>
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10d      	bne.n	800d19e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fd56 	bl	800dc34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d188:	e009      	b.n	800d19e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fca3 	bl	800dad8 <USBD_CtlError>
          break;
 800d192:	e004      	b.n	800d19e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fc9e 	bl	800dad8 <USBD_CtlError>
          break;
 800d19c:	e000      	b.n	800d1a0 <USBD_StdItfReq+0x7c>
          break;
 800d19e:	bf00      	nop
      }
      break;
 800d1a0:	e004      	b.n	800d1ac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fc97 	bl	800dad8 <USBD_CtlError>
      break;
 800d1aa:	bf00      	nop
  }

  return ret;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	889b      	ldrh	r3, [r3, #4]
 800d1c8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1d2:	2b40      	cmp	r3, #64	@ 0x40
 800d1d4:	d007      	beq.n	800d1e6 <USBD_StdEPReq+0x30>
 800d1d6:	2b40      	cmp	r3, #64	@ 0x40
 800d1d8:	f200 8145 	bhi.w	800d466 <USBD_StdEPReq+0x2b0>
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00c      	beq.n	800d1fa <USBD_StdEPReq+0x44>
 800d1e0:	2b20      	cmp	r3, #32
 800d1e2:	f040 8140 	bne.w	800d466 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	4798      	blx	r3
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f8:	e13a      	b.n	800d470 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d007      	beq.n	800d212 <USBD_StdEPReq+0x5c>
 800d202:	2b03      	cmp	r3, #3
 800d204:	f300 8129 	bgt.w	800d45a <USBD_StdEPReq+0x2a4>
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d07f      	beq.n	800d30c <USBD_StdEPReq+0x156>
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d03c      	beq.n	800d28a <USBD_StdEPReq+0xd4>
 800d210:	e123      	b.n	800d45a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d002      	beq.n	800d224 <USBD_StdEPReq+0x6e>
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d016      	beq.n	800d250 <USBD_StdEPReq+0x9a>
 800d222:	e02c      	b.n	800d27e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d224:	7bbb      	ldrb	r3, [r7, #14]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00d      	beq.n	800d246 <USBD_StdEPReq+0x90>
 800d22a:	7bbb      	ldrb	r3, [r7, #14]
 800d22c:	2b80      	cmp	r3, #128	@ 0x80
 800d22e:	d00a      	beq.n	800d246 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d230:	7bbb      	ldrb	r3, [r7, #14]
 800d232:	4619      	mov	r1, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 ffed 	bl	800e214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d23a:	2180      	movs	r1, #128	@ 0x80
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 ffe9 	bl	800e214 <USBD_LL_StallEP>
 800d242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d244:	e020      	b.n	800d288 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d246:	6839      	ldr	r1, [r7, #0]
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fc45 	bl	800dad8 <USBD_CtlError>
              break;
 800d24e:	e01b      	b.n	800d288 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	885b      	ldrh	r3, [r3, #2]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10e      	bne.n	800d276 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d258:	7bbb      	ldrb	r3, [r7, #14]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00b      	beq.n	800d276 <USBD_StdEPReq+0xc0>
 800d25e:	7bbb      	ldrb	r3, [r7, #14]
 800d260:	2b80      	cmp	r3, #128	@ 0x80
 800d262:	d008      	beq.n	800d276 <USBD_StdEPReq+0xc0>
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	88db      	ldrh	r3, [r3, #6]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d104      	bne.n	800d276 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d26c:	7bbb      	ldrb	r3, [r7, #14]
 800d26e:	4619      	mov	r1, r3
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 ffcf 	bl	800e214 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fcdc 	bl	800dc34 <USBD_CtlSendStatus>

              break;
 800d27c:	e004      	b.n	800d288 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fc29 	bl	800dad8 <USBD_CtlError>
              break;
 800d286:	bf00      	nop
          }
          break;
 800d288:	e0ec      	b.n	800d464 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b02      	cmp	r3, #2
 800d294:	d002      	beq.n	800d29c <USBD_StdEPReq+0xe6>
 800d296:	2b03      	cmp	r3, #3
 800d298:	d016      	beq.n	800d2c8 <USBD_StdEPReq+0x112>
 800d29a:	e030      	b.n	800d2fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d29c:	7bbb      	ldrb	r3, [r7, #14]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00d      	beq.n	800d2be <USBD_StdEPReq+0x108>
 800d2a2:	7bbb      	ldrb	r3, [r7, #14]
 800d2a4:	2b80      	cmp	r3, #128	@ 0x80
 800d2a6:	d00a      	beq.n	800d2be <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f000 ffb1 	bl	800e214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2b2:	2180      	movs	r1, #128	@ 0x80
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 ffad 	bl	800e214 <USBD_LL_StallEP>
 800d2ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2bc:	e025      	b.n	800d30a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fc09 	bl	800dad8 <USBD_CtlError>
              break;
 800d2c6:	e020      	b.n	800d30a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	885b      	ldrh	r3, [r3, #2]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d11b      	bne.n	800d308 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d2d0:	7bbb      	ldrb	r3, [r7, #14]
 800d2d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d004      	beq.n	800d2e4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d2da:	7bbb      	ldrb	r3, [r7, #14]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 ffb7 	bl	800e252 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fca5 	bl	800dc34 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	4798      	blx	r3
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d2fc:	e004      	b.n	800d308 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d2fe:	6839      	ldr	r1, [r7, #0]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 fbe9 	bl	800dad8 <USBD_CtlError>
              break;
 800d306:	e000      	b.n	800d30a <USBD_StdEPReq+0x154>
              break;
 800d308:	bf00      	nop
          }
          break;
 800d30a:	e0ab      	b.n	800d464 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b02      	cmp	r3, #2
 800d316:	d002      	beq.n	800d31e <USBD_StdEPReq+0x168>
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d032      	beq.n	800d382 <USBD_StdEPReq+0x1cc>
 800d31c:	e097      	b.n	800d44e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d007      	beq.n	800d334 <USBD_StdEPReq+0x17e>
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	2b80      	cmp	r3, #128	@ 0x80
 800d328:	d004      	beq.n	800d334 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d32a:	6839      	ldr	r1, [r7, #0]
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fbd3 	bl	800dad8 <USBD_CtlError>
                break;
 800d332:	e091      	b.n	800d458 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	da0b      	bge.n	800d354 <USBD_StdEPReq+0x19e>
 800d33c:	7bbb      	ldrb	r3, [r7, #14]
 800d33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d342:	4613      	mov	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	3310      	adds	r3, #16
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	4413      	add	r3, r2
 800d350:	3304      	adds	r3, #4
 800d352:	e00b      	b.n	800d36c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d354:	7bbb      	ldrb	r3, [r7, #14]
 800d356:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d35a:	4613      	mov	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	4413      	add	r3, r2
 800d36a:	3304      	adds	r3, #4
 800d36c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2200      	movs	r2, #0
 800d372:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2202      	movs	r2, #2
 800d378:	4619      	mov	r1, r3
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fc1d 	bl	800dbba <USBD_CtlSendData>
              break;
 800d380:	e06a      	b.n	800d458 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d382:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d386:	2b00      	cmp	r3, #0
 800d388:	da11      	bge.n	800d3ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d38a:	7bbb      	ldrb	r3, [r7, #14]
 800d38c:	f003 020f 	and.w	r2, r3, #15
 800d390:	6879      	ldr	r1, [r7, #4]
 800d392:	4613      	mov	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	440b      	add	r3, r1
 800d39c:	3324      	adds	r3, #36	@ 0x24
 800d39e:	881b      	ldrh	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d117      	bne.n	800d3d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fb96 	bl	800dad8 <USBD_CtlError>
                  break;
 800d3ac:	e054      	b.n	800d458 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d3ae:	7bbb      	ldrb	r3, [r7, #14]
 800d3b0:	f003 020f 	and.w	r2, r3, #15
 800d3b4:	6879      	ldr	r1, [r7, #4]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4413      	add	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	440b      	add	r3, r1
 800d3c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d104      	bne.n	800d3d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fb83 	bl	800dad8 <USBD_CtlError>
                  break;
 800d3d2:	e041      	b.n	800d458 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	da0b      	bge.n	800d3f4 <USBD_StdEPReq+0x23e>
 800d3dc:	7bbb      	ldrb	r3, [r7, #14]
 800d3de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	4413      	add	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	3310      	adds	r3, #16
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	e00b      	b.n	800d40c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3f4:	7bbb      	ldrb	r3, [r7, #14]
 800d3f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	3304      	adds	r3, #4
 800d40c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d40e:	7bbb      	ldrb	r3, [r7, #14]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <USBD_StdEPReq+0x264>
 800d414:	7bbb      	ldrb	r3, [r7, #14]
 800d416:	2b80      	cmp	r3, #128	@ 0x80
 800d418:	d103      	bne.n	800d422 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	2200      	movs	r2, #0
 800d41e:	601a      	str	r2, [r3, #0]
 800d420:	e00e      	b.n	800d440 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d422:	7bbb      	ldrb	r3, [r7, #14]
 800d424:	4619      	mov	r1, r3
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 ff32 	bl	800e290 <USBD_LL_IsStallEP>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2201      	movs	r2, #1
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	e002      	b.n	800d440 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2200      	movs	r2, #0
 800d43e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2202      	movs	r2, #2
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fbb7 	bl	800dbba <USBD_CtlSendData>
              break;
 800d44c:	e004      	b.n	800d458 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fb41 	bl	800dad8 <USBD_CtlError>
              break;
 800d456:	bf00      	nop
          }
          break;
 800d458:	e004      	b.n	800d464 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d45a:	6839      	ldr	r1, [r7, #0]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fb3b 	bl	800dad8 <USBD_CtlError>
          break;
 800d462:	bf00      	nop
      }
      break;
 800d464:	e004      	b.n	800d470 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 fb35 	bl	800dad8 <USBD_CtlError>
      break;
 800d46e:	bf00      	nop
  }

  return ret;
 800d470:	7bfb      	ldrb	r3, [r7, #15]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
	...

0800d47c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d486:	2300      	movs	r3, #0
 800d488:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d48e:	2300      	movs	r3, #0
 800d490:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	885b      	ldrh	r3, [r3, #2]
 800d496:	0a1b      	lsrs	r3, r3, #8
 800d498:	b29b      	uxth	r3, r3
 800d49a:	3b01      	subs	r3, #1
 800d49c:	2b06      	cmp	r3, #6
 800d49e:	f200 8128 	bhi.w	800d6f2 <USBD_GetDescriptor+0x276>
 800d4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a8 <USBD_GetDescriptor+0x2c>)
 800d4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a8:	0800d4c5 	.word	0x0800d4c5
 800d4ac:	0800d4dd 	.word	0x0800d4dd
 800d4b0:	0800d51d 	.word	0x0800d51d
 800d4b4:	0800d6f3 	.word	0x0800d6f3
 800d4b8:	0800d6f3 	.word	0x0800d6f3
 800d4bc:	0800d693 	.word	0x0800d693
 800d4c0:	0800d6bf 	.word	0x0800d6bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	7c12      	ldrb	r2, [r2, #16]
 800d4d0:	f107 0108 	add.w	r1, r7, #8
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	4798      	blx	r3
 800d4d8:	60f8      	str	r0, [r7, #12]
      break;
 800d4da:	e112      	b.n	800d702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7c1b      	ldrb	r3, [r3, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10d      	bne.n	800d500 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ec:	f107 0208 	add.w	r2, r7, #8
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	4798      	blx	r3
 800d4f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d4fe:	e100      	b.n	800d702 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d508:	f107 0208 	add.w	r2, r7, #8
 800d50c:	4610      	mov	r0, r2
 800d50e:	4798      	blx	r3
 800d510:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	3301      	adds	r3, #1
 800d516:	2202      	movs	r2, #2
 800d518:	701a      	strb	r2, [r3, #0]
      break;
 800d51a:	e0f2      	b.n	800d702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	885b      	ldrh	r3, [r3, #2]
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b05      	cmp	r3, #5
 800d524:	f200 80ac 	bhi.w	800d680 <USBD_GetDescriptor+0x204>
 800d528:	a201      	add	r2, pc, #4	@ (adr r2, 800d530 <USBD_GetDescriptor+0xb4>)
 800d52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d52e:	bf00      	nop
 800d530:	0800d549 	.word	0x0800d549
 800d534:	0800d57d 	.word	0x0800d57d
 800d538:	0800d5b1 	.word	0x0800d5b1
 800d53c:	0800d5e5 	.word	0x0800d5e5
 800d540:	0800d619 	.word	0x0800d619
 800d544:	0800d64d 	.word	0x0800d64d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00b      	beq.n	800d56c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	7c12      	ldrb	r2, [r2, #16]
 800d560:	f107 0108 	add.w	r1, r7, #8
 800d564:	4610      	mov	r0, r2
 800d566:	4798      	blx	r3
 800d568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d56a:	e091      	b.n	800d690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fab2 	bl	800dad8 <USBD_CtlError>
            err++;
 800d574:	7afb      	ldrb	r3, [r7, #11]
 800d576:	3301      	adds	r3, #1
 800d578:	72fb      	strb	r3, [r7, #11]
          break;
 800d57a:	e089      	b.n	800d690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00b      	beq.n	800d5a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	7c12      	ldrb	r2, [r2, #16]
 800d594:	f107 0108 	add.w	r1, r7, #8
 800d598:	4610      	mov	r0, r2
 800d59a:	4798      	blx	r3
 800d59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d59e:	e077      	b.n	800d690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fa98 	bl	800dad8 <USBD_CtlError>
            err++;
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ae:	e06f      	b.n	800d690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00b      	beq.n	800d5d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	7c12      	ldrb	r2, [r2, #16]
 800d5c8:	f107 0108 	add.w	r1, r7, #8
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	4798      	blx	r3
 800d5d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5d2:	e05d      	b.n	800d690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fa7e 	bl	800dad8 <USBD_CtlError>
            err++;
 800d5dc:	7afb      	ldrb	r3, [r7, #11]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5e2:	e055      	b.n	800d690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00b      	beq.n	800d608 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	7c12      	ldrb	r2, [r2, #16]
 800d5fc:	f107 0108 	add.w	r1, r7, #8
 800d600:	4610      	mov	r0, r2
 800d602:	4798      	blx	r3
 800d604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d606:	e043      	b.n	800d690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fa64 	bl	800dad8 <USBD_CtlError>
            err++;
 800d610:	7afb      	ldrb	r3, [r7, #11]
 800d612:	3301      	adds	r3, #1
 800d614:	72fb      	strb	r3, [r7, #11]
          break;
 800d616:	e03b      	b.n	800d690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d61e:	695b      	ldr	r3, [r3, #20]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00b      	beq.n	800d63c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d62a:	695b      	ldr	r3, [r3, #20]
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	7c12      	ldrb	r2, [r2, #16]
 800d630:	f107 0108 	add.w	r1, r7, #8
 800d634:	4610      	mov	r0, r2
 800d636:	4798      	blx	r3
 800d638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d63a:	e029      	b.n	800d690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fa4a 	bl	800dad8 <USBD_CtlError>
            err++;
 800d644:	7afb      	ldrb	r3, [r7, #11]
 800d646:	3301      	adds	r3, #1
 800d648:	72fb      	strb	r3, [r7, #11]
          break;
 800d64a:	e021      	b.n	800d690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d652:	699b      	ldr	r3, [r3, #24]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00b      	beq.n	800d670 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	7c12      	ldrb	r2, [r2, #16]
 800d664:	f107 0108 	add.w	r1, r7, #8
 800d668:	4610      	mov	r0, r2
 800d66a:	4798      	blx	r3
 800d66c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d66e:	e00f      	b.n	800d690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fa30 	bl	800dad8 <USBD_CtlError>
            err++;
 800d678:	7afb      	ldrb	r3, [r7, #11]
 800d67a:	3301      	adds	r3, #1
 800d67c:	72fb      	strb	r3, [r7, #11]
          break;
 800d67e:	e007      	b.n	800d690 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fa28 	bl	800dad8 <USBD_CtlError>
          err++;
 800d688:	7afb      	ldrb	r3, [r7, #11]
 800d68a:	3301      	adds	r3, #1
 800d68c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d68e:	bf00      	nop
      }
      break;
 800d690:	e037      	b.n	800d702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	7c1b      	ldrb	r3, [r3, #16]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d109      	bne.n	800d6ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6a2:	f107 0208 	add.w	r2, r7, #8
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	4798      	blx	r3
 800d6aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6ac:	e029      	b.n	800d702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 fa11 	bl	800dad8 <USBD_CtlError>
        err++;
 800d6b6:	7afb      	ldrb	r3, [r7, #11]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d6bc:	e021      	b.n	800d702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	7c1b      	ldrb	r3, [r3, #16]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10d      	bne.n	800d6e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6ce:	f107 0208 	add.w	r2, r7, #8
 800d6d2:	4610      	mov	r0, r2
 800d6d4:	4798      	blx	r3
 800d6d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	2207      	movs	r2, #7
 800d6de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6e0:	e00f      	b.n	800d702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d6e2:	6839      	ldr	r1, [r7, #0]
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f9f7 	bl	800dad8 <USBD_CtlError>
        err++;
 800d6ea:	7afb      	ldrb	r3, [r7, #11]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	72fb      	strb	r3, [r7, #11]
      break;
 800d6f0:	e007      	b.n	800d702 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f9ef 	bl	800dad8 <USBD_CtlError>
      err++;
 800d6fa:	7afb      	ldrb	r3, [r7, #11]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d700:	bf00      	nop
  }

  if (err != 0U)
 800d702:	7afb      	ldrb	r3, [r7, #11]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d11e      	bne.n	800d746 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	88db      	ldrh	r3, [r3, #6]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d016      	beq.n	800d73e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d710:	893b      	ldrh	r3, [r7, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00e      	beq.n	800d734 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	88da      	ldrh	r2, [r3, #6]
 800d71a:	893b      	ldrh	r3, [r7, #8]
 800d71c:	4293      	cmp	r3, r2
 800d71e:	bf28      	it	cs
 800d720:	4613      	movcs	r3, r2
 800d722:	b29b      	uxth	r3, r3
 800d724:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d726:	893b      	ldrh	r3, [r7, #8]
 800d728:	461a      	mov	r2, r3
 800d72a:	68f9      	ldr	r1, [r7, #12]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fa44 	bl	800dbba <USBD_CtlSendData>
 800d732:	e009      	b.n	800d748 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f9ce 	bl	800dad8 <USBD_CtlError>
 800d73c:	e004      	b.n	800d748 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 fa78 	bl	800dc34 <USBD_CtlSendStatus>
 800d744:	e000      	b.n	800d748 <USBD_GetDescriptor+0x2cc>
    return;
 800d746:	bf00      	nop
  }
}
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop

0800d750 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	889b      	ldrh	r3, [r3, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d131      	bne.n	800d7c6 <USBD_SetAddress+0x76>
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	88db      	ldrh	r3, [r3, #6]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d12d      	bne.n	800d7c6 <USBD_SetAddress+0x76>
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	885b      	ldrh	r3, [r3, #2]
 800d76e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d770:	d829      	bhi.n	800d7c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	885b      	ldrh	r3, [r3, #2]
 800d776:	b2db      	uxtb	r3, r3
 800d778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d77c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d784:	b2db      	uxtb	r3, r3
 800d786:	2b03      	cmp	r3, #3
 800d788:	d104      	bne.n	800d794 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d78a:	6839      	ldr	r1, [r7, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f9a3 	bl	800dad8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d792:	e01d      	b.n	800d7d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	7bfa      	ldrb	r2, [r7, #15]
 800d798:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fda1 	bl	800e2e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fa44 	bl	800dc34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d004      	beq.n	800d7bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2202      	movs	r2, #2
 800d7b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ba:	e009      	b.n	800d7d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c4:	e004      	b.n	800d7d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 f985 	bl	800dad8 <USBD_CtlError>
  }
}
 800d7ce:	bf00      	nop
 800d7d0:	bf00      	nop
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	885b      	ldrh	r3, [r3, #2]
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	4b4c      	ldr	r3, [pc, #304]	@ (800d920 <USBD_SetConfig+0x148>)
 800d7ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d7f0:	4b4b      	ldr	r3, [pc, #300]	@ (800d920 <USBD_SetConfig+0x148>)
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d905      	bls.n	800d804 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d7f8:	6839      	ldr	r1, [r7, #0]
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f96c 	bl	800dad8 <USBD_CtlError>
    return USBD_FAIL;
 800d800:	2303      	movs	r3, #3
 800d802:	e088      	b.n	800d916 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d002      	beq.n	800d816 <USBD_SetConfig+0x3e>
 800d810:	2b03      	cmp	r3, #3
 800d812:	d025      	beq.n	800d860 <USBD_SetConfig+0x88>
 800d814:	e071      	b.n	800d8fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d816:	4b42      	ldr	r3, [pc, #264]	@ (800d920 <USBD_SetConfig+0x148>)
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d01c      	beq.n	800d858 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d81e:	4b40      	ldr	r3, [pc, #256]	@ (800d920 <USBD_SetConfig+0x148>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	461a      	mov	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d828:	4b3d      	ldr	r3, [pc, #244]	@ (800d920 <USBD_SetConfig+0x148>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff f9ba 	bl	800cba8 <USBD_SetClassConfig>
 800d834:	4603      	mov	r3, r0
 800d836:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d838:	7bfb      	ldrb	r3, [r7, #15]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d004      	beq.n	800d848 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d83e:	6839      	ldr	r1, [r7, #0]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f949 	bl	800dad8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d846:	e065      	b.n	800d914 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f9f3 	bl	800dc34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2203      	movs	r2, #3
 800d852:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d856:	e05d      	b.n	800d914 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f9eb 	bl	800dc34 <USBD_CtlSendStatus>
      break;
 800d85e:	e059      	b.n	800d914 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d860:	4b2f      	ldr	r3, [pc, #188]	@ (800d920 <USBD_SetConfig+0x148>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d112      	bne.n	800d88e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d870:	4b2b      	ldr	r3, [pc, #172]	@ (800d920 <USBD_SetConfig+0x148>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	461a      	mov	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d87a:	4b29      	ldr	r3, [pc, #164]	@ (800d920 <USBD_SetConfig+0x148>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff f9ad 	bl	800cbe0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f9d4 	bl	800dc34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d88c:	e042      	b.n	800d914 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d88e:	4b24      	ldr	r3, [pc, #144]	@ (800d920 <USBD_SetConfig+0x148>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d02a      	beq.n	800d8f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff f99b 	bl	800cbe0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d8aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d920 <USBD_SetConfig+0x148>)
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d8b4:	4b1a      	ldr	r3, [pc, #104]	@ (800d920 <USBD_SetConfig+0x148>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7ff f974 	bl	800cba8 <USBD_SetClassConfig>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00f      	beq.n	800d8ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d8ca:	6839      	ldr	r1, [r7, #0]
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f903 	bl	800dad8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	4619      	mov	r1, r3
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff f980 	bl	800cbe0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d8e8:	e014      	b.n	800d914 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f9a2 	bl	800dc34 <USBD_CtlSendStatus>
      break;
 800d8f0:	e010      	b.n	800d914 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f99e 	bl	800dc34 <USBD_CtlSendStatus>
      break;
 800d8f8:	e00c      	b.n	800d914 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f8eb 	bl	800dad8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d902:	4b07      	ldr	r3, [pc, #28]	@ (800d920 <USBD_SetConfig+0x148>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff f969 	bl	800cbe0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d90e:	2303      	movs	r3, #3
 800d910:	73fb      	strb	r3, [r7, #15]
      break;
 800d912:	bf00      	nop
  }

  return ret;
 800d914:	7bfb      	ldrb	r3, [r7, #15]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	20001388 	.word	0x20001388

0800d924 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	88db      	ldrh	r3, [r3, #6]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d004      	beq.n	800d940 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f8cd 	bl	800dad8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d93e:	e023      	b.n	800d988 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d946:	b2db      	uxtb	r3, r3
 800d948:	2b02      	cmp	r3, #2
 800d94a:	dc02      	bgt.n	800d952 <USBD_GetConfig+0x2e>
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	dc03      	bgt.n	800d958 <USBD_GetConfig+0x34>
 800d950:	e015      	b.n	800d97e <USBD_GetConfig+0x5a>
 800d952:	2b03      	cmp	r3, #3
 800d954:	d00b      	beq.n	800d96e <USBD_GetConfig+0x4a>
 800d956:	e012      	b.n	800d97e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	3308      	adds	r3, #8
 800d962:	2201      	movs	r2, #1
 800d964:	4619      	mov	r1, r3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f927 	bl	800dbba <USBD_CtlSendData>
        break;
 800d96c:	e00c      	b.n	800d988 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	3304      	adds	r3, #4
 800d972:	2201      	movs	r2, #1
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f91f 	bl	800dbba <USBD_CtlSendData>
        break;
 800d97c:	e004      	b.n	800d988 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f8a9 	bl	800dad8 <USBD_CtlError>
        break;
 800d986:	bf00      	nop
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d81e      	bhi.n	800d9e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	88db      	ldrh	r3, [r3, #6]
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	d004      	beq.n	800d9ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d9b0:	6839      	ldr	r1, [r7, #0]
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f890 	bl	800dad8 <USBD_CtlError>
        break;
 800d9b8:	e01a      	b.n	800d9f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d005      	beq.n	800d9d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	f043 0202 	orr.w	r2, r3, #2
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	330c      	adds	r3, #12
 800d9da:	2202      	movs	r2, #2
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f8eb 	bl	800dbba <USBD_CtlSendData>
      break;
 800d9e4:	e004      	b.n	800d9f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f875 	bl	800dad8 <USBD_CtlError>
      break;
 800d9ee:	bf00      	nop
  }
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	885b      	ldrh	r3, [r3, #2]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d106      	bne.n	800da18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f90e 	bl	800dc34 <USBD_CtlSendStatus>
  }
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da30:	b2db      	uxtb	r3, r3
 800da32:	3b01      	subs	r3, #1
 800da34:	2b02      	cmp	r3, #2
 800da36:	d80b      	bhi.n	800da50 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	885b      	ldrh	r3, [r3, #2]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d10c      	bne.n	800da5a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f8f3 	bl	800dc34 <USBD_CtlSendStatus>
      }
      break;
 800da4e:	e004      	b.n	800da5a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f840 	bl	800dad8 <USBD_CtlError>
      break;
 800da58:	e000      	b.n	800da5c <USBD_ClrFeature+0x3c>
      break;
 800da5a:	bf00      	nop
  }
}
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	781a      	ldrb	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3301      	adds	r3, #1
 800da7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	781a      	ldrb	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	3301      	adds	r3, #1
 800da8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f7ff faba 	bl	800d008 <SWAPBYTE>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3301      	adds	r3, #1
 800daa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3301      	adds	r3, #1
 800daa6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f7ff faad 	bl	800d008 <SWAPBYTE>
 800daae:	4603      	mov	r3, r0
 800dab0:	461a      	mov	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3301      	adds	r3, #1
 800daba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	3301      	adds	r3, #1
 800dac0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f7ff faa0 	bl	800d008 <SWAPBYTE>
 800dac8:	4603      	mov	r3, r0
 800daca:	461a      	mov	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	80da      	strh	r2, [r3, #6]
}
 800dad0:	bf00      	nop
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dae2:	2180      	movs	r1, #128	@ 0x80
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fb95 	bl	800e214 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800daea:	2100      	movs	r1, #0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 fb91 	bl	800e214 <USBD_LL_StallEP>
}
 800daf2:	bf00      	nop
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b086      	sub	sp, #24
 800dafe:	af00      	add	r7, sp, #0
 800db00:	60f8      	str	r0, [r7, #12]
 800db02:	60b9      	str	r1, [r7, #8]
 800db04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db06:	2300      	movs	r3, #0
 800db08:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d036      	beq.n	800db7e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db14:	6938      	ldr	r0, [r7, #16]
 800db16:	f000 f836 	bl	800db86 <USBD_GetLen>
 800db1a:	4603      	mov	r3, r0
 800db1c:	3301      	adds	r3, #1
 800db1e:	b29b      	uxth	r3, r3
 800db20:	005b      	lsls	r3, r3, #1
 800db22:	b29a      	uxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db28:	7dfb      	ldrb	r3, [r7, #23]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	4413      	add	r3, r2
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	7812      	ldrb	r2, [r2, #0]
 800db32:	701a      	strb	r2, [r3, #0]
  idx++;
 800db34:	7dfb      	ldrb	r3, [r7, #23]
 800db36:	3301      	adds	r3, #1
 800db38:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	4413      	add	r3, r2
 800db40:	2203      	movs	r2, #3
 800db42:	701a      	strb	r2, [r3, #0]
  idx++;
 800db44:	7dfb      	ldrb	r3, [r7, #23]
 800db46:	3301      	adds	r3, #1
 800db48:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db4a:	e013      	b.n	800db74 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4413      	add	r3, r2
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	7812      	ldrb	r2, [r2, #0]
 800db56:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	3301      	adds	r3, #1
 800db5c:	613b      	str	r3, [r7, #16]
    idx++;
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	3301      	adds	r3, #1
 800db62:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	4413      	add	r3, r2
 800db6a:	2200      	movs	r2, #0
 800db6c:	701a      	strb	r2, [r3, #0]
    idx++;
 800db6e:	7dfb      	ldrb	r3, [r7, #23]
 800db70:	3301      	adds	r3, #1
 800db72:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1e7      	bne.n	800db4c <USBD_GetString+0x52>
 800db7c:	e000      	b.n	800db80 <USBD_GetString+0x86>
    return;
 800db7e:	bf00      	nop
  }
}
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db86:	b480      	push	{r7}
 800db88:	b085      	sub	sp, #20
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800db8e:	2300      	movs	r3, #0
 800db90:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db96:	e005      	b.n	800dba4 <USBD_GetLen+0x1e>
  {
    len++;
 800db98:	7bfb      	ldrb	r3, [r7, #15]
 800db9a:	3301      	adds	r3, #1
 800db9c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	3301      	adds	r3, #1
 800dba2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1f5      	bne.n	800db98 <USBD_GetLen+0x12>
  }

  return len;
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	60f8      	str	r0, [r7, #12]
 800dbc2:	60b9      	str	r1, [r7, #8]
 800dbc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2202      	movs	r2, #2
 800dbca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	2100      	movs	r1, #0
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f000 fba0 	bl	800e326 <USBD_LL_Transmit>

  return USBD_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	2100      	movs	r1, #0
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f000 fb8f 	bl	800e326 <USBD_LL_Transmit>

  return USBD_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	60b9      	str	r1, [r7, #8]
 800dc1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	2100      	movs	r1, #0
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f000 fb9f 	bl	800e368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2204      	movs	r2, #4
 800dc40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc44:	2300      	movs	r3, #0
 800dc46:	2200      	movs	r2, #0
 800dc48:	2100      	movs	r1, #0
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fb6b 	bl	800e326 <USBD_LL_Transmit>

  return USBD_OK;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b082      	sub	sp, #8
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2205      	movs	r2, #5
 800dc66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2100      	movs	r1, #0
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fb79 	bl	800e368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800dc84:	2200      	movs	r2, #0
 800dc86:	490e      	ldr	r1, [pc, #56]	@ (800dcc0 <MX_USB_Device_Init+0x40>)
 800dc88:	480e      	ldr	r0, [pc, #56]	@ (800dcc4 <MX_USB_Device_Init+0x44>)
 800dc8a:	f7fe ff1f 	bl	800cacc <USBD_Init>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dc94:	f7f3 fd61 	bl	800175a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800dc98:	490b      	ldr	r1, [pc, #44]	@ (800dcc8 <MX_USB_Device_Init+0x48>)
 800dc9a:	480a      	ldr	r0, [pc, #40]	@ (800dcc4 <MX_USB_Device_Init+0x44>)
 800dc9c:	f7fe ff46 	bl	800cb2c <USBD_RegisterClass>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d001      	beq.n	800dcaa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dca6:	f7f3 fd58 	bl	800175a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dcaa:	4806      	ldr	r0, [pc, #24]	@ (800dcc4 <MX_USB_Device_Init+0x44>)
 800dcac:	f7fe ff65 	bl	800cb7a <USBD_Start>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800dcb6:	f7f3 fd50 	bl	800175a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dcba:	bf00      	nop
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	20000118 	.word	0x20000118
 800dcc4:	2000138c 	.word	0x2000138c
 800dcc8:	20000010 	.word	0x20000010

0800dccc <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	6039      	str	r1, [r7, #0]
 800dcd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2212      	movs	r2, #18
 800dcdc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800dcde:	4b03      	ldr	r3, [pc, #12]	@ (800dcec <USBD_HID_DeviceDescriptor+0x20>)
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr
 800dcec:	20000134 	.word	0x20000134

0800dcf0 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	6039      	str	r1, [r7, #0]
 800dcfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2204      	movs	r2, #4
 800dd00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd02:	4b03      	ldr	r3, [pc, #12]	@ (800dd10 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	20000148 	.word	0x20000148

0800dd14 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	6039      	str	r1, [r7, #0]
 800dd1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd20:	79fb      	ldrb	r3, [r7, #7]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d105      	bne.n	800dd32 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dd26:	683a      	ldr	r2, [r7, #0]
 800dd28:	4907      	ldr	r1, [pc, #28]	@ (800dd48 <USBD_HID_ProductStrDescriptor+0x34>)
 800dd2a:	4808      	ldr	r0, [pc, #32]	@ (800dd4c <USBD_HID_ProductStrDescriptor+0x38>)
 800dd2c:	f7ff fee5 	bl	800dafa <USBD_GetString>
 800dd30:	e004      	b.n	800dd3c <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dd32:	683a      	ldr	r2, [r7, #0]
 800dd34:	4904      	ldr	r1, [pc, #16]	@ (800dd48 <USBD_HID_ProductStrDescriptor+0x34>)
 800dd36:	4805      	ldr	r0, [pc, #20]	@ (800dd4c <USBD_HID_ProductStrDescriptor+0x38>)
 800dd38:	f7ff fedf 	bl	800dafa <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd3c:	4b02      	ldr	r3, [pc, #8]	@ (800dd48 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	2000165c 	.word	0x2000165c
 800dd4c:	0800f43c 	.word	0x0800f43c

0800dd50 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	6039      	str	r1, [r7, #0]
 800dd5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	4904      	ldr	r1, [pc, #16]	@ (800dd70 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800dd60:	4804      	ldr	r0, [pc, #16]	@ (800dd74 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800dd62:	f7ff feca 	bl	800dafa <USBD_GetString>
  return USBD_StrDesc;
 800dd66:	4b02      	ldr	r3, [pc, #8]	@ (800dd70 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	2000165c 	.word	0x2000165c
 800dd74:	0800f454 	.word	0x0800f454

0800dd78 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	6039      	str	r1, [r7, #0]
 800dd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	221a      	movs	r2, #26
 800dd88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd8a:	f000 f843 	bl	800de14 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dd8e:	4b02      	ldr	r3, [pc, #8]	@ (800dd98 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	2000014c 	.word	0x2000014c

0800dd9c <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	4603      	mov	r3, r0
 800dda4:	6039      	str	r1, [r7, #0]
 800dda6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dda8:	79fb      	ldrb	r3, [r7, #7]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d105      	bne.n	800ddba <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	4907      	ldr	r1, [pc, #28]	@ (800ddd0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800ddb2:	4808      	ldr	r0, [pc, #32]	@ (800ddd4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800ddb4:	f7ff fea1 	bl	800dafa <USBD_GetString>
 800ddb8:	e004      	b.n	800ddc4 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	4904      	ldr	r1, [pc, #16]	@ (800ddd0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800ddbe:	4805      	ldr	r0, [pc, #20]	@ (800ddd4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800ddc0:	f7ff fe9b 	bl	800dafa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddc4:	4b02      	ldr	r3, [pc, #8]	@ (800ddd0 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	2000165c 	.word	0x2000165c
 800ddd4:	0800f468 	.word	0x0800f468

0800ddd8 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	4603      	mov	r3, r0
 800dde0:	6039      	str	r1, [r7, #0]
 800dde2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d105      	bne.n	800ddf6 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	4907      	ldr	r1, [pc, #28]	@ (800de0c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800ddee:	4808      	ldr	r0, [pc, #32]	@ (800de10 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800ddf0:	f7ff fe83 	bl	800dafa <USBD_GetString>
 800ddf4:	e004      	b.n	800de00 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	4904      	ldr	r1, [pc, #16]	@ (800de0c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800ddfa:	4805      	ldr	r0, [pc, #20]	@ (800de10 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800ddfc:	f7ff fe7d 	bl	800dafa <USBD_GetString>
  }
  return USBD_StrDesc;
 800de00:	4b02      	ldr	r3, [pc, #8]	@ (800de0c <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	2000165c 	.word	0x2000165c
 800de10:	0800f474 	.word	0x0800f474

0800de14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de1a:	4b0f      	ldr	r3, [pc, #60]	@ (800de58 <Get_SerialNum+0x44>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de20:	4b0e      	ldr	r3, [pc, #56]	@ (800de5c <Get_SerialNum+0x48>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de26:	4b0e      	ldr	r3, [pc, #56]	@ (800de60 <Get_SerialNum+0x4c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4413      	add	r3, r2
 800de32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d009      	beq.n	800de4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de3a:	2208      	movs	r2, #8
 800de3c:	4909      	ldr	r1, [pc, #36]	@ (800de64 <Get_SerialNum+0x50>)
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f000 f814 	bl	800de6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de44:	2204      	movs	r2, #4
 800de46:	4908      	ldr	r1, [pc, #32]	@ (800de68 <Get_SerialNum+0x54>)
 800de48:	68b8      	ldr	r0, [r7, #8]
 800de4a:	f000 f80f 	bl	800de6c <IntToUnicode>
  }
}
 800de4e:	bf00      	nop
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	1fff7590 	.word	0x1fff7590
 800de5c:	1fff7594 	.word	0x1fff7594
 800de60:	1fff7598 	.word	0x1fff7598
 800de64:	2000014e 	.word	0x2000014e
 800de68:	2000015e 	.word	0x2000015e

0800de6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b087      	sub	sp, #28
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	4613      	mov	r3, r2
 800de78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de7e:	2300      	movs	r3, #0
 800de80:	75fb      	strb	r3, [r7, #23]
 800de82:	e027      	b.n	800ded4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	0f1b      	lsrs	r3, r3, #28
 800de88:	2b09      	cmp	r3, #9
 800de8a:	d80b      	bhi.n	800dea4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	0f1b      	lsrs	r3, r3, #28
 800de90:	b2da      	uxtb	r2, r3
 800de92:	7dfb      	ldrb	r3, [r7, #23]
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	4619      	mov	r1, r3
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	440b      	add	r3, r1
 800de9c:	3230      	adds	r2, #48	@ 0x30
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	701a      	strb	r2, [r3, #0]
 800dea2:	e00a      	b.n	800deba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	0f1b      	lsrs	r3, r3, #28
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	7dfb      	ldrb	r3, [r7, #23]
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	4619      	mov	r1, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	440b      	add	r3, r1
 800deb4:	3237      	adds	r2, #55	@ 0x37
 800deb6:	b2d2      	uxtb	r2, r2
 800deb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	011b      	lsls	r3, r3, #4
 800debe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	3301      	adds	r3, #1
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	4413      	add	r3, r2
 800deca:	2200      	movs	r2, #0
 800decc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	3301      	adds	r3, #1
 800ded2:	75fb      	strb	r3, [r7, #23]
 800ded4:	7dfa      	ldrb	r2, [r7, #23]
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d3d3      	bcc.n	800de84 <IntToUnicode+0x18>
  }
}
 800dedc:	bf00      	nop
 800dede:	bf00      	nop
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
	...

0800deec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b094      	sub	sp, #80	@ 0x50
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800def4:	f107 030c 	add.w	r3, r7, #12
 800def8:	2244      	movs	r2, #68	@ 0x44
 800defa:	2100      	movs	r1, #0
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fbe2 	bl	800e6c6 <memset>
  if(pcdHandle->Instance==USB)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a15      	ldr	r2, [pc, #84]	@ (800df5c <HAL_PCD_MspInit+0x70>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d122      	bne.n	800df52 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800df0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800df10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800df12:	2300      	movs	r3, #0
 800df14:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800df16:	f107 030c 	add.w	r3, r7, #12
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7f9 fff4 	bl	8007f08 <HAL_RCCEx_PeriphCLKConfig>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800df26:	f7f3 fc18 	bl	800175a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800df2a:	4b0d      	ldr	r3, [pc, #52]	@ (800df60 <HAL_PCD_MspInit+0x74>)
 800df2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df2e:	4a0c      	ldr	r2, [pc, #48]	@ (800df60 <HAL_PCD_MspInit+0x74>)
 800df30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800df34:	6593      	str	r3, [r2, #88]	@ 0x58
 800df36:	4b0a      	ldr	r3, [pc, #40]	@ (800df60 <HAL_PCD_MspInit+0x74>)
 800df38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df3e:	60bb      	str	r3, [r7, #8]
 800df40:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800df42:	2200      	movs	r2, #0
 800df44:	2100      	movs	r1, #0
 800df46:	2014      	movs	r0, #20
 800df48:	f7f6 f9b7 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800df4c:	2014      	movs	r0, #20
 800df4e:	f7f6 f9ce 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800df52:	bf00      	nop
 800df54:	3750      	adds	r7, #80	@ 0x50
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	40005c00 	.word	0x40005c00
 800df60:	40021000 	.word	0x40021000

0800df64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800df78:	4619      	mov	r1, r3
 800df7a:	4610      	mov	r0, r2
 800df7c:	f7fe fe48 	bl	800cc10 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800df9a:	78fa      	ldrb	r2, [r7, #3]
 800df9c:	6879      	ldr	r1, [r7, #4]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4413      	add	r3, r2
 800dfa4:	00db      	lsls	r3, r3, #3
 800dfa6:	440b      	add	r3, r1
 800dfa8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	f7fe fe82 	bl	800ccba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dfb6:	bf00      	nop
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800dfd0:	78fa      	ldrb	r2, [r7, #3]
 800dfd2:	6879      	ldr	r1, [r7, #4]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	440b      	add	r3, r1
 800dfde:	3324      	adds	r3, #36	@ 0x24
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	78fb      	ldrb	r3, [r7, #3]
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	f7fe fecb 	bl	800cd80 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dfea:	bf00      	nop
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e000:	4618      	mov	r0, r3
 800e002:	f7fe ffdf 	bl	800cfc4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e006:	bf00      	nop
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b084      	sub	sp, #16
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e016:	2301      	movs	r3, #1
 800e018:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	795b      	ldrb	r3, [r3, #5]
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d001      	beq.n	800e026 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e022:	f7f3 fb9a 	bl	800175a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e02c:	7bfa      	ldrb	r2, [r7, #15]
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe ff89 	bl	800cf48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7fe ff35 	bl	800ceac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e042:	bf00      	nop
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
	...

0800e04c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fe ff84 	bl	800cf68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	7a5b      	ldrb	r3, [r3, #9]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d005      	beq.n	800e074 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e068:	4b04      	ldr	r3, [pc, #16]	@ (800e07c <HAL_PCD_SuspendCallback+0x30>)
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	4a03      	ldr	r2, [pc, #12]	@ (800e07c <HAL_PCD_SuspendCallback+0x30>)
 800e06e:	f043 0306 	orr.w	r3, r3, #6
 800e072:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e074:	bf00      	nop
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	e000ed00 	.word	0xe000ed00

0800e080 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7a5b      	ldrb	r3, [r3, #9]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e090:	4b08      	ldr	r3, [pc, #32]	@ (800e0b4 <HAL_PCD_ResumeCallback+0x34>)
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	4a07      	ldr	r2, [pc, #28]	@ (800e0b4 <HAL_PCD_ResumeCallback+0x34>)
 800e096:	f023 0306 	bic.w	r3, r3, #6
 800e09a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e09c:	f000 f99e 	bl	800e3dc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe ff74 	bl	800cf94 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	e000ed00 	.word	0xe000ed00

0800e0b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e0c0:	4a22      	ldr	r2, [pc, #136]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4a20      	ldr	r2, [pc, #128]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0d2:	4a1f      	ldr	r2, [pc, #124]	@ (800e150 <USBD_LL_Init+0x98>)
 800e0d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0d8:	2208      	movs	r2, #8
 800e0da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e0dc:	4b1b      	ldr	r3, [pc, #108]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0de:	2202      	movs	r2, #2
 800e0e0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e0e2:	4b1a      	ldr	r3, [pc, #104]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0e4:	2202      	movs	r2, #2
 800e0e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e0e8:	4b18      	ldr	r3, [pc, #96]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e0ee:	4b17      	ldr	r3, [pc, #92]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e0f4:	4b15      	ldr	r3, [pc, #84]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e0fa:	4b14      	ldr	r3, [pc, #80]	@ (800e14c <USBD_LL_Init+0x94>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e100:	4812      	ldr	r0, [pc, #72]	@ (800e14c <USBD_LL_Init+0x94>)
 800e102:	f7f7 fc29 	bl	8005958 <HAL_PCD_Init>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e10c:	f7f3 fb25 	bl	800175a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e116:	2318      	movs	r3, #24
 800e118:	2200      	movs	r2, #0
 800e11a:	2100      	movs	r1, #0
 800e11c:	f7f9 f898 	bl	8007250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e126:	2358      	movs	r3, #88	@ 0x58
 800e128:	2200      	movs	r2, #0
 800e12a:	2180      	movs	r1, #128	@ 0x80
 800e12c:	f7f9 f890 	bl	8007250 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e13a:	2200      	movs	r2, #0
 800e13c:	2181      	movs	r1, #129	@ 0x81
 800e13e:	f7f9 f887 	bl	8007250 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	2000185c 	.word	0x2000185c
 800e150:	40005c00 	.word	0x40005c00

0800e154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f7 fcc2 	bl	8005af4 <HAL_PCD_Start>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e174:	7bfb      	ldrb	r3, [r7, #15]
 800e176:	4618      	mov	r0, r3
 800e178:	f000 f936 	bl	800e3e8 <USBD_Get_USB_Status>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e180:	7bbb      	ldrb	r3, [r7, #14]
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b084      	sub	sp, #16
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	4608      	mov	r0, r1
 800e194:	4611      	mov	r1, r2
 800e196:	461a      	mov	r2, r3
 800e198:	4603      	mov	r3, r0
 800e19a:	70fb      	strb	r3, [r7, #3]
 800e19c:	460b      	mov	r3, r1
 800e19e:	70bb      	strb	r3, [r7, #2]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e1b2:	78bb      	ldrb	r3, [r7, #2]
 800e1b4:	883a      	ldrh	r2, [r7, #0]
 800e1b6:	78f9      	ldrb	r1, [r7, #3]
 800e1b8:	f7f7 fe09 	bl	8005dce <HAL_PCD_EP_Open>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1c0:	7bfb      	ldrb	r3, [r7, #15]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 f910 	bl	800e3e8 <USBD_Get_USB_Status>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	460b      	mov	r3, r1
 800e1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e1f0:	78fa      	ldrb	r2, [r7, #3]
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7f7 fe49 	bl	8005e8c <HAL_PCD_EP_Close>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
 800e200:	4618      	mov	r0, r3
 800e202:	f000 f8f1 	bl	800e3e8 <USBD_Get_USB_Status>
 800e206:	4603      	mov	r3, r0
 800e208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e220:	2300      	movs	r3, #0
 800e222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e224:	2300      	movs	r3, #0
 800e226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e22e:	78fa      	ldrb	r2, [r7, #3]
 800e230:	4611      	mov	r1, r2
 800e232:	4618      	mov	r0, r3
 800e234:	f7f7 feda 	bl	8005fec <HAL_PCD_EP_SetStall>
 800e238:	4603      	mov	r3, r0
 800e23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	4618      	mov	r0, r3
 800e240:	f000 f8d2 	bl	800e3e8 <USBD_Get_USB_Status>
 800e244:	4603      	mov	r3, r0
 800e246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e248:	7bbb      	ldrb	r3, [r7, #14]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b084      	sub	sp, #16
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
 800e25a:	460b      	mov	r3, r1
 800e25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e25e:	2300      	movs	r3, #0
 800e260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e26c:	78fa      	ldrb	r2, [r7, #3]
 800e26e:	4611      	mov	r1, r2
 800e270:	4618      	mov	r0, r3
 800e272:	f7f7 ff0d 	bl	8006090 <HAL_PCD_EP_ClrStall>
 800e276:	4603      	mov	r3, r0
 800e278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f000 f8b3 	bl	800e3e8 <USBD_Get_USB_Status>
 800e282:	4603      	mov	r3, r0
 800e284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e286:	7bbb      	ldrb	r3, [r7, #14]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	460b      	mov	r3, r1
 800e29a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e2a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	da0b      	bge.n	800e2c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e2ac:	78fb      	ldrb	r3, [r7, #3]
 800e2ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2b2:	68f9      	ldr	r1, [r7, #12]
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	440b      	add	r3, r1
 800e2be:	3312      	adds	r3, #18
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	e00b      	b.n	800e2dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e2c4:	78fb      	ldrb	r3, [r7, #3]
 800e2c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2ca:	68f9      	ldr	r1, [r7, #12]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4413      	add	r3, r2
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	440b      	add	r3, r1
 800e2d6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e2da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e302:	78fa      	ldrb	r2, [r7, #3]
 800e304:	4611      	mov	r1, r2
 800e306:	4618      	mov	r0, r3
 800e308:	f7f7 fd3d 	bl	8005d86 <HAL_PCD_SetAddress>
 800e30c:	4603      	mov	r3, r0
 800e30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e310:	7bfb      	ldrb	r3, [r7, #15]
 800e312:	4618      	mov	r0, r3
 800e314:	f000 f868 	bl	800e3e8 <USBD_Get_USB_Status>
 800e318:	4603      	mov	r3, r0
 800e31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b086      	sub	sp, #24
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	60f8      	str	r0, [r7, #12]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
 800e332:	460b      	mov	r3, r1
 800e334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e344:	7af9      	ldrb	r1, [r7, #11]
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	f7f7 fe18 	bl	8005f7e <HAL_PCD_EP_Transmit>
 800e34e:	4603      	mov	r3, r0
 800e350:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e352:	7dfb      	ldrb	r3, [r7, #23]
 800e354:	4618      	mov	r0, r3
 800e356:	f000 f847 	bl	800e3e8 <USBD_Get_USB_Status>
 800e35a:	4603      	mov	r3, r0
 800e35c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e35e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	607a      	str	r2, [r7, #4]
 800e372:	603b      	str	r3, [r7, #0]
 800e374:	460b      	mov	r3, r1
 800e376:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e378:	2300      	movs	r3, #0
 800e37a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e37c:	2300      	movs	r3, #0
 800e37e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e386:	7af9      	ldrb	r1, [r7, #11]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	f7f7 fdc6 	bl	8005f1c <HAL_PCD_EP_Receive>
 800e390:	4603      	mov	r3, r0
 800e392:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e394:	7dfb      	ldrb	r3, [r7, #23]
 800e396:	4618      	mov	r0, r3
 800e398:	f000 f826 	bl	800e3e8 <USBD_Get_USB_Status>
 800e39c:	4603      	mov	r3, r0
 800e39e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
	...

0800e3ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e3b4:	4b03      	ldr	r3, [pc, #12]	@ (800e3c4 <USBD_static_malloc+0x18>)
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	20001b38 	.word	0x20001b38

0800e3c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]

}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e3e0:	f7f3 f970 	bl	80016c4 <SystemClock_Config>
}
 800e3e4:	bf00      	nop
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3f6:	79fb      	ldrb	r3, [r7, #7]
 800e3f8:	2b03      	cmp	r3, #3
 800e3fa:	d817      	bhi.n	800e42c <USBD_Get_USB_Status+0x44>
 800e3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e404 <USBD_Get_USB_Status+0x1c>)
 800e3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e402:	bf00      	nop
 800e404:	0800e415 	.word	0x0800e415
 800e408:	0800e41b 	.word	0x0800e41b
 800e40c:	0800e421 	.word	0x0800e421
 800e410:	0800e427 	.word	0x0800e427
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	73fb      	strb	r3, [r7, #15]
    break;
 800e418:	e00b      	b.n	800e432 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e41a:	2303      	movs	r3, #3
 800e41c:	73fb      	strb	r3, [r7, #15]
    break;
 800e41e:	e008      	b.n	800e432 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e420:	2301      	movs	r3, #1
 800e422:	73fb      	strb	r3, [r7, #15]
    break;
 800e424:	e005      	b.n	800e432 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e426:	2303      	movs	r3, #3
 800e428:	73fb      	strb	r3, [r7, #15]
    break;
 800e42a:	e002      	b.n	800e432 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e42c:	2303      	movs	r3, #3
 800e42e:	73fb      	strb	r3, [r7, #15]
    break;
 800e430:	bf00      	nop
  }
  return usb_status;
 800e432:	7bfb      	ldrb	r3, [r7, #15]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <rand>:
 800e440:	4b16      	ldr	r3, [pc, #88]	@ (800e49c <rand+0x5c>)
 800e442:	b510      	push	{r4, lr}
 800e444:	681c      	ldr	r4, [r3, #0]
 800e446:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e448:	b9b3      	cbnz	r3, 800e478 <rand+0x38>
 800e44a:	2018      	movs	r0, #24
 800e44c:	f000 fa2e 	bl	800e8ac <malloc>
 800e450:	4602      	mov	r2, r0
 800e452:	6320      	str	r0, [r4, #48]	@ 0x30
 800e454:	b920      	cbnz	r0, 800e460 <rand+0x20>
 800e456:	4b12      	ldr	r3, [pc, #72]	@ (800e4a0 <rand+0x60>)
 800e458:	4812      	ldr	r0, [pc, #72]	@ (800e4a4 <rand+0x64>)
 800e45a:	2152      	movs	r1, #82	@ 0x52
 800e45c:	f000 f9be 	bl	800e7dc <__assert_func>
 800e460:	4911      	ldr	r1, [pc, #68]	@ (800e4a8 <rand+0x68>)
 800e462:	4b12      	ldr	r3, [pc, #72]	@ (800e4ac <rand+0x6c>)
 800e464:	e9c0 1300 	strd	r1, r3, [r0]
 800e468:	4b11      	ldr	r3, [pc, #68]	@ (800e4b0 <rand+0x70>)
 800e46a:	6083      	str	r3, [r0, #8]
 800e46c:	230b      	movs	r3, #11
 800e46e:	8183      	strh	r3, [r0, #12]
 800e470:	2100      	movs	r1, #0
 800e472:	2001      	movs	r0, #1
 800e474:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e478:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e47a:	480e      	ldr	r0, [pc, #56]	@ (800e4b4 <rand+0x74>)
 800e47c:	690b      	ldr	r3, [r1, #16]
 800e47e:	694c      	ldr	r4, [r1, #20]
 800e480:	4a0d      	ldr	r2, [pc, #52]	@ (800e4b8 <rand+0x78>)
 800e482:	4358      	muls	r0, r3
 800e484:	fb02 0004 	mla	r0, r2, r4, r0
 800e488:	fba3 3202 	umull	r3, r2, r3, r2
 800e48c:	3301      	adds	r3, #1
 800e48e:	eb40 0002 	adc.w	r0, r0, r2
 800e492:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e496:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e49a:	bd10      	pop	{r4, pc}
 800e49c:	20000174 	.word	0x20000174
 800e4a0:	0800f4c4 	.word	0x0800f4c4
 800e4a4:	0800f4db 	.word	0x0800f4db
 800e4a8:	abcd330e 	.word	0xabcd330e
 800e4ac:	e66d1234 	.word	0xe66d1234
 800e4b0:	0005deec 	.word	0x0005deec
 800e4b4:	5851f42d 	.word	0x5851f42d
 800e4b8:	4c957f2d 	.word	0x4c957f2d

0800e4bc <std>:
 800e4bc:	2300      	movs	r3, #0
 800e4be:	b510      	push	{r4, lr}
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800e4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ca:	6083      	str	r3, [r0, #8]
 800e4cc:	8181      	strh	r1, [r0, #12]
 800e4ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800e4d0:	81c2      	strh	r2, [r0, #14]
 800e4d2:	6183      	str	r3, [r0, #24]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	2208      	movs	r2, #8
 800e4d8:	305c      	adds	r0, #92	@ 0x5c
 800e4da:	f000 f8f4 	bl	800e6c6 <memset>
 800e4de:	4b0d      	ldr	r3, [pc, #52]	@ (800e514 <std+0x58>)
 800e4e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e518 <std+0x5c>)
 800e4e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e51c <std+0x60>)
 800e4e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e4ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e520 <std+0x64>)
 800e4ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800e4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e524 <std+0x68>)
 800e4f0:	6224      	str	r4, [r4, #32]
 800e4f2:	429c      	cmp	r4, r3
 800e4f4:	d006      	beq.n	800e504 <std+0x48>
 800e4f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e4fa:	4294      	cmp	r4, r2
 800e4fc:	d002      	beq.n	800e504 <std+0x48>
 800e4fe:	33d0      	adds	r3, #208	@ 0xd0
 800e500:	429c      	cmp	r4, r3
 800e502:	d105      	bne.n	800e510 <std+0x54>
 800e504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e50c:	f000 b954 	b.w	800e7b8 <__retarget_lock_init_recursive>
 800e510:	bd10      	pop	{r4, pc}
 800e512:	bf00      	nop
 800e514:	0800e641 	.word	0x0800e641
 800e518:	0800e663 	.word	0x0800e663
 800e51c:	0800e69b 	.word	0x0800e69b
 800e520:	0800e6bf 	.word	0x0800e6bf
 800e524:	20001b4c 	.word	0x20001b4c

0800e528 <stdio_exit_handler>:
 800e528:	4a02      	ldr	r2, [pc, #8]	@ (800e534 <stdio_exit_handler+0xc>)
 800e52a:	4903      	ldr	r1, [pc, #12]	@ (800e538 <stdio_exit_handler+0x10>)
 800e52c:	4803      	ldr	r0, [pc, #12]	@ (800e53c <stdio_exit_handler+0x14>)
 800e52e:	f000 b869 	b.w	800e604 <_fwalk_sglue>
 800e532:	bf00      	nop
 800e534:	20000168 	.word	0x20000168
 800e538:	0800ee39 	.word	0x0800ee39
 800e53c:	20000178 	.word	0x20000178

0800e540 <cleanup_stdio>:
 800e540:	6841      	ldr	r1, [r0, #4]
 800e542:	4b0c      	ldr	r3, [pc, #48]	@ (800e574 <cleanup_stdio+0x34>)
 800e544:	4299      	cmp	r1, r3
 800e546:	b510      	push	{r4, lr}
 800e548:	4604      	mov	r4, r0
 800e54a:	d001      	beq.n	800e550 <cleanup_stdio+0x10>
 800e54c:	f000 fc74 	bl	800ee38 <_fflush_r>
 800e550:	68a1      	ldr	r1, [r4, #8]
 800e552:	4b09      	ldr	r3, [pc, #36]	@ (800e578 <cleanup_stdio+0x38>)
 800e554:	4299      	cmp	r1, r3
 800e556:	d002      	beq.n	800e55e <cleanup_stdio+0x1e>
 800e558:	4620      	mov	r0, r4
 800e55a:	f000 fc6d 	bl	800ee38 <_fflush_r>
 800e55e:	68e1      	ldr	r1, [r4, #12]
 800e560:	4b06      	ldr	r3, [pc, #24]	@ (800e57c <cleanup_stdio+0x3c>)
 800e562:	4299      	cmp	r1, r3
 800e564:	d004      	beq.n	800e570 <cleanup_stdio+0x30>
 800e566:	4620      	mov	r0, r4
 800e568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e56c:	f000 bc64 	b.w	800ee38 <_fflush_r>
 800e570:	bd10      	pop	{r4, pc}
 800e572:	bf00      	nop
 800e574:	20001b4c 	.word	0x20001b4c
 800e578:	20001bb4 	.word	0x20001bb4
 800e57c:	20001c1c 	.word	0x20001c1c

0800e580 <global_stdio_init.part.0>:
 800e580:	b510      	push	{r4, lr}
 800e582:	4b0b      	ldr	r3, [pc, #44]	@ (800e5b0 <global_stdio_init.part.0+0x30>)
 800e584:	4c0b      	ldr	r4, [pc, #44]	@ (800e5b4 <global_stdio_init.part.0+0x34>)
 800e586:	4a0c      	ldr	r2, [pc, #48]	@ (800e5b8 <global_stdio_init.part.0+0x38>)
 800e588:	601a      	str	r2, [r3, #0]
 800e58a:	4620      	mov	r0, r4
 800e58c:	2200      	movs	r2, #0
 800e58e:	2104      	movs	r1, #4
 800e590:	f7ff ff94 	bl	800e4bc <std>
 800e594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e598:	2201      	movs	r2, #1
 800e59a:	2109      	movs	r1, #9
 800e59c:	f7ff ff8e 	bl	800e4bc <std>
 800e5a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5aa:	2112      	movs	r1, #18
 800e5ac:	f7ff bf86 	b.w	800e4bc <std>
 800e5b0:	20001c84 	.word	0x20001c84
 800e5b4:	20001b4c 	.word	0x20001b4c
 800e5b8:	0800e529 	.word	0x0800e529

0800e5bc <__sfp_lock_acquire>:
 800e5bc:	4801      	ldr	r0, [pc, #4]	@ (800e5c4 <__sfp_lock_acquire+0x8>)
 800e5be:	f000 b8fc 	b.w	800e7ba <__retarget_lock_acquire_recursive>
 800e5c2:	bf00      	nop
 800e5c4:	20001c8d 	.word	0x20001c8d

0800e5c8 <__sfp_lock_release>:
 800e5c8:	4801      	ldr	r0, [pc, #4]	@ (800e5d0 <__sfp_lock_release+0x8>)
 800e5ca:	f000 b8f7 	b.w	800e7bc <__retarget_lock_release_recursive>
 800e5ce:	bf00      	nop
 800e5d0:	20001c8d 	.word	0x20001c8d

0800e5d4 <__sinit>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	f7ff fff0 	bl	800e5bc <__sfp_lock_acquire>
 800e5dc:	6a23      	ldr	r3, [r4, #32]
 800e5de:	b11b      	cbz	r3, 800e5e8 <__sinit+0x14>
 800e5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5e4:	f7ff bff0 	b.w	800e5c8 <__sfp_lock_release>
 800e5e8:	4b04      	ldr	r3, [pc, #16]	@ (800e5fc <__sinit+0x28>)
 800e5ea:	6223      	str	r3, [r4, #32]
 800e5ec:	4b04      	ldr	r3, [pc, #16]	@ (800e600 <__sinit+0x2c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1f5      	bne.n	800e5e0 <__sinit+0xc>
 800e5f4:	f7ff ffc4 	bl	800e580 <global_stdio_init.part.0>
 800e5f8:	e7f2      	b.n	800e5e0 <__sinit+0xc>
 800e5fa:	bf00      	nop
 800e5fc:	0800e541 	.word	0x0800e541
 800e600:	20001c84 	.word	0x20001c84

0800e604 <_fwalk_sglue>:
 800e604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e608:	4607      	mov	r7, r0
 800e60a:	4688      	mov	r8, r1
 800e60c:	4614      	mov	r4, r2
 800e60e:	2600      	movs	r6, #0
 800e610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e614:	f1b9 0901 	subs.w	r9, r9, #1
 800e618:	d505      	bpl.n	800e626 <_fwalk_sglue+0x22>
 800e61a:	6824      	ldr	r4, [r4, #0]
 800e61c:	2c00      	cmp	r4, #0
 800e61e:	d1f7      	bne.n	800e610 <_fwalk_sglue+0xc>
 800e620:	4630      	mov	r0, r6
 800e622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e626:	89ab      	ldrh	r3, [r5, #12]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d907      	bls.n	800e63c <_fwalk_sglue+0x38>
 800e62c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e630:	3301      	adds	r3, #1
 800e632:	d003      	beq.n	800e63c <_fwalk_sglue+0x38>
 800e634:	4629      	mov	r1, r5
 800e636:	4638      	mov	r0, r7
 800e638:	47c0      	blx	r8
 800e63a:	4306      	orrs	r6, r0
 800e63c:	3568      	adds	r5, #104	@ 0x68
 800e63e:	e7e9      	b.n	800e614 <_fwalk_sglue+0x10>

0800e640 <__sread>:
 800e640:	b510      	push	{r4, lr}
 800e642:	460c      	mov	r4, r1
 800e644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e648:	f000 f868 	bl	800e71c <_read_r>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	bfab      	itete	ge
 800e650:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e652:	89a3      	ldrhlt	r3, [r4, #12]
 800e654:	181b      	addge	r3, r3, r0
 800e656:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e65a:	bfac      	ite	ge
 800e65c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e65e:	81a3      	strhlt	r3, [r4, #12]
 800e660:	bd10      	pop	{r4, pc}

0800e662 <__swrite>:
 800e662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e666:	461f      	mov	r7, r3
 800e668:	898b      	ldrh	r3, [r1, #12]
 800e66a:	05db      	lsls	r3, r3, #23
 800e66c:	4605      	mov	r5, r0
 800e66e:	460c      	mov	r4, r1
 800e670:	4616      	mov	r6, r2
 800e672:	d505      	bpl.n	800e680 <__swrite+0x1e>
 800e674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e678:	2302      	movs	r3, #2
 800e67a:	2200      	movs	r2, #0
 800e67c:	f000 f83c 	bl	800e6f8 <_lseek_r>
 800e680:	89a3      	ldrh	r3, [r4, #12]
 800e682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e686:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e68a:	81a3      	strh	r3, [r4, #12]
 800e68c:	4632      	mov	r2, r6
 800e68e:	463b      	mov	r3, r7
 800e690:	4628      	mov	r0, r5
 800e692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e696:	f000 b853 	b.w	800e740 <_write_r>

0800e69a <__sseek>:
 800e69a:	b510      	push	{r4, lr}
 800e69c:	460c      	mov	r4, r1
 800e69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6a2:	f000 f829 	bl	800e6f8 <_lseek_r>
 800e6a6:	1c43      	adds	r3, r0, #1
 800e6a8:	89a3      	ldrh	r3, [r4, #12]
 800e6aa:	bf15      	itete	ne
 800e6ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e6ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e6b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e6b6:	81a3      	strheq	r3, [r4, #12]
 800e6b8:	bf18      	it	ne
 800e6ba:	81a3      	strhne	r3, [r4, #12]
 800e6bc:	bd10      	pop	{r4, pc}

0800e6be <__sclose>:
 800e6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c2:	f000 b809 	b.w	800e6d8 <_close_r>

0800e6c6 <memset>:
 800e6c6:	4402      	add	r2, r0
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d100      	bne.n	800e6d0 <memset+0xa>
 800e6ce:	4770      	bx	lr
 800e6d0:	f803 1b01 	strb.w	r1, [r3], #1
 800e6d4:	e7f9      	b.n	800e6ca <memset+0x4>
	...

0800e6d8 <_close_r>:
 800e6d8:	b538      	push	{r3, r4, r5, lr}
 800e6da:	4d06      	ldr	r5, [pc, #24]	@ (800e6f4 <_close_r+0x1c>)
 800e6dc:	2300      	movs	r3, #0
 800e6de:	4604      	mov	r4, r0
 800e6e0:	4608      	mov	r0, r1
 800e6e2:	602b      	str	r3, [r5, #0]
 800e6e4:	f7f3 fe66 	bl	80023b4 <_close>
 800e6e8:	1c43      	adds	r3, r0, #1
 800e6ea:	d102      	bne.n	800e6f2 <_close_r+0x1a>
 800e6ec:	682b      	ldr	r3, [r5, #0]
 800e6ee:	b103      	cbz	r3, 800e6f2 <_close_r+0x1a>
 800e6f0:	6023      	str	r3, [r4, #0]
 800e6f2:	bd38      	pop	{r3, r4, r5, pc}
 800e6f4:	20001c88 	.word	0x20001c88

0800e6f8 <_lseek_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d07      	ldr	r5, [pc, #28]	@ (800e718 <_lseek_r+0x20>)
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	4608      	mov	r0, r1
 800e700:	4611      	mov	r1, r2
 800e702:	2200      	movs	r2, #0
 800e704:	602a      	str	r2, [r5, #0]
 800e706:	461a      	mov	r2, r3
 800e708:	f7f3 fe7b 	bl	8002402 <_lseek>
 800e70c:	1c43      	adds	r3, r0, #1
 800e70e:	d102      	bne.n	800e716 <_lseek_r+0x1e>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	b103      	cbz	r3, 800e716 <_lseek_r+0x1e>
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	20001c88 	.word	0x20001c88

0800e71c <_read_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	4d07      	ldr	r5, [pc, #28]	@ (800e73c <_read_r+0x20>)
 800e720:	4604      	mov	r4, r0
 800e722:	4608      	mov	r0, r1
 800e724:	4611      	mov	r1, r2
 800e726:	2200      	movs	r2, #0
 800e728:	602a      	str	r2, [r5, #0]
 800e72a:	461a      	mov	r2, r3
 800e72c:	f7f3 fe09 	bl	8002342 <_read>
 800e730:	1c43      	adds	r3, r0, #1
 800e732:	d102      	bne.n	800e73a <_read_r+0x1e>
 800e734:	682b      	ldr	r3, [r5, #0]
 800e736:	b103      	cbz	r3, 800e73a <_read_r+0x1e>
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	bd38      	pop	{r3, r4, r5, pc}
 800e73c:	20001c88 	.word	0x20001c88

0800e740 <_write_r>:
 800e740:	b538      	push	{r3, r4, r5, lr}
 800e742:	4d07      	ldr	r5, [pc, #28]	@ (800e760 <_write_r+0x20>)
 800e744:	4604      	mov	r4, r0
 800e746:	4608      	mov	r0, r1
 800e748:	4611      	mov	r1, r2
 800e74a:	2200      	movs	r2, #0
 800e74c:	602a      	str	r2, [r5, #0]
 800e74e:	461a      	mov	r2, r3
 800e750:	f7f3 fe14 	bl	800237c <_write>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d102      	bne.n	800e75e <_write_r+0x1e>
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	b103      	cbz	r3, 800e75e <_write_r+0x1e>
 800e75c:	6023      	str	r3, [r4, #0]
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	20001c88 	.word	0x20001c88

0800e764 <__errno>:
 800e764:	4b01      	ldr	r3, [pc, #4]	@ (800e76c <__errno+0x8>)
 800e766:	6818      	ldr	r0, [r3, #0]
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	20000174 	.word	0x20000174

0800e770 <__libc_init_array>:
 800e770:	b570      	push	{r4, r5, r6, lr}
 800e772:	4d0d      	ldr	r5, [pc, #52]	@ (800e7a8 <__libc_init_array+0x38>)
 800e774:	4c0d      	ldr	r4, [pc, #52]	@ (800e7ac <__libc_init_array+0x3c>)
 800e776:	1b64      	subs	r4, r4, r5
 800e778:	10a4      	asrs	r4, r4, #2
 800e77a:	2600      	movs	r6, #0
 800e77c:	42a6      	cmp	r6, r4
 800e77e:	d109      	bne.n	800e794 <__libc_init_array+0x24>
 800e780:	4d0b      	ldr	r5, [pc, #44]	@ (800e7b0 <__libc_init_array+0x40>)
 800e782:	4c0c      	ldr	r4, [pc, #48]	@ (800e7b4 <__libc_init_array+0x44>)
 800e784:	f000 fe46 	bl	800f414 <_init>
 800e788:	1b64      	subs	r4, r4, r5
 800e78a:	10a4      	asrs	r4, r4, #2
 800e78c:	2600      	movs	r6, #0
 800e78e:	42a6      	cmp	r6, r4
 800e790:	d105      	bne.n	800e79e <__libc_init_array+0x2e>
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	f855 3b04 	ldr.w	r3, [r5], #4
 800e798:	4798      	blx	r3
 800e79a:	3601      	adds	r6, #1
 800e79c:	e7ee      	b.n	800e77c <__libc_init_array+0xc>
 800e79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7a2:	4798      	blx	r3
 800e7a4:	3601      	adds	r6, #1
 800e7a6:	e7f2      	b.n	800e78e <__libc_init_array+0x1e>
 800e7a8:	0800f5ac 	.word	0x0800f5ac
 800e7ac:	0800f5ac 	.word	0x0800f5ac
 800e7b0:	0800f5ac 	.word	0x0800f5ac
 800e7b4:	0800f5b0 	.word	0x0800f5b0

0800e7b8 <__retarget_lock_init_recursive>:
 800e7b8:	4770      	bx	lr

0800e7ba <__retarget_lock_acquire_recursive>:
 800e7ba:	4770      	bx	lr

0800e7bc <__retarget_lock_release_recursive>:
 800e7bc:	4770      	bx	lr

0800e7be <memcpy>:
 800e7be:	440a      	add	r2, r1
 800e7c0:	4291      	cmp	r1, r2
 800e7c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7c6:	d100      	bne.n	800e7ca <memcpy+0xc>
 800e7c8:	4770      	bx	lr
 800e7ca:	b510      	push	{r4, lr}
 800e7cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7d4:	4291      	cmp	r1, r2
 800e7d6:	d1f9      	bne.n	800e7cc <memcpy+0xe>
 800e7d8:	bd10      	pop	{r4, pc}
	...

0800e7dc <__assert_func>:
 800e7dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7de:	4614      	mov	r4, r2
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	4b09      	ldr	r3, [pc, #36]	@ (800e808 <__assert_func+0x2c>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	68d8      	ldr	r0, [r3, #12]
 800e7ea:	b14c      	cbz	r4, 800e800 <__assert_func+0x24>
 800e7ec:	4b07      	ldr	r3, [pc, #28]	@ (800e80c <__assert_func+0x30>)
 800e7ee:	9100      	str	r1, [sp, #0]
 800e7f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7f4:	4906      	ldr	r1, [pc, #24]	@ (800e810 <__assert_func+0x34>)
 800e7f6:	462b      	mov	r3, r5
 800e7f8:	f000 fb46 	bl	800ee88 <fiprintf>
 800e7fc:	f000 fb66 	bl	800eecc <abort>
 800e800:	4b04      	ldr	r3, [pc, #16]	@ (800e814 <__assert_func+0x38>)
 800e802:	461c      	mov	r4, r3
 800e804:	e7f3      	b.n	800e7ee <__assert_func+0x12>
 800e806:	bf00      	nop
 800e808:	20000174 	.word	0x20000174
 800e80c:	0800f533 	.word	0x0800f533
 800e810:	0800f540 	.word	0x0800f540
 800e814:	0800f56e 	.word	0x0800f56e

0800e818 <_free_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4605      	mov	r5, r0
 800e81c:	2900      	cmp	r1, #0
 800e81e:	d041      	beq.n	800e8a4 <_free_r+0x8c>
 800e820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e824:	1f0c      	subs	r4, r1, #4
 800e826:	2b00      	cmp	r3, #0
 800e828:	bfb8      	it	lt
 800e82a:	18e4      	addlt	r4, r4, r3
 800e82c:	f000 f8e8 	bl	800ea00 <__malloc_lock>
 800e830:	4a1d      	ldr	r2, [pc, #116]	@ (800e8a8 <_free_r+0x90>)
 800e832:	6813      	ldr	r3, [r2, #0]
 800e834:	b933      	cbnz	r3, 800e844 <_free_r+0x2c>
 800e836:	6063      	str	r3, [r4, #4]
 800e838:	6014      	str	r4, [r2, #0]
 800e83a:	4628      	mov	r0, r5
 800e83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e840:	f000 b8e4 	b.w	800ea0c <__malloc_unlock>
 800e844:	42a3      	cmp	r3, r4
 800e846:	d908      	bls.n	800e85a <_free_r+0x42>
 800e848:	6820      	ldr	r0, [r4, #0]
 800e84a:	1821      	adds	r1, r4, r0
 800e84c:	428b      	cmp	r3, r1
 800e84e:	bf01      	itttt	eq
 800e850:	6819      	ldreq	r1, [r3, #0]
 800e852:	685b      	ldreq	r3, [r3, #4]
 800e854:	1809      	addeq	r1, r1, r0
 800e856:	6021      	streq	r1, [r4, #0]
 800e858:	e7ed      	b.n	800e836 <_free_r+0x1e>
 800e85a:	461a      	mov	r2, r3
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	b10b      	cbz	r3, 800e864 <_free_r+0x4c>
 800e860:	42a3      	cmp	r3, r4
 800e862:	d9fa      	bls.n	800e85a <_free_r+0x42>
 800e864:	6811      	ldr	r1, [r2, #0]
 800e866:	1850      	adds	r0, r2, r1
 800e868:	42a0      	cmp	r0, r4
 800e86a:	d10b      	bne.n	800e884 <_free_r+0x6c>
 800e86c:	6820      	ldr	r0, [r4, #0]
 800e86e:	4401      	add	r1, r0
 800e870:	1850      	adds	r0, r2, r1
 800e872:	4283      	cmp	r3, r0
 800e874:	6011      	str	r1, [r2, #0]
 800e876:	d1e0      	bne.n	800e83a <_free_r+0x22>
 800e878:	6818      	ldr	r0, [r3, #0]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	6053      	str	r3, [r2, #4]
 800e87e:	4408      	add	r0, r1
 800e880:	6010      	str	r0, [r2, #0]
 800e882:	e7da      	b.n	800e83a <_free_r+0x22>
 800e884:	d902      	bls.n	800e88c <_free_r+0x74>
 800e886:	230c      	movs	r3, #12
 800e888:	602b      	str	r3, [r5, #0]
 800e88a:	e7d6      	b.n	800e83a <_free_r+0x22>
 800e88c:	6820      	ldr	r0, [r4, #0]
 800e88e:	1821      	adds	r1, r4, r0
 800e890:	428b      	cmp	r3, r1
 800e892:	bf04      	itt	eq
 800e894:	6819      	ldreq	r1, [r3, #0]
 800e896:	685b      	ldreq	r3, [r3, #4]
 800e898:	6063      	str	r3, [r4, #4]
 800e89a:	bf04      	itt	eq
 800e89c:	1809      	addeq	r1, r1, r0
 800e89e:	6021      	streq	r1, [r4, #0]
 800e8a0:	6054      	str	r4, [r2, #4]
 800e8a2:	e7ca      	b.n	800e83a <_free_r+0x22>
 800e8a4:	bd38      	pop	{r3, r4, r5, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20001c94 	.word	0x20001c94

0800e8ac <malloc>:
 800e8ac:	4b02      	ldr	r3, [pc, #8]	@ (800e8b8 <malloc+0xc>)
 800e8ae:	4601      	mov	r1, r0
 800e8b0:	6818      	ldr	r0, [r3, #0]
 800e8b2:	f000 b825 	b.w	800e900 <_malloc_r>
 800e8b6:	bf00      	nop
 800e8b8:	20000174 	.word	0x20000174

0800e8bc <sbrk_aligned>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	4e0f      	ldr	r6, [pc, #60]	@ (800e8fc <sbrk_aligned+0x40>)
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	6831      	ldr	r1, [r6, #0]
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	b911      	cbnz	r1, 800e8ce <sbrk_aligned+0x12>
 800e8c8:	f000 faf0 	bl	800eeac <_sbrk_r>
 800e8cc:	6030      	str	r0, [r6, #0]
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	f000 faeb 	bl	800eeac <_sbrk_r>
 800e8d6:	1c43      	adds	r3, r0, #1
 800e8d8:	d103      	bne.n	800e8e2 <sbrk_aligned+0x26>
 800e8da:	f04f 34ff 	mov.w	r4, #4294967295
 800e8de:	4620      	mov	r0, r4
 800e8e0:	bd70      	pop	{r4, r5, r6, pc}
 800e8e2:	1cc4      	adds	r4, r0, #3
 800e8e4:	f024 0403 	bic.w	r4, r4, #3
 800e8e8:	42a0      	cmp	r0, r4
 800e8ea:	d0f8      	beq.n	800e8de <sbrk_aligned+0x22>
 800e8ec:	1a21      	subs	r1, r4, r0
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	f000 fadc 	bl	800eeac <_sbrk_r>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d1f2      	bne.n	800e8de <sbrk_aligned+0x22>
 800e8f8:	e7ef      	b.n	800e8da <sbrk_aligned+0x1e>
 800e8fa:	bf00      	nop
 800e8fc:	20001c90 	.word	0x20001c90

0800e900 <_malloc_r>:
 800e900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e904:	1ccd      	adds	r5, r1, #3
 800e906:	f025 0503 	bic.w	r5, r5, #3
 800e90a:	3508      	adds	r5, #8
 800e90c:	2d0c      	cmp	r5, #12
 800e90e:	bf38      	it	cc
 800e910:	250c      	movcc	r5, #12
 800e912:	2d00      	cmp	r5, #0
 800e914:	4606      	mov	r6, r0
 800e916:	db01      	blt.n	800e91c <_malloc_r+0x1c>
 800e918:	42a9      	cmp	r1, r5
 800e91a:	d904      	bls.n	800e926 <_malloc_r+0x26>
 800e91c:	230c      	movs	r3, #12
 800e91e:	6033      	str	r3, [r6, #0]
 800e920:	2000      	movs	r0, #0
 800e922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e9fc <_malloc_r+0xfc>
 800e92a:	f000 f869 	bl	800ea00 <__malloc_lock>
 800e92e:	f8d8 3000 	ldr.w	r3, [r8]
 800e932:	461c      	mov	r4, r3
 800e934:	bb44      	cbnz	r4, 800e988 <_malloc_r+0x88>
 800e936:	4629      	mov	r1, r5
 800e938:	4630      	mov	r0, r6
 800e93a:	f7ff ffbf 	bl	800e8bc <sbrk_aligned>
 800e93e:	1c43      	adds	r3, r0, #1
 800e940:	4604      	mov	r4, r0
 800e942:	d158      	bne.n	800e9f6 <_malloc_r+0xf6>
 800e944:	f8d8 4000 	ldr.w	r4, [r8]
 800e948:	4627      	mov	r7, r4
 800e94a:	2f00      	cmp	r7, #0
 800e94c:	d143      	bne.n	800e9d6 <_malloc_r+0xd6>
 800e94e:	2c00      	cmp	r4, #0
 800e950:	d04b      	beq.n	800e9ea <_malloc_r+0xea>
 800e952:	6823      	ldr	r3, [r4, #0]
 800e954:	4639      	mov	r1, r7
 800e956:	4630      	mov	r0, r6
 800e958:	eb04 0903 	add.w	r9, r4, r3
 800e95c:	f000 faa6 	bl	800eeac <_sbrk_r>
 800e960:	4581      	cmp	r9, r0
 800e962:	d142      	bne.n	800e9ea <_malloc_r+0xea>
 800e964:	6821      	ldr	r1, [r4, #0]
 800e966:	1a6d      	subs	r5, r5, r1
 800e968:	4629      	mov	r1, r5
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7ff ffa6 	bl	800e8bc <sbrk_aligned>
 800e970:	3001      	adds	r0, #1
 800e972:	d03a      	beq.n	800e9ea <_malloc_r+0xea>
 800e974:	6823      	ldr	r3, [r4, #0]
 800e976:	442b      	add	r3, r5
 800e978:	6023      	str	r3, [r4, #0]
 800e97a:	f8d8 3000 	ldr.w	r3, [r8]
 800e97e:	685a      	ldr	r2, [r3, #4]
 800e980:	bb62      	cbnz	r2, 800e9dc <_malloc_r+0xdc>
 800e982:	f8c8 7000 	str.w	r7, [r8]
 800e986:	e00f      	b.n	800e9a8 <_malloc_r+0xa8>
 800e988:	6822      	ldr	r2, [r4, #0]
 800e98a:	1b52      	subs	r2, r2, r5
 800e98c:	d420      	bmi.n	800e9d0 <_malloc_r+0xd0>
 800e98e:	2a0b      	cmp	r2, #11
 800e990:	d917      	bls.n	800e9c2 <_malloc_r+0xc2>
 800e992:	1961      	adds	r1, r4, r5
 800e994:	42a3      	cmp	r3, r4
 800e996:	6025      	str	r5, [r4, #0]
 800e998:	bf18      	it	ne
 800e99a:	6059      	strne	r1, [r3, #4]
 800e99c:	6863      	ldr	r3, [r4, #4]
 800e99e:	bf08      	it	eq
 800e9a0:	f8c8 1000 	streq.w	r1, [r8]
 800e9a4:	5162      	str	r2, [r4, r5]
 800e9a6:	604b      	str	r3, [r1, #4]
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f000 f82f 	bl	800ea0c <__malloc_unlock>
 800e9ae:	f104 000b 	add.w	r0, r4, #11
 800e9b2:	1d23      	adds	r3, r4, #4
 800e9b4:	f020 0007 	bic.w	r0, r0, #7
 800e9b8:	1ac2      	subs	r2, r0, r3
 800e9ba:	bf1c      	itt	ne
 800e9bc:	1a1b      	subne	r3, r3, r0
 800e9be:	50a3      	strne	r3, [r4, r2]
 800e9c0:	e7af      	b.n	800e922 <_malloc_r+0x22>
 800e9c2:	6862      	ldr	r2, [r4, #4]
 800e9c4:	42a3      	cmp	r3, r4
 800e9c6:	bf0c      	ite	eq
 800e9c8:	f8c8 2000 	streq.w	r2, [r8]
 800e9cc:	605a      	strne	r2, [r3, #4]
 800e9ce:	e7eb      	b.n	800e9a8 <_malloc_r+0xa8>
 800e9d0:	4623      	mov	r3, r4
 800e9d2:	6864      	ldr	r4, [r4, #4]
 800e9d4:	e7ae      	b.n	800e934 <_malloc_r+0x34>
 800e9d6:	463c      	mov	r4, r7
 800e9d8:	687f      	ldr	r7, [r7, #4]
 800e9da:	e7b6      	b.n	800e94a <_malloc_r+0x4a>
 800e9dc:	461a      	mov	r2, r3
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	42a3      	cmp	r3, r4
 800e9e2:	d1fb      	bne.n	800e9dc <_malloc_r+0xdc>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	6053      	str	r3, [r2, #4]
 800e9e8:	e7de      	b.n	800e9a8 <_malloc_r+0xa8>
 800e9ea:	230c      	movs	r3, #12
 800e9ec:	6033      	str	r3, [r6, #0]
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f000 f80c 	bl	800ea0c <__malloc_unlock>
 800e9f4:	e794      	b.n	800e920 <_malloc_r+0x20>
 800e9f6:	6005      	str	r5, [r0, #0]
 800e9f8:	e7d6      	b.n	800e9a8 <_malloc_r+0xa8>
 800e9fa:	bf00      	nop
 800e9fc:	20001c94 	.word	0x20001c94

0800ea00 <__malloc_lock>:
 800ea00:	4801      	ldr	r0, [pc, #4]	@ (800ea08 <__malloc_lock+0x8>)
 800ea02:	f7ff beda 	b.w	800e7ba <__retarget_lock_acquire_recursive>
 800ea06:	bf00      	nop
 800ea08:	20001c8c 	.word	0x20001c8c

0800ea0c <__malloc_unlock>:
 800ea0c:	4801      	ldr	r0, [pc, #4]	@ (800ea14 <__malloc_unlock+0x8>)
 800ea0e:	f7ff bed5 	b.w	800e7bc <__retarget_lock_release_recursive>
 800ea12:	bf00      	nop
 800ea14:	20001c8c 	.word	0x20001c8c

0800ea18 <_printf_common>:
 800ea18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea1c:	4616      	mov	r6, r2
 800ea1e:	4698      	mov	r8, r3
 800ea20:	688a      	ldr	r2, [r1, #8]
 800ea22:	690b      	ldr	r3, [r1, #16]
 800ea24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	bfb8      	it	lt
 800ea2c:	4613      	movlt	r3, r2
 800ea2e:	6033      	str	r3, [r6, #0]
 800ea30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea34:	4607      	mov	r7, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	b10a      	cbz	r2, 800ea3e <_printf_common+0x26>
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	6033      	str	r3, [r6, #0]
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	0699      	lsls	r1, r3, #26
 800ea42:	bf42      	ittt	mi
 800ea44:	6833      	ldrmi	r3, [r6, #0]
 800ea46:	3302      	addmi	r3, #2
 800ea48:	6033      	strmi	r3, [r6, #0]
 800ea4a:	6825      	ldr	r5, [r4, #0]
 800ea4c:	f015 0506 	ands.w	r5, r5, #6
 800ea50:	d106      	bne.n	800ea60 <_printf_common+0x48>
 800ea52:	f104 0a19 	add.w	sl, r4, #25
 800ea56:	68e3      	ldr	r3, [r4, #12]
 800ea58:	6832      	ldr	r2, [r6, #0]
 800ea5a:	1a9b      	subs	r3, r3, r2
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	dc26      	bgt.n	800eaae <_printf_common+0x96>
 800ea60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea64:	6822      	ldr	r2, [r4, #0]
 800ea66:	3b00      	subs	r3, #0
 800ea68:	bf18      	it	ne
 800ea6a:	2301      	movne	r3, #1
 800ea6c:	0692      	lsls	r2, r2, #26
 800ea6e:	d42b      	bmi.n	800eac8 <_printf_common+0xb0>
 800ea70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea74:	4641      	mov	r1, r8
 800ea76:	4638      	mov	r0, r7
 800ea78:	47c8      	blx	r9
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	d01e      	beq.n	800eabc <_printf_common+0xa4>
 800ea7e:	6823      	ldr	r3, [r4, #0]
 800ea80:	6922      	ldr	r2, [r4, #16]
 800ea82:	f003 0306 	and.w	r3, r3, #6
 800ea86:	2b04      	cmp	r3, #4
 800ea88:	bf02      	ittt	eq
 800ea8a:	68e5      	ldreq	r5, [r4, #12]
 800ea8c:	6833      	ldreq	r3, [r6, #0]
 800ea8e:	1aed      	subeq	r5, r5, r3
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	bf0c      	ite	eq
 800ea94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea98:	2500      	movne	r5, #0
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	bfc4      	itt	gt
 800ea9e:	1a9b      	subgt	r3, r3, r2
 800eaa0:	18ed      	addgt	r5, r5, r3
 800eaa2:	2600      	movs	r6, #0
 800eaa4:	341a      	adds	r4, #26
 800eaa6:	42b5      	cmp	r5, r6
 800eaa8:	d11a      	bne.n	800eae0 <_printf_common+0xc8>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e008      	b.n	800eac0 <_printf_common+0xa8>
 800eaae:	2301      	movs	r3, #1
 800eab0:	4652      	mov	r2, sl
 800eab2:	4641      	mov	r1, r8
 800eab4:	4638      	mov	r0, r7
 800eab6:	47c8      	blx	r9
 800eab8:	3001      	adds	r0, #1
 800eaba:	d103      	bne.n	800eac4 <_printf_common+0xac>
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295
 800eac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac4:	3501      	adds	r5, #1
 800eac6:	e7c6      	b.n	800ea56 <_printf_common+0x3e>
 800eac8:	18e1      	adds	r1, r4, r3
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	2030      	movs	r0, #48	@ 0x30
 800eace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ead2:	4422      	add	r2, r4
 800ead4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ead8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eadc:	3302      	adds	r3, #2
 800eade:	e7c7      	b.n	800ea70 <_printf_common+0x58>
 800eae0:	2301      	movs	r3, #1
 800eae2:	4622      	mov	r2, r4
 800eae4:	4641      	mov	r1, r8
 800eae6:	4638      	mov	r0, r7
 800eae8:	47c8      	blx	r9
 800eaea:	3001      	adds	r0, #1
 800eaec:	d0e6      	beq.n	800eabc <_printf_common+0xa4>
 800eaee:	3601      	adds	r6, #1
 800eaf0:	e7d9      	b.n	800eaa6 <_printf_common+0x8e>
	...

0800eaf4 <_printf_i>:
 800eaf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf8:	7e0f      	ldrb	r7, [r1, #24]
 800eafa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eafc:	2f78      	cmp	r7, #120	@ 0x78
 800eafe:	4691      	mov	r9, r2
 800eb00:	4680      	mov	r8, r0
 800eb02:	460c      	mov	r4, r1
 800eb04:	469a      	mov	sl, r3
 800eb06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb0a:	d807      	bhi.n	800eb1c <_printf_i+0x28>
 800eb0c:	2f62      	cmp	r7, #98	@ 0x62
 800eb0e:	d80a      	bhi.n	800eb26 <_printf_i+0x32>
 800eb10:	2f00      	cmp	r7, #0
 800eb12:	f000 80d1 	beq.w	800ecb8 <_printf_i+0x1c4>
 800eb16:	2f58      	cmp	r7, #88	@ 0x58
 800eb18:	f000 80b8 	beq.w	800ec8c <_printf_i+0x198>
 800eb1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb24:	e03a      	b.n	800eb9c <_printf_i+0xa8>
 800eb26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb2a:	2b15      	cmp	r3, #21
 800eb2c:	d8f6      	bhi.n	800eb1c <_printf_i+0x28>
 800eb2e:	a101      	add	r1, pc, #4	@ (adr r1, 800eb34 <_printf_i+0x40>)
 800eb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb34:	0800eb8d 	.word	0x0800eb8d
 800eb38:	0800eba1 	.word	0x0800eba1
 800eb3c:	0800eb1d 	.word	0x0800eb1d
 800eb40:	0800eb1d 	.word	0x0800eb1d
 800eb44:	0800eb1d 	.word	0x0800eb1d
 800eb48:	0800eb1d 	.word	0x0800eb1d
 800eb4c:	0800eba1 	.word	0x0800eba1
 800eb50:	0800eb1d 	.word	0x0800eb1d
 800eb54:	0800eb1d 	.word	0x0800eb1d
 800eb58:	0800eb1d 	.word	0x0800eb1d
 800eb5c:	0800eb1d 	.word	0x0800eb1d
 800eb60:	0800ec9f 	.word	0x0800ec9f
 800eb64:	0800ebcb 	.word	0x0800ebcb
 800eb68:	0800ec59 	.word	0x0800ec59
 800eb6c:	0800eb1d 	.word	0x0800eb1d
 800eb70:	0800eb1d 	.word	0x0800eb1d
 800eb74:	0800ecc1 	.word	0x0800ecc1
 800eb78:	0800eb1d 	.word	0x0800eb1d
 800eb7c:	0800ebcb 	.word	0x0800ebcb
 800eb80:	0800eb1d 	.word	0x0800eb1d
 800eb84:	0800eb1d 	.word	0x0800eb1d
 800eb88:	0800ec61 	.word	0x0800ec61
 800eb8c:	6833      	ldr	r3, [r6, #0]
 800eb8e:	1d1a      	adds	r2, r3, #4
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6032      	str	r2, [r6, #0]
 800eb94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e09c      	b.n	800ecda <_printf_i+0x1e6>
 800eba0:	6833      	ldr	r3, [r6, #0]
 800eba2:	6820      	ldr	r0, [r4, #0]
 800eba4:	1d19      	adds	r1, r3, #4
 800eba6:	6031      	str	r1, [r6, #0]
 800eba8:	0606      	lsls	r6, r0, #24
 800ebaa:	d501      	bpl.n	800ebb0 <_printf_i+0xbc>
 800ebac:	681d      	ldr	r5, [r3, #0]
 800ebae:	e003      	b.n	800ebb8 <_printf_i+0xc4>
 800ebb0:	0645      	lsls	r5, r0, #25
 800ebb2:	d5fb      	bpl.n	800ebac <_printf_i+0xb8>
 800ebb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebb8:	2d00      	cmp	r5, #0
 800ebba:	da03      	bge.n	800ebc4 <_printf_i+0xd0>
 800ebbc:	232d      	movs	r3, #45	@ 0x2d
 800ebbe:	426d      	negs	r5, r5
 800ebc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebc4:	4858      	ldr	r0, [pc, #352]	@ (800ed28 <_printf_i+0x234>)
 800ebc6:	230a      	movs	r3, #10
 800ebc8:	e011      	b.n	800ebee <_printf_i+0xfa>
 800ebca:	6821      	ldr	r1, [r4, #0]
 800ebcc:	6833      	ldr	r3, [r6, #0]
 800ebce:	0608      	lsls	r0, r1, #24
 800ebd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebd4:	d402      	bmi.n	800ebdc <_printf_i+0xe8>
 800ebd6:	0649      	lsls	r1, r1, #25
 800ebd8:	bf48      	it	mi
 800ebda:	b2ad      	uxthmi	r5, r5
 800ebdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebde:	4852      	ldr	r0, [pc, #328]	@ (800ed28 <_printf_i+0x234>)
 800ebe0:	6033      	str	r3, [r6, #0]
 800ebe2:	bf14      	ite	ne
 800ebe4:	230a      	movne	r3, #10
 800ebe6:	2308      	moveq	r3, #8
 800ebe8:	2100      	movs	r1, #0
 800ebea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebee:	6866      	ldr	r6, [r4, #4]
 800ebf0:	60a6      	str	r6, [r4, #8]
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	db05      	blt.n	800ec02 <_printf_i+0x10e>
 800ebf6:	6821      	ldr	r1, [r4, #0]
 800ebf8:	432e      	orrs	r6, r5
 800ebfa:	f021 0104 	bic.w	r1, r1, #4
 800ebfe:	6021      	str	r1, [r4, #0]
 800ec00:	d04b      	beq.n	800ec9a <_printf_i+0x1a6>
 800ec02:	4616      	mov	r6, r2
 800ec04:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec08:	fb03 5711 	mls	r7, r3, r1, r5
 800ec0c:	5dc7      	ldrb	r7, [r0, r7]
 800ec0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec12:	462f      	mov	r7, r5
 800ec14:	42bb      	cmp	r3, r7
 800ec16:	460d      	mov	r5, r1
 800ec18:	d9f4      	bls.n	800ec04 <_printf_i+0x110>
 800ec1a:	2b08      	cmp	r3, #8
 800ec1c:	d10b      	bne.n	800ec36 <_printf_i+0x142>
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	07df      	lsls	r7, r3, #31
 800ec22:	d508      	bpl.n	800ec36 <_printf_i+0x142>
 800ec24:	6923      	ldr	r3, [r4, #16]
 800ec26:	6861      	ldr	r1, [r4, #4]
 800ec28:	4299      	cmp	r1, r3
 800ec2a:	bfde      	ittt	le
 800ec2c:	2330      	movle	r3, #48	@ 0x30
 800ec2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec32:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec36:	1b92      	subs	r2, r2, r6
 800ec38:	6122      	str	r2, [r4, #16]
 800ec3a:	f8cd a000 	str.w	sl, [sp]
 800ec3e:	464b      	mov	r3, r9
 800ec40:	aa03      	add	r2, sp, #12
 800ec42:	4621      	mov	r1, r4
 800ec44:	4640      	mov	r0, r8
 800ec46:	f7ff fee7 	bl	800ea18 <_printf_common>
 800ec4a:	3001      	adds	r0, #1
 800ec4c:	d14a      	bne.n	800ece4 <_printf_i+0x1f0>
 800ec4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec52:	b004      	add	sp, #16
 800ec54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	f043 0320 	orr.w	r3, r3, #32
 800ec5e:	6023      	str	r3, [r4, #0]
 800ec60:	4832      	ldr	r0, [pc, #200]	@ (800ed2c <_printf_i+0x238>)
 800ec62:	2778      	movs	r7, #120	@ 0x78
 800ec64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	6831      	ldr	r1, [r6, #0]
 800ec6c:	061f      	lsls	r7, r3, #24
 800ec6e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec72:	d402      	bmi.n	800ec7a <_printf_i+0x186>
 800ec74:	065f      	lsls	r7, r3, #25
 800ec76:	bf48      	it	mi
 800ec78:	b2ad      	uxthmi	r5, r5
 800ec7a:	6031      	str	r1, [r6, #0]
 800ec7c:	07d9      	lsls	r1, r3, #31
 800ec7e:	bf44      	itt	mi
 800ec80:	f043 0320 	orrmi.w	r3, r3, #32
 800ec84:	6023      	strmi	r3, [r4, #0]
 800ec86:	b11d      	cbz	r5, 800ec90 <_printf_i+0x19c>
 800ec88:	2310      	movs	r3, #16
 800ec8a:	e7ad      	b.n	800ebe8 <_printf_i+0xf4>
 800ec8c:	4826      	ldr	r0, [pc, #152]	@ (800ed28 <_printf_i+0x234>)
 800ec8e:	e7e9      	b.n	800ec64 <_printf_i+0x170>
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	f023 0320 	bic.w	r3, r3, #32
 800ec96:	6023      	str	r3, [r4, #0]
 800ec98:	e7f6      	b.n	800ec88 <_printf_i+0x194>
 800ec9a:	4616      	mov	r6, r2
 800ec9c:	e7bd      	b.n	800ec1a <_printf_i+0x126>
 800ec9e:	6833      	ldr	r3, [r6, #0]
 800eca0:	6825      	ldr	r5, [r4, #0]
 800eca2:	6961      	ldr	r1, [r4, #20]
 800eca4:	1d18      	adds	r0, r3, #4
 800eca6:	6030      	str	r0, [r6, #0]
 800eca8:	062e      	lsls	r6, r5, #24
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	d501      	bpl.n	800ecb2 <_printf_i+0x1be>
 800ecae:	6019      	str	r1, [r3, #0]
 800ecb0:	e002      	b.n	800ecb8 <_printf_i+0x1c4>
 800ecb2:	0668      	lsls	r0, r5, #25
 800ecb4:	d5fb      	bpl.n	800ecae <_printf_i+0x1ba>
 800ecb6:	8019      	strh	r1, [r3, #0]
 800ecb8:	2300      	movs	r3, #0
 800ecba:	6123      	str	r3, [r4, #16]
 800ecbc:	4616      	mov	r6, r2
 800ecbe:	e7bc      	b.n	800ec3a <_printf_i+0x146>
 800ecc0:	6833      	ldr	r3, [r6, #0]
 800ecc2:	1d1a      	adds	r2, r3, #4
 800ecc4:	6032      	str	r2, [r6, #0]
 800ecc6:	681e      	ldr	r6, [r3, #0]
 800ecc8:	6862      	ldr	r2, [r4, #4]
 800ecca:	2100      	movs	r1, #0
 800eccc:	4630      	mov	r0, r6
 800ecce:	f7f1 faa7 	bl	8000220 <memchr>
 800ecd2:	b108      	cbz	r0, 800ecd8 <_printf_i+0x1e4>
 800ecd4:	1b80      	subs	r0, r0, r6
 800ecd6:	6060      	str	r0, [r4, #4]
 800ecd8:	6863      	ldr	r3, [r4, #4]
 800ecda:	6123      	str	r3, [r4, #16]
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece2:	e7aa      	b.n	800ec3a <_printf_i+0x146>
 800ece4:	6923      	ldr	r3, [r4, #16]
 800ece6:	4632      	mov	r2, r6
 800ece8:	4649      	mov	r1, r9
 800ecea:	4640      	mov	r0, r8
 800ecec:	47d0      	blx	sl
 800ecee:	3001      	adds	r0, #1
 800ecf0:	d0ad      	beq.n	800ec4e <_printf_i+0x15a>
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	079b      	lsls	r3, r3, #30
 800ecf6:	d413      	bmi.n	800ed20 <_printf_i+0x22c>
 800ecf8:	68e0      	ldr	r0, [r4, #12]
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	4298      	cmp	r0, r3
 800ecfe:	bfb8      	it	lt
 800ed00:	4618      	movlt	r0, r3
 800ed02:	e7a6      	b.n	800ec52 <_printf_i+0x15e>
 800ed04:	2301      	movs	r3, #1
 800ed06:	4632      	mov	r2, r6
 800ed08:	4649      	mov	r1, r9
 800ed0a:	4640      	mov	r0, r8
 800ed0c:	47d0      	blx	sl
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d09d      	beq.n	800ec4e <_printf_i+0x15a>
 800ed12:	3501      	adds	r5, #1
 800ed14:	68e3      	ldr	r3, [r4, #12]
 800ed16:	9903      	ldr	r1, [sp, #12]
 800ed18:	1a5b      	subs	r3, r3, r1
 800ed1a:	42ab      	cmp	r3, r5
 800ed1c:	dcf2      	bgt.n	800ed04 <_printf_i+0x210>
 800ed1e:	e7eb      	b.n	800ecf8 <_printf_i+0x204>
 800ed20:	2500      	movs	r5, #0
 800ed22:	f104 0619 	add.w	r6, r4, #25
 800ed26:	e7f5      	b.n	800ed14 <_printf_i+0x220>
 800ed28:	0800f56f 	.word	0x0800f56f
 800ed2c:	0800f580 	.word	0x0800f580

0800ed30 <__sflush_r>:
 800ed30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed38:	0716      	lsls	r6, r2, #28
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	d454      	bmi.n	800edea <__sflush_r+0xba>
 800ed40:	684b      	ldr	r3, [r1, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	dc02      	bgt.n	800ed4c <__sflush_r+0x1c>
 800ed46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	dd48      	ble.n	800edde <__sflush_r+0xae>
 800ed4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed4e:	2e00      	cmp	r6, #0
 800ed50:	d045      	beq.n	800edde <__sflush_r+0xae>
 800ed52:	2300      	movs	r3, #0
 800ed54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed58:	682f      	ldr	r7, [r5, #0]
 800ed5a:	6a21      	ldr	r1, [r4, #32]
 800ed5c:	602b      	str	r3, [r5, #0]
 800ed5e:	d030      	beq.n	800edc2 <__sflush_r+0x92>
 800ed60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed62:	89a3      	ldrh	r3, [r4, #12]
 800ed64:	0759      	lsls	r1, r3, #29
 800ed66:	d505      	bpl.n	800ed74 <__sflush_r+0x44>
 800ed68:	6863      	ldr	r3, [r4, #4]
 800ed6a:	1ad2      	subs	r2, r2, r3
 800ed6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed6e:	b10b      	cbz	r3, 800ed74 <__sflush_r+0x44>
 800ed70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed72:	1ad2      	subs	r2, r2, r3
 800ed74:	2300      	movs	r3, #0
 800ed76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed78:	6a21      	ldr	r1, [r4, #32]
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	47b0      	blx	r6
 800ed7e:	1c43      	adds	r3, r0, #1
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	d106      	bne.n	800ed92 <__sflush_r+0x62>
 800ed84:	6829      	ldr	r1, [r5, #0]
 800ed86:	291d      	cmp	r1, #29
 800ed88:	d82b      	bhi.n	800ede2 <__sflush_r+0xb2>
 800ed8a:	4a2a      	ldr	r2, [pc, #168]	@ (800ee34 <__sflush_r+0x104>)
 800ed8c:	40ca      	lsrs	r2, r1
 800ed8e:	07d6      	lsls	r6, r2, #31
 800ed90:	d527      	bpl.n	800ede2 <__sflush_r+0xb2>
 800ed92:	2200      	movs	r2, #0
 800ed94:	6062      	str	r2, [r4, #4]
 800ed96:	04d9      	lsls	r1, r3, #19
 800ed98:	6922      	ldr	r2, [r4, #16]
 800ed9a:	6022      	str	r2, [r4, #0]
 800ed9c:	d504      	bpl.n	800eda8 <__sflush_r+0x78>
 800ed9e:	1c42      	adds	r2, r0, #1
 800eda0:	d101      	bne.n	800eda6 <__sflush_r+0x76>
 800eda2:	682b      	ldr	r3, [r5, #0]
 800eda4:	b903      	cbnz	r3, 800eda8 <__sflush_r+0x78>
 800eda6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eda8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edaa:	602f      	str	r7, [r5, #0]
 800edac:	b1b9      	cbz	r1, 800edde <__sflush_r+0xae>
 800edae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edb2:	4299      	cmp	r1, r3
 800edb4:	d002      	beq.n	800edbc <__sflush_r+0x8c>
 800edb6:	4628      	mov	r0, r5
 800edb8:	f7ff fd2e 	bl	800e818 <_free_r>
 800edbc:	2300      	movs	r3, #0
 800edbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800edc0:	e00d      	b.n	800edde <__sflush_r+0xae>
 800edc2:	2301      	movs	r3, #1
 800edc4:	4628      	mov	r0, r5
 800edc6:	47b0      	blx	r6
 800edc8:	4602      	mov	r2, r0
 800edca:	1c50      	adds	r0, r2, #1
 800edcc:	d1c9      	bne.n	800ed62 <__sflush_r+0x32>
 800edce:	682b      	ldr	r3, [r5, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d0c6      	beq.n	800ed62 <__sflush_r+0x32>
 800edd4:	2b1d      	cmp	r3, #29
 800edd6:	d001      	beq.n	800eddc <__sflush_r+0xac>
 800edd8:	2b16      	cmp	r3, #22
 800edda:	d11e      	bne.n	800ee1a <__sflush_r+0xea>
 800eddc:	602f      	str	r7, [r5, #0]
 800edde:	2000      	movs	r0, #0
 800ede0:	e022      	b.n	800ee28 <__sflush_r+0xf8>
 800ede2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ede6:	b21b      	sxth	r3, r3
 800ede8:	e01b      	b.n	800ee22 <__sflush_r+0xf2>
 800edea:	690f      	ldr	r7, [r1, #16]
 800edec:	2f00      	cmp	r7, #0
 800edee:	d0f6      	beq.n	800edde <__sflush_r+0xae>
 800edf0:	0793      	lsls	r3, r2, #30
 800edf2:	680e      	ldr	r6, [r1, #0]
 800edf4:	bf08      	it	eq
 800edf6:	694b      	ldreq	r3, [r1, #20]
 800edf8:	600f      	str	r7, [r1, #0]
 800edfa:	bf18      	it	ne
 800edfc:	2300      	movne	r3, #0
 800edfe:	eba6 0807 	sub.w	r8, r6, r7
 800ee02:	608b      	str	r3, [r1, #8]
 800ee04:	f1b8 0f00 	cmp.w	r8, #0
 800ee08:	dde9      	ble.n	800edde <__sflush_r+0xae>
 800ee0a:	6a21      	ldr	r1, [r4, #32]
 800ee0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee0e:	4643      	mov	r3, r8
 800ee10:	463a      	mov	r2, r7
 800ee12:	4628      	mov	r0, r5
 800ee14:	47b0      	blx	r6
 800ee16:	2800      	cmp	r0, #0
 800ee18:	dc08      	bgt.n	800ee2c <__sflush_r+0xfc>
 800ee1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	4407      	add	r7, r0
 800ee2e:	eba8 0800 	sub.w	r8, r8, r0
 800ee32:	e7e7      	b.n	800ee04 <__sflush_r+0xd4>
 800ee34:	20400001 	.word	0x20400001

0800ee38 <_fflush_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	690b      	ldr	r3, [r1, #16]
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	460c      	mov	r4, r1
 800ee40:	b913      	cbnz	r3, 800ee48 <_fflush_r+0x10>
 800ee42:	2500      	movs	r5, #0
 800ee44:	4628      	mov	r0, r5
 800ee46:	bd38      	pop	{r3, r4, r5, pc}
 800ee48:	b118      	cbz	r0, 800ee52 <_fflush_r+0x1a>
 800ee4a:	6a03      	ldr	r3, [r0, #32]
 800ee4c:	b90b      	cbnz	r3, 800ee52 <_fflush_r+0x1a>
 800ee4e:	f7ff fbc1 	bl	800e5d4 <__sinit>
 800ee52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0f3      	beq.n	800ee42 <_fflush_r+0xa>
 800ee5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee5c:	07d0      	lsls	r0, r2, #31
 800ee5e:	d404      	bmi.n	800ee6a <_fflush_r+0x32>
 800ee60:	0599      	lsls	r1, r3, #22
 800ee62:	d402      	bmi.n	800ee6a <_fflush_r+0x32>
 800ee64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee66:	f7ff fca8 	bl	800e7ba <__retarget_lock_acquire_recursive>
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	4621      	mov	r1, r4
 800ee6e:	f7ff ff5f 	bl	800ed30 <__sflush_r>
 800ee72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee74:	07da      	lsls	r2, r3, #31
 800ee76:	4605      	mov	r5, r0
 800ee78:	d4e4      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	059b      	lsls	r3, r3, #22
 800ee7e:	d4e1      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee82:	f7ff fc9b 	bl	800e7bc <__retarget_lock_release_recursive>
 800ee86:	e7dd      	b.n	800ee44 <_fflush_r+0xc>

0800ee88 <fiprintf>:
 800ee88:	b40e      	push	{r1, r2, r3}
 800ee8a:	b503      	push	{r0, r1, lr}
 800ee8c:	4601      	mov	r1, r0
 800ee8e:	ab03      	add	r3, sp, #12
 800ee90:	4805      	ldr	r0, [pc, #20]	@ (800eea8 <fiprintf+0x20>)
 800ee92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee96:	6800      	ldr	r0, [r0, #0]
 800ee98:	9301      	str	r3, [sp, #4]
 800ee9a:	f000 f847 	bl	800ef2c <_vfiprintf_r>
 800ee9e:	b002      	add	sp, #8
 800eea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eea4:	b003      	add	sp, #12
 800eea6:	4770      	bx	lr
 800eea8:	20000174 	.word	0x20000174

0800eeac <_sbrk_r>:
 800eeac:	b538      	push	{r3, r4, r5, lr}
 800eeae:	4d06      	ldr	r5, [pc, #24]	@ (800eec8 <_sbrk_r+0x1c>)
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	4608      	mov	r0, r1
 800eeb6:	602b      	str	r3, [r5, #0]
 800eeb8:	f7f3 fab0 	bl	800241c <_sbrk>
 800eebc:	1c43      	adds	r3, r0, #1
 800eebe:	d102      	bne.n	800eec6 <_sbrk_r+0x1a>
 800eec0:	682b      	ldr	r3, [r5, #0]
 800eec2:	b103      	cbz	r3, 800eec6 <_sbrk_r+0x1a>
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	bd38      	pop	{r3, r4, r5, pc}
 800eec8:	20001c88 	.word	0x20001c88

0800eecc <abort>:
 800eecc:	b508      	push	{r3, lr}
 800eece:	2006      	movs	r0, #6
 800eed0:	f000 fa00 	bl	800f2d4 <raise>
 800eed4:	2001      	movs	r0, #1
 800eed6:	f7f3 fa29 	bl	800232c <_exit>

0800eeda <__sfputc_r>:
 800eeda:	6893      	ldr	r3, [r2, #8]
 800eedc:	3b01      	subs	r3, #1
 800eede:	2b00      	cmp	r3, #0
 800eee0:	b410      	push	{r4}
 800eee2:	6093      	str	r3, [r2, #8]
 800eee4:	da08      	bge.n	800eef8 <__sfputc_r+0x1e>
 800eee6:	6994      	ldr	r4, [r2, #24]
 800eee8:	42a3      	cmp	r3, r4
 800eeea:	db01      	blt.n	800eef0 <__sfputc_r+0x16>
 800eeec:	290a      	cmp	r1, #10
 800eeee:	d103      	bne.n	800eef8 <__sfputc_r+0x1e>
 800eef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eef4:	f000 b932 	b.w	800f15c <__swbuf_r>
 800eef8:	6813      	ldr	r3, [r2, #0]
 800eefa:	1c58      	adds	r0, r3, #1
 800eefc:	6010      	str	r0, [r2, #0]
 800eefe:	7019      	strb	r1, [r3, #0]
 800ef00:	4608      	mov	r0, r1
 800ef02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <__sfputs_r>:
 800ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	460f      	mov	r7, r1
 800ef0e:	4614      	mov	r4, r2
 800ef10:	18d5      	adds	r5, r2, r3
 800ef12:	42ac      	cmp	r4, r5
 800ef14:	d101      	bne.n	800ef1a <__sfputs_r+0x12>
 800ef16:	2000      	movs	r0, #0
 800ef18:	e007      	b.n	800ef2a <__sfputs_r+0x22>
 800ef1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1e:	463a      	mov	r2, r7
 800ef20:	4630      	mov	r0, r6
 800ef22:	f7ff ffda 	bl	800eeda <__sfputc_r>
 800ef26:	1c43      	adds	r3, r0, #1
 800ef28:	d1f3      	bne.n	800ef12 <__sfputs_r+0xa>
 800ef2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef2c <_vfiprintf_r>:
 800ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef30:	460d      	mov	r5, r1
 800ef32:	b09d      	sub	sp, #116	@ 0x74
 800ef34:	4614      	mov	r4, r2
 800ef36:	4698      	mov	r8, r3
 800ef38:	4606      	mov	r6, r0
 800ef3a:	b118      	cbz	r0, 800ef44 <_vfiprintf_r+0x18>
 800ef3c:	6a03      	ldr	r3, [r0, #32]
 800ef3e:	b90b      	cbnz	r3, 800ef44 <_vfiprintf_r+0x18>
 800ef40:	f7ff fb48 	bl	800e5d4 <__sinit>
 800ef44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef46:	07d9      	lsls	r1, r3, #31
 800ef48:	d405      	bmi.n	800ef56 <_vfiprintf_r+0x2a>
 800ef4a:	89ab      	ldrh	r3, [r5, #12]
 800ef4c:	059a      	lsls	r2, r3, #22
 800ef4e:	d402      	bmi.n	800ef56 <_vfiprintf_r+0x2a>
 800ef50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef52:	f7ff fc32 	bl	800e7ba <__retarget_lock_acquire_recursive>
 800ef56:	89ab      	ldrh	r3, [r5, #12]
 800ef58:	071b      	lsls	r3, r3, #28
 800ef5a:	d501      	bpl.n	800ef60 <_vfiprintf_r+0x34>
 800ef5c:	692b      	ldr	r3, [r5, #16]
 800ef5e:	b99b      	cbnz	r3, 800ef88 <_vfiprintf_r+0x5c>
 800ef60:	4629      	mov	r1, r5
 800ef62:	4630      	mov	r0, r6
 800ef64:	f000 f938 	bl	800f1d8 <__swsetup_r>
 800ef68:	b170      	cbz	r0, 800ef88 <_vfiprintf_r+0x5c>
 800ef6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef6c:	07dc      	lsls	r4, r3, #31
 800ef6e:	d504      	bpl.n	800ef7a <_vfiprintf_r+0x4e>
 800ef70:	f04f 30ff 	mov.w	r0, #4294967295
 800ef74:	b01d      	add	sp, #116	@ 0x74
 800ef76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7a:	89ab      	ldrh	r3, [r5, #12]
 800ef7c:	0598      	lsls	r0, r3, #22
 800ef7e:	d4f7      	bmi.n	800ef70 <_vfiprintf_r+0x44>
 800ef80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef82:	f7ff fc1b 	bl	800e7bc <__retarget_lock_release_recursive>
 800ef86:	e7f3      	b.n	800ef70 <_vfiprintf_r+0x44>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef8c:	2320      	movs	r3, #32
 800ef8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef96:	2330      	movs	r3, #48	@ 0x30
 800ef98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f148 <_vfiprintf_r+0x21c>
 800ef9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800efa0:	f04f 0901 	mov.w	r9, #1
 800efa4:	4623      	mov	r3, r4
 800efa6:	469a      	mov	sl, r3
 800efa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efac:	b10a      	cbz	r2, 800efb2 <_vfiprintf_r+0x86>
 800efae:	2a25      	cmp	r2, #37	@ 0x25
 800efb0:	d1f9      	bne.n	800efa6 <_vfiprintf_r+0x7a>
 800efb2:	ebba 0b04 	subs.w	fp, sl, r4
 800efb6:	d00b      	beq.n	800efd0 <_vfiprintf_r+0xa4>
 800efb8:	465b      	mov	r3, fp
 800efba:	4622      	mov	r2, r4
 800efbc:	4629      	mov	r1, r5
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7ff ffa2 	bl	800ef08 <__sfputs_r>
 800efc4:	3001      	adds	r0, #1
 800efc6:	f000 80a7 	beq.w	800f118 <_vfiprintf_r+0x1ec>
 800efca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efcc:	445a      	add	r2, fp
 800efce:	9209      	str	r2, [sp, #36]	@ 0x24
 800efd0:	f89a 3000 	ldrb.w	r3, [sl]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f000 809f 	beq.w	800f118 <_vfiprintf_r+0x1ec>
 800efda:	2300      	movs	r3, #0
 800efdc:	f04f 32ff 	mov.w	r2, #4294967295
 800efe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efe4:	f10a 0a01 	add.w	sl, sl, #1
 800efe8:	9304      	str	r3, [sp, #16]
 800efea:	9307      	str	r3, [sp, #28]
 800efec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eff0:	931a      	str	r3, [sp, #104]	@ 0x68
 800eff2:	4654      	mov	r4, sl
 800eff4:	2205      	movs	r2, #5
 800eff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800effa:	4853      	ldr	r0, [pc, #332]	@ (800f148 <_vfiprintf_r+0x21c>)
 800effc:	f7f1 f910 	bl	8000220 <memchr>
 800f000:	9a04      	ldr	r2, [sp, #16]
 800f002:	b9d8      	cbnz	r0, 800f03c <_vfiprintf_r+0x110>
 800f004:	06d1      	lsls	r1, r2, #27
 800f006:	bf44      	itt	mi
 800f008:	2320      	movmi	r3, #32
 800f00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f00e:	0713      	lsls	r3, r2, #28
 800f010:	bf44      	itt	mi
 800f012:	232b      	movmi	r3, #43	@ 0x2b
 800f014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f018:	f89a 3000 	ldrb.w	r3, [sl]
 800f01c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f01e:	d015      	beq.n	800f04c <_vfiprintf_r+0x120>
 800f020:	9a07      	ldr	r2, [sp, #28]
 800f022:	4654      	mov	r4, sl
 800f024:	2000      	movs	r0, #0
 800f026:	f04f 0c0a 	mov.w	ip, #10
 800f02a:	4621      	mov	r1, r4
 800f02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f030:	3b30      	subs	r3, #48	@ 0x30
 800f032:	2b09      	cmp	r3, #9
 800f034:	d94b      	bls.n	800f0ce <_vfiprintf_r+0x1a2>
 800f036:	b1b0      	cbz	r0, 800f066 <_vfiprintf_r+0x13a>
 800f038:	9207      	str	r2, [sp, #28]
 800f03a:	e014      	b.n	800f066 <_vfiprintf_r+0x13a>
 800f03c:	eba0 0308 	sub.w	r3, r0, r8
 800f040:	fa09 f303 	lsl.w	r3, r9, r3
 800f044:	4313      	orrs	r3, r2
 800f046:	9304      	str	r3, [sp, #16]
 800f048:	46a2      	mov	sl, r4
 800f04a:	e7d2      	b.n	800eff2 <_vfiprintf_r+0xc6>
 800f04c:	9b03      	ldr	r3, [sp, #12]
 800f04e:	1d19      	adds	r1, r3, #4
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	9103      	str	r1, [sp, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	bfbb      	ittet	lt
 800f058:	425b      	neglt	r3, r3
 800f05a:	f042 0202 	orrlt.w	r2, r2, #2
 800f05e:	9307      	strge	r3, [sp, #28]
 800f060:	9307      	strlt	r3, [sp, #28]
 800f062:	bfb8      	it	lt
 800f064:	9204      	strlt	r2, [sp, #16]
 800f066:	7823      	ldrb	r3, [r4, #0]
 800f068:	2b2e      	cmp	r3, #46	@ 0x2e
 800f06a:	d10a      	bne.n	800f082 <_vfiprintf_r+0x156>
 800f06c:	7863      	ldrb	r3, [r4, #1]
 800f06e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f070:	d132      	bne.n	800f0d8 <_vfiprintf_r+0x1ac>
 800f072:	9b03      	ldr	r3, [sp, #12]
 800f074:	1d1a      	adds	r2, r3, #4
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	9203      	str	r2, [sp, #12]
 800f07a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f07e:	3402      	adds	r4, #2
 800f080:	9305      	str	r3, [sp, #20]
 800f082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f158 <_vfiprintf_r+0x22c>
 800f086:	7821      	ldrb	r1, [r4, #0]
 800f088:	2203      	movs	r2, #3
 800f08a:	4650      	mov	r0, sl
 800f08c:	f7f1 f8c8 	bl	8000220 <memchr>
 800f090:	b138      	cbz	r0, 800f0a2 <_vfiprintf_r+0x176>
 800f092:	9b04      	ldr	r3, [sp, #16]
 800f094:	eba0 000a 	sub.w	r0, r0, sl
 800f098:	2240      	movs	r2, #64	@ 0x40
 800f09a:	4082      	lsls	r2, r0
 800f09c:	4313      	orrs	r3, r2
 800f09e:	3401      	adds	r4, #1
 800f0a0:	9304      	str	r3, [sp, #16]
 800f0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0a6:	4829      	ldr	r0, [pc, #164]	@ (800f14c <_vfiprintf_r+0x220>)
 800f0a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f0ac:	2206      	movs	r2, #6
 800f0ae:	f7f1 f8b7 	bl	8000220 <memchr>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d03f      	beq.n	800f136 <_vfiprintf_r+0x20a>
 800f0b6:	4b26      	ldr	r3, [pc, #152]	@ (800f150 <_vfiprintf_r+0x224>)
 800f0b8:	bb1b      	cbnz	r3, 800f102 <_vfiprintf_r+0x1d6>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	3307      	adds	r3, #7
 800f0be:	f023 0307 	bic.w	r3, r3, #7
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	9303      	str	r3, [sp, #12]
 800f0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0c8:	443b      	add	r3, r7
 800f0ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0cc:	e76a      	b.n	800efa4 <_vfiprintf_r+0x78>
 800f0ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0d2:	460c      	mov	r4, r1
 800f0d4:	2001      	movs	r0, #1
 800f0d6:	e7a8      	b.n	800f02a <_vfiprintf_r+0xfe>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	3401      	adds	r4, #1
 800f0dc:	9305      	str	r3, [sp, #20]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	f04f 0c0a 	mov.w	ip, #10
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0ea:	3a30      	subs	r2, #48	@ 0x30
 800f0ec:	2a09      	cmp	r2, #9
 800f0ee:	d903      	bls.n	800f0f8 <_vfiprintf_r+0x1cc>
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d0c6      	beq.n	800f082 <_vfiprintf_r+0x156>
 800f0f4:	9105      	str	r1, [sp, #20]
 800f0f6:	e7c4      	b.n	800f082 <_vfiprintf_r+0x156>
 800f0f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	2301      	movs	r3, #1
 800f100:	e7f0      	b.n	800f0e4 <_vfiprintf_r+0x1b8>
 800f102:	ab03      	add	r3, sp, #12
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	462a      	mov	r2, r5
 800f108:	4b12      	ldr	r3, [pc, #72]	@ (800f154 <_vfiprintf_r+0x228>)
 800f10a:	a904      	add	r1, sp, #16
 800f10c:	4630      	mov	r0, r6
 800f10e:	f3af 8000 	nop.w
 800f112:	4607      	mov	r7, r0
 800f114:	1c78      	adds	r0, r7, #1
 800f116:	d1d6      	bne.n	800f0c6 <_vfiprintf_r+0x19a>
 800f118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f11a:	07d9      	lsls	r1, r3, #31
 800f11c:	d405      	bmi.n	800f12a <_vfiprintf_r+0x1fe>
 800f11e:	89ab      	ldrh	r3, [r5, #12]
 800f120:	059a      	lsls	r2, r3, #22
 800f122:	d402      	bmi.n	800f12a <_vfiprintf_r+0x1fe>
 800f124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f126:	f7ff fb49 	bl	800e7bc <__retarget_lock_release_recursive>
 800f12a:	89ab      	ldrh	r3, [r5, #12]
 800f12c:	065b      	lsls	r3, r3, #25
 800f12e:	f53f af1f 	bmi.w	800ef70 <_vfiprintf_r+0x44>
 800f132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f134:	e71e      	b.n	800ef74 <_vfiprintf_r+0x48>
 800f136:	ab03      	add	r3, sp, #12
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	462a      	mov	r2, r5
 800f13c:	4b05      	ldr	r3, [pc, #20]	@ (800f154 <_vfiprintf_r+0x228>)
 800f13e:	a904      	add	r1, sp, #16
 800f140:	4630      	mov	r0, r6
 800f142:	f7ff fcd7 	bl	800eaf4 <_printf_i>
 800f146:	e7e4      	b.n	800f112 <_vfiprintf_r+0x1e6>
 800f148:	0800f591 	.word	0x0800f591
 800f14c:	0800f59b 	.word	0x0800f59b
 800f150:	00000000 	.word	0x00000000
 800f154:	0800ef09 	.word	0x0800ef09
 800f158:	0800f597 	.word	0x0800f597

0800f15c <__swbuf_r>:
 800f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15e:	460e      	mov	r6, r1
 800f160:	4614      	mov	r4, r2
 800f162:	4605      	mov	r5, r0
 800f164:	b118      	cbz	r0, 800f16e <__swbuf_r+0x12>
 800f166:	6a03      	ldr	r3, [r0, #32]
 800f168:	b90b      	cbnz	r3, 800f16e <__swbuf_r+0x12>
 800f16a:	f7ff fa33 	bl	800e5d4 <__sinit>
 800f16e:	69a3      	ldr	r3, [r4, #24]
 800f170:	60a3      	str	r3, [r4, #8]
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	071a      	lsls	r2, r3, #28
 800f176:	d501      	bpl.n	800f17c <__swbuf_r+0x20>
 800f178:	6923      	ldr	r3, [r4, #16]
 800f17a:	b943      	cbnz	r3, 800f18e <__swbuf_r+0x32>
 800f17c:	4621      	mov	r1, r4
 800f17e:	4628      	mov	r0, r5
 800f180:	f000 f82a 	bl	800f1d8 <__swsetup_r>
 800f184:	b118      	cbz	r0, 800f18e <__swbuf_r+0x32>
 800f186:	f04f 37ff 	mov.w	r7, #4294967295
 800f18a:	4638      	mov	r0, r7
 800f18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	6922      	ldr	r2, [r4, #16]
 800f192:	1a98      	subs	r0, r3, r2
 800f194:	6963      	ldr	r3, [r4, #20]
 800f196:	b2f6      	uxtb	r6, r6
 800f198:	4283      	cmp	r3, r0
 800f19a:	4637      	mov	r7, r6
 800f19c:	dc05      	bgt.n	800f1aa <__swbuf_r+0x4e>
 800f19e:	4621      	mov	r1, r4
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	f7ff fe49 	bl	800ee38 <_fflush_r>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d1ed      	bne.n	800f186 <__swbuf_r+0x2a>
 800f1aa:	68a3      	ldr	r3, [r4, #8]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	60a3      	str	r3, [r4, #8]
 800f1b0:	6823      	ldr	r3, [r4, #0]
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	6022      	str	r2, [r4, #0]
 800f1b6:	701e      	strb	r6, [r3, #0]
 800f1b8:	6962      	ldr	r2, [r4, #20]
 800f1ba:	1c43      	adds	r3, r0, #1
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d004      	beq.n	800f1ca <__swbuf_r+0x6e>
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	07db      	lsls	r3, r3, #31
 800f1c4:	d5e1      	bpl.n	800f18a <__swbuf_r+0x2e>
 800f1c6:	2e0a      	cmp	r6, #10
 800f1c8:	d1df      	bne.n	800f18a <__swbuf_r+0x2e>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f7ff fe33 	bl	800ee38 <_fflush_r>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d0d9      	beq.n	800f18a <__swbuf_r+0x2e>
 800f1d6:	e7d6      	b.n	800f186 <__swbuf_r+0x2a>

0800f1d8 <__swsetup_r>:
 800f1d8:	b538      	push	{r3, r4, r5, lr}
 800f1da:	4b29      	ldr	r3, [pc, #164]	@ (800f280 <__swsetup_r+0xa8>)
 800f1dc:	4605      	mov	r5, r0
 800f1de:	6818      	ldr	r0, [r3, #0]
 800f1e0:	460c      	mov	r4, r1
 800f1e2:	b118      	cbz	r0, 800f1ec <__swsetup_r+0x14>
 800f1e4:	6a03      	ldr	r3, [r0, #32]
 800f1e6:	b90b      	cbnz	r3, 800f1ec <__swsetup_r+0x14>
 800f1e8:	f7ff f9f4 	bl	800e5d4 <__sinit>
 800f1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1f0:	0719      	lsls	r1, r3, #28
 800f1f2:	d422      	bmi.n	800f23a <__swsetup_r+0x62>
 800f1f4:	06da      	lsls	r2, r3, #27
 800f1f6:	d407      	bmi.n	800f208 <__swsetup_r+0x30>
 800f1f8:	2209      	movs	r2, #9
 800f1fa:	602a      	str	r2, [r5, #0]
 800f1fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f200:	81a3      	strh	r3, [r4, #12]
 800f202:	f04f 30ff 	mov.w	r0, #4294967295
 800f206:	e033      	b.n	800f270 <__swsetup_r+0x98>
 800f208:	0758      	lsls	r0, r3, #29
 800f20a:	d512      	bpl.n	800f232 <__swsetup_r+0x5a>
 800f20c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f20e:	b141      	cbz	r1, 800f222 <__swsetup_r+0x4a>
 800f210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f214:	4299      	cmp	r1, r3
 800f216:	d002      	beq.n	800f21e <__swsetup_r+0x46>
 800f218:	4628      	mov	r0, r5
 800f21a:	f7ff fafd 	bl	800e818 <_free_r>
 800f21e:	2300      	movs	r3, #0
 800f220:	6363      	str	r3, [r4, #52]	@ 0x34
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f228:	81a3      	strh	r3, [r4, #12]
 800f22a:	2300      	movs	r3, #0
 800f22c:	6063      	str	r3, [r4, #4]
 800f22e:	6923      	ldr	r3, [r4, #16]
 800f230:	6023      	str	r3, [r4, #0]
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	f043 0308 	orr.w	r3, r3, #8
 800f238:	81a3      	strh	r3, [r4, #12]
 800f23a:	6923      	ldr	r3, [r4, #16]
 800f23c:	b94b      	cbnz	r3, 800f252 <__swsetup_r+0x7a>
 800f23e:	89a3      	ldrh	r3, [r4, #12]
 800f240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f248:	d003      	beq.n	800f252 <__swsetup_r+0x7a>
 800f24a:	4621      	mov	r1, r4
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 f883 	bl	800f358 <__smakebuf_r>
 800f252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f256:	f013 0201 	ands.w	r2, r3, #1
 800f25a:	d00a      	beq.n	800f272 <__swsetup_r+0x9a>
 800f25c:	2200      	movs	r2, #0
 800f25e:	60a2      	str	r2, [r4, #8]
 800f260:	6962      	ldr	r2, [r4, #20]
 800f262:	4252      	negs	r2, r2
 800f264:	61a2      	str	r2, [r4, #24]
 800f266:	6922      	ldr	r2, [r4, #16]
 800f268:	b942      	cbnz	r2, 800f27c <__swsetup_r+0xa4>
 800f26a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f26e:	d1c5      	bne.n	800f1fc <__swsetup_r+0x24>
 800f270:	bd38      	pop	{r3, r4, r5, pc}
 800f272:	0799      	lsls	r1, r3, #30
 800f274:	bf58      	it	pl
 800f276:	6962      	ldrpl	r2, [r4, #20]
 800f278:	60a2      	str	r2, [r4, #8]
 800f27a:	e7f4      	b.n	800f266 <__swsetup_r+0x8e>
 800f27c:	2000      	movs	r0, #0
 800f27e:	e7f7      	b.n	800f270 <__swsetup_r+0x98>
 800f280:	20000174 	.word	0x20000174

0800f284 <_raise_r>:
 800f284:	291f      	cmp	r1, #31
 800f286:	b538      	push	{r3, r4, r5, lr}
 800f288:	4605      	mov	r5, r0
 800f28a:	460c      	mov	r4, r1
 800f28c:	d904      	bls.n	800f298 <_raise_r+0x14>
 800f28e:	2316      	movs	r3, #22
 800f290:	6003      	str	r3, [r0, #0]
 800f292:	f04f 30ff 	mov.w	r0, #4294967295
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f29a:	b112      	cbz	r2, 800f2a2 <_raise_r+0x1e>
 800f29c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2a0:	b94b      	cbnz	r3, 800f2b6 <_raise_r+0x32>
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f000 f830 	bl	800f308 <_getpid_r>
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	4601      	mov	r1, r0
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2b2:	f000 b817 	b.w	800f2e4 <_kill_r>
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d00a      	beq.n	800f2d0 <_raise_r+0x4c>
 800f2ba:	1c59      	adds	r1, r3, #1
 800f2bc:	d103      	bne.n	800f2c6 <_raise_r+0x42>
 800f2be:	2316      	movs	r3, #22
 800f2c0:	6003      	str	r3, [r0, #0]
 800f2c2:	2001      	movs	r0, #1
 800f2c4:	e7e7      	b.n	800f296 <_raise_r+0x12>
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	4798      	blx	r3
 800f2d0:	2000      	movs	r0, #0
 800f2d2:	e7e0      	b.n	800f296 <_raise_r+0x12>

0800f2d4 <raise>:
 800f2d4:	4b02      	ldr	r3, [pc, #8]	@ (800f2e0 <raise+0xc>)
 800f2d6:	4601      	mov	r1, r0
 800f2d8:	6818      	ldr	r0, [r3, #0]
 800f2da:	f7ff bfd3 	b.w	800f284 <_raise_r>
 800f2de:	bf00      	nop
 800f2e0:	20000174 	.word	0x20000174

0800f2e4 <_kill_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d07      	ldr	r5, [pc, #28]	@ (800f304 <_kill_r+0x20>)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	602b      	str	r3, [r5, #0]
 800f2f2:	f7f3 f80b 	bl	800230c <_kill>
 800f2f6:	1c43      	adds	r3, r0, #1
 800f2f8:	d102      	bne.n	800f300 <_kill_r+0x1c>
 800f2fa:	682b      	ldr	r3, [r5, #0]
 800f2fc:	b103      	cbz	r3, 800f300 <_kill_r+0x1c>
 800f2fe:	6023      	str	r3, [r4, #0]
 800f300:	bd38      	pop	{r3, r4, r5, pc}
 800f302:	bf00      	nop
 800f304:	20001c88 	.word	0x20001c88

0800f308 <_getpid_r>:
 800f308:	f7f2 bff8 	b.w	80022fc <_getpid>

0800f30c <__swhatbuf_r>:
 800f30c:	b570      	push	{r4, r5, r6, lr}
 800f30e:	460c      	mov	r4, r1
 800f310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f314:	2900      	cmp	r1, #0
 800f316:	b096      	sub	sp, #88	@ 0x58
 800f318:	4615      	mov	r5, r2
 800f31a:	461e      	mov	r6, r3
 800f31c:	da0d      	bge.n	800f33a <__swhatbuf_r+0x2e>
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f324:	f04f 0100 	mov.w	r1, #0
 800f328:	bf14      	ite	ne
 800f32a:	2340      	movne	r3, #64	@ 0x40
 800f32c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f330:	2000      	movs	r0, #0
 800f332:	6031      	str	r1, [r6, #0]
 800f334:	602b      	str	r3, [r5, #0]
 800f336:	b016      	add	sp, #88	@ 0x58
 800f338:	bd70      	pop	{r4, r5, r6, pc}
 800f33a:	466a      	mov	r2, sp
 800f33c:	f000 f848 	bl	800f3d0 <_fstat_r>
 800f340:	2800      	cmp	r0, #0
 800f342:	dbec      	blt.n	800f31e <__swhatbuf_r+0x12>
 800f344:	9901      	ldr	r1, [sp, #4]
 800f346:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f34a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f34e:	4259      	negs	r1, r3
 800f350:	4159      	adcs	r1, r3
 800f352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f356:	e7eb      	b.n	800f330 <__swhatbuf_r+0x24>

0800f358 <__smakebuf_r>:
 800f358:	898b      	ldrh	r3, [r1, #12]
 800f35a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f35c:	079d      	lsls	r5, r3, #30
 800f35e:	4606      	mov	r6, r0
 800f360:	460c      	mov	r4, r1
 800f362:	d507      	bpl.n	800f374 <__smakebuf_r+0x1c>
 800f364:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	6123      	str	r3, [r4, #16]
 800f36c:	2301      	movs	r3, #1
 800f36e:	6163      	str	r3, [r4, #20]
 800f370:	b003      	add	sp, #12
 800f372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f374:	ab01      	add	r3, sp, #4
 800f376:	466a      	mov	r2, sp
 800f378:	f7ff ffc8 	bl	800f30c <__swhatbuf_r>
 800f37c:	9f00      	ldr	r7, [sp, #0]
 800f37e:	4605      	mov	r5, r0
 800f380:	4639      	mov	r1, r7
 800f382:	4630      	mov	r0, r6
 800f384:	f7ff fabc 	bl	800e900 <_malloc_r>
 800f388:	b948      	cbnz	r0, 800f39e <__smakebuf_r+0x46>
 800f38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f38e:	059a      	lsls	r2, r3, #22
 800f390:	d4ee      	bmi.n	800f370 <__smakebuf_r+0x18>
 800f392:	f023 0303 	bic.w	r3, r3, #3
 800f396:	f043 0302 	orr.w	r3, r3, #2
 800f39a:	81a3      	strh	r3, [r4, #12]
 800f39c:	e7e2      	b.n	800f364 <__smakebuf_r+0xc>
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	6020      	str	r0, [r4, #0]
 800f3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3a6:	81a3      	strh	r3, [r4, #12]
 800f3a8:	9b01      	ldr	r3, [sp, #4]
 800f3aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f3ae:	b15b      	cbz	r3, 800f3c8 <__smakebuf_r+0x70>
 800f3b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f000 f81d 	bl	800f3f4 <_isatty_r>
 800f3ba:	b128      	cbz	r0, 800f3c8 <__smakebuf_r+0x70>
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	f023 0303 	bic.w	r3, r3, #3
 800f3c2:	f043 0301 	orr.w	r3, r3, #1
 800f3c6:	81a3      	strh	r3, [r4, #12]
 800f3c8:	89a3      	ldrh	r3, [r4, #12]
 800f3ca:	431d      	orrs	r5, r3
 800f3cc:	81a5      	strh	r5, [r4, #12]
 800f3ce:	e7cf      	b.n	800f370 <__smakebuf_r+0x18>

0800f3d0 <_fstat_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	@ (800f3f0 <_fstat_r+0x20>)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	4611      	mov	r1, r2
 800f3dc:	602b      	str	r3, [r5, #0]
 800f3de:	f7f2 fff5 	bl	80023cc <_fstat>
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	d102      	bne.n	800f3ec <_fstat_r+0x1c>
 800f3e6:	682b      	ldr	r3, [r5, #0]
 800f3e8:	b103      	cbz	r3, 800f3ec <_fstat_r+0x1c>
 800f3ea:	6023      	str	r3, [r4, #0]
 800f3ec:	bd38      	pop	{r3, r4, r5, pc}
 800f3ee:	bf00      	nop
 800f3f0:	20001c88 	.word	0x20001c88

0800f3f4 <_isatty_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d06      	ldr	r5, [pc, #24]	@ (800f410 <_isatty_r+0x1c>)
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4608      	mov	r0, r1
 800f3fe:	602b      	str	r3, [r5, #0]
 800f400:	f7f2 fff4 	bl	80023ec <_isatty>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_isatty_r+0x1a>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_isatty_r+0x1a>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	20001c88 	.word	0x20001c88

0800f414 <_init>:
 800f414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f416:	bf00      	nop
 800f418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f41a:	bc08      	pop	{r3}
 800f41c:	469e      	mov	lr, r3
 800f41e:	4770      	bx	lr

0800f420 <_fini>:
 800f420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f422:	bf00      	nop
 800f424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f426:	bc08      	pop	{r3}
 800f428:	469e      	mov	lr, r3
 800f42a:	4770      	bx	lr
