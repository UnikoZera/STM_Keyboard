
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae24  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800affc  0800affc  0000bffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b054  0800b054  0000d168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b054  0800b054  0000d168  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b054  0800b054  0000d168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b054  0800b054  0000c054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b058  0800b058  0000c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800b05c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000168  0800b1c4  0000d168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000147c  0800b1c4  0000d47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efcf  00000000  00000000  0000d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d18  00000000  00000000  0002c167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d5  00000000  00000000  00032ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d49  00000000  00000000  000340a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024b86  00000000  00000000  00058dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf7c  00000000  00000000  0007d974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b8f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075a4  00000000  00000000  0015b934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00162ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800afe4 	.word	0x0800afe4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800afe4 	.word	0x0800afe4

08000218 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	@ 0x30
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f00a feab 	bl	800af8c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000236:	4b39      	ldr	r3, [pc, #228]	@ (800031c <MX_ADC1_Init+0x104>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800023e:	4b37      	ldr	r3, [pc, #220]	@ (800031c <MX_ADC1_Init+0x104>)
 8000240:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000246:	4b35      	ldr	r3, [pc, #212]	@ (800031c <MX_ADC1_Init+0x104>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b33      	ldr	r3, [pc, #204]	@ (800031c <MX_ADC1_Init+0x104>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000252:	4b32      	ldr	r3, [pc, #200]	@ (800031c <MX_ADC1_Init+0x104>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000258:	4b30      	ldr	r3, [pc, #192]	@ (800031c <MX_ADC1_Init+0x104>)
 800025a:	2201      	movs	r2, #1
 800025c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b2f      	ldr	r3, [pc, #188]	@ (800031c <MX_ADC1_Init+0x104>)
 8000260:	2204      	movs	r2, #4
 8000262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b2d      	ldr	r3, [pc, #180]	@ (800031c <MX_ADC1_Init+0x104>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800026a:	4b2c      	ldr	r3, [pc, #176]	@ (800031c <MX_ADC1_Init+0x104>)
 800026c:	2201      	movs	r2, #1
 800026e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000270:	4b2a      	ldr	r3, [pc, #168]	@ (800031c <MX_ADC1_Init+0x104>)
 8000272:	2202      	movs	r2, #2
 8000274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b29      	ldr	r3, [pc, #164]	@ (800031c <MX_ADC1_Init+0x104>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027e:	4b27      	ldr	r3, [pc, #156]	@ (800031c <MX_ADC1_Init+0x104>)
 8000280:	2200      	movs	r2, #0
 8000282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000284:	4b25      	ldr	r3, [pc, #148]	@ (800031c <MX_ADC1_Init+0x104>)
 8000286:	2200      	movs	r2, #0
 8000288:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800028a:	4b24      	ldr	r3, [pc, #144]	@ (800031c <MX_ADC1_Init+0x104>)
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000292:	4b22      	ldr	r3, [pc, #136]	@ (800031c <MX_ADC1_Init+0x104>)
 8000294:	2200      	movs	r2, #0
 8000296:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000298:	4b20      	ldr	r3, [pc, #128]	@ (800031c <MX_ADC1_Init+0x104>)
 800029a:	2200      	movs	r2, #0
 800029c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a0:	481e      	ldr	r0, [pc, #120]	@ (800031c <MX_ADC1_Init+0x104>)
 80002a2:	f001 fb73 	bl	800198c <HAL_ADC_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80002ac:	f000 fb87 	bl	80009be <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002b8:	4619      	mov	r1, r3
 80002ba:	4818      	ldr	r0, [pc, #96]	@ (800031c <MX_ADC1_Init+0x104>)
 80002bc:	f002 f9ee 	bl	800269c <HAL_ADCEx_MultiModeConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80002c6:	f000 fb7a 	bl	80009be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <MX_ADC1_Init+0x108>)
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ce:	2306      	movs	r3, #6
 80002d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002d6:	237f      	movs	r3, #127	@ 0x7f
 80002d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002da:	2304      	movs	r3, #4
 80002dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	480d      	ldr	r0, [pc, #52]	@ (800031c <MX_ADC1_Init+0x104>)
 80002e8:	f001 fcd4 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002f2:	f000 fb64 	bl	80009be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <MX_ADC1_Init+0x10c>)
 80002f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002fa:	230c      	movs	r3, #12
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4619      	mov	r1, r3
 8000302:	4806      	ldr	r0, [pc, #24]	@ (800031c <MX_ADC1_Init+0x104>)
 8000304:	f001 fcc6 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800030e:	f000 fb56 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	3730      	adds	r7, #48	@ 0x30
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000184 	.word	0x20000184
 8000320:	0c900008 	.word	0x0c900008
 8000324:	10c00010 	.word	0x10c00010

08000328 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	463b      	mov	r3, r7
 8000330:	2220      	movs	r2, #32
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f00a fe29 	bl	800af8c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800033a:	4b32      	ldr	r3, [pc, #200]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800033c:	4a32      	ldr	r2, [pc, #200]	@ (8000408 <MX_ADC2_Init+0xe0>)
 800033e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000340:	4b30      	ldr	r3, [pc, #192]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000342:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000346:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000348:	4b2e      	ldr	r3, [pc, #184]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	4b2d      	ldr	r3, [pc, #180]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000354:	4b2b      	ldr	r3, [pc, #172]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800035a:	4b2a      	ldr	r3, [pc, #168]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800035c:	2201      	movs	r2, #1
 800035e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000360:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000362:	2204      	movs	r2, #4
 8000364:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000366:	4b27      	ldr	r3, [pc, #156]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000368:	2200      	movs	r2, #0
 800036a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800036c:	4b25      	ldr	r3, [pc, #148]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800036e:	2201      	movs	r2, #1
 8000370:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000372:	4b24      	ldr	r3, [pc, #144]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000374:	2202      	movs	r2, #2
 8000376:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b22      	ldr	r3, [pc, #136]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	4b20      	ldr	r3, [pc, #128]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000382:	2200      	movs	r2, #0
 8000384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000386:	4b1f      	ldr	r3, [pc, #124]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800038c:	4b1d      	ldr	r3, [pc, #116]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800038e:	2200      	movs	r2, #0
 8000390:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000394:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <MX_ADC2_Init+0xdc>)
 8000396:	2200      	movs	r2, #0
 8000398:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_ADC2_Init+0xdc>)
 800039c:	2200      	movs	r2, #0
 800039e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003a2:	4818      	ldr	r0, [pc, #96]	@ (8000404 <MX_ADC2_Init+0xdc>)
 80003a4:	f001 faf2 	bl	800198c <HAL_ADC_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80003ae:	f000 fb06 	bl	80009be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_ADC2_Init+0xe4>)
 80003b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b6:	2306      	movs	r3, #6
 80003b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003be:	237f      	movs	r3, #127	@ 0x7f
 80003c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c2:	2304      	movs	r3, #4
 80003c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4619      	mov	r1, r3
 80003ce:	480d      	ldr	r0, [pc, #52]	@ (8000404 <MX_ADC2_Init+0xdc>)
 80003d0:	f001 fc60 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80003da:	f000 faf0 	bl	80009be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_ADC2_Init+0xe8>)
 80003e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e2:	230c      	movs	r3, #12
 80003e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003e6:	463b      	mov	r3, r7
 80003e8:	4619      	mov	r1, r3
 80003ea:	4806      	ldr	r0, [pc, #24]	@ (8000404 <MX_ADC2_Init+0xdc>)
 80003ec:	f001 fc52 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80003f6:	f000 fae2 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	3720      	adds	r7, #32
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200001f0 	.word	0x200001f0
 8000408:	50000100 	.word	0x50000100
 800040c:	04300002 	.word	0x04300002
 8000410:	08600004 	.word	0x08600004

08000414 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b09c      	sub	sp, #112	@ 0x70
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	2244      	movs	r2, #68	@ 0x44
 8000432:	2100      	movs	r1, #0
 8000434:	4618      	mov	r0, r3
 8000436:	f00a fda9 	bl	800af8c <memset>
  if(adcHandle->Instance==ADC1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000442:	d169      	bne.n	8000518 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800044a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800044e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f005 fd21 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000460:	f000 faad 	bl	80009be <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000464:	4b65      	ldr	r3, [pc, #404]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	4a64      	ldr	r2, [pc, #400]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 800046c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800046e:	4b63      	ldr	r3, [pc, #396]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d10b      	bne.n	800048e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000476:	4b62      	ldr	r3, [pc, #392]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	4a61      	ldr	r2, [pc, #388]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800047c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000482:	4b5f      	ldr	r3, [pc, #380]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b5c      	ldr	r3, [pc, #368]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	4a5b      	ldr	r2, [pc, #364]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049a:	4b59      	ldr	r3, [pc, #356]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004a6:	230c      	movs	r3, #12
 80004a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004aa:	2303      	movs	r3, #3
 80004ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004b6:	4619      	mov	r1, r3
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004bc:	f002 fc5c 	bl	8002d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004c0:	4b50      	ldr	r3, [pc, #320]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004c2:	4a51      	ldr	r2, [pc, #324]	@ (8000608 <HAL_ADC_MspInit+0x1f4>)
 80004c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80004c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004c8:	2205      	movs	r2, #5
 80004ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004de:	4b49      	ldr	r3, [pc, #292]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004e6:	4b47      	ldr	r3, [pc, #284]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004ee:	4b45      	ldr	r3, [pc, #276]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004f0:	2220      	movs	r2, #32
 80004f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80004f4:	4b43      	ldr	r3, [pc, #268]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004fa:	4842      	ldr	r0, [pc, #264]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 80004fc:	f002 fa82 	bl	8002a04 <HAL_DMA_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000506:	f000 fa5a 	bl	80009be <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a3d      	ldr	r2, [pc, #244]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 800050e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000510:	4a3c      	ldr	r2, [pc, #240]	@ (8000604 <HAL_ADC_MspInit+0x1f0>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000516:	e06d      	b.n	80005f4 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a3b      	ldr	r2, [pc, #236]	@ (800060c <HAL_ADC_MspInit+0x1f8>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d168      	bne.n	80005f4 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000526:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000528:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800052c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052e:	f107 0318 	add.w	r3, r7, #24
 8000532:	4618      	mov	r0, r3
 8000534:	f005 fcb2 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800053e:	f000 fa3e 	bl	80009be <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000542:	4b2e      	ldr	r3, [pc, #184]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a2c      	ldr	r2, [pc, #176]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 800054a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800054c:	4b2b      	ldr	r3, [pc, #172]	@ (80005fc <HAL_ADC_MspInit+0x1e8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d10b      	bne.n	800056c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000558:	4a29      	ldr	r2, [pc, #164]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800055a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800055e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000560:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800056e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000570:	4a23      	ldr	r2, [pc, #140]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000578:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <HAL_ADC_MspInit+0x1ec>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000584:	2303      	movs	r3, #3
 8000586:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000588:	2303      	movs	r3, #3
 800058a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000594:	4619      	mov	r1, r3
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f002 fbed 	bl	8002d78 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <HAL_ADC_MspInit+0x200>)
 80005a2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005a6:	2224      	movs	r2, #36	@ 0x24
 80005a8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005bc:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005c2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005ce:	2220      	movs	r2, #32
 80005d0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80005d8:	480d      	ldr	r0, [pc, #52]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005da:	f002 fa13 	bl	8002a04 <HAL_DMA_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80005e4:	f000 f9eb 	bl	80009be <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a09      	ldr	r2, [pc, #36]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <HAL_ADC_MspInit+0x1fc>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80005f4:	bf00      	nop
 80005f6:	3770      	adds	r7, #112	@ 0x70
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000031c 	.word	0x2000031c
 8000600:	40021000 	.word	0x40021000
 8000604:	2000025c 	.word	0x2000025c
 8000608:	40020008 	.word	0x40020008
 800060c:	50000100 	.word	0x50000100
 8000610:	200002bc 	.word	0x200002bc
 8000614:	4002001c 	.word	0x4002001c

08000618 <ADC_Init>:
	filter_adc_2[0] = ADC_FILTER_ALPHA * buffer_adc_2[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_2[0];
	filter_adc_2[1] = ADC_FILTER_ALPHA * buffer_adc_2[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_2[1];
}

void ADC_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800061c:	217f      	movs	r1, #127	@ 0x7f
 800061e:	4804      	ldr	r0, [pc, #16]	@ (8000630 <ADC_Init+0x18>)
 8000620:	f001 ffda 	bl	80025d8 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000624:	217f      	movs	r1, #127	@ 0x7f
 8000626:	4803      	ldr	r0, [pc, #12]	@ (8000634 <ADC_Init+0x1c>)
 8000628:	f001 ffd6 	bl	80025d8 <HAL_ADCEx_Calibration_Start>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000184 	.word	0x20000184
 8000634:	200001f0 	.word	0x200001f0

08000638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_DMA_Init+0x60>)
 8000640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <MX_DMA_Init+0x60>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6493      	str	r3, [r2, #72]	@ 0x48
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_DMA_Init+0x60>)
 800064c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_DMA_Init+0x60>)
 8000658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <MX_DMA_Init+0x60>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6493      	str	r3, [r2, #72]	@ 0x48
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_DMA_Init+0x60>)
 8000664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200b      	movs	r0, #11
 8000674:	f002 f991 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000678:	200b      	movs	r0, #11
 800067a:	f002 f9a8 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200c      	movs	r0, #12
 8000684:	f002 f989 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000688:	200c      	movs	r0, #12
 800068a:	f002 f9a0 	bl	80029ce <HAL_NVIC_EnableIRQ>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <MX_GPIO_Init+0xa8>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_GPIO_Init+0xa8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <MX_GPIO_Init+0xac>)
 800071a:	f002 fcaf 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_GPIO_Init+0xac>)
 8000738:	f002 fb1e 	bl	8002d78 <HAL_GPIO_Init>

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	@ 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	48000800 	.word	0x48000800

0800074c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_I2C1_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	@ (80007c4 <MX_I2C1_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_I2C1_Init+0x74>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	@ (80007c8 <MX_I2C1_Init+0x7c>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_I2C1_Init+0x74>)
 8000764:	2201      	movs	r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_I2C1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000786:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <MX_I2C1_Init+0x74>)
 8000788:	f002 fc90 	bl	80030ac <HAL_I2C_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000792:	f000 f914 	bl	80009be <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <MX_I2C1_Init+0x74>)
 800079a:	f003 f855 	bl	8003848 <HAL_I2CEx_ConfigAnalogFilter>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f90b 	bl	80009be <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_I2C1_Init+0x74>)
 80007ac:	f003 f897 	bl	80038de <HAL_I2CEx_ConfigDigitalFilter>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 f902 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000320 	.word	0x20000320
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40621236 	.word	0x40621236

080007cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	@ 0x70
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	2244      	movs	r2, #68	@ 0x44
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00a fbcd 	bl	800af8c <memset>
  if(i2cHandle->Instance==I2C1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a2e      	ldr	r2, [pc, #184]	@ (80008b0 <HAL_I2C_MspInit+0xe4>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d154      	bne.n	80008a6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007fc:	2340      	movs	r3, #64	@ 0x40
 80007fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	4618      	mov	r0, r3
 800080a:	f005 fb47 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000814:	f000 f8d3 	bl	80009be <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081c:	4a25      	ldr	r2, [pc, #148]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000834:	4a1f      	ldr	r2, [pc, #124]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800084c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	2312      	movs	r3, #18
 8000850:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085a:	2304      	movs	r3, #4
 800085c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f002 fa86 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 800086c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000870:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	2312      	movs	r3, #18
 8000874:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087e:	2304      	movs	r3, #4
 8000880:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <HAL_I2C_MspInit+0xec>)
 800088a:	f002 fa75 	bl	8002d78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000898:	6593      	str	r3, [r2, #88]	@ 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_I2C_MspInit+0xe8>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	3770      	adds	r7, #112	@ 0x70
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40005400 	.word	0x40005400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <Keyboard_Init>:


#include "keyboard_controller.h"

void Keyboard_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    ADC_Init();
 80008c0:	f7ff feaa 	bl	8000618 <ADC_Init>
    HAL_Delay(100);
 80008c4:	2064      	movs	r0, #100	@ 0x64
 80008c6:	f000 fe43 	bl	8001550 <HAL_Delay>
    RGB_Init();
 80008ca:	f000 f947 	bl	8000b5c <RGB_Init>
    HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	@ 0x64
 80008d0:	f000 fe3e 	bl	8001550 <HAL_Delay>
    USB_Init();
 80008d4:	f000 fd9a 	bl	800140c <USB_Init>
    HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f000 fe39 	bl	8001550 <HAL_Delay>
    OLED_Init();
 80008de:	f000 f8e3 	bl	8000aa8 <OLED_Init>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fdc0 	bl	800146e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f81b 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff fed3 	bl	800069c <MX_GPIO_Init>
  MX_DMA_Init();
 80008f6:	f7ff fe9f 	bl	8000638 <MX_DMA_Init>
  MX_ADC1_Init();
 80008fa:	f7ff fc8d 	bl	8000218 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008fe:	f7ff fd13 	bl	8000328 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000902:	f7ff ff23 	bl	800074c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000906:	f000 f9db 	bl	8000cc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800090a:	f000 faa1 	bl	8000e50 <MX_TIM2_Init>
  MX_TIM3_Init();
 800090e:	f000 fb2b 	bl	8000f68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000912:	f000 fbb5 	bl	8001080 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8000916:	f009 ff23 	bl	800a760 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 800091a:	f7ff ffcf 	bl	80008bc <Keyboard_Init>
  HAL_Delay(100);
 800091e:	2064      	movs	r0, #100	@ 0x64
 8000920:	f000 fe16 	bl	8001550 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <main+0x3e>

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	@ 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0318 	add.w	r3, r7, #24
 8000932:	2238      	movs	r2, #56	@ 0x38
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f00a fb28 	bl	800af8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800094a:	2000      	movs	r0, #0
 800094c:	f004 fcfc 	bl	8005348 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000950:	2321      	movs	r3, #33	@ 0x21
 8000952:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000958:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	2303      	movs	r3, #3
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800096a:	2355      	movs	r3, #85	@ 0x55
 800096c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000972:	2306      	movs	r3, #6
 8000974:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0318 	add.w	r3, r7, #24
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fd96 	bl	80054b0 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800098a:	f000 f818 	bl	80009be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2104      	movs	r1, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 f894 	bl	8005ad4 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009b2:	f000 f804 	bl	80009be <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	@ 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c2:	b672      	cpsid	i
}
 80009c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c6:	bf00      	nop
 80009c8:	e7fd      	b.n	80009c6 <Error_Handler+0x8>
	...

080009cc <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80009d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009d6:	2100      	movs	r1, #0
 80009d8:	4811      	ldr	r0, [pc, #68]	@ (8000a20 <OLED_InitBuffer+0x54>)
 80009da:	f00a fad7 	bl	800af8c <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 80009de:	f240 4201 	movw	r2, #1025	@ 0x401
 80009e2:	2100      	movs	r1, #0
 80009e4:	480f      	ldr	r0, [pc, #60]	@ (8000a24 <OLED_InitBuffer+0x58>)
 80009e6:	f00a fad1 	bl	800af8c <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <OLED_InitBuffer+0x58>)
 80009ec:	2240      	movs	r2, #64	@ 0x40
 80009ee:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <OLED_InitBuffer+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <OLED_InitBuffer+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	e006      	b.n	8000a10 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <OLED_InitBuffer+0x64>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	2b07      	cmp	r3, #7
 8000a14:	d9f5      	bls.n	8000a02 <OLED_InitBuffer+0x36>
    }
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000380 	.word	0x20000380
 8000a24:	20000780 	.word	0x20000780
 8000a28:	20000374 	.word	0x20000374
 8000a2c:	20000375 	.word	0x20000375
 8000a30:	20000378 	.word	0x20000378

08000a34 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a3e:	2100      	movs	r1, #0
 8000a40:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <OLED_ClearBuffer+0x38>)
 8000a42:	f00a faa3 	bl	800af8c <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	e006      	b.n	8000a5a <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <OLED_ClearBuffer+0x3c>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	3301      	adds	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d9f5      	bls.n	8000a4c <OLED_ClearBuffer+0x18>
    }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000380 	.word	0x20000380
 8000a70:	20000378 	.word	0x20000378

08000a74 <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000a7e:	2300      	movs	r3, #0
 8000a80:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000a86:	f107 020c 	add.w	r2, r7, #12
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2302      	movs	r3, #2
 8000a92:	2178      	movs	r1, #120	@ 0x78
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <OLED_SendCommand+0x30>)
 8000a96:	f002 fba5 	bl	80031e4 <HAL_I2C_Master_Transmit>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000320 	.word	0x20000320

08000aa8 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000aac:	2064      	movs	r0, #100	@ 0x64
 8000aae:	f000 fd4f 	bl	8001550 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000ab2:	20ae      	movs	r0, #174	@ 0xae
 8000ab4:	f7ff ffde 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000ab8:	20d5      	movs	r0, #213	@ 0xd5
 8000aba:	f7ff ffdb 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000abe:	2080      	movs	r0, #128	@ 0x80
 8000ac0:	f7ff ffd8 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000ac4:	20a8      	movs	r0, #168	@ 0xa8
 8000ac6:	f7ff ffd5 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000aca:	203f      	movs	r0, #63	@ 0x3f
 8000acc:	f7ff ffd2 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000ad0:	20d3      	movs	r0, #211	@ 0xd3
 8000ad2:	f7ff ffcf 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ffcc 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000adc:	2040      	movs	r0, #64	@ 0x40
 8000ade:	f7ff ffc9 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000ae2:	208d      	movs	r0, #141	@ 0x8d
 8000ae4:	f7ff ffc6 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000ae8:	2014      	movs	r0, #20
 8000aea:	f7ff ffc3 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000aee:	2020      	movs	r0, #32
 8000af0:	f7ff ffc0 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff ffbd 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000afa:	20a1      	movs	r0, #161	@ 0xa1
 8000afc:	f7ff ffba 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000b00:	20c8      	movs	r0, #200	@ 0xc8
 8000b02:	f7ff ffb7 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000b06:	20da      	movs	r0, #218	@ 0xda
 8000b08:	f7ff ffb4 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000b0c:	2012      	movs	r0, #18
 8000b0e:	f7ff ffb1 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000b12:	2081      	movs	r0, #129	@ 0x81
 8000b14:	f7ff ffae 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000b18:	20cf      	movs	r0, #207	@ 0xcf
 8000b1a:	f7ff ffab 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000b1e:	20d9      	movs	r0, #217	@ 0xd9
 8000b20:	f7ff ffa8 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000b24:	20f1      	movs	r0, #241	@ 0xf1
 8000b26:	f7ff ffa5 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000b2a:	20db      	movs	r0, #219	@ 0xdb
 8000b2c:	f7ff ffa2 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000b30:	2030      	movs	r0, #48	@ 0x30
 8000b32:	f7ff ff9f 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000b36:	20a4      	movs	r0, #164	@ 0xa4
 8000b38:	f7ff ff9c 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000b3c:	20a6      	movs	r0, #166	@ 0xa6
 8000b3e:	f7ff ff99 	bl	8000a74 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000b42:	202e      	movs	r0, #46	@ 0x2e
 8000b44:	f7ff ff96 	bl	8000a74 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000b48:	f7ff ff40 	bl	80009cc <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000b4c:	f7ff ff72 	bl	8000a34 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000b50:	20af      	movs	r0, #175	@ 0xaf
 8000b52:	f7ff ff8f 	bl	8000a74 <OLED_SendCommand>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <RGB_Init>:
#include "rgb_controller.h"

#define COLOR_CALCULATION(color_value) ((color_value / RGB_MAX_BRIGHTNESS) * 200)

void RGB_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Red
 8000b60:	2100      	movs	r1, #0
 8000b62:	4812      	ldr	r0, [pc, #72]	@ (8000bac <RGB_Init+0x50>)
 8000b64:	f005 fc42 	bl	80063ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Green
 8000b68:	2104      	movs	r1, #4
 8000b6a:	4810      	ldr	r0, [pc, #64]	@ (8000bac <RGB_Init+0x50>)
 8000b6c:	f005 fc3e 	bl	80063ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Blue
 8000b70:	2108      	movs	r1, #8
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <RGB_Init+0x50>)
 8000b74:	f005 fc3a 	bl	80063ec <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Red
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <RGB_Init+0x54>)
 8000b7c:	f005 fc36 	bl	80063ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Green
 8000b80:	2104      	movs	r1, #4
 8000b82:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <RGB_Init+0x54>)
 8000b84:	f005 fc32 	bl	80063ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Blue
 8000b88:	2108      	movs	r1, #8
 8000b8a:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <RGB_Init+0x54>)
 8000b8c:	f005 fc2e 	bl	80063ec <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Red
 8000b90:	2100      	movs	r1, #0
 8000b92:	4808      	ldr	r0, [pc, #32]	@ (8000bb4 <RGB_Init+0x58>)
 8000b94:	f005 fc2a 	bl	80063ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Green
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <RGB_Init+0x58>)
 8000b9c:	f005 fc26 	bl	80063ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Blue
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <RGB_Init+0x58>)
 8000ba4:	f005 fc22 	bl	80063ec <HAL_TIM_PWM_Start>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000b84 	.word	0x20000b84
 8000bb0:	20000bd0 	.word	0x20000bd0
 8000bb4:	20000c1c 	.word	0x20000c1c

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bee:	f004 fc4f 	bl	8005490 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 fc5d 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <DMA1_Channel1_IRQHandler+0x10>)
 8000c66:	f001 ff75 	bl	8002b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000025c 	.word	0x2000025c

08000c74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <DMA1_Channel2_IRQHandler+0x10>)
 8000c7a:	f001 ff6b 	bl	8002b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002bc 	.word	0x200002bc

08000c88 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <USB_LP_IRQHandler+0x10>)
 8000c8e:	f002 ff62 	bl	8003b56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000118c 	.word	0x2000118c

08000c9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b09c      	sub	sp, #112	@ 0x70
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2234      	movs	r2, #52	@ 0x34
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00a f946 	bl	800af8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d00:	4b51      	ldr	r3, [pc, #324]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d02:	4a52      	ldr	r2, [pc, #328]	@ (8000e4c <MX_TIM1_Init+0x18c>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8000d06:	4b50      	ldr	r3, [pc, #320]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d08:	22a9      	movs	r2, #169	@ 0xa9
 8000d0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000d12:	4b4d      	ldr	r3, [pc, #308]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d14:	22c7      	movs	r2, #199	@ 0xc7
 8000d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b4b      	ldr	r3, [pc, #300]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b48      	ldr	r3, [pc, #288]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d2a:	4847      	ldr	r0, [pc, #284]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d2c:	f005 faa6 	bl	800627c <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d36:	f7ff fe42 	bl	80009be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d44:	4619      	mov	r1, r3
 8000d46:	4840      	ldr	r0, [pc, #256]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d48:	f005 fd64 	bl	8006814 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d52:	f7ff fe34 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d56:	483c      	ldr	r0, [pc, #240]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d58:	f005 fae7 	bl	800632a <HAL_TIM_PWM_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d62:	f7ff fe2c 	bl	80009be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d76:	4619      	mov	r1, r3
 8000d78:	4833      	ldr	r0, [pc, #204]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000d7a:	f006 fa99 	bl	80072b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000d84:	f7ff fe1b 	bl	80009be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	2360      	movs	r3, #96	@ 0x60
 8000d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d94:	2300      	movs	r3, #0
 8000d96:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	4826      	ldr	r0, [pc, #152]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000dae:	f005 fc1d 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000db8:	f7ff fe01 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dbc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4820      	ldr	r0, [pc, #128]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000dc6:	f005 fc11 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000dd0:	f7ff fdf5 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dd8:	2208      	movs	r2, #8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481a      	ldr	r0, [pc, #104]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000dde:	f005 fc05 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000de8:	f7ff fde9 	bl	80009be <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000e2a:	f006 fac3 	bl	80073b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8000e34:	f7ff fdc3 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e38:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <MX_TIM1_Init+0x188>)
 8000e3a:	f000 fa07 	bl	800124c <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3770      	adds	r7, #112	@ 0x70
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000b84 	.word	0x20000b84
 8000e4c:	40012c00 	.word	0x40012c00

08000e50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e82:	4b38      	ldr	r3, [pc, #224]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000e84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8000e8a:	4b36      	ldr	r3, [pc, #216]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000e8c:	22a9      	movs	r2, #169	@ 0xa9
 8000e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8000e96:	4b33      	ldr	r3, [pc, #204]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000e98:	22c7      	movs	r2, #199	@ 0xc7
 8000e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	482e      	ldr	r0, [pc, #184]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000eaa:	f005 f9e7 	bl	800627c <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000eb4:	f7ff fd83 	bl	80009be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4827      	ldr	r0, [pc, #156]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000ec6:	f005 fca5 	bl	8006814 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ed0:	f7ff fd75 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ed4:	4823      	ldr	r0, [pc, #140]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000ed6:	f005 fa28 	bl	800632a <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ee0:	f7ff fd6d 	bl	80009be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481c      	ldr	r0, [pc, #112]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000ef4:	f006 f9dc 	bl	80072b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000efe:	f7ff fd5e 	bl	80009be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f02:	2360      	movs	r3, #96	@ 0x60
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000f1a:	f005 fb67 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f24:	f7ff fd4b 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000f30:	f005 fb5c 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f3a:	f7ff fd40 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2208      	movs	r2, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000f46:	f005 fb51 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000f50:	f7ff fd35 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <MX_TIM2_Init+0x114>)
 8000f56:	f000 f979 	bl	800124c <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	@ 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000bd0 	.word	0x20000bd0

08000f68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	@ 0x38
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000f9c:	4a37      	ldr	r2, [pc, #220]	@ (800107c <MX_TIM3_Init+0x114>)
 8000f9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8000fa0:	4b35      	ldr	r3, [pc, #212]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fa2:	22a9      	movs	r2, #169	@ 0xa9
 8000fa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b34      	ldr	r3, [pc, #208]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000fac:	4b32      	ldr	r3, [pc, #200]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fae:	22c7      	movs	r2, #199	@ 0xc7
 8000fb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fbe:	482e      	ldr	r0, [pc, #184]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fc0:	f005 f95c 	bl	800627c <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fca:	f7ff fcf8 	bl	80009be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4827      	ldr	r0, [pc, #156]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fdc:	f005 fc1a 	bl	8006814 <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fe6:	f7ff fcea 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fea:	4823      	ldr	r0, [pc, #140]	@ (8001078 <MX_TIM3_Init+0x110>)
 8000fec:	f005 f99d 	bl	800632a <HAL_TIM_PWM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ff6:	f7ff fce2 	bl	80009be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	481b      	ldr	r0, [pc, #108]	@ (8001078 <MX_TIM3_Init+0x110>)
 800100a:	f006 f951 	bl	80072b0 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001014:	f7ff fcd3 	bl	80009be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2360      	movs	r3, #96	@ 0x60
 800101a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	4812      	ldr	r0, [pc, #72]	@ (8001078 <MX_TIM3_Init+0x110>)
 8001030:	f005 fadc 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800103a:	f7ff fcc0 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	2204      	movs	r2, #4
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <MX_TIM3_Init+0x110>)
 8001046:	f005 fad1 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001050:	f7ff fcb5 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2208      	movs	r2, #8
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	@ (8001078 <MX_TIM3_Init+0x110>)
 800105c:	f005 fac6 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001066:	f7ff fcaa 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800106a:	4803      	ldr	r0, [pc, #12]	@ (8001078 <MX_TIM3_Init+0x110>)
 800106c:	f000 f8ee 	bl	800124c <HAL_TIM_MspPostInit>

}
 8001070:	bf00      	nop
 8001072:	3738      	adds	r7, #56	@ 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000c1c 	.word	0x20000c1c
 800107c:	40000400 	.word	0x40000400

08001080 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	@ 0x38
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010b2:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010b4:	4a37      	ldr	r2, [pc, #220]	@ (8001194 <MX_TIM4_Init+0x114>)
 80010b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 80010b8:	4b35      	ldr	r3, [pc, #212]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010ba:	22a9      	movs	r2, #169	@ 0xa9
 80010bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010be:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80010c4:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010c6:	22c7      	movs	r2, #199	@ 0xc7
 80010c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010d6:	482e      	ldr	r0, [pc, #184]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010d8:	f005 f8d0 	bl	800627c <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010e2:	f7ff fc6c 	bl	80009be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4827      	ldr	r0, [pc, #156]	@ (8001190 <MX_TIM4_Init+0x110>)
 80010f4:	f005 fb8e 	bl	8006814 <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010fe:	f7ff fc5e 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001102:	4823      	ldr	r0, [pc, #140]	@ (8001190 <MX_TIM4_Init+0x110>)
 8001104:	f005 f911 	bl	800632a <HAL_TIM_PWM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800110e:	f7ff fc56 	bl	80009be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	481b      	ldr	r0, [pc, #108]	@ (8001190 <MX_TIM4_Init+0x110>)
 8001122:	f006 f8c5 	bl	80072b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800112c:	f7ff fc47 	bl	80009be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001130:	2360      	movs	r3, #96	@ 0x60
 8001132:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	4619      	mov	r1, r3
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <MX_TIM4_Init+0x110>)
 8001148:	f005 fa50 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001152:	f7ff fc34 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2204      	movs	r2, #4
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_TIM4_Init+0x110>)
 800115e:	f005 fa45 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001168:	f7ff fc29 	bl	80009be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2208      	movs	r2, #8
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	@ (8001190 <MX_TIM4_Init+0x110>)
 8001174:	f005 fa3a 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800117e:	f7ff fc1e 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <MX_TIM4_Init+0x110>)
 8001184:	f000 f862 	bl	800124c <HAL_TIM_MspPostInit>

}
 8001188:	bf00      	nop
 800118a:	3738      	adds	r7, #56	@ 0x38
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000c68 	.word	0x20000c68
 8001194:	40000800 	.word	0x40000800

08001198 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a25      	ldr	r2, [pc, #148]	@ (800123c <HAL_TIM_Base_MspInit+0xa4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10c      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011aa:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ae:	4a24      	ldr	r2, [pc, #144]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011c2:	e034      	b.n	800122e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011cc:	d10c      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
}
 80011e6:	e022      	b.n	800122e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <HAL_TIM_Base_MspInit+0xac>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10c      	bne.n	800120c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	e010      	b.n	800122e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <HAL_TIM_Base_MspInit+0xb0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10b      	bne.n	800122e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	4a09      	ldr	r2, [pc, #36]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6593      	str	r3, [r2, #88]	@ 0x58
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <HAL_TIM_Base_MspInit+0xa8>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
}
 800122e:	bf00      	nop
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40012c00 	.word	0x40012c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40000400 	.word	0x40000400
 8001248:	40000800 	.word	0x40000800

0800124c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a63      	ldr	r2, [pc, #396]	@ (80013f8 <HAL_TIM_MspPostInit+0x1ac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d11e      	bne.n	80012ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b63      	ldr	r3, [pc, #396]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a62      	ldr	r2, [pc, #392]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b60      	ldr	r3, [pc, #384]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Key1_R_Pin|Key1_G_Pin|Key1_B_Pin;
 8001286:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001298:	2306      	movs	r3, #6
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a6:	f001 fd67 	bl	8002d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012aa:	e0a0      	b.n	80013ee <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b4:	d13a      	bne.n	800132c <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b51      	ldr	r3, [pc, #324]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	4a50      	ldr	r2, [pc, #320]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c2:	4b4e      	ldr	r3, [pc, #312]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b4b      	ldr	r3, [pc, #300]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	4a4a      	ldr	r2, [pc, #296]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012da:	4b48      	ldr	r3, [pc, #288]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Key2_R_Pin;
 80012e6:	2320      	movs	r3, #32
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012f6:	2301      	movs	r3, #1
 80012f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Key2_R_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f001 fd38 	bl	8002d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Key2_B_Pin|Key2_G_Pin;
 8001308:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800131a:	2301      	movs	r3, #1
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	4836      	ldr	r0, [pc, #216]	@ (8001400 <HAL_TIM_MspPostInit+0x1b4>)
 8001326:	f001 fd27 	bl	8002d78 <HAL_GPIO_Init>
}
 800132a:	e060      	b.n	80013ee <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a34      	ldr	r2, [pc, #208]	@ (8001404 <HAL_TIM_MspPostInit+0x1b8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d139      	bne.n	80013aa <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a30      	ldr	r2, [pc, #192]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a2a      	ldr	r2, [pc, #168]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Key3_G_Pin|Key3_R_Pin;
 8001366:	2350      	movs	r3, #80	@ 0x50
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001376:	2302      	movs	r3, #2
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001384:	f001 fcf8 	bl	8002d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Key3_B_Pin;
 8001388:	2301      	movs	r3, #1
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001398:	2302      	movs	r3, #2
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Key3_B_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4817      	ldr	r0, [pc, #92]	@ (8001400 <HAL_TIM_MspPostInit+0x1b4>)
 80013a4:	f001 fce8 	bl	8002d78 <HAL_GPIO_Init>
}
 80013a8:	e021      	b.n	80013ee <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM4)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a16      	ldr	r2, [pc, #88]	@ (8001408 <HAL_TIM_MspPostInit+0x1bc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d11c      	bne.n	80013ee <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	4a10      	ldr	r2, [pc, #64]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_TIM_MspPostInit+0x1b0>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Key4_R_Pin|Key4_G_Pin|Key4_B_Pin;
 80013cc:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013de:	2302      	movs	r3, #2
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <HAL_TIM_MspPostInit+0x1b4>)
 80013ea:	f001 fcc5 	bl	8002d78 <HAL_GPIO_Init>
}
 80013ee:	bf00      	nop
 80013f0:	3738      	adds	r7, #56	@ 0x38
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000400 	.word	0x48000400
 8001404:	40000400 	.word	0x40000400
 8001408:	40000800 	.word	0x40000800

0800140c <USB_Init>:


#include "usb_controller.h"

void USB_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    // MX_USB_DEVICE_Init(); // 已经在main中初始化
    HAL_Delay(100);
 8001410:	2064      	movs	r0, #100	@ 0x64
 8001412:	f000 f89d 	bl	8001550 <HAL_Delay>

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800141e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001420:	f7ff fc3c 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800144a:	f009 fda7 	bl	800af9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144e:	f7ff fa4a 	bl	80008e6 <main>

08001452 <LoopForever>:

LoopForever:
    b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   r0, =_estack
 8001454:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001460:	0800b05c 	.word	0x0800b05c
  ldr r2, =_sbss
 8001464:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001468:	2000147c 	.word	0x2000147c

0800146c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC1_2_IRQHandler>

0800146e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f001 fa83 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f80e 	bl	80014a0 <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	e001      	b.n	8001494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001490:	f7ff fb92 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001494:	79fb      	ldrb	r3, [r7, #7]

}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <HAL_InitTick+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d022      	beq.n	80014fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014b4:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_InitTick+0x6c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <HAL_InitTick+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fa8e 	bl	80029ea <HAL_SYSTICK_Config>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10f      	bne.n	80014f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	d809      	bhi.n	80014ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014da:	2200      	movs	r2, #0
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	f04f 30ff 	mov.w	r0, #4294967295
 80014e2:	f001 fa5a 	bl	800299a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <HAL_InitTick+0x70>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e007      	b.n	80014fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e004      	b.n	80014fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000008 	.word	0x20000008
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_IncTick+0x1c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_IncTick+0x20>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4413      	add	r3, r2
 8001522:	4a03      	ldr	r2, [pc, #12]	@ (8001530 <HAL_IncTick+0x1c>)
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	20000cb4 	.word	0x20000cb4
 8001534:	20000008 	.word	0x20000008

08001538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <HAL_GetTick+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000cb4 	.word	0x20000cb4

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff ffee 	bl	8001538 <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d004      	beq.n	8001574 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_Delay+0x40>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001574:	bf00      	nop
 8001576:	f7ff ffdf 	bl	8001538 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	429a      	cmp	r2, r3
 8001584:	d8f7      	bhi.n	8001576 <HAL_Delay+0x26>
  {
  }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000008 	.word	0x20000008

08001594 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3360      	adds	r3, #96	@ 0x60
 800160e:	461a      	mov	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <LL_ADC_SetOffset+0x44>)
 800161e:	4013      	ands	r3, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	4313      	orrs	r3, r2
 800162c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	03fff000 	.word	0x03fff000

08001644 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3360      	adds	r3, #96	@ 0x60
 8001652:	461a      	mov	r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3360      	adds	r3, #96	@ 0x60
 8001680:	461a      	mov	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	431a      	orrs	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b087      	sub	sp, #28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3360      	adds	r3, #96	@ 0x60
 80016b6:	461a      	mov	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3360      	adds	r3, #96	@ 0x60
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001706:	bf00      	nop
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	615a      	str	r2, [r3, #20]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3330      	adds	r3, #48	@ 0x30
 8001748:	461a      	mov	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	4413      	add	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	211f      	movs	r1, #31
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	f003 011f 	and.w	r1, r3, #31
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3314      	adds	r3, #20
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	0e5b      	lsrs	r3, r3, #25
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	0d1b      	lsrs	r3, r3, #20
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2107      	movs	r1, #7
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	0d1b      	lsrs	r3, r3, #20
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0318 	and.w	r3, r3, #24
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <LL_ADC_SetChannelSingleDiff+0x44>)
 800180c:	40d9      	lsrs	r1, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	400b      	ands	r3, r1
 8001812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	0007ffff 	.word	0x0007ffff

08001830 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001840:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6093      	str	r3, [r2, #8]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001868:	d101      	bne.n	800186e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800188c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001890:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018e0:	f043 0202 	orr.w	r2, r3, #2
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <LL_ADC_IsEnabled+0x18>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <LL_ADC_IsEnabled+0x1a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b02      	cmp	r3, #2
 800192c:	d101      	bne.n	8001932 <LL_ADC_IsDisableOngoing+0x18>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_ADC_IsDisableOngoing+0x1a>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d101      	bne.n	8001958 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b08      	cmp	r3, #8
 8001978:	d101      	bne.n	800197e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e167      	b.n	8001c76 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7fe fd2d 	bl	8000414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff41 	bl	8001854 <LL_ADC_IsDeepPowerDownEnabled>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff27 	bl	8001830 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff5c 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d115      	bne.n	8001a1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff40 	bl	800187c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c80 <HAL_ADC_Init+0x2f4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	4aa0      	ldr	r2, [pc, #640]	@ (8001c84 <HAL_ADC_Init+0x2f8>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	099b      	lsrs	r3, r3, #6
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff3e 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f043 0210 	orr.w	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff76 	bl	8001940 <LL_ADC_REG_IsConversionOngoing>
 8001a54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 8100 	bne.w	8001c64 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 80fc 	bne.w	8001c64 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff37 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d111      	bne.n	8001ab0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a8c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a90:	f7ff ff30 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a94:	4604      	mov	r4, r0
 8001a96:	487c      	ldr	r0, [pc, #496]	@ (8001c88 <HAL_ADC_Init+0x2fc>)
 8001a98:	f7ff ff2c 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4323      	orrs	r3, r4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4878      	ldr	r0, [pc, #480]	@ (8001c8c <HAL_ADC_Init+0x300>)
 8001aac:	f7ff fd72 	bl	8001594 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7f5b      	ldrb	r3, [r3, #29]
 8001ab4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ac0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ac6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ace:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d106      	bne.n	8001aec <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	045b      	lsls	r3, r3, #17
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b60      	ldr	r3, [pc, #384]	@ (8001c90 <HAL_ADC_Init+0x304>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff15 	bl	8001966 <LL_ADC_INJ_IsConversionOngoing>
 8001b3c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d16d      	bne.n	8001c20 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d16a      	bne.n	8001c20 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b4e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b66:	f023 0302 	bic.w	r3, r3, #2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	69b9      	ldr	r1, [r7, #24]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6911      	ldr	r1, [r2, #16]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001baa:	e013      	b.n	8001bd4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001bba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d118      	bne.n	8001c10 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c00:	430a      	orrs	r2, r1
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	e007      	b.n	8001c20 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10c      	bne.n	8001c42 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f023 010f 	bic.w	r1, r3, #15
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c40:	e007      	b.n	8001c52 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020f 	bic.w	r2, r2, #15
 8001c50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c62:	e007      	b.n	8001c74 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	f043 0210 	orr.w	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000
 8001c84:	053e2d63 	.word	0x053e2d63
 8001c88:	50000100 	.word	0x50000100
 8001c8c:	50000300 	.word	0x50000300
 8001c90:	fff04007 	.word	0xfff04007

08001c94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0b6      	sub	sp, #216	@ 0xd8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x22>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e3c8      	b.n	8002448 <HAL_ADC_ConfigChannel+0x7b4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe3c 	bl	8001940 <LL_ADC_REG_IsConversionOngoing>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 83ad 	bne.w	800242a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f7ff fd2b 	bl	8001738 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe2a 	bl	8001940 <LL_ADC_REG_IsConversionOngoing>
 8001cec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe36 	bl	8001966 <LL_ADC_INJ_IsConversionOngoing>
 8001cfa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 81d9 	bne.w	80020ba <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 81d4 	bne.w	80020ba <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d1a:	d10f      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7ff fd32 	bl	8001790 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fcec 	bl	8001712 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d3a:	e00e      	b.n	8001d5a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fd21 	bl	8001790 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fcdc 	bl	8001712 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d022      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d8c:	f7ff fc36 	bl	80015fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6919      	ldr	r1, [r3, #16]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fc82 	bl	80016a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x124>
 8001db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db6:	e000      	b.n	8001dba <HAL_ADC_ConfigChannel+0x126>
 8001db8:	2300      	movs	r3, #0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f7ff fc8e 	bl	80016dc <LL_ADC_SetOffsetSaturation>
 8001dc0:	e17b      	b.n	80020ba <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fc3b 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x15a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fc30 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	e01e      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x198>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fc25 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e004      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1b0>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	e018      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1e2>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e004      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d106      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fbf4 	bl	8001670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fbd8 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x220>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fbcd 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	e01e      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x25e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fbc2 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e004      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x276>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	e018      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x2a8>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	e004      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fb91 	bl	8001670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2102      	movs	r1, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fb75 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x2e6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fb6a 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	e01e      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x324>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fb5f 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e004      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x33c>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	e016      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x36a>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001fe2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e004      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	2102      	movs	r1, #2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fb30 	bl	8001670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2103      	movs	r1, #3
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fb14 	bl	8001644 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x3a8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2103      	movs	r1, #3
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fb09 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 021f 	and.w	r2, r3, #31
 800203a:	e017      	b.n	800206c <HAL_ADC_ConfigChannel+0x3d8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2103      	movs	r1, #3
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fafe 	bl	8001644 <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002056:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800205e:	2320      	movs	r3, #32
 8002060:	e003      	b.n	800206a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x3f0>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	e011      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x414>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002094:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e003      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80020a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d106      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2200      	movs	r2, #0
 80020b2:	2103      	movs	r1, #3
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fadb 	bl	8001670 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fc18 	bl	80018f4 <LL_ADC_IsEnabled>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 8140 	bne.w	800234c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	461a      	mov	r2, r3
 80020da:	f7ff fb85 	bl	80017e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a8f      	ldr	r2, [pc, #572]	@ (8002320 <HAL_ADC_ConfigChannel+0x68c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	f040 8131 	bne.w	800234c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x47e>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2b09      	cmp	r3, #9
 8002108:	bf94      	ite	ls
 800210a:	2301      	movls	r3, #1
 800210c:	2300      	movhi	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e019      	b.n	8002146 <HAL_ADC_ConfigChannel+0x4b2>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002122:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002124:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e003      	b.n	8002136 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800212e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2b09      	cmp	r3, #9
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002146:	2b00      	cmp	r3, #0
 8002148:	d079      	beq.n	800223e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x4d2>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	3301      	adds	r3, #1
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002164:	e015      	b.n	8002192 <HAL_ADC_ConfigChannel+0x4fe>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002176:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	069b      	lsls	r3, r3, #26
 800218e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x51e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	e017      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x54e>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80021c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80021c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80021ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	ea42 0103 	orr.w	r1, r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10a      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x574>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0e9b      	lsrs	r3, r3, #26
 80021f8:	3301      	adds	r3, #1
 80021fa:	f003 021f 	and.w	r2, r3, #31
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	e018      	b.n	800223a <HAL_ADC_ConfigChannel+0x5a6>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800221a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223a:	430b      	orrs	r3, r1
 800223c:	e081      	b.n	8002342 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_ADC_ConfigChannel+0x5c6>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	3301      	adds	r3, #1
 8002252:	069b      	lsls	r3, r3, #26
 8002254:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002258:	e015      	b.n	8002286 <HAL_ADC_ConfigChannel+0x5f2>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002272:	2320      	movs	r3, #32
 8002274:	e003      	b.n	800227e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	3301      	adds	r3, #1
 8002280:	069b      	lsls	r3, r3, #26
 8002282:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x612>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	3301      	adds	r3, #1
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	e017      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x642>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	61fb      	str	r3, [r7, #28]
  return result;
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	ea42 0103 	orr.w	r1, r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x66e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	3301      	adds	r3, #1
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	3b1e      	subs	r3, #30
 80022fa:	051b      	lsls	r3, r3, #20
 80022fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002300:	e01e      	b.n	8002340 <HAL_ADC_ConfigChannel+0x6ac>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	613b      	str	r3, [r7, #16]
  return result;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e006      	b.n	800232c <HAL_ADC_ConfigChannel+0x698>
 800231e:	bf00      	nop
 8002320:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f003 021f 	and.w	r2, r3, #31
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	051b      	lsls	r3, r3, #20
 800233c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002346:	4619      	mov	r1, r3
 8002348:	f7ff fa22 	bl	8001790 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <HAL_ADC_ConfigChannel+0x7bc>)
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d071      	beq.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002358:	483e      	ldr	r0, [pc, #248]	@ (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 800235a:	f7ff f941 	bl	80015e0 <LL_ADC_GetCommonPathInternalCh>
 800235e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3c      	ldr	r2, [pc, #240]	@ (8002458 <HAL_ADC_ConfigChannel+0x7c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x6e2>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3a      	ldr	r2, [pc, #232]	@ (800245c <HAL_ADC_ConfigChannel+0x7c8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d127      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800237a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d121      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800238a:	d157      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002394:	4619      	mov	r1, r3
 8002396:	482f      	ldr	r0, [pc, #188]	@ (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 8002398:	f7ff f90f 	bl	80015ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239c:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <HAL_ADC_ConfigChannel+0x7cc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	4a30      	ldr	r2, [pc, #192]	@ (8002464 <HAL_ADC_ConfigChannel+0x7d0>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023b6:	e002      	b.n	80023be <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c4:	e03a      	b.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a27      	ldr	r2, [pc, #156]	@ (8002468 <HAL_ADC_ConfigChannel+0x7d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d113      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a22      	ldr	r2, [pc, #136]	@ (800246c <HAL_ADC_ConfigChannel+0x7d8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02a      	beq.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ee:	4619      	mov	r1, r3
 80023f0:	4818      	ldr	r0, [pc, #96]	@ (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 80023f2:	f7ff f8e2 	bl	80015ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f6:	e021      	b.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d11c      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a16      	ldr	r2, [pc, #88]	@ (800246c <HAL_ADC_ConfigChannel+0x7d8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d011      	beq.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800241c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002420:	4619      	mov	r1, r3
 8002422:	480c      	ldr	r0, [pc, #48]	@ (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 8002424:	f7ff f8c9 	bl	80015ba <LL_ADC_SetCommonPathInternalCh>
 8002428:	e008      	b.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002444:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002448:	4618      	mov	r0, r3
 800244a:	37d8      	adds	r7, #216	@ 0xd8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	80080000 	.word	0x80080000
 8002454:	50000300 	.word	0x50000300
 8002458:	c3210000 	.word	0xc3210000
 800245c:	90c00010 	.word	0x90c00010
 8002460:	20000000 	.word	0x20000000
 8002464:	053e2d63 	.word	0x053e2d63
 8002468:	c7520000 	.word	0xc7520000
 800246c:	50000100 	.word	0x50000100
 8002470:	cb840000 	.word	0xcb840000

08002474 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fa4a 	bl	800191a <LL_ADC_IsDisableOngoing>
 8002486:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fa31 	bl	80018f4 <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d047      	beq.n	8002528 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d144      	bne.n	8002528 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030d 	and.w	r3, r3, #13
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10c      	bne.n	80024c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa0b 	bl	80018cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2203      	movs	r2, #3
 80024bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024be:	f7ff f83b 	bl	8001538 <HAL_GetTick>
 80024c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024c4:	e029      	b.n	800251a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e023      	b.n	800252a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024e2:	f7ff f829 	bl	8001538 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d914      	bls.n	800251a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e007      	b.n	800252a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1dc      	bne.n	80024e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <LL_ADC_IsEnabled>:
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <LL_ADC_IsEnabled+0x18>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_IsEnabled+0x1a>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_StartCalibration>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800256a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002574:	4313      	orrs	r3, r2
 8002576:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_ADC_IsCalibrationOnGoing>:
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800259a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800259e:	d101      	bne.n	80025a4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d101      	bne.n	80025ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_ADCEx_Calibration_Start+0x1c>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e04d      	b.n	8002690 <HAL_ADCEx_Calibration_Start+0xb8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff39 	bl	8002474 <ADC_Disable>
 8002602:	4603      	mov	r3, r0
 8002604:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d136      	bne.n	800267a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002614:	f023 0302 	bic.w	r3, r3, #2
 8002618:	f043 0202 	orr.w	r2, r3, #2
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff96 	bl	8002558 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800262c:	e014      	b.n	8002658 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3301      	adds	r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d90d      	bls.n	8002658 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	f023 0312 	bic.w	r3, r3, #18
 8002644:	f043 0210 	orr.w	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01b      	b.n	8002690 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff94 	bl	800258a <LL_ADC_IsCalibrationOnGoing>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e2      	bne.n	800262e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	f023 0303 	bic.w	r3, r3, #3
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002678:	e005      	b.n	8002686 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	0004de01 	.word	0x0004de01

0800269c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b0a1      	sub	sp, #132	@ 0x84
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e08b      	b.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026c2:	2300      	movs	r3, #0
 80026c4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026c6:	2300      	movs	r3, #0
 80026c8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d2:	d102      	bne.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026d4:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	e001      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e06a      	b.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff57 	bl	80025b2 <LL_ADC_REG_IsConversionOngoing>
 8002704:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff51 	bl	80025b2 <LL_ADC_REG_IsConversionOngoing>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d14c      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002718:	2b00      	cmp	r3, #0
 800271a:	d149      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800271c:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800271e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d028      	beq.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800273a:	035b      	lsls	r3, r3, #13
 800273c:	430b      	orrs	r3, r1
 800273e:	431a      	orrs	r2, r3
 8002740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002742:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002748:	f7ff fef3 	bl	8002532 <LL_ADC_IsEnabled>
 800274c:	4604      	mov	r4, r0
 800274e:	4823      	ldr	r0, [pc, #140]	@ (80027dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002750:	f7ff feef 	bl	8002532 <LL_ADC_IsEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	4323      	orrs	r3, r4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d133      	bne.n	80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800275c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002764:	f023 030f 	bic.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	6811      	ldr	r1, [r2, #0]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	430a      	orrs	r2, r1
 8002772:	431a      	orrs	r2, r3
 8002774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002776:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002778:	e024      	b.n	80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800277a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002782:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002784:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002786:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800278a:	f7ff fed2 	bl	8002532 <LL_ADC_IsEnabled>
 800278e:	4604      	mov	r4, r0
 8002790:	4812      	ldr	r0, [pc, #72]	@ (80027dc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002792:	f7ff fece 	bl	8002532 <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	4323      	orrs	r3, r4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d112      	bne.n	80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800279e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027a6:	f023 030f 	bic.w	r3, r3, #15
 80027aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80027ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027ae:	e009      	b.n	80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027c2:	e000      	b.n	80027c6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3784      	adds	r7, #132	@ 0x84
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	bf00      	nop
 80027dc:	50000100 	.word	0x50000100
 80027e0:	50000300 	.word	0x50000300

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	@ (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	@ (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	@ 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	@ 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002950:	d301      	bcc.n	8002956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002952:	2301      	movs	r3, #1
 8002954:	e00f      	b.n	8002976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <SysTick_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295e:	210f      	movs	r1, #15
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f7ff ff8e 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <SysTick_Config+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <SysTick_Config+0x40>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff29 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029a8:	f7ff ff40 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7ff ff90 	bl	80028d8 <NVIC_EncodePriority>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff5f 	bl	8002884 <__NVIC_SetPriority>
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff33 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffa4 	bl	8002940 <SysTick_Config>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e08d      	b.n	8002b32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_DMA_Init+0x138>)
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d80f      	bhi.n	8002a42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b45      	ldr	r3, [pc, #276]	@ (8002b40 <HAL_DMA_Init+0x13c>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a45      	ldr	r2, [pc, #276]	@ (8002b44 <HAL_DMA_Init+0x140>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	@ (8002b48 <HAL_DMA_Init+0x144>)
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a40:	e00e      	b.n	8002a60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b40      	ldr	r3, [pc, #256]	@ (8002b4c <HAL_DMA_Init+0x148>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b44 <HAL_DMA_Init+0x140>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	009a      	lsls	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b50 <HAL_DMA_Init+0x14c>)
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8fe 	bl	8002cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ac0:	d102      	bne.n	8002ac8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002adc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d010      	beq.n	8002b08 <HAL_DMA_Init+0x104>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d80c      	bhi.n	8002b08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f91e 	bl	8002d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	e008      	b.n	8002b1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40020407 	.word	0x40020407
 8002b40:	bffdfff8 	.word	0xbffdfff8
 8002b44:	cccccccd 	.word	0xcccccccd
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	bffdfbf8 	.word	0xbffdfbf8
 8002b50:	40020400 	.word	0x40020400

08002b54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2204      	movs	r2, #4
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d026      	beq.n	8002bce <HAL_DMA_IRQHandler+0x7a>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d021      	beq.n	8002bce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0204 	bic.w	r2, r2, #4
 8002ba6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d071      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002bcc:	e06c      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02e      	beq.n	8002c40 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d029      	beq.n	8002c40 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10b      	bne.n	8002c12 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 020a 	bic.w	r2, r2, #10
 8002c08:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f003 021f 	and.w	r2, r3, #31
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2102      	movs	r1, #2
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d038      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c3e:	e033      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2208      	movs	r2, #8
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02a      	beq.n	8002caa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d025      	beq.n	8002caa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 020e 	bic.w	r2, r2, #14
 8002c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
}
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d802      	bhi.n	8002cce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e001      	b.n	8002cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002cce:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002cd0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002cfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2201      	movs	r2, #1
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40020407 	.word	0x40020407
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020820 	.word	0x40020820
 8002d28:	cccccccd 	.word	0xcccccccd
 8002d2c:	40020880 	.word	0x40020880

08002d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a08      	ldr	r2, [pc, #32]	@ (8002d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d52:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	1000823f 	.word	0x1000823f
 8002d74:	40020940 	.word	0x40020940

08002d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d86:	e15a      	b.n	800303e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 814c 	beq.w	8003038 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d005      	beq.n	8002db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d130      	bne.n	8002e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dee:	2201      	movs	r2, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0201 	and.w	r2, r3, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d017      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d123      	bne.n	8002eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	08da      	lsrs	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	6939      	ldr	r1, [r7, #16]
 8002ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a6 	beq.w	8003038 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eec:	4b5b      	ldr	r3, [pc, #364]	@ (800305c <HAL_GPIO_Init+0x2e4>)
 8002eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800305c <HAL_GPIO_Init+0x2e4>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ef8:	4b58      	ldr	r3, [pc, #352]	@ (800305c <HAL_GPIO_Init+0x2e4>)
 8002efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f04:	4a56      	ldr	r2, [pc, #344]	@ (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f2e:	d01f      	beq.n	8002f70 <HAL_GPIO_Init+0x1f8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a4c      	ldr	r2, [pc, #304]	@ (8003064 <HAL_GPIO_Init+0x2ec>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d019      	beq.n	8002f6c <HAL_GPIO_Init+0x1f4>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8003068 <HAL_GPIO_Init+0x2f0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_GPIO_Init+0x1f0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a4a      	ldr	r2, [pc, #296]	@ (800306c <HAL_GPIO_Init+0x2f4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00d      	beq.n	8002f64 <HAL_GPIO_Init+0x1ec>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a49      	ldr	r2, [pc, #292]	@ (8003070 <HAL_GPIO_Init+0x2f8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <HAL_GPIO_Init+0x1e8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a48      	ldr	r2, [pc, #288]	@ (8003074 <HAL_GPIO_Init+0x2fc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_GPIO_Init+0x1e4>
 8002f58:	2305      	movs	r3, #5
 8002f5a:	e00a      	b.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	e008      	b.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f60:	2304      	movs	r3, #4
 8002f62:	e006      	b.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f64:	2303      	movs	r3, #3
 8002f66:	e004      	b.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e002      	b.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f70:	2300      	movs	r3, #0
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	f002 0203 	and.w	r2, r2, #3
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	4093      	lsls	r3, r2
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f82:	4937      	ldr	r1, [pc, #220]	@ (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f90:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <HAL_GPIO_Init+0x300>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fb4:	4a30      	ldr	r2, [pc, #192]	@ (8003078 <HAL_GPIO_Init+0x300>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fba:	4b2f      	ldr	r3, [pc, #188]	@ (8003078 <HAL_GPIO_Init+0x300>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fde:	4a26      	ldr	r2, [pc, #152]	@ (8003078 <HAL_GPIO_Init+0x300>)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fe4:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_GPIO_Init+0x300>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003008:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <HAL_GPIO_Init+0x300>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800300e:	4b1a      	ldr	r3, [pc, #104]	@ (8003078 <HAL_GPIO_Init+0x300>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003032:	4a11      	ldr	r2, [pc, #68]	@ (8003078 <HAL_GPIO_Init+0x300>)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3301      	adds	r3, #1
 800303c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f ae9d 	bne.w	8002d88 <HAL_GPIO_Init+0x10>
  }
}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40021000 	.word	0x40021000
 8003060:	40010000 	.word	0x40010000
 8003064:	48000400 	.word	0x48000400
 8003068:	48000800 	.word	0x48000800
 800306c:	48000c00 	.word	0x48000c00
 8003070:	48001000 	.word	0x48001000
 8003074:	48001400 	.word	0x48001400
 8003078:	40010400 	.word	0x40010400

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e08d      	b.n	80031da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fb7a 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	@ 0x24
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800310c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e006      	b.n	8003134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d108      	bne.n	800314e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	e007      	b.n	800315e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800315c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800316c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	461a      	mov	r2, r3
 80031f0:	460b      	mov	r3, r1
 80031f2:	817b      	strh	r3, [r7, #10]
 80031f4:	4613      	mov	r3, r2
 80031f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	f040 80fd 	bne.w	8003400 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x30>
 8003210:	2302      	movs	r3, #2
 8003212:	e0f6      	b.n	8003402 <HAL_I2C_Master_Transmit+0x21e>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800321c:	f7fe f98c 	bl	8001538 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2319      	movs	r3, #25
 8003228:	2201      	movs	r2, #1
 800322a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f914 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0e1      	b.n	8003402 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2221      	movs	r2, #33	@ 0x21
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2210      	movs	r2, #16
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	893a      	ldrh	r2, [r7, #8]
 800325e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	2bff      	cmp	r3, #255	@ 0xff
 800326e:	d906      	bls.n	800327e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	22ff      	movs	r2, #255	@ 0xff
 8003274:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003276:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e007      	b.n	800328e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800328c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d024      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	8979      	ldrh	r1, [r7, #10]
 80032d2:	4b4e      	ldr	r3, [pc, #312]	@ (800340c <HAL_I2C_Master_Transmit+0x228>)
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fa83 	bl	80037e4 <I2C_TransferConfig>
 80032de:	e066      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	4b48      	ldr	r3, [pc, #288]	@ (800340c <HAL_I2C_Master_Transmit+0x228>)
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fa78 	bl	80037e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032f4:	e05b      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f907 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07b      	b.n	8003402 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d034      	beq.n	80033ae <HAL_I2C_Master_Transmit+0x1ca>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d130      	bne.n	80033ae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2200      	movs	r2, #0
 8003354:	2180      	movs	r1, #128	@ 0x80
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f880 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e04d      	b.n	8003402 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	2bff      	cmp	r3, #255	@ 0xff
 800336e:	d90e      	bls.n	800338e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	22ff      	movs	r2, #255	@ 0xff
 8003374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	b2da      	uxtb	r2, r3
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa2c 	bl	80037e4 <I2C_TransferConfig>
 800338c:	e00f      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	2300      	movs	r3, #0
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fa1b 	bl	80037e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d19e      	bne.n	80032f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	6a39      	ldr	r1, [r7, #32]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f8ed 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e01a      	b.n	8003402 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2220      	movs	r2, #32
 80033d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <HAL_I2C_Master_Transmit+0x22c>)
 80033e0:	400b      	ands	r3, r1
 80033e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	80002000 	.word	0x80002000
 8003410:	fe00e800 	.word	0xfe00e800

08003414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d007      	beq.n	8003450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	619a      	str	r2, [r3, #24]
  }
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e03b      	b.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f8d6 	bl	8003624 <I2C_IsErrorOccurred>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d02d      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe f855 	bl	8001538 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d122      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d113      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d0b4      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351a:	e033      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f87f 	bl	8003624 <I2C_IsErrorOccurred>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e031      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d025      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7fd fffe 	bl	8001538 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11a      	bne.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d013      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d1c4      	bne.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	e02f      	b.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f838 	bl	8003624 <I2C_IsErrorOccurred>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02d      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fd ffbb 	bl	8001538 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11a      	bne.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d013      	beq.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d1c8      	bne.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	@ 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d068      	beq.n	8003722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003658:	e049      	b.n	80036ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d045      	beq.n	80036ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fd ff69 	bl	8001538 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_IsErrorOccurred+0x54>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d13a      	bne.n	80036ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800368a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369a:	d121      	bne.n	80036e0 <I2C_IsErrorOccurred+0xbc>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a2:	d01d      	beq.n	80036e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d01a      	beq.n	80036e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036ba:	f7fd ff3d 	bl	8001538 <HAL_GetTick>
 80036be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c0:	e00e      	b.n	80036e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036c2:	f7fd ff39 	bl	8001538 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b19      	cmp	r3, #25
 80036ce:	d907      	bls.n	80036e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80036de:	e006      	b.n	80036ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d1e9      	bne.n	80036c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d003      	beq.n	8003704 <I2C_IsErrorOccurred+0xe0>
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0aa      	beq.n	800365a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2220      	movs	r2, #32
 8003712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01c      	beq.n	80037d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fe3b 	bl	8003414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <I2C_IsErrorOccurred+0x1bc>)
 80037aa:	400b      	ands	r3, r1
 80037ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3728      	adds	r7, #40	@ 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	4613      	mov	r3, r2
 80037f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037fc:	7a7b      	ldrb	r3, [r7, #9]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	4313      	orrs	r3, r2
 800380e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	0d5b      	lsrs	r3, r3, #21
 800381e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <I2C_TransferConfig+0x60>)
 8003824:	430b      	orrs	r3, r1
 8003826:	43db      	mvns	r3, r3
 8003828:	ea02 0103 	and.w	r1, r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	03ff63ff 	.word	0x03ff63ff

08003848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	d138      	bne.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003868:	2302      	movs	r3, #2
 800386a:	e032      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800389a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d139      	bne.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038fe:	2302      	movs	r3, #2
 8003900:	e033      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2224      	movs	r2, #36	@ 0x24
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0c0      	b.n	8003b0a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f007 f815 	bl	800a9cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f003 fda3 	bl	80074fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e03e      	b.n	8003a38 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3311      	adds	r3, #17
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	3310      	adds	r3, #16
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	3313      	adds	r3, #19
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	3320      	adds	r3, #32
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	3324      	adds	r3, #36	@ 0x24
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	440b      	add	r3, r1
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	3301      	adds	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	791b      	ldrb	r3, [r3, #4]
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3bb      	bcc.n	80039ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e044      	b.n	8003ad2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	440b      	add	r3, r1
 8003a82:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3b5      	bcc.n	8003a48 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003ae8:	f003 fd22 	bl	8007530 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7a9b      	ldrb	r3, [r3, #10]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d102      	bne.n	8003b08 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 fbf6 	bl	80052f4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_Start+0x16>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e012      	b.n	8003b4e <HAL_PCD_Start+0x3c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 fcc9 	bl	80074cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f005 faa6 	bl	8009090 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f005 faab 	bl	80090be <USB_ReadInterrupts>
 8003b68:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 faee 	bl	8004156 <PCD_EP_ISR_Handler>

    return;
 8003b7a:	e110      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d013      	beq.n	8003bae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f006 ffa5 	bl	800aaee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8fc 	bl	8003da4 <HAL_PCD_SetAddress>

    return;
 8003bac:	e0f7      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00c      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bd0:	e0e5      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00c      	beq.n	8003bf6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bee:	b292      	uxth	r2, r2
 8003bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bf4:	e0d3      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d034      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	b292      	uxth	r2, r2
 8003c14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0208 	bic.w	r2, r2, #8
 8003c2a:	b292      	uxth	r2, r2
 8003c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c42:	2100      	movs	r1, #0
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f007 f921 	bl	800ae8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f006 ff88 	bl	800ab60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c62:	b292      	uxth	r2, r2
 8003c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c68:	e099      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d027      	beq.n	8003cc4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0208 	orr.w	r2, r2, #8
 8003c86:	b292      	uxth	r2, r2
 8003c88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0204 	orr.w	r2, r2, #4
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f006 ff35 	bl	800ab2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cc2:	e06c      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d040      	beq.n	8003d50 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d12b      	bne.n	8003d48 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0204 	orr.w	r2, r2, #4
 8003d02:	b292      	uxth	r2, r2
 8003d04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d3e:	2101      	movs	r1, #1
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f007 f8a3 	bl	800ae8c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003d46:	e02a      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f006 feef 	bl	800ab2c <HAL_PCD_SuspendCallback>
    return;
 8003d4e:	e026      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00f      	beq.n	8003d7a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f006 fead 	bl	800aad2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d78:	e011      	b.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d96:	b292      	uxth	r2, r2
 8003d98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d9c:	bf00      	nop
  }
}
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_PCD_SetAddress+0x1a>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e012      	b.n	8003de4 <HAL_PCD_SetAddress+0x40>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f005 f947 	bl	8009068 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	70fb      	strb	r3, [r7, #3]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	803b      	strh	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	da0e      	bge.n	8003e30 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f003 0207 	and.w	r2, r3, #7
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	3310      	adds	r3, #16
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	705a      	strb	r2, [r3, #1]
 8003e2e:	e00e      	b.n	8003e4e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003e5a:	883b      	ldrh	r3, [r7, #0]
 8003e5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	78ba      	ldrb	r2, [r7, #2]
 8003e68:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e6a:	78bb      	ldrb	r3, [r7, #2]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d102      	bne.n	8003e76 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_PCD_EP_Open+0x98>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e00e      	b.n	8003ea2 <HAL_PCD_EP_Open+0xb6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68f9      	ldr	r1, [r7, #12]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 fb6a 	bl	800756c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003ea0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da0e      	bge.n	8003edc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 0207 	and.w	r2, r3, #7
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	3310      	adds	r3, #16
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	705a      	strb	r2, [r3, #1]
 8003eda:	e00e      	b.n	8003efa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 0207 	and.w	r2, r3, #7
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_PCD_EP_Close+0x6a>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e00e      	b.n	8003f32 <HAL_PCD_EP_Close+0x88>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 f80a 	bl	8007f3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	460b      	mov	r3, r1
 8003f48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4a:	7afb      	ldrb	r3, [r7, #11]
 8003f4c:	f003 0207 	and.w	r2, r3, #7
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2200      	movs	r2, #0
 8003f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6979      	ldr	r1, [r7, #20]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f004 f9c2 	bl	8008316 <USB_EPStartXfer>

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fac:	7afb      	ldrb	r3, [r7, #11]
 8003fae:	f003 0207 	and.w	r2, r3, #7
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	3310      	adds	r3, #16
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6979      	ldr	r1, [r7, #20]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 f98b 	bl	8008316 <USB_EPStartXfer>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	7912      	ldrb	r2, [r2, #4]
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e03e      	b.n	80040a6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800402c:	2b00      	cmp	r3, #0
 800402e:	da0e      	bge.n	800404e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 0207 	and.w	r2, r3, #7
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	3310      	adds	r3, #16
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	705a      	strb	r2, [r3, #1]
 800404c:	e00c      	b.n	8004068 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4413      	add	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	b2da      	uxtb	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_PCD_EP_SetStall+0x7e>
 8004084:	2302      	movs	r3, #2
 8004086:	e00e      	b.n	80040a6 <HAL_PCD_EP_SetStall+0x9c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	4618      	mov	r0, r3
 8004098:	f004 feec 	bl	8008e74 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	7912      	ldrb	r2, [r2, #4]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e040      	b.n	800414e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da0e      	bge.n	80040f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	f003 0207 	and.w	r2, r3, #7
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	3310      	adds	r3, #16
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	705a      	strb	r2, [r3, #1]
 80040f0:	e00e      	b.n	8004110 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 0207 	and.w	r2, r3, #7
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_PCD_EP_ClrStall+0x82>
 800412c:	2302      	movs	r3, #2
 800412e:	e00e      	b.n	800414e <HAL_PCD_EP_ClrStall+0xa0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	4618      	mov	r0, r3
 8004140:	f004 fee9 	bl	8008f16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b092      	sub	sp, #72	@ 0x48
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800415e:	e333      	b.n	80047c8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004168:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800416a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004176:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 8108 	bne.w	8004390 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004180:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d14c      	bne.n	8004224 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800419a:	813b      	strh	r3, [r7, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	893b      	ldrh	r3, [r7, #8]
 80041a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3310      	adds	r3, #16
 80041b2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041bc:	b29b      	uxth	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	441a      	add	r2, r3
 80041e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041ea:	2100      	movs	r1, #0
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f006 fc56 	bl	800aa9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7b1b      	ldrb	r3, [r3, #12]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 82e5 	beq.w	80047c8 <PCD_EP_ISR_Handler+0x672>
 80041fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 82e0 	bne.w	80047c8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7b1b      	ldrb	r3, [r3, #12]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	731a      	strb	r2, [r3, #12]
 8004222:	e2d1      	b.n	80047c8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800422a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800423a:	2b00      	cmp	r3, #0
 800423c:	d032      	beq.n	80042a4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004246:	b29b      	uxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	4413      	add	r3, r2
 8004258:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004264:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004272:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004276:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004278:	b29b      	uxth	r3, r3
 800427a:	f004 ff73 	bl	8009164 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29a      	uxth	r2, r3
 8004286:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800428a:	4013      	ands	r3, r2
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	897a      	ldrh	r2, [r7, #10]
 8004294:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004298:	b292      	uxth	r2, r2
 800429a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f006 fbd1 	bl	800aa44 <HAL_PCD_SetupStageCallback>
 80042a2:	e291      	b.n	80047c8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f280 828d 	bge.w	80047c8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042ba:	4013      	ands	r3, r2
 80042bc:	81fb      	strh	r3, [r7, #14]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	89fa      	ldrh	r2, [r7, #14]
 80042c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042c8:	b292      	uxth	r2, r2
 80042ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d019      	beq.n	8004330 <PCD_EP_ISR_Handler+0x1da>
 80042fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430a:	6959      	ldr	r1, [r3, #20]
 800430c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004312:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004314:	b29b      	uxth	r3, r3
 8004316:	f004 ff25 	bl	8009164 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800431a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	441a      	add	r2, r3
 8004324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004326:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004328:	2100      	movs	r1, #0
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f006 fb9c 	bl	800aa68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004338:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800433a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 8242 	bne.w	80047c8 <PCD_EP_ISR_Handler+0x672>
 8004344:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004346:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800434a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800434e:	f000 823b 	beq.w	80047c8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800435e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004362:	81bb      	strh	r3, [r7, #12]
 8004364:	89bb      	ldrh	r3, [r7, #12]
 8004366:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800436a:	81bb      	strh	r3, [r7, #12]
 800436c:	89bb      	ldrh	r3, [r7, #12]
 800436e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004372:	81bb      	strh	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	89bb      	ldrh	r3, [r7, #12]
 800437a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800437e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]
 800438e:	e21b      	b.n	80047c8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043a2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f280 80f1 	bge.w	800458e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80043c2:	4013      	ands	r3, r2
 80043c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043da:	b292      	uxth	r2, r2
 80043dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80043de:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80043f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f6:	7b1b      	ldrb	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d123      	bne.n	8004444 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004404:	b29b      	uxth	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	4413      	add	r3, r2
 8004416:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004420:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004424:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 808b 	beq.w	8004544 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004434:	6959      	ldr	r1, [r3, #20]
 8004436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004438:	88da      	ldrh	r2, [r3, #6]
 800443a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800443e:	f004 fe91 	bl	8009164 <USB_ReadPMA>
 8004442:	e07f      	b.n	8004544 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004446:	78db      	ldrb	r3, [r3, #3]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d109      	bne.n	8004460 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800444c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800444e:	461a      	mov	r2, r3
 8004450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9c6 	bl	80047e4 <HAL_PCD_EP_DB_Receive>
 8004458:	4603      	mov	r3, r0
 800445a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800445e:	e071      	b.n	8004544 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004498:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d022      	beq.n	8004500 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80044e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02c      	beq.n	8004544 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f0:	6959      	ldr	r1, [r3, #20]
 80044f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f4:	891a      	ldrh	r2, [r3, #8]
 80044f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80044fa:	f004 fe33 	bl	8009164 <USB_ReadPMA>
 80044fe:	e021      	b.n	8004544 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	4413      	add	r3, r2
 800451a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004524:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004528:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004536:	6959      	ldr	r1, [r3, #20]
 8004538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453a:	895a      	ldrh	r2, [r3, #10]
 800453c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004540:	f004 fe10 	bl	8009164 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800454c:	441a      	add	r2, r3
 800454e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004550:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800455a:	441a      	add	r2, r3
 800455c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800455e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <PCD_EP_ISR_Handler+0x41e>
 8004568:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800456c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	429a      	cmp	r2, r3
 8004572:	d206      	bcs.n	8004582 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f006 fa74 	bl	800aa68 <HAL_PCD_DataOutStageCallback>
 8004580:	e005      	b.n	800458e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004588:	4618      	mov	r0, r3
 800458a:	f003 fec4 	bl	8008316 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800458e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8117 	beq.w	80047c8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800459a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	3310      	adds	r3, #16
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80045c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80045da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80045e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e8:	78db      	ldrb	r3, [r3, #3]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	f040 80a1 	bne.w	8004732 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80045f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f2:	2200      	movs	r2, #0
 80045f4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80045f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f8:	7b1b      	ldrb	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8092 	beq.w	8004724 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004600:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d046      	beq.n	8004698 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800460a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d126      	bne.n	8004660 <PCD_EP_ISR_Handler+0x50a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4413      	add	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	00da      	lsls	r2, r3, #3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	4413      	add	r3, r2
 8004634:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004644:	b29a      	uxth	r2, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004658:	b29a      	uxth	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	e061      	b.n	8004724 <PCD_EP_ISR_Handler+0x5ce>
 8004660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d15d      	bne.n	8004724 <PCD_EP_ISR_Handler+0x5ce>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	61fb      	str	r3, [r7, #28]
 8004680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	00da      	lsls	r2, r3, #3
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2200      	movs	r2, #0
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	e045      	b.n	8004724 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d126      	bne.n	80046f4 <PCD_EP_ISR_Handler+0x59e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	4413      	add	r3, r2
 80046bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	00da      	lsls	r2, r3, #3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	4413      	add	r3, r2
 80046c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046cc:	623b      	str	r3, [r7, #32]
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e017      	b.n	8004724 <PCD_EP_ISR_Handler+0x5ce>
 80046f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d113      	bne.n	8004724 <PCD_EP_ISR_Handler+0x5ce>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004704:	b29b      	uxth	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470a:	4413      	add	r3, r2
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	00da      	lsls	r2, r3, #3
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	4413      	add	r3, r2
 8004718:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	2200      	movs	r2, #0
 8004722:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f006 f9b7 	bl	800aa9e <HAL_PCD_DataInStageCallback>
 8004730:	e04a      	b.n	80047c8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004732:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d13f      	bne.n	80047bc <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	4413      	add	r3, r2
 8004756:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004760:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004768:	429a      	cmp	r2, r3
 800476a:	d906      	bls.n	800477a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800476c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004776:	619a      	str	r2, [r3, #24]
 8004778:	e002      	b.n	8004780 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800477a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800477c:	2200      	movs	r2, #0
 800477e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f006 f985 	bl	800aa9e <HAL_PCD_DataInStageCallback>
 8004794:	e018      	b.n	80047c8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800479c:	441a      	add	r2, r3
 800479e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80047a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80047a8:	441a      	add	r2, r3
 80047aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047b4:	4618      	mov	r0, r3
 80047b6:	f003 fdae 	bl	8008316 <USB_EPStartXfer>
 80047ba:	e005      	b.n	80047c8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80047bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047be:	461a      	mov	r2, r3
 80047c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f917 	bl	80049f6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	b21b      	sxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f6ff acc3 	blt.w	8004160 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3748      	adds	r7, #72	@ 0x48
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d07c      	beq.n	80048f6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004804:	b29b      	uxth	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	4413      	add	r3, r2
 8004816:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004820:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	8b7b      	ldrh	r3, [r7, #26]
 8004828:	429a      	cmp	r2, r3
 800482a:	d306      	bcc.n	800483a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	8b7b      	ldrh	r3, [r7, #26]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	619a      	str	r2, [r3, #24]
 8004838:	e002      	b.n	8004840 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d123      	bne.n	8004890 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800485e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004862:	833b      	strh	r3, [r7, #24]
 8004864:	8b3b      	ldrh	r3, [r7, #24]
 8004866:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800486a:	833b      	strh	r3, [r7, #24]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	8b3b      	ldrh	r3, [r7, #24]
 800487c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488c:	b29b      	uxth	r3, r3
 800488e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01f      	beq.n	80048da <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b4:	82fb      	strh	r3, [r7, #22]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	8afb      	ldrh	r3, [r7, #22]
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048da:	8b7b      	ldrh	r3, [r7, #26]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8085 	beq.w	80049ec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6959      	ldr	r1, [r3, #20]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	891a      	ldrh	r2, [r3, #8]
 80048ee:	8b7b      	ldrh	r3, [r7, #26]
 80048f0:	f004 fc38 	bl	8009164 <USB_ReadPMA>
 80048f4:	e07a      	b.n	80049ec <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4413      	add	r3, r2
 8004910:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	8b7b      	ldrh	r3, [r7, #26]
 8004922:	429a      	cmp	r2, r3
 8004924:	d306      	bcc.n	8004934 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	8b7b      	ldrh	r3, [r7, #26]
 800492c:	1ad2      	subs	r2, r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	619a      	str	r2, [r3, #24]
 8004932:	e002      	b.n	800493a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d123      	bne.n	800498a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495c:	83fb      	strh	r3, [r7, #30]
 800495e:	8bfb      	ldrh	r3, [r7, #30]
 8004960:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004964:	83fb      	strh	r3, [r7, #30]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	441a      	add	r2, r3
 8004974:	8bfb      	ldrh	r3, [r7, #30]
 8004976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800497a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800497e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11f      	bne.n	80049d4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ae:	83bb      	strh	r3, [r7, #28]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	8bbb      	ldrh	r3, [r7, #28]
 80049c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80049d4:	8b7b      	ldrh	r3, [r7, #26]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6959      	ldr	r1, [r3, #20]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	895a      	ldrh	r2, [r3, #10]
 80049e6:	8b7b      	ldrh	r3, [r7, #26]
 80049e8:	f004 fbbc 	bl	8009164 <USB_ReadPMA>
    }
  }

  return count;
 80049ec:	8b7b      	ldrh	r3, [r7, #26]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b0a6      	sub	sp, #152	@ 0x98
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 81f7 	beq.w	8004dfe <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4413      	add	r3, r2
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a34:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d907      	bls.n	8004a54 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a4c:	1ad2      	subs	r2, r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	619a      	str	r2, [r3, #24]
 8004a52:	e002      	b.n	8004a5a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 80e1 	bne.w	8004c26 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d126      	bne.n	8004aba <HAL_PCD_EP_DB_Transmit+0xc4>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a80:	4413      	add	r3, r2
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	00da      	lsls	r2, r3, #3
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e01a      	b.n	8004af0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	785b      	ldrb	r3, [r3, #1]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d116      	bne.n	8004af0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad6:	4413      	add	r3, r2
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	00da      	lsls	r2, r3, #3
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aec:	2200      	movs	r2, #0
 8004aee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d126      	bne.n	8004b4c <HAL_PCD_EP_DB_Transmit+0x156>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	4413      	add	r3, r2
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	00da      	lsls	r2, r3, #3
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	e017      	b.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x186>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d113      	bne.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x186>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	4413      	add	r3, r2
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	00da      	lsls	r2, r3, #3
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	4413      	add	r3, r2
 8004b70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	2200      	movs	r2, #0
 8004b7a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	78db      	ldrb	r3, [r3, #3]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d123      	bne.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b9e:	837b      	strh	r3, [r7, #26]
 8004ba0:	8b7b      	ldrh	r3, [r7, #26]
 8004ba2:	f083 0320 	eor.w	r3, r3, #32
 8004ba6:	837b      	strh	r3, [r7, #26]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	8b7b      	ldrh	r3, [r7, #26]
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f005 ff63 	bl	800aa9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01f      	beq.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfc:	833b      	strh	r3, [r7, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8b3b      	ldrh	r3, [r7, #24]
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e31f      	b.n	8005266 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d021      	beq.n	8004c74 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	f040 82ca 	bne.w	8005214 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c88:	441a      	add	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c96:	441a      	add	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d309      	bcc.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6a1a      	ldr	r2, [r3, #32]
 8004cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb4:	1ad2      	subs	r2, r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	621a      	str	r2, [r3, #32]
 8004cba:	e015      	b.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004cc4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004cd2:	e009      	b.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d15f      	bne.n	8004db0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d04:	4413      	add	r3, r2
 8004d06:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	00da      	lsls	r2, r3, #3
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d10:	4413      	add	r3, r2
 8004d12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x34e>
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	e051      	b.n	8004de8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d46:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d48:	d816      	bhi.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x382>
 8004d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	029b      	lsls	r3, r3, #10
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e037      	b.n	8004de8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004d78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x398>
 8004d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	029b      	lsls	r3, r3, #10
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	e01b      	b.n	8004de8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d117      	bne.n	8004de8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dcc:	4413      	add	r3, r2
 8004dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	00da      	lsls	r2, r3, #3
 8004dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd8:	4413      	add	r3, r2
 8004dda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6959      	ldr	r1, [r3, #20]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	891a      	ldrh	r2, [r3, #8]
 8004df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f004 f971 	bl	80090de <USB_WritePMA>
 8004dfc:	e20a      	b.n	8005214 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d307      	bcc.n	8004e42 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e3a:	1ad2      	subs	r2, r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	619a      	str	r2, [r3, #24]
 8004e40:	e002      	b.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 80f6 	bne.w	800503e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d126      	bne.n	8004ea8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e6e:	4413      	add	r3, r2
 8004e70:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	00da      	lsls	r2, r3, #3
 8004e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e80:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	e01a      	b.n	8004ede <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d116      	bne.n	8004ede <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ec4:	4413      	add	r3, r2
 8004ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	00da      	lsls	r2, r3, #3
 8004ece:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ed6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eda:	2200      	movs	r2, #0
 8004edc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d12f      	bne.n	8004f4e <HAL_PCD_EP_DB_Transmit+0x558>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f06:	4413      	add	r3, r2
 8004f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	00da      	lsls	r2, r3, #3
 8004f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f16:	4413      	add	r3, r2
 8004f18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e01c      	b.n	8004f88 <HAL_PCD_EP_DB_Transmit+0x592>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d118      	bne.n	8004f88 <HAL_PCD_EP_DB_Transmit+0x592>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f66:	4413      	add	r3, r2
 8004f68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	00da      	lsls	r2, r3, #3
 8004f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f76:	4413      	add	r3, r2
 8004f78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f84:	2200      	movs	r2, #0
 8004f86:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	78db      	ldrb	r3, [r3, #3]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d127      	bne.n	8004fe0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004faa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004fae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004fb2:	f083 0320 	eor.w	r3, r3, #32
 8004fb6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f005 fd59 	bl	800aa9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d121      	bne.n	800503a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800500c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005010:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800502e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e113      	b.n	8005266 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d121      	bne.n	800508c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800505e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005062:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005092:	2b01      	cmp	r3, #1
 8005094:	f040 80be 	bne.w	8005214 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80050a0:	441a      	add	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	69da      	ldr	r2, [r3, #28]
 80050aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80050ae:	441a      	add	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d309      	bcc.n	80050d4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050cc:	1ad2      	subs	r2, r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	621a      	str	r2, [r3, #32]
 80050d2:	e015      	b.n	8005100 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80050dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80050e0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80050ea:	e009      	b.n	8005100 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2200      	movs	r2, #0
 80050f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	785b      	ldrb	r3, [r3, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d15f      	bne.n	80051ce <HAL_PCD_EP_DB_Transmit+0x7d8>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800511c:	b29b      	uxth	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005122:	4413      	add	r3, r2
 8005124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	00da      	lsls	r2, r3, #3
 800512c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800512e:	4413      	add	r3, r2
 8005130:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005134:	667b      	str	r3, [r7, #100]	@ 0x64
 8005136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005140:	b29a      	uxth	r2, r3
 8005142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <HAL_PCD_EP_DB_Transmit+0x76c>
 800514c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515a:	b29a      	uxth	r2, r3
 800515c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	e04e      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005164:	2b3e      	cmp	r3, #62	@ 0x3e
 8005166:	d816      	bhi.n	8005196 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005168:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	663b      	str	r3, [r7, #96]	@ 0x60
 800516e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_PCD_EP_DB_Transmit+0x788>
 8005178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800517a:	3301      	adds	r3, #1
 800517c:	663b      	str	r3, [r7, #96]	@ 0x60
 800517e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29a      	uxth	r2, r3
 8005184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005186:	b29b      	uxth	r3, r3
 8005188:	029b      	lsls	r3, r3, #10
 800518a:	b29b      	uxth	r3, r3
 800518c:	4313      	orrs	r3, r2
 800518e:	b29a      	uxth	r2, r3
 8005190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e034      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005196:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	663b      	str	r3, [r7, #96]	@ 0x60
 800519c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_PCD_EP_DB_Transmit+0x7b6>
 80051a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051a8:	3b01      	subs	r3, #1
 80051aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	029b      	lsls	r3, r3, #10
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e018      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x80a>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d114      	bne.n	8005200 <HAL_PCD_EP_DB_Transmit+0x80a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051e4:	4413      	add	r3, r2
 80051e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	00da      	lsls	r2, r3, #3
 80051ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051f0:	4413      	add	r3, r2
 80051f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6959      	ldr	r1, [r3, #20]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	895a      	ldrh	r2, [r3, #10]
 800520c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800520e:	b29b      	uxth	r3, r3
 8005210:	f003 ff65 	bl	80090de <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800522e:	82fb      	strh	r3, [r7, #22]
 8005230:	8afb      	ldrh	r3, [r7, #22]
 8005232:	f083 0310 	eor.w	r3, r3, #16
 8005236:	82fb      	strh	r3, [r7, #22]
 8005238:	8afb      	ldrh	r3, [r7, #22]
 800523a:	f083 0320 	eor.w	r3, r3, #32
 800523e:	82fb      	strh	r3, [r7, #22]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	8afb      	ldrh	r3, [r7, #22]
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3798      	adds	r7, #152	@ 0x98
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800526e:	b480      	push	{r7}
 8005270:	b087      	sub	sp, #28
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	607b      	str	r3, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	817b      	strh	r3, [r7, #10]
 800527c:	4613      	mov	r3, r2
 800527e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005280:	897b      	ldrh	r3, [r7, #10]
 8005282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00b      	beq.n	80052a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800528c:	897b      	ldrh	r3, [r7, #10]
 800528e:	f003 0207 	and.w	r2, r3, #7
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	3310      	adds	r3, #16
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e009      	b.n	80052b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052a4:	897a      	ldrh	r2, [r7, #10]
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80052b8:	893b      	ldrh	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d107      	bne.n	80052ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	80da      	strh	r2, [r3, #6]
 80052cc:	e00b      	b.n	80052e6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2201      	movs	r2, #1
 80052d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005318:	b29b      	uxth	r3, r3
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800532c:	b29b      	uxth	r3, r3
 800532e:	f043 0302 	orr.w	r3, r3, #2
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d141      	bne.n	80053da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005356:	4b4b      	ldr	r3, [pc, #300]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800535e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005362:	d131      	bne.n	80053c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005364:	4b47      	ldr	r3, [pc, #284]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800536a:	4a46      	ldr	r2, [pc, #280]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005374:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800537c:	4a41      	ldr	r2, [pc, #260]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005384:	4b40      	ldr	r3, [pc, #256]	@ (8005488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2232      	movs	r2, #50	@ 0x32
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	4a3f      	ldr	r2, [pc, #252]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	0c9b      	lsrs	r3, r3, #18
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800539a:	e002      	b.n	80053a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3b01      	subs	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053a2:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ae:	d102      	bne.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f2      	bne.n	800539c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053b6:	4b33      	ldr	r3, [pc, #204]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c2:	d158      	bne.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e057      	b.n	8005478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053d8:	e04d      	b.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e0:	d141      	bne.n	8005466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053e2:	4b28      	ldr	r3, [pc, #160]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ee:	d131      	bne.n	8005454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f0:	4b24      	ldr	r3, [pc, #144]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f6:	4a23      	ldr	r2, [pc, #140]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005400:	4b20      	ldr	r3, [pc, #128]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005408:	4a1e      	ldr	r2, [pc, #120]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800540e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005410:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2232      	movs	r2, #50	@ 0x32
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	4a1c      	ldr	r2, [pc, #112]	@ (800548c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	0c9b      	lsrs	r3, r3, #18
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005426:	e002      	b.n	800542e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3b01      	subs	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800542e:	4b15      	ldr	r3, [pc, #84]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d102      	bne.n	8005442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f2      	bne.n	8005428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005442:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544e:	d112      	bne.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e011      	b.n	8005478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005454:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800545a:	4a0a      	ldr	r2, [pc, #40]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005464:	e007      	b.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005466:	4b07      	ldr	r3, [pc, #28]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800546e:	4a05      	ldr	r2, [pc, #20]	@ (8005484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005474:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40007000 	.word	0x40007000
 8005488:	20000000 	.word	0x20000000
 800548c:	431bde83 	.word	0x431bde83

08005490 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4a04      	ldr	r2, [pc, #16]	@ (80054ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800549a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800549e:	6093      	str	r3, [r2, #8]
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40007000 	.word	0x40007000

080054b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e2fe      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d075      	beq.n	80055ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ce:	4b97      	ldr	r3, [pc, #604]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d8:	4b94      	ldr	r3, [pc, #592]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d102      	bne.n	80054ee <HAL_RCC_OscConfig+0x3e>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d002      	beq.n	80054f4 <HAL_RCC_OscConfig+0x44>
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d10b      	bne.n	800550c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	4b8d      	ldr	r3, [pc, #564]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05b      	beq.n	80055b8 <HAL_RCC_OscConfig+0x108>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d157      	bne.n	80055b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e2d9      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005514:	d106      	bne.n	8005524 <HAL_RCC_OscConfig+0x74>
 8005516:	4b85      	ldr	r3, [pc, #532]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a84      	ldr	r2, [pc, #528]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e01d      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0x98>
 800552e:	4b7f      	ldr	r3, [pc, #508]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a7e      	ldr	r2, [pc, #504]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4b7c      	ldr	r3, [pc, #496]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a7b      	ldr	r2, [pc, #492]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e00b      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005548:	4b78      	ldr	r3, [pc, #480]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a77      	ldr	r2, [pc, #476]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800554e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b75      	ldr	r3, [pc, #468]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a74      	ldr	r2, [pc, #464]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800555a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800555e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d013      	beq.n	8005590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fb ffe6 	bl	8001538 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005570:	f7fb ffe2 	bl	8001538 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	@ 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e29e      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005582:	4b6a      	ldr	r3, [pc, #424]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0xc0>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fb ffd2 	bl	8001538 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005598:	f7fb ffce 	bl	8001538 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	@ 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e28a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055aa:	4b60      	ldr	r3, [pc, #384]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0xe8>
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d075      	beq.n	80056b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c6:	4b59      	ldr	r3, [pc, #356]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d0:	4b56      	ldr	r3, [pc, #344]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d102      	bne.n	80055e6 <HAL_RCC_OscConfig+0x136>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d002      	beq.n	80055ec <HAL_RCC_OscConfig+0x13c>
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d11f      	bne.n	800562c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ec:	4b4f      	ldr	r3, [pc, #316]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_RCC_OscConfig+0x154>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e25d      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005604:	4b49      	ldr	r3, [pc, #292]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	4946      	ldr	r1, [pc, #280]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005618:	4b45      	ldr	r3, [pc, #276]	@ (8005730 <HAL_RCC_OscConfig+0x280>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f7fb ff3f 	bl	80014a0 <HAL_InitTick>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d043      	beq.n	80056b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e249      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d023      	beq.n	800567c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005634:	4b3d      	ldr	r3, [pc, #244]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a3c      	ldr	r2, [pc, #240]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800563e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fb ff7a 	bl	8001538 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005648:	f7fb ff76 	bl	8001538 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e232      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800565a:	4b34      	ldr	r3, [pc, #208]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005666:	4b31      	ldr	r3, [pc, #196]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	061b      	lsls	r3, r3, #24
 8005674:	492d      	ldr	r1, [pc, #180]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
 800567a:	e01a      	b.n	80056b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800567c:	4b2b      	ldr	r3, [pc, #172]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a2a      	ldr	r2, [pc, #168]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005682:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fb ff56 	bl	8001538 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005690:	f7fb ff52 	bl	8001538 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e20e      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056a2:	4b22      	ldr	r3, [pc, #136]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x1e0>
 80056ae:	e000      	b.n	80056b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d041      	beq.n	8005742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01c      	beq.n	8005700 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c6:	4b19      	ldr	r3, [pc, #100]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80056c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056cc:	4a17      	ldr	r2, [pc, #92]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d6:	f7fb ff2f 	bl	8001538 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056de:	f7fb ff2b 	bl	8001538 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e1e7      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056f0:	4b0e      	ldr	r3, [pc, #56]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 80056f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ef      	beq.n	80056de <HAL_RCC_OscConfig+0x22e>
 80056fe:	e020      	b.n	8005742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005700:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005706:	4a09      	ldr	r2, [pc, #36]	@ (800572c <HAL_RCC_OscConfig+0x27c>)
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fb ff12 	bl	8001538 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005716:	e00d      	b.n	8005734 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005718:	f7fb ff0e 	bl	8001538 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d906      	bls.n	8005734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e1ca      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
 800572a:	bf00      	nop
 800572c:	40021000 	.word	0x40021000
 8005730:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005734:	4b8c      	ldr	r3, [pc, #560]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ea      	bne.n	8005718 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80a6 	beq.w	800589c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005750:	2300      	movs	r3, #0
 8005752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005754:	4b84      	ldr	r3, [pc, #528]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCC_OscConfig+0x2b4>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_RCC_OscConfig+0x2b6>
 8005764:	2300      	movs	r3, #0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576a:	4b7f      	ldr	r3, [pc, #508]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576e:	4a7e      	ldr	r2, [pc, #504]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005774:	6593      	str	r3, [r2, #88]	@ 0x58
 8005776:	4b7c      	ldr	r3, [pc, #496]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005782:	2301      	movs	r3, #1
 8005784:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005786:	4b79      	ldr	r3, [pc, #484]	@ (800596c <HAL_RCC_OscConfig+0x4bc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d118      	bne.n	80057c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005792:	4b76      	ldr	r3, [pc, #472]	@ (800596c <HAL_RCC_OscConfig+0x4bc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a75      	ldr	r2, [pc, #468]	@ (800596c <HAL_RCC_OscConfig+0x4bc>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800579c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579e:	f7fb fecb 	bl	8001538 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a6:	f7fb fec7 	bl	8001538 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e183      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b8:	4b6c      	ldr	r3, [pc, #432]	@ (800596c <HAL_RCC_OscConfig+0x4bc>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d108      	bne.n	80057de <HAL_RCC_OscConfig+0x32e>
 80057cc:	4b66      	ldr	r3, [pc, #408]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d2:	4a65      	ldr	r2, [pc, #404]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057dc:	e024      	b.n	8005828 <HAL_RCC_OscConfig+0x378>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d110      	bne.n	8005808 <HAL_RCC_OscConfig+0x358>
 80057e6:	4b60      	ldr	r3, [pc, #384]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ec:	4a5e      	ldr	r2, [pc, #376]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80057ee:	f043 0304 	orr.w	r3, r3, #4
 80057f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005806:	e00f      	b.n	8005828 <HAL_RCC_OscConfig+0x378>
 8005808:	4b57      	ldr	r3, [pc, #348]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	4a56      	ldr	r2, [pc, #344]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005818:	4b53      	ldr	r3, [pc, #332]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581e:	4a52      	ldr	r2, [pc, #328]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d016      	beq.n	800585e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fb fe82 	bl	8001538 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005836:	e00a      	b.n	800584e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005838:	f7fb fe7e 	bl	8001538 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e138      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584e:	4b46      	ldr	r3, [pc, #280]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ed      	beq.n	8005838 <HAL_RCC_OscConfig+0x388>
 800585c:	e015      	b.n	800588a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585e:	f7fb fe6b 	bl	8001538 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005864:	e00a      	b.n	800587c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005866:	f7fb fe67 	bl	8001538 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e121      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800587c:	4b3a      	ldr	r3, [pc, #232]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1ed      	bne.n	8005866 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800588a:	7ffb      	ldrb	r3, [r7, #31]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d105      	bne.n	800589c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005890:	4b35      	ldr	r3, [pc, #212]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005894:	4a34      	ldr	r2, [pc, #208]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800589a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03c      	beq.n	8005922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01c      	beq.n	80058ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80058b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fb fe3a 	bl	8001538 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058c8:	f7fb fe36 	bl	8001538 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0f2      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058da:	4b23      	ldr	r3, [pc, #140]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80058dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <HAL_RCC_OscConfig+0x418>
 80058e8:	e01b      	b.n	8005922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80058ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fa:	f7fb fe1d 	bl	8001538 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005902:	f7fb fe19 	bl	8001538 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0d5      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005914:	4b14      	ldr	r3, [pc, #80]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1ef      	bne.n	8005902 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80c9 	beq.w	8005abe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800592c:	4b0e      	ldr	r3, [pc, #56]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 030c 	and.w	r3, r3, #12
 8005934:	2b0c      	cmp	r3, #12
 8005936:	f000 8083 	beq.w	8005a40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d15e      	bne.n	8005a00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005942:	4b09      	ldr	r3, [pc, #36]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a08      	ldr	r2, [pc, #32]	@ (8005968 <HAL_RCC_OscConfig+0x4b8>)
 8005948:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800594c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fb fdf3 	bl	8001538 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005954:	e00c      	b.n	8005970 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005956:	f7fb fdef 	bl	8001538 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d905      	bls.n	8005970 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e0ab      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
 8005968:	40021000 	.word	0x40021000
 800596c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005970:	4b55      	ldr	r3, [pc, #340]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ec      	bne.n	8005956 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800597c:	4b52      	ldr	r3, [pc, #328]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	4b52      	ldr	r3, [pc, #328]	@ (8005acc <HAL_RCC_OscConfig+0x61c>)
 8005982:	4013      	ands	r3, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6a11      	ldr	r1, [r2, #32]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800598c:	3a01      	subs	r2, #1
 800598e:	0112      	lsls	r2, r2, #4
 8005990:	4311      	orrs	r1, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005996:	0212      	lsls	r2, r2, #8
 8005998:	4311      	orrs	r1, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800599e:	0852      	lsrs	r2, r2, #1
 80059a0:	3a01      	subs	r2, #1
 80059a2:	0552      	lsls	r2, r2, #21
 80059a4:	4311      	orrs	r1, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059aa:	0852      	lsrs	r2, r2, #1
 80059ac:	3a01      	subs	r2, #1
 80059ae:	0652      	lsls	r2, r2, #25
 80059b0:	4311      	orrs	r1, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059b6:	06d2      	lsls	r2, r2, #27
 80059b8:	430a      	orrs	r2, r1
 80059ba:	4943      	ldr	r1, [pc, #268]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c0:	4b41      	ldr	r3, [pc, #260]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a40      	ldr	r2, [pc, #256]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 80059c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059cc:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 80059d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fb fdae 	bl	8001538 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fb fdaa 	bl	8001538 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e066      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f2:	4b35      	ldr	r3, [pc, #212]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0x530>
 80059fe:	e05e      	b.n	8005abe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a00:	4b31      	ldr	r3, [pc, #196]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a30      	ldr	r2, [pc, #192]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 8005a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fb fd94 	bl	8001538 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fb fd90 	bl	8001538 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e04c      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a26:	4b28      	ldr	r3, [pc, #160]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a32:	4b25      	ldr	r3, [pc, #148]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	4924      	ldr	r1, [pc, #144]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 8005a38:	4b25      	ldr	r3, [pc, #148]	@ (8005ad0 <HAL_RCC_OscConfig+0x620>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	60cb      	str	r3, [r1, #12]
 8005a3e:	e03e      	b.n	8005abe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e039      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <HAL_RCC_OscConfig+0x618>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0203 	and.w	r2, r3, #3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d12c      	bne.n	8005aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d123      	bne.n	8005aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d11b      	bne.n	8005aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d113      	bne.n	8005aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d109      	bne.n	8005aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d001      	beq.n	8005abe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	019f800c 	.word	0x019f800c
 8005ad0:	feeefffc 	.word	0xfeeefffc

08005ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e11e      	b.n	8005d2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b91      	ldr	r3, [pc, #580]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d910      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b8e      	ldr	r3, [pc, #568]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	498c      	ldr	r1, [pc, #560]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e106      	b.n	8005d2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d073      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d129      	bne.n	8005b84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b30:	4b81      	ldr	r3, [pc, #516]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0f4      	b.n	8005d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b40:	f000 f966 	bl	8005e10 <RCC_GetSysClockFreqFromPLLSource>
 8005b44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4a7c      	ldr	r2, [pc, #496]	@ (8005d3c <HAL_RCC_ClockConfig+0x268>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d93f      	bls.n	8005bce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d033      	beq.n	8005bce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d12f      	bne.n	8005bce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b6e:	4b72      	ldr	r3, [pc, #456]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b76:	4a70      	ldr	r2, [pc, #448]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b7e:	2380      	movs	r3, #128	@ 0x80
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e024      	b.n	8005bce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e0c6      	b.n	8005d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b9c:	4b66      	ldr	r3, [pc, #408]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0be      	b.n	8005d2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005bac:	f000 f8ce 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8005bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4a61      	ldr	r2, [pc, #388]	@ (8005d3c <HAL_RCC_ClockConfig+0x268>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d909      	bls.n	8005bce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bba:	4b5f      	ldr	r3, [pc, #380]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bc2:	4a5d      	ldr	r2, [pc, #372]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005bca:	2380      	movs	r3, #128	@ 0x80
 8005bcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bce:	4b5a      	ldr	r3, [pc, #360]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f023 0203 	bic.w	r2, r3, #3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4957      	ldr	r1, [pc, #348]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be0:	f7fb fcaa 	bl	8001538 <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be8:	f7fb fca6 	bl	8001538 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e095      	b.n	8005d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 020c 	and.w	r2, r3, #12
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1eb      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d023      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c28:	4b43      	ldr	r3, [pc, #268]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	4a42      	ldr	r2, [pc, #264]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c40:	4b3d      	ldr	r3, [pc, #244]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c48:	4a3b      	ldr	r2, [pc, #236]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c50:	4b39      	ldr	r3, [pc, #228]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4936      	ldr	r1, [pc, #216]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	608b      	str	r3, [r1, #8]
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b80      	cmp	r3, #128	@ 0x80
 8005c68:	d105      	bne.n	8005c76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c6a:	4b33      	ldr	r3, [pc, #204]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4a32      	ldr	r2, [pc, #200]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c76:	4b2f      	ldr	r3, [pc, #188]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d21d      	bcs.n	8005cc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c84:	4b2b      	ldr	r3, [pc, #172]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f023 020f 	bic.w	r2, r3, #15
 8005c8c:	4929      	ldr	r1, [pc, #164]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c94:	f7fb fc50 	bl	8001538 <HAL_GetTick>
 8005c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9c:	f7fb fc4c 	bl	8001538 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e03b      	b.n	8005d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <HAL_RCC_ClockConfig+0x260>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1ed      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4917      	ldr	r1, [pc, #92]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cea:	4b13      	ldr	r3, [pc, #76]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	490f      	ldr	r1, [pc, #60]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cfe:	f000 f825 	bl	8005d4c <HAL_RCC_GetSysClockFreq>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4b0c      	ldr	r3, [pc, #48]	@ (8005d38 <HAL_RCC_ClockConfig+0x264>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	490c      	ldr	r1, [pc, #48]	@ (8005d40 <HAL_RCC_ClockConfig+0x26c>)
 8005d10:	5ccb      	ldrb	r3, [r1, r3]
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d44 <HAL_RCC_ClockConfig+0x270>)
 8005d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <HAL_RCC_ClockConfig+0x274>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fb fbbc 	bl	80014a0 <HAL_InitTick>
 8005d28:	4603      	mov	r3, r0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40022000 	.word	0x40022000
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	04c4b400 	.word	0x04c4b400
 8005d40:	0800b044 	.word	0x0800b044
 8005d44:	20000000 	.word	0x20000000
 8005d48:	20000004 	.word	0x20000004

08005d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d52:	4b2c      	ldr	r3, [pc, #176]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d102      	bne.n	8005d64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	e047      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d64:	4b27      	ldr	r3, [pc, #156]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 030c 	and.w	r3, r3, #12
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d102      	bne.n	8005d76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d70:	4b26      	ldr	r3, [pc, #152]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	e03e      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d76:	4b23      	ldr	r3, [pc, #140]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b0c      	cmp	r3, #12
 8005d80:	d136      	bne.n	8005df0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d82:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	3301      	adds	r3, #1
 8005d98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d10c      	bne.n	8005dba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005da0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	4a16      	ldr	r2, [pc, #88]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005daa:	68d2      	ldr	r2, [r2, #12]
 8005dac:	0a12      	lsrs	r2, r2, #8
 8005dae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	617b      	str	r3, [r7, #20]
      break;
 8005db8:	e00c      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dba:	4a13      	ldr	r2, [pc, #76]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	4a10      	ldr	r2, [pc, #64]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dc4:	68d2      	ldr	r2, [r2, #12]
 8005dc6:	0a12      	lsrs	r2, r2, #8
 8005dc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]
      break;
 8005dd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	0e5b      	lsrs	r3, r3, #25
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	3301      	adds	r3, #1
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e001      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005df4:	693b      	ldr	r3, [r7, #16]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000
 8005e08:	00f42400 	.word	0x00f42400
 8005e0c:	007a1200 	.word	0x007a1200

08005e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e16:	4b1e      	ldr	r3, [pc, #120]	@ (8005e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	@ (8005e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d10c      	bne.n	8005e4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e34:	4a17      	ldr	r2, [pc, #92]	@ (8005e94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3c:	4a14      	ldr	r2, [pc, #80]	@ (8005e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e3e:	68d2      	ldr	r2, [r2, #12]
 8005e40:	0a12      	lsrs	r2, r2, #8
 8005e42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	617b      	str	r3, [r7, #20]
    break;
 8005e4c:	e00c      	b.n	8005e68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e4e:	4a12      	ldr	r2, [pc, #72]	@ (8005e98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e56:	4a0e      	ldr	r2, [pc, #56]	@ (8005e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e58:	68d2      	ldr	r2, [r2, #12]
 8005e5a:	0a12      	lsrs	r2, r2, #8
 8005e5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
 8005e64:	617b      	str	r3, [r7, #20]
    break;
 8005e66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e68:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	0e5b      	lsrs	r3, r3, #25
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	3301      	adds	r3, #1
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e82:	687b      	ldr	r3, [r7, #4]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40021000 	.word	0x40021000
 8005e94:	007a1200 	.word	0x007a1200
 8005e98:	00f42400 	.word	0x00f42400

08005e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8098 	beq.w	8005fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ebe:	4b43      	ldr	r3, [pc, #268]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eca:	4b40      	ldr	r3, [pc, #256]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ece:	4a3f      	ldr	r2, [pc, #252]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a39      	ldr	r2, [pc, #228]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ef2:	f7fb fb21 	bl	8001538 <HAL_GetTick>
 8005ef6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef8:	e009      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005efa:	f7fb fb1d 	bl	8001538 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d902      	bls.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	74fb      	strb	r3, [r7, #19]
        break;
 8005f0c:	e005      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f0e:	4b30      	ldr	r3, [pc, #192]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ef      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005f1a:	7cfb      	ldrb	r3, [r7, #19]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d159      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f20:	4b2a      	ldr	r3, [pc, #168]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01e      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d019      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f3c:	4b23      	ldr	r3, [pc, #140]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f48:	4b20      	ldr	r3, [pc, #128]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f58:	4b1c      	ldr	r3, [pc, #112]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f68:	4a18      	ldr	r2, [pc, #96]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fb fadd 	bl	8001538 <HAL_GetTick>
 8005f7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f80:	e00b      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f82:	f7fb fad9 	bl	8001538 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d902      	bls.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	74fb      	strb	r3, [r7, #19]
            break;
 8005f98:	e006      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0ec      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fae:	4b07      	ldr	r3, [pc, #28]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	4903      	ldr	r1, [pc, #12]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fc6:	7cfb      	ldrb	r3, [r7, #19]
 8005fc8:	74bb      	strb	r3, [r7, #18]
 8005fca:	e005      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd8:	7c7b      	ldrb	r3, [r7, #17]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d105      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fde:	4ba6      	ldr	r3, [pc, #664]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe2:	4aa5      	ldr	r2, [pc, #660]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fe8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ff6:	4ba0      	ldr	r3, [pc, #640]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffc:	f023 0203 	bic.w	r2, r3, #3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	499c      	ldr	r1, [pc, #624]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006018:	4b97      	ldr	r3, [pc, #604]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601e:	f023 020c 	bic.w	r2, r3, #12
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	4994      	ldr	r1, [pc, #592]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800603a:	4b8f      	ldr	r3, [pc, #572]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006040:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	498b      	ldr	r1, [pc, #556]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800605c:	4b86      	ldr	r3, [pc, #536]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	4983      	ldr	r1, [pc, #524]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607e:	4b7e      	ldr	r3, [pc, #504]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006084:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	497a      	ldr	r1, [pc, #488]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060a0:	4b75      	ldr	r3, [pc, #468]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	4972      	ldr	r1, [pc, #456]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4969      	ldr	r1, [pc, #420]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060e4:	4b64      	ldr	r3, [pc, #400]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	4961      	ldr	r1, [pc, #388]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006106:	4b5c      	ldr	r3, [pc, #368]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	4958      	ldr	r1, [pc, #352]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006124:	2b00      	cmp	r3, #0
 8006126:	d015      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006128:	4b53      	ldr	r3, [pc, #332]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	4950      	ldr	r1, [pc, #320]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006146:	d105      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006148:	4b4b      	ldr	r3, [pc, #300]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	4a4a      	ldr	r2, [pc, #296]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006152:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800615c:	2b00      	cmp	r3, #0
 800615e:	d015      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006160:	4b45      	ldr	r3, [pc, #276]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006166:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	4942      	ldr	r1, [pc, #264]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800617e:	d105      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006180:	4b3d      	ldr	r3, [pc, #244]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	4a3c      	ldr	r2, [pc, #240]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800618a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d015      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006198:	4b37      	ldr	r3, [pc, #220]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a6:	4934      	ldr	r1, [pc, #208]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b6:	d105      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d015      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061d0:	4b29      	ldr	r3, [pc, #164]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061de:	4926      	ldr	r1, [pc, #152]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ee:	d105      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f0:	4b21      	ldr	r3, [pc, #132]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a20      	ldr	r2, [pc, #128]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d015      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006208:	4b1b      	ldr	r3, [pc, #108]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006216:	4918      	ldr	r1, [pc, #96]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006226:	d105      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006228:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a12      	ldr	r2, [pc, #72]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006232:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d015      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006240:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006246:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624e:	490a      	ldr	r1, [pc, #40]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800625e:	d105      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4a04      	ldr	r2, [pc, #16]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800626c:	7cbb      	ldrb	r3, [r7, #18]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000

0800627c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e049      	b.n	8006322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fa ff78 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f000 fba4 	bl	8006a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e049      	b.n	80063d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f841 	bl	80063d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3304      	adds	r3, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f000 fb4d 	bl	8006a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_TIM_PWM_Start+0x24>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	bf14      	ite	ne
 8006408:	2301      	movne	r3, #1
 800640a:	2300      	moveq	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e03c      	b.n	800648a <HAL_TIM_PWM_Start+0x9e>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b04      	cmp	r3, #4
 8006414:	d109      	bne.n	800642a <HAL_TIM_PWM_Start+0x3e>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	e02f      	b.n	800648a <HAL_TIM_PWM_Start+0x9e>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b08      	cmp	r3, #8
 800642e:	d109      	bne.n	8006444 <HAL_TIM_PWM_Start+0x58>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e022      	b.n	800648a <HAL_TIM_PWM_Start+0x9e>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d109      	bne.n	800645e <HAL_TIM_PWM_Start+0x72>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	bf14      	ite	ne
 8006456:	2301      	movne	r3, #1
 8006458:	2300      	moveq	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e015      	b.n	800648a <HAL_TIM_PWM_Start+0x9e>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b10      	cmp	r3, #16
 8006462:	d109      	bne.n	8006478 <HAL_TIM_PWM_Start+0x8c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	e008      	b.n	800648a <HAL_TIM_PWM_Start+0x9e>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e097      	b.n	80065c2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_PWM_Start+0xb6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064a0:	e023      	b.n	80064ea <HAL_TIM_PWM_Start+0xfe>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_PWM_Start+0xc6>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064b0:	e01b      	b.n	80064ea <HAL_TIM_PWM_Start+0xfe>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start+0xd6>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064c0:	e013      	b.n	80064ea <HAL_TIM_PWM_Start+0xfe>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_PWM_Start+0xe6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064d0:	e00b      	b.n	80064ea <HAL_TIM_PWM_Start+0xfe>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_PWM_Start+0xf6>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064e0:	e003      	b.n	80064ea <HAL_TIM_PWM_Start+0xfe>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2201      	movs	r2, #1
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 feb6 	bl	8007264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a33      	ldr	r2, [pc, #204]	@ (80065cc <HAL_TIM_PWM_Start+0x1e0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <HAL_TIM_PWM_Start+0x13e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a32      	ldr	r2, [pc, #200]	@ (80065d0 <HAL_TIM_PWM_Start+0x1e4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00e      	beq.n	800652a <HAL_TIM_PWM_Start+0x13e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a30      	ldr	r2, [pc, #192]	@ (80065d4 <HAL_TIM_PWM_Start+0x1e8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d009      	beq.n	800652a <HAL_TIM_PWM_Start+0x13e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a2f      	ldr	r2, [pc, #188]	@ (80065d8 <HAL_TIM_PWM_Start+0x1ec>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d004      	beq.n	800652a <HAL_TIM_PWM_Start+0x13e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2d      	ldr	r2, [pc, #180]	@ (80065dc <HAL_TIM_PWM_Start+0x1f0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d101      	bne.n	800652e <HAL_TIM_PWM_Start+0x142>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_TIM_PWM_Start+0x144>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006542:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a20      	ldr	r2, [pc, #128]	@ (80065cc <HAL_TIM_PWM_Start+0x1e0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d018      	beq.n	8006580 <HAL_TIM_PWM_Start+0x194>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006556:	d013      	beq.n	8006580 <HAL_TIM_PWM_Start+0x194>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a20      	ldr	r2, [pc, #128]	@ (80065e0 <HAL_TIM_PWM_Start+0x1f4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00e      	beq.n	8006580 <HAL_TIM_PWM_Start+0x194>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1f      	ldr	r2, [pc, #124]	@ (80065e4 <HAL_TIM_PWM_Start+0x1f8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d009      	beq.n	8006580 <HAL_TIM_PWM_Start+0x194>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <HAL_TIM_PWM_Start+0x1e4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <HAL_TIM_PWM_Start+0x194>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a16      	ldr	r2, [pc, #88]	@ (80065d4 <HAL_TIM_PWM_Start+0x1e8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d115      	bne.n	80065ac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	4b18      	ldr	r3, [pc, #96]	@ (80065e8 <HAL_TIM_PWM_Start+0x1fc>)
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b06      	cmp	r3, #6
 8006590:	d015      	beq.n	80065be <HAL_TIM_PWM_Start+0x1d2>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006598:	d011      	beq.n	80065be <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0201 	orr.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065aa:	e008      	b.n	80065be <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	e000      	b.n	80065c0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800
 80065e0:	40000400 	.word	0x40000400
 80065e4:	40000800 	.word	0x40000800
 80065e8:	00010007 	.word	0x00010007

080065ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d101      	bne.n	800660a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006606:	2302      	movs	r3, #2
 8006608:	e0ff      	b.n	800680a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b14      	cmp	r3, #20
 8006616:	f200 80f0 	bhi.w	80067fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800661a:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006675 	.word	0x08006675
 8006624:	080067fb 	.word	0x080067fb
 8006628:	080067fb 	.word	0x080067fb
 800662c:	080067fb 	.word	0x080067fb
 8006630:	080066b5 	.word	0x080066b5
 8006634:	080067fb 	.word	0x080067fb
 8006638:	080067fb 	.word	0x080067fb
 800663c:	080067fb 	.word	0x080067fb
 8006640:	080066f7 	.word	0x080066f7
 8006644:	080067fb 	.word	0x080067fb
 8006648:	080067fb 	.word	0x080067fb
 800664c:	080067fb 	.word	0x080067fb
 8006650:	08006737 	.word	0x08006737
 8006654:	080067fb 	.word	0x080067fb
 8006658:	080067fb 	.word	0x080067fb
 800665c:	080067fb 	.word	0x080067fb
 8006660:	08006779 	.word	0x08006779
 8006664:	080067fb 	.word	0x080067fb
 8006668:	080067fb 	.word	0x080067fb
 800666c:	080067fb 	.word	0x080067fb
 8006670:	080067b9 	.word	0x080067b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fa60 	bl	8006b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0208 	orr.w	r2, r2, #8
 800668e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6999      	ldr	r1, [r3, #24]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	619a      	str	r2, [r3, #24]
      break;
 80066b2:	e0a5      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fad0 	bl	8006c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6999      	ldr	r1, [r3, #24]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	619a      	str	r2, [r3, #24]
      break;
 80066f4:	e084      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fb39 	bl	8006d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0208 	orr.w	r2, r2, #8
 8006710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0204 	bic.w	r2, r2, #4
 8006720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69d9      	ldr	r1, [r3, #28]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	61da      	str	r2, [r3, #28]
      break;
 8006734:	e064      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fba1 	bl	8006e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	021a      	lsls	r2, r3, #8
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	61da      	str	r2, [r3, #28]
      break;
 8006776:	e043      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fc0a 	bl	8006f98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0208 	orr.w	r2, r2, #8
 8006792:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0204 	bic.w	r2, r2, #4
 80067a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067b6:	e023      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fc4e 	bl	8007060 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067f8:	e002      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	75fb      	strb	r3, [r7, #23]
      break;
 80067fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop

08006814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_TIM_ConfigClockSource+0x1c>
 800682c:	2302      	movs	r3, #2
 800682e:	e0de      	b.n	80069ee <HAL_TIM_ConfigClockSource+0x1da>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800684e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800685a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a63      	ldr	r2, [pc, #396]	@ (80069f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f000 80a9 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006870:	4a61      	ldr	r2, [pc, #388]	@ (80069f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	f200 80ae 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006878:	4a60      	ldr	r2, [pc, #384]	@ (80069fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	f000 80a1 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006880:	4a5e      	ldr	r2, [pc, #376]	@ (80069fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	f200 80a6 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006888:	4a5d      	ldr	r2, [pc, #372]	@ (8006a00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800688a:	4293      	cmp	r3, r2
 800688c:	f000 8099 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006890:	4a5b      	ldr	r2, [pc, #364]	@ (8006a00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006892:	4293      	cmp	r3, r2
 8006894:	f200 809e 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006898:	4a5a      	ldr	r2, [pc, #360]	@ (8006a04 <HAL_TIM_ConfigClockSource+0x1f0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f000 8091 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80068a0:	4a58      	ldr	r2, [pc, #352]	@ (8006a04 <HAL_TIM_ConfigClockSource+0x1f0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	f200 8096 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068ac:	f000 8089 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80068b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068b4:	f200 808e 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068bc:	d03e      	beq.n	800693c <HAL_TIM_ConfigClockSource+0x128>
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c2:	f200 8087 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ca:	f000 8086 	beq.w	80069da <HAL_TIM_ConfigClockSource+0x1c6>
 80068ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d2:	d87f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068d4:	2b70      	cmp	r3, #112	@ 0x70
 80068d6:	d01a      	beq.n	800690e <HAL_TIM_ConfigClockSource+0xfa>
 80068d8:	2b70      	cmp	r3, #112	@ 0x70
 80068da:	d87b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068dc:	2b60      	cmp	r3, #96	@ 0x60
 80068de:	d050      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x16e>
 80068e0:	2b60      	cmp	r3, #96	@ 0x60
 80068e2:	d877      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068e4:	2b50      	cmp	r3, #80	@ 0x50
 80068e6:	d03c      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x14e>
 80068e8:	2b50      	cmp	r3, #80	@ 0x50
 80068ea:	d873      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068ec:	2b40      	cmp	r3, #64	@ 0x40
 80068ee:	d058      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x18e>
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d86f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068f4:	2b30      	cmp	r3, #48	@ 0x30
 80068f6:	d064      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d86b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d060      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d867      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d05c      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006908:	2b10      	cmp	r3, #16
 800690a:	d05a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ae>
 800690c:	e062      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	f000 fc81 	bl	8007224 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	609a      	str	r2, [r3, #8]
      break;
 800693a:	e04f      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	f000 fc6a 	bl	8007224 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800695e:	609a      	str	r2, [r3, #8]
      break;
 8006960:	e03c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	461a      	mov	r2, r3
 8006970:	f000 fbdc 	bl	800712c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2150      	movs	r1, #80	@ 0x50
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fc35 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006980:	e02c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800698e:	461a      	mov	r2, r3
 8006990:	f000 fbfb 	bl	800718a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2160      	movs	r1, #96	@ 0x60
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fc25 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 80069a0:	e01c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fbbc 	bl	800712c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2140      	movs	r1, #64	@ 0x40
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fc15 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f000 fc0c 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 80069d2:	e003      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80069da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	00100070 	.word	0x00100070
 80069fc:	00100040 	.word	0x00100040
 8006a00:	00100030 	.word	0x00100030
 8006a04:	00100020 	.word	0x00100020

08006a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a42      	ldr	r2, [pc, #264]	@ (8006b24 <TIM_Base_SetConfig+0x11c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00f      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a26:	d00b      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b28 <TIM_Base_SetConfig+0x120>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d007      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a3e      	ldr	r2, [pc, #248]	@ (8006b2c <TIM_Base_SetConfig+0x124>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b30 <TIM_Base_SetConfig+0x128>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d108      	bne.n	8006a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a33      	ldr	r2, [pc, #204]	@ (8006b24 <TIM_Base_SetConfig+0x11c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d01b      	beq.n	8006a92 <TIM_Base_SetConfig+0x8a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a60:	d017      	beq.n	8006a92 <TIM_Base_SetConfig+0x8a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a30      	ldr	r2, [pc, #192]	@ (8006b28 <TIM_Base_SetConfig+0x120>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <TIM_Base_SetConfig+0x8a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8006b2c <TIM_Base_SetConfig+0x124>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00f      	beq.n	8006a92 <TIM_Base_SetConfig+0x8a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2e      	ldr	r2, [pc, #184]	@ (8006b30 <TIM_Base_SetConfig+0x128>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00b      	beq.n	8006a92 <TIM_Base_SetConfig+0x8a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b34 <TIM_Base_SetConfig+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d007      	beq.n	8006a92 <TIM_Base_SetConfig+0x8a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a2c      	ldr	r2, [pc, #176]	@ (8006b38 <TIM_Base_SetConfig+0x130>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d003      	beq.n	8006a92 <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8006b3c <TIM_Base_SetConfig+0x134>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d108      	bne.n	8006aa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a16      	ldr	r2, [pc, #88]	@ (8006b24 <TIM_Base_SetConfig+0x11c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00f      	beq.n	8006af0 <TIM_Base_SetConfig+0xe8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a17      	ldr	r2, [pc, #92]	@ (8006b30 <TIM_Base_SetConfig+0x128>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_Base_SetConfig+0xe8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a16      	ldr	r2, [pc, #88]	@ (8006b34 <TIM_Base_SetConfig+0x12c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0xe8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	@ (8006b38 <TIM_Base_SetConfig+0x130>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0xe8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a14      	ldr	r2, [pc, #80]	@ (8006b3c <TIM_Base_SetConfig+0x134>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d103      	bne.n	8006af8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f023 0201 	bic.w	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	611a      	str	r2, [r3, #16]
  }
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800
 8006b30:	40013400 	.word	0x40013400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40014400 	.word	0x40014400
 8006b3c:	40014800 	.word	0x40014800

08006b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f023 0201 	bic.w	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f023 0302 	bic.w	r3, r3, #2
 8006b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006c4c <TIM_OC1_SetConfig+0x10c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00f      	beq.n	8006bc0 <TIM_OC1_SetConfig+0x80>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c50 <TIM_OC1_SetConfig+0x110>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00b      	beq.n	8006bc0 <TIM_OC1_SetConfig+0x80>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a2a      	ldr	r2, [pc, #168]	@ (8006c54 <TIM_OC1_SetConfig+0x114>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <TIM_OC1_SetConfig+0x80>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a29      	ldr	r2, [pc, #164]	@ (8006c58 <TIM_OC1_SetConfig+0x118>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_OC1_SetConfig+0x80>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a28      	ldr	r2, [pc, #160]	@ (8006c5c <TIM_OC1_SetConfig+0x11c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d10c      	bne.n	8006bda <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f023 0308 	bic.w	r3, r3, #8
 8006bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 0304 	bic.w	r3, r3, #4
 8006bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c4c <TIM_OC1_SetConfig+0x10c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00f      	beq.n	8006c02 <TIM_OC1_SetConfig+0xc2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c50 <TIM_OC1_SetConfig+0x110>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00b      	beq.n	8006c02 <TIM_OC1_SetConfig+0xc2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a19      	ldr	r2, [pc, #100]	@ (8006c54 <TIM_OC1_SetConfig+0x114>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d007      	beq.n	8006c02 <TIM_OC1_SetConfig+0xc2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a18      	ldr	r2, [pc, #96]	@ (8006c58 <TIM_OC1_SetConfig+0x118>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d003      	beq.n	8006c02 <TIM_OC1_SetConfig+0xc2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a17      	ldr	r2, [pc, #92]	@ (8006c5c <TIM_OC1_SetConfig+0x11c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d111      	bne.n	8006c26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	621a      	str	r2, [r3, #32]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	40013400 	.word	0x40013400
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40014800 	.word	0x40014800

08006c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f023 0210 	bic.w	r2, r3, #16
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0320 	bic.w	r3, r3, #32
 8006cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a28      	ldr	r2, [pc, #160]	@ (8006d60 <TIM_OC2_SetConfig+0x100>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d003      	beq.n	8006ccc <TIM_OC2_SetConfig+0x6c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a27      	ldr	r2, [pc, #156]	@ (8006d64 <TIM_OC2_SetConfig+0x104>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d10d      	bne.n	8006ce8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <TIM_OC2_SetConfig+0x100>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00f      	beq.n	8006d10 <TIM_OC2_SetConfig+0xb0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <TIM_OC2_SetConfig+0x104>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <TIM_OC2_SetConfig+0xb0>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <TIM_OC2_SetConfig+0x108>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d007      	beq.n	8006d10 <TIM_OC2_SetConfig+0xb0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1a      	ldr	r2, [pc, #104]	@ (8006d6c <TIM_OC2_SetConfig+0x10c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_OC2_SetConfig+0xb0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <TIM_OC2_SetConfig+0x110>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d113      	bne.n	8006d38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800

08006d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a27      	ldr	r2, [pc, #156]	@ (8006e70 <TIM_OC3_SetConfig+0xfc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_OC3_SetConfig+0x6a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a26      	ldr	r2, [pc, #152]	@ (8006e74 <TIM_OC3_SetConfig+0x100>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10d      	bne.n	8006dfa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e70 <TIM_OC3_SetConfig+0xfc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00f      	beq.n	8006e22 <TIM_OC3_SetConfig+0xae>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1b      	ldr	r2, [pc, #108]	@ (8006e74 <TIM_OC3_SetConfig+0x100>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00b      	beq.n	8006e22 <TIM_OC3_SetConfig+0xae>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8006e78 <TIM_OC3_SetConfig+0x104>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d007      	beq.n	8006e22 <TIM_OC3_SetConfig+0xae>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a19      	ldr	r2, [pc, #100]	@ (8006e7c <TIM_OC3_SetConfig+0x108>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d003      	beq.n	8006e22 <TIM_OC3_SetConfig+0xae>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a18      	ldr	r2, [pc, #96]	@ (8006e80 <TIM_OC3_SetConfig+0x10c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d113      	bne.n	8006e4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40013400 	.word	0x40013400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40014400 	.word	0x40014400
 8006e80:	40014800 	.word	0x40014800

08006e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	031b      	lsls	r3, r3, #12
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a28      	ldr	r2, [pc, #160]	@ (8006f84 <TIM_OC4_SetConfig+0x100>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC4_SetConfig+0x6c>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a27      	ldr	r2, [pc, #156]	@ (8006f88 <TIM_OC4_SetConfig+0x104>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10d      	bne.n	8006f0c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	031b      	lsls	r3, r3, #12
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <TIM_OC4_SetConfig+0x100>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00f      	beq.n	8006f34 <TIM_OC4_SetConfig+0xb0>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a1c      	ldr	r2, [pc, #112]	@ (8006f88 <TIM_OC4_SetConfig+0x104>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00b      	beq.n	8006f34 <TIM_OC4_SetConfig+0xb0>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f8c <TIM_OC4_SetConfig+0x108>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d007      	beq.n	8006f34 <TIM_OC4_SetConfig+0xb0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a1a      	ldr	r2, [pc, #104]	@ (8006f90 <TIM_OC4_SetConfig+0x10c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC4_SetConfig+0xb0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <TIM_OC4_SetConfig+0x110>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d113      	bne.n	8006f5c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	019b      	lsls	r3, r3, #6
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	019b      	lsls	r3, r3, #6
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40012c00 	.word	0x40012c00
 8006f88:	40013400 	.word	0x40013400
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	40014400 	.word	0x40014400
 8006f94:	40014800 	.word	0x40014800

08006f98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a17      	ldr	r2, [pc, #92]	@ (800704c <TIM_OC5_SetConfig+0xb4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00f      	beq.n	8007012 <TIM_OC5_SetConfig+0x7a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a16      	ldr	r2, [pc, #88]	@ (8007050 <TIM_OC5_SetConfig+0xb8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00b      	beq.n	8007012 <TIM_OC5_SetConfig+0x7a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a15      	ldr	r2, [pc, #84]	@ (8007054 <TIM_OC5_SetConfig+0xbc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <TIM_OC5_SetConfig+0x7a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a14      	ldr	r2, [pc, #80]	@ (8007058 <TIM_OC5_SetConfig+0xc0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_OC5_SetConfig+0x7a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a13      	ldr	r2, [pc, #76]	@ (800705c <TIM_OC5_SetConfig+0xc4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d109      	bne.n	8007026 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800

08007060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	021b      	lsls	r3, r3, #8
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	051b      	lsls	r3, r3, #20
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a18      	ldr	r2, [pc, #96]	@ (8007118 <TIM_OC6_SetConfig+0xb8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00f      	beq.n	80070dc <TIM_OC6_SetConfig+0x7c>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a17      	ldr	r2, [pc, #92]	@ (800711c <TIM_OC6_SetConfig+0xbc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00b      	beq.n	80070dc <TIM_OC6_SetConfig+0x7c>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a16      	ldr	r2, [pc, #88]	@ (8007120 <TIM_OC6_SetConfig+0xc0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d007      	beq.n	80070dc <TIM_OC6_SetConfig+0x7c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a15      	ldr	r2, [pc, #84]	@ (8007124 <TIM_OC6_SetConfig+0xc4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_OC6_SetConfig+0x7c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a14      	ldr	r2, [pc, #80]	@ (8007128 <TIM_OC6_SetConfig+0xc8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d109      	bne.n	80070f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	029b      	lsls	r3, r3, #10
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40012c00 	.word	0x40012c00
 800711c:	40013400 	.word	0x40013400
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800

0800712c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	f023 0201 	bic.w	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f023 030a 	bic.w	r3, r3, #10
 8007168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718a:	b480      	push	{r7}
 800718c:	b087      	sub	sp, #28
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f023 0210 	bic.w	r2, r3, #16
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	031b      	lsls	r3, r3, #12
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	f043 0307 	orr.w	r3, r3, #7
 8007210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	609a      	str	r2, [r3, #8]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800723e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	021a      	lsls	r2, r3, #8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	431a      	orrs	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4313      	orrs	r3, r2
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	609a      	str	r2, [r3, #8]
}
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	2201      	movs	r2, #1
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1a      	ldr	r2, [r3, #32]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	43db      	mvns	r3, r3
 8007286:	401a      	ands	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a1a      	ldr	r2, [r3, #32]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	431a      	orrs	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e065      	b.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a2c      	ldr	r2, [pc, #176]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a2b      	ldr	r2, [pc, #172]	@ (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d108      	bne.n	800730e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007302:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007318:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1b      	ldr	r2, [pc, #108]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800733e:	d013      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a18      	ldr	r2, [pc, #96]	@ (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00e      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a17      	ldr	r2, [pc, #92]	@ (80073ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a12      	ldr	r2, [pc, #72]	@ (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a13      	ldr	r2, [pc, #76]	@ (80073b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10c      	bne.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	4313      	orrs	r3, r2
 8007378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40013400 	.word	0x40013400
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40014000 	.word	0x40014000

080073b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d101      	bne.n	80073d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073cc:	2302      	movs	r3, #2
 80073ce:	e073      	b.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	041b      	lsls	r3, r3, #16
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a19      	ldr	r2, [pc, #100]	@ (80074c4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a18      	ldr	r2, [pc, #96]	@ (80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d11c      	bne.n	80074a6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007476:	051b      	lsls	r3, r3, #20
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40013400 	.word	0x40013400

080074cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074dc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80074e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007502:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007506:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	b29b      	uxth	r3, r3
 8007514:	43db      	mvns	r3, r3
 8007516:	b29b      	uxth	r3, r3
 8007518:	4013      	ands	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800756c:	b480      	push	{r7}
 800756e:	b0a7      	sub	sp, #156	@ 0x9c
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800758e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007592:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	78db      	ldrb	r3, [r3, #3]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d81f      	bhi.n	80075de <USB_ActivateEndpoint+0x72>
 800759e:	a201      	add	r2, pc, #4	@ (adr r2, 80075a4 <USB_ActivateEndpoint+0x38>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075b5 	.word	0x080075b5
 80075a8:	080075d1 	.word	0x080075d1
 80075ac:	080075e7 	.word	0x080075e7
 80075b0:	080075c3 	.word	0x080075c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075bc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80075c0:	e012      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80075ca:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80075ce:	e00b      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075d0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80075d8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80075dc:	e004      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80075e4:	e000      	b.n	80075e8 <USB_ActivateEndpoint+0x7c>
      break;
 80075e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	441a      	add	r2, r3
 80075f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	b21b      	sxth	r3, r3
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800761e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007622:	b21a      	sxth	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b21b      	sxth	r3, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	b21b      	sxth	r3, r3
 800762e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	441a      	add	r2, r3
 800763c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800764c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007650:	b29b      	uxth	r3, r3
 8007652:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	7b1b      	ldrb	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 8180 	bne.w	800795e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8084 	beq.w	8007770 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007672:	b29b      	uxth	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	4413      	add	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	00da      	lsls	r2, r3, #3
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	88db      	ldrh	r3, [r3, #6]
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	b29b      	uxth	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	827b      	strh	r3, [r7, #18]
 80076aa:	8a7b      	ldrh	r3, [r7, #18]
 80076ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01b      	beq.n	80076ec <USB_ActivateEndpoint+0x180>
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ca:	823b      	strh	r3, [r7, #16]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	8a3b      	ldrh	r3, [r7, #16]
 80076d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	78db      	ldrb	r3, [r3, #3]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d020      	beq.n	8007736 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800770a:	81bb      	strh	r3, [r7, #12]
 800770c:	89bb      	ldrh	r3, [r7, #12]
 800770e:	f083 0320 	eor.w	r3, r3, #32
 8007712:	81bb      	strh	r3, [r7, #12]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	441a      	add	r2, r3
 800771e:	89bb      	ldrh	r3, [r7, #12]
 8007720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800772c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007730:	b29b      	uxth	r3, r3
 8007732:	8013      	strh	r3, [r2, #0]
 8007734:	e3f9      	b.n	8007f2a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774c:	81fb      	strh	r3, [r7, #14]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	441a      	add	r2, r3
 8007758:	89fb      	ldrh	r3, [r7, #14]
 800775a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800775e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800776a:	b29b      	uxth	r3, r3
 800776c:	8013      	strh	r3, [r2, #0]
 800776e:	e3dc      	b.n	8007f2a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	633b      	str	r3, [r7, #48]	@ 0x30
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777a:	b29b      	uxth	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	4413      	add	r3, r2
 8007782:	633b      	str	r3, [r7, #48]	@ 0x30
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	00da      	lsls	r2, r3, #3
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	4413      	add	r3, r2
 800778e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	88db      	ldrh	r3, [r3, #6]
 8007798:	085b      	lsrs	r3, r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b4:	4413      	add	r3, r2
 80077b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	00da      	lsls	r2, r3, #3
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <USB_ActivateEndpoint+0x28a>
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e041      	b.n	800787a <USB_ActivateEndpoint+0x30e>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80077fc:	d81c      	bhi.n	8007838 <USB_ActivateEndpoint+0x2cc>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <USB_ActivateEndpoint+0x2b2>
 8007814:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007818:	3301      	adds	r3, #1
 800781a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29a      	uxth	r2, r3
 8007824:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007828:	b29b      	uxth	r3, r3
 800782a:	029b      	lsls	r3, r3, #10
 800782c:	b29b      	uxth	r3, r3
 800782e:	4313      	orrs	r3, r2
 8007830:	b29a      	uxth	r2, r3
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	e020      	b.n	800787a <USB_ActivateEndpoint+0x30e>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 031f 	and.w	r3, r3, #31
 800784a:	2b00      	cmp	r3, #0
 800784c:	d104      	bne.n	8007858 <USB_ActivateEndpoint+0x2ec>
 800784e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007852:	3b01      	subs	r3, #1
 8007854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29a      	uxth	r2, r3
 800785e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007862:	b29b      	uxth	r3, r3
 8007864:	029b      	lsls	r3, r3, #10
 8007866:	b29b      	uxth	r3, r3
 8007868:	4313      	orrs	r3, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007874:	b29a      	uxth	r2, r3
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007888:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800788a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01b      	beq.n	80078ca <USB_ActivateEndpoint+0x35e>
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a8:	843b      	strh	r3, [r7, #32]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	8c3b      	ldrh	r3, [r7, #32]
 80078b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d124      	bne.n	800791c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078e8:	83bb      	strh	r3, [r7, #28]
 80078ea:	8bbb      	ldrh	r3, [r7, #28]
 80078ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078f0:	83bb      	strh	r3, [r7, #28]
 80078f2:	8bbb      	ldrh	r3, [r7, #28]
 80078f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078f8:	83bb      	strh	r3, [r7, #28]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	8bbb      	ldrh	r3, [r7, #28]
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]
 800791a:	e306      	b.n	8007f2a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800792e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007932:	83fb      	strh	r3, [r7, #30]
 8007934:	8bfb      	ldrh	r3, [r7, #30]
 8007936:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800793a:	83fb      	strh	r3, [r7, #30]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	8bfb      	ldrh	r3, [r7, #30]
 8007948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800794c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007958:	b29b      	uxth	r3, r3
 800795a:	8013      	strh	r3, [r2, #0]
 800795c:	e2e5      	b.n	8007f2a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	78db      	ldrb	r3, [r3, #3]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d11e      	bne.n	80079a4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	441a      	add	r2, r3
 800798a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800798e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007996:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800799a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800799e:	b29b      	uxth	r3, r3
 80079a0:	8013      	strh	r3, [r2, #0]
 80079a2:	e01d      	b.n	80079e0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ba:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80079cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079dc:	b29b      	uxth	r3, r3
 80079de:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079f0:	4413      	add	r3, r2
 80079f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	00da      	lsls	r2, r3, #3
 80079fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	891b      	ldrh	r3, [r3, #8]
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a24:	4413      	add	r3, r2
 8007a26:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	00da      	lsls	r2, r3, #3
 8007a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a30:	4413      	add	r3, r2
 8007a32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	895b      	ldrh	r3, [r3, #10]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a46:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 81af 	bne.w	8007db0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007a62:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01d      	beq.n	8007aaa <USB_ActivateEndpoint+0x53e>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a84:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	441a      	add	r2, r3
 8007a92:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8007aba:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01d      	beq.n	8007b02 <USB_ActivateEndpoint+0x596>
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007adc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	441a      	add	r2, r3
 8007aea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007afa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d16b      	bne.n	8007be2 <USB_ActivateEndpoint+0x676>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b1a:	4413      	add	r3, r2
 8007b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	00da      	lsls	r2, r3, #3
 8007b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b26:	4413      	add	r3, r2
 8007b28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <USB_ActivateEndpoint+0x5f0>
 8007b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e05d      	b.n	8007c18 <USB_ActivateEndpoint+0x6ac>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b62:	d81c      	bhi.n	8007b9e <USB_ActivateEndpoint+0x632>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <USB_ActivateEndpoint+0x618>
 8007b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b7e:	3301      	adds	r3, #1
 8007b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	029b      	lsls	r3, r3, #10
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e03c      	b.n	8007c18 <USB_ActivateEndpoint+0x6ac>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <USB_ActivateEndpoint+0x652>
 8007bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	029b      	lsls	r3, r3, #10
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bde:	801a      	strh	r2, [r3, #0]
 8007be0:	e01a      	b.n	8007c18 <USB_ActivateEndpoint+0x6ac>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d116      	bne.n	8007c18 <USB_ActivateEndpoint+0x6ac>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bfa:	4413      	add	r3, r2
 8007bfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	00da      	lsls	r2, r3, #3
 8007c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c06:	4413      	add	r3, r2
 8007c08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d16b      	bne.n	8007cfc <USB_ActivateEndpoint+0x790>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c34:	4413      	add	r3, r2
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	00da      	lsls	r2, r3, #3
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c40:	4413      	add	r3, r2
 8007c42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	801a      	strh	r2, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <USB_ActivateEndpoint+0x70a>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	e05b      	b.n	8007d2e <USB_ActivateEndpoint+0x7c2>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c7c:	d81c      	bhi.n	8007cb8 <USB_ActivateEndpoint+0x74c>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <USB_ActivateEndpoint+0x732>
 8007c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c98:	3301      	adds	r3, #1
 8007c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	029b      	lsls	r3, r3, #10
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	e03a      	b.n	8007d2e <USB_ActivateEndpoint+0x7c2>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <USB_ActivateEndpoint+0x76c>
 8007cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	029b      	lsls	r3, r3, #10
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf8:	801a      	strh	r2, [r3, #0]
 8007cfa:	e018      	b.n	8007d2e <USB_ActivateEndpoint+0x7c2>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d114      	bne.n	8007d2e <USB_ActivateEndpoint+0x7c2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d10:	4413      	add	r3, r2
 8007d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	00da      	lsls	r2, r3, #3
 8007d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d2c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007d46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007d4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d54:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d8c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	441a      	add	r2, r3
 8007d98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	8013      	strh	r3, [r2, #0]
 8007dae:	e0bc      	b.n	8007f2a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007dc0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01d      	beq.n	8007e08 <USB_ActivateEndpoint+0x89c>
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007de2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	441a      	add	r2, r3
 8007df0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007e18:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01d      	beq.n	8007e60 <USB_ActivateEndpoint+0x8f4>
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	441a      	add	r2, r3
 8007e48:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	78db      	ldrb	r3, [r3, #3]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d024      	beq.n	8007eb2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e7e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007e82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007e86:	f083 0320 	eor.w	r3, r3, #32
 8007e8a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	441a      	add	r2, r3
 8007e98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	8013      	strh	r3, [r2, #0]
 8007eb0:	e01d      	b.n	8007eee <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ec8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	441a      	add	r2, r3
 8007ed6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f04:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007f2a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	379c      	adds	r7, #156	@ 0x9c
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b08d      	sub	sp, #52	@ 0x34
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	7b1b      	ldrb	r3, [r3, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 808e 	bne.w	800806c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	785b      	ldrb	r3, [r3, #1]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d044      	beq.n	8007fe2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	81bb      	strh	r3, [r7, #12]
 8007f66:	89bb      	ldrh	r3, [r7, #12]
 8007f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01b      	beq.n	8007fa8 <USB_DeactivateEndpoint+0x6c>
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f86:	817b      	strh	r3, [r7, #10]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	441a      	add	r2, r3
 8007f92:	897b      	ldrh	r3, [r7, #10]
 8007f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fbe:	813b      	strh	r3, [r7, #8]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	441a      	add	r2, r3
 8007fca:	893b      	ldrh	r3, [r7, #8]
 8007fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	8013      	strh	r3, [r2, #0]
 8007fe0:	e192      	b.n	8008308 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	827b      	strh	r3, [r7, #18]
 8007ff0:	8a7b      	ldrh	r3, [r7, #18]
 8007ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01b      	beq.n	8008032 <USB_DeactivateEndpoint+0xf6>
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800800c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008010:	823b      	strh	r3, [r7, #16]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	441a      	add	r2, r3
 800801c:	8a3b      	ldrh	r3, [r7, #16]
 800801e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008026:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800802a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802e:	b29b      	uxth	r3, r3
 8008030:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008048:	81fb      	strh	r3, [r7, #14]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	89fb      	ldrh	r3, [r7, #14]
 8008056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800805a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800805e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008066:	b29b      	uxth	r3, r3
 8008068:	8013      	strh	r3, [r2, #0]
 800806a:	e14d      	b.n	8008308 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 80a5 	bne.w	80081c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	843b      	strh	r3, [r7, #32]
 8008084:	8c3b      	ldrh	r3, [r7, #32]
 8008086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01b      	beq.n	80080c6 <USB_DeactivateEndpoint+0x18a>
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a4:	83fb      	strh	r3, [r7, #30]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	8bfb      	ldrh	r3, [r7, #30]
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	83bb      	strh	r3, [r7, #28]
 80080d4:	8bbb      	ldrh	r3, [r7, #28]
 80080d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01b      	beq.n	8008116 <USB_DeactivateEndpoint+0x1da>
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f4:	837b      	strh	r3, [r7, #26]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	441a      	add	r2, r3
 8008100:	8b7b      	ldrh	r3, [r7, #26]
 8008102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800810a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800810e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008112:	b29b      	uxth	r3, r3
 8008114:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812c:	833b      	strh	r3, [r7, #24]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	441a      	add	r2, r3
 8008138:	8b3b      	ldrh	r3, [r7, #24]
 800813a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800813e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008146:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800814a:	b29b      	uxth	r3, r3
 800814c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29b      	uxth	r3, r3
 800815c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008164:	82fb      	strh	r3, [r7, #22]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	441a      	add	r2, r3
 8008170:	8afb      	ldrh	r3, [r7, #22]
 8008172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800817a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800817e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008182:	b29b      	uxth	r3, r3
 8008184:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800819c:	82bb      	strh	r3, [r7, #20]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	441a      	add	r2, r3
 80081a8:	8abb      	ldrh	r3, [r7, #20]
 80081aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	8013      	strh	r3, [r2, #0]
 80081be:	e0a3      	b.n	8008308 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80081ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80081d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01b      	beq.n	8008210 <USB_DeactivateEndpoint+0x2d4>
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80081fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008204:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800820c:	b29b      	uxth	r3, r3
 800820e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800821e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01b      	beq.n	8008260 <USB_DeactivateEndpoint+0x324>
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800823a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	441a      	add	r2, r3
 800824a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800824c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008258:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800825c:	b29b      	uxth	r3, r3
 800825e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008276:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	441a      	add	r2, r3
 8008282:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800828c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008294:	b29b      	uxth	r3, r3
 8008296:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008304:	b29b      	uxth	r3, r3
 8008306:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3734      	adds	r7, #52	@ 0x34
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b0ac      	sub	sp, #176	@ 0xb0
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b01      	cmp	r3, #1
 8008326:	f040 84ca 	bne.w	8008cbe <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	429a      	cmp	r2, r3
 8008334:	d904      	bls.n	8008340 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800833e:	e003      	b.n	8008348 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	7b1b      	ldrb	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d122      	bne.n	8008396 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	6959      	ldr	r1, [r3, #20]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	88da      	ldrh	r2, [r3, #6]
 8008358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800835c:	b29b      	uxth	r3, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 febd 	bl	80090de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800836e:	b29b      	uxth	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	4413      	add	r3, r2
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	00da      	lsls	r2, r3, #3
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	4413      	add	r3, r2
 8008382:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	f000 bc6f 	b.w	8008c74 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	78db      	ldrb	r3, [r3, #3]
 800839a:	2b02      	cmp	r3, #2
 800839c:	f040 831e 	bne.w	80089dc <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	6a1a      	ldr	r2, [r3, #32]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	f240 82cf 	bls.w	800894c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	441a      	add	r2, r3
 80083d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80083d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80083e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6a1a      	ldr	r2, [r3, #32]
 80083ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083f2:	1ad2      	subs	r2, r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 814f 	beq.w	80086ae <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	633b      	str	r3, [r7, #48]	@ 0x30
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d16b      	bne.n	80084f4 <USB_EPStartXfer+0x1de>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008426:	b29b      	uxth	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	4413      	add	r3, r2
 800842e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	00da      	lsls	r2, r3, #3
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	4413      	add	r3, r2
 800843a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800844a:	b29a      	uxth	r2, r3
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <USB_EPStartXfer+0x158>
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008466:	b29a      	uxth	r2, r3
 8008468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	e05b      	b.n	8008526 <USB_EPStartXfer+0x210>
 800846e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008472:	2b3e      	cmp	r3, #62	@ 0x3e
 8008474:	d81c      	bhi.n	80084b0 <USB_EPStartXfer+0x19a>
 8008476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <USB_EPStartXfer+0x180>
 800848c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008490:	3301      	adds	r3, #1
 8008492:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29a      	uxth	r2, r3
 800849c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	029b      	lsls	r3, r3, #10
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4313      	orrs	r3, r2
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	e03a      	b.n	8008526 <USB_EPStartXfer+0x210>
 80084b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <USB_EPStartXfer+0x1ba>
 80084c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084ca:	3b01      	subs	r3, #1
 80084cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084da:	b29b      	uxth	r3, r3
 80084dc:	029b      	lsls	r3, r3, #10
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4313      	orrs	r3, r2
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	e018      	b.n	8008526 <USB_EPStartXfer+0x210>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d114      	bne.n	8008526 <USB_EPStartXfer+0x210>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008502:	b29b      	uxth	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	4413      	add	r3, r2
 800850a:	633b      	str	r3, [r7, #48]	@ 0x30
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	00da      	lsls	r2, r3, #3
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	4413      	add	r3, r2
 8008516:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800851a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800851c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008520:	b29a      	uxth	r2, r3
 8008522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008524:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	895b      	ldrh	r3, [r3, #10]
 800852a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6959      	ldr	r1, [r3, #20]
 8008532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008536:	b29b      	uxth	r3, r3
 8008538:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fdce 	bl	80090de <USB_WritePMA>
            ep->xfer_buff += len;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	695a      	ldr	r2, [r3, #20]
 8008546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800854a:	441a      	add	r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6a1a      	ldr	r2, [r3, #32]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	429a      	cmp	r2, r3
 800855a:	d907      	bls.n	800856c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	6a1a      	ldr	r2, [r3, #32]
 8008560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008564:	1ad2      	subs	r2, r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	621a      	str	r2, [r3, #32]
 800856a:	e006      	b.n	800857a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2200      	movs	r2, #0
 8008578:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d16b      	bne.n	800865a <USB_EPStartXfer+0x344>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800858c:	b29b      	uxth	r3, r3
 800858e:	461a      	mov	r2, r3
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	4413      	add	r3, r2
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	00da      	lsls	r2, r3, #3
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	4413      	add	r3, r2
 80085a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <USB_EPStartXfer+0x2be>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e05d      	b.n	8008690 <USB_EPStartXfer+0x37a>
 80085d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80085da:	d81c      	bhi.n	8008616 <USB_EPStartXfer+0x300>
 80085dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80085e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d004      	beq.n	80085fc <USB_EPStartXfer+0x2e6>
 80085f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80085f6:	3301      	adds	r3, #1
 80085f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29a      	uxth	r2, r3
 8008602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008606:	b29b      	uxth	r3, r3
 8008608:	029b      	lsls	r3, r3, #10
 800860a:	b29b      	uxth	r3, r3
 800860c:	4313      	orrs	r3, r2
 800860e:	b29a      	uxth	r2, r3
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	e03c      	b.n	8008690 <USB_EPStartXfer+0x37a>
 8008616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800861a:	095b      	lsrs	r3, r3, #5
 800861c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008624:	f003 031f 	and.w	r3, r3, #31
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <USB_EPStartXfer+0x320>
 800862c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008630:	3b01      	subs	r3, #1
 8008632:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29a      	uxth	r2, r3
 800863c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008640:	b29b      	uxth	r3, r3
 8008642:	029b      	lsls	r3, r3, #10
 8008644:	b29b      	uxth	r3, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	b29b      	uxth	r3, r3
 800864a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800864e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008652:	b29a      	uxth	r2, r3
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	e01a      	b.n	8008690 <USB_EPStartXfer+0x37a>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d116      	bne.n	8008690 <USB_EPStartXfer+0x37a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	623b      	str	r3, [r7, #32]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800866c:	b29b      	uxth	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	4413      	add	r3, r2
 8008674:	623b      	str	r3, [r7, #32]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	00da      	lsls	r2, r3, #3
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	4413      	add	r3, r2
 8008680:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008684:	61fb      	str	r3, [r7, #28]
 8008686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800868a:	b29a      	uxth	r2, r3
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	891b      	ldrh	r3, [r3, #8]
 8008694:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	6959      	ldr	r1, [r3, #20]
 800869c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fd19 	bl	80090de <USB_WritePMA>
 80086ac:	e2e2      	b.n	8008c74 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d16b      	bne.n	800878e <USB_EPStartXfer+0x478>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c6:	4413      	add	r3, r2
 80086c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	00da      	lsls	r2, r3, #3
 80086d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086d2:	4413      	add	r3, r2
 80086d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086e8:	801a      	strh	r2, [r3, #0]
 80086ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <USB_EPStartXfer+0x3f2>
 80086f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008700:	b29a      	uxth	r2, r3
 8008702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008704:	801a      	strh	r2, [r3, #0]
 8008706:	e05d      	b.n	80087c4 <USB_EPStartXfer+0x4ae>
 8008708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800870c:	2b3e      	cmp	r3, #62	@ 0x3e
 800870e:	d81c      	bhi.n	800874a <USB_EPStartXfer+0x434>
 8008710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800871a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d004      	beq.n	8008730 <USB_EPStartXfer+0x41a>
 8008726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800872a:	3301      	adds	r3, #1
 800872c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29a      	uxth	r2, r3
 8008736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800873a:	b29b      	uxth	r3, r3
 800873c:	029b      	lsls	r3, r3, #10
 800873e:	b29b      	uxth	r3, r3
 8008740:	4313      	orrs	r3, r2
 8008742:	b29a      	uxth	r2, r3
 8008744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008746:	801a      	strh	r2, [r3, #0]
 8008748:	e03c      	b.n	80087c4 <USB_EPStartXfer+0x4ae>
 800874a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008758:	f003 031f 	and.w	r3, r3, #31
 800875c:	2b00      	cmp	r3, #0
 800875e:	d104      	bne.n	800876a <USB_EPStartXfer+0x454>
 8008760:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008764:	3b01      	subs	r3, #1
 8008766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800876a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	b29a      	uxth	r2, r3
 8008770:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008774:	b29b      	uxth	r3, r3
 8008776:	029b      	lsls	r3, r3, #10
 8008778:	b29b      	uxth	r3, r3
 800877a:	4313      	orrs	r3, r2
 800877c:	b29b      	uxth	r3, r3
 800877e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008786:	b29a      	uxth	r2, r3
 8008788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	e01a      	b.n	80087c4 <USB_EPStartXfer+0x4ae>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d116      	bne.n	80087c4 <USB_EPStartXfer+0x4ae>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	653b      	str	r3, [r7, #80]	@ 0x50
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	461a      	mov	r2, r3
 80087a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a6:	4413      	add	r3, r2
 80087a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	00da      	lsls	r2, r3, #3
 80087b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087b2:	4413      	add	r3, r2
 80087b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087be:	b29a      	uxth	r2, r3
 80087c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	891b      	ldrh	r3, [r3, #8]
 80087c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	6959      	ldr	r1, [r3, #20]
 80087d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fc7f 	bl	80090de <USB_WritePMA>
            ep->xfer_buff += len;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	695a      	ldr	r2, [r3, #20]
 80087e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087e8:	441a      	add	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	6a1a      	ldr	r2, [r3, #32]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d907      	bls.n	800880a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6a1a      	ldr	r2, [r3, #32]
 80087fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008802:	1ad2      	subs	r2, r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	621a      	str	r2, [r3, #32]
 8008808:	e006      	b.n	8008818 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2200      	movs	r2, #0
 8008816:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	643b      	str	r3, [r7, #64]	@ 0x40
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d16b      	bne.n	80088fc <USB_EPStartXfer+0x5e6>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800882e:	b29b      	uxth	r3, r3
 8008830:	461a      	mov	r2, r3
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	4413      	add	r3, r2
 8008836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	00da      	lsls	r2, r3, #3
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	4413      	add	r3, r2
 8008842:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
 8008848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29b      	uxth	r3, r3
 800884e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008852:	b29a      	uxth	r2, r3
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <USB_EPStartXfer+0x560>
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	b29b      	uxth	r3, r3
 8008866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800886e:	b29a      	uxth	r2, r3
 8008870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	e05b      	b.n	800892e <USB_EPStartXfer+0x618>
 8008876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800887a:	2b3e      	cmp	r3, #62	@ 0x3e
 800887c:	d81c      	bhi.n	80088b8 <USB_EPStartXfer+0x5a2>
 800887e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <USB_EPStartXfer+0x588>
 8008894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008898:	3301      	adds	r3, #1
 800889a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800889e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	029b      	lsls	r3, r3, #10
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	4313      	orrs	r3, r2
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	e03a      	b.n	800892e <USB_EPStartXfer+0x618>
 80088b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <USB_EPStartXfer+0x5c2>
 80088ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088d2:	3b01      	subs	r3, #1
 80088d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29a      	uxth	r2, r3
 80088de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e018      	b.n	800892e <USB_EPStartXfer+0x618>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	785b      	ldrb	r3, [r3, #1]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d114      	bne.n	800892e <USB_EPStartXfer+0x618>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800890a:	b29b      	uxth	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008910:	4413      	add	r3, r2
 8008912:	643b      	str	r3, [r7, #64]	@ 0x40
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	00da      	lsls	r2, r3, #3
 800891a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800891c:	4413      	add	r3, r2
 800891e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008928:	b29a      	uxth	r2, r3
 800892a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	895b      	ldrh	r3, [r3, #10]
 8008932:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	6959      	ldr	r1, [r3, #20]
 800893a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800893e:	b29b      	uxth	r3, r3
 8008940:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fbca 	bl	80090de <USB_WritePMA>
 800894a:	e193      	b.n	8008c74 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800896a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	441a      	add	r2, r3
 8008978:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800897c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800898c:	b29b      	uxth	r3, r3
 800898e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800899a:	b29b      	uxth	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a0:	4413      	add	r3, r2
 80089a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	00da      	lsls	r2, r3, #3
 80089aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089ac:	4413      	add	r3, r2
 80089ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	891b      	ldrh	r3, [r3, #8]
 80089c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6959      	ldr	r1, [r3, #20]
 80089ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fb82 	bl	80090de <USB_WritePMA>
 80089da:	e14b      	b.n	8008c74 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	6a1a      	ldr	r2, [r3, #32]
 80089e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089e4:	1ad2      	subs	r2, r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 809a 	beq.w	8008b36 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d16b      	bne.n	8008ae6 <USB_EPStartXfer+0x7d0>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a1e:	4413      	add	r3, r2
 8008a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	00da      	lsls	r2, r3, #3
 8008a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a30:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a40:	801a      	strh	r2, [r3, #0]
 8008a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <USB_EPStartXfer+0x74a>
 8008a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	e05b      	b.n	8008b18 <USB_EPStartXfer+0x802>
 8008a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a64:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a66:	d81c      	bhi.n	8008aa2 <USB_EPStartXfer+0x78c>
 8008a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <USB_EPStartXfer+0x772>
 8008a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a82:	3301      	adds	r3, #1
 8008a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	029b      	lsls	r3, r3, #10
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a9e:	801a      	strh	r2, [r3, #0]
 8008aa0:	e03a      	b.n	8008b18 <USB_EPStartXfer+0x802>
 8008aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aa6:	095b      	lsrs	r3, r3, #5
 8008aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ab0:	f003 031f 	and.w	r3, r3, #31
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d104      	bne.n	8008ac2 <USB_EPStartXfer+0x7ac>
 8008ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008abc:	3b01      	subs	r3, #1
 8008abe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ac2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	029b      	lsls	r3, r3, #10
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e018      	b.n	8008b18 <USB_EPStartXfer+0x802>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d114      	bne.n	8008b18 <USB_EPStartXfer+0x802>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008afa:	4413      	add	r3, r2
 8008afc:	673b      	str	r3, [r7, #112]	@ 0x70
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	00da      	lsls	r2, r3, #3
 8008b04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b06:	4413      	add	r3, r2
 8008b08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	895b      	ldrh	r3, [r3, #10]
 8008b1c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	6959      	ldr	r1, [r3, #20]
 8008b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fad5 	bl	80090de <USB_WritePMA>
 8008b34:	e09e      	b.n	8008c74 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d16b      	bne.n	8008c16 <USB_EPStartXfer+0x900>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b4e:	4413      	add	r3, r2
 8008b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	00da      	lsls	r2, r3, #3
 8008b58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b70:	801a      	strh	r2, [r3, #0]
 8008b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <USB_EPStartXfer+0x87a>
 8008b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	e063      	b.n	8008c58 <USB_EPStartXfer+0x942>
 8008b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b94:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b96:	d81c      	bhi.n	8008bd2 <USB_EPStartXfer+0x8bc>
 8008b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b9c:	085b      	lsrs	r3, r3, #1
 8008b9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d004      	beq.n	8008bb8 <USB_EPStartXfer+0x8a2>
 8008bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	029b      	lsls	r3, r3, #10
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	e042      	b.n	8008c58 <USB_EPStartXfer+0x942>
 8008bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bd6:	095b      	lsrs	r3, r3, #5
 8008bd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008be0:	f003 031f 	and.w	r3, r3, #31
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <USB_EPStartXfer+0x8dc>
 8008be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008bec:	3b01      	subs	r3, #1
 8008bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	029b      	lsls	r3, r3, #10
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	4313      	orrs	r3, r2
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	e020      	b.n	8008c58 <USB_EPStartXfer+0x942>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d11c      	bne.n	8008c58 <USB_EPStartXfer+0x942>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c32:	4413      	add	r3, r2
 8008c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	00da      	lsls	r2, r3, #3
 8008c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c42:	4413      	add	r3, r2
 8008c44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	891b      	ldrh	r3, [r3, #8]
 8008c5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	6959      	ldr	r1, [r3, #20]
 8008c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa35 	bl	80090de <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c8a:	817b      	strh	r3, [r7, #10]
 8008c8c:	897b      	ldrh	r3, [r7, #10]
 8008c8e:	f083 0310 	eor.w	r3, r3, #16
 8008c92:	817b      	strh	r3, [r7, #10]
 8008c94:	897b      	ldrh	r3, [r7, #10]
 8008c96:	f083 0320 	eor.w	r3, r3, #32
 8008c9a:	817b      	strh	r3, [r7, #10]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	441a      	add	r2, r3
 8008ca6:	897b      	ldrh	r3, [r7, #10]
 8008ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	8013      	strh	r3, [r2, #0]
 8008cbc:	e0d5      	b.n	8008e6a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	7b1b      	ldrb	r3, [r3, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d156      	bne.n	8008d74 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d122      	bne.n	8008d14 <USB_EPStartXfer+0x9fe>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	78db      	ldrb	r3, [r3, #3]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d11e      	bne.n	8008d14 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cec:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	441a      	add	r2, r3
 8008cfa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d06:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	8013      	strh	r3, [r2, #0]
 8008d12:	e01d      	b.n	8008d50 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d2a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	441a      	add	r2, r3
 8008d38:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d907      	bls.n	8008d6c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	699a      	ldr	r2, [r3, #24]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	619a      	str	r2, [r3, #24]
 8008d6a:	e054      	b.n	8008e16 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	619a      	str	r2, [r3, #24]
 8008d72:	e050      	b.n	8008e16 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	78db      	ldrb	r3, [r3, #3]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d142      	bne.n	8008e02 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d048      	beq.n	8008e16 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <USB_EPStartXfer+0xa96>
 8008da0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008dac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d12e      	bne.n	8008e16 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008db8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d128      	bne.n	8008e16 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dda:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	441a      	add	r2, r3
 8008de8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008df8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	8013      	strh	r3, [r2, #0]
 8008e00:	e009      	b.n	8008e16 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	78db      	ldrb	r3, [r3, #3]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d103      	bne.n	8008e12 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	619a      	str	r2, [r3, #24]
 8008e10:	e001      	b.n	8008e16 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e02a      	b.n	8008e6c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e38:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	441a      	add	r2, r3
 8008e52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	37b0      	adds	r7, #176	@ 0xb0
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	785b      	ldrb	r3, [r3, #1]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d020      	beq.n	8008ec8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e9c:	81bb      	strh	r3, [r7, #12]
 8008e9e:	89bb      	ldrh	r3, [r7, #12]
 8008ea0:	f083 0310 	eor.w	r3, r3, #16
 8008ea4:	81bb      	strh	r3, [r7, #12]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	441a      	add	r2, r3
 8008eb0:	89bb      	ldrh	r3, [r7, #12]
 8008eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	8013      	strh	r3, [r2, #0]
 8008ec6:	e01f      	b.n	8008f08 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ede:	81fb      	strh	r3, [r7, #14]
 8008ee0:	89fb      	ldrh	r3, [r7, #14]
 8008ee2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ee6:	81fb      	strh	r3, [r7, #14]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	441a      	add	r2, r3
 8008ef2:	89fb      	ldrh	r3, [r7, #14]
 8008ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b087      	sub	sp, #28
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d04c      	beq.n	8008fc2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	823b      	strh	r3, [r7, #16]
 8008f36:	8a3b      	ldrh	r3, [r7, #16]
 8008f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d01b      	beq.n	8008f78 <USB_EPClearStall+0x62>
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f56:	81fb      	strh	r3, [r7, #14]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	441a      	add	r2, r3
 8008f62:	89fb      	ldrh	r3, [r7, #14]
 8008f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	78db      	ldrb	r3, [r3, #3]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d06c      	beq.n	800905a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f96:	81bb      	strh	r3, [r7, #12]
 8008f98:	89bb      	ldrh	r3, [r7, #12]
 8008f9a:	f083 0320 	eor.w	r3, r3, #32
 8008f9e:	81bb      	strh	r3, [r7, #12]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	89bb      	ldrh	r3, [r7, #12]
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]
 8008fc0:	e04b      	b.n	800905a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	82fb      	strh	r3, [r7, #22]
 8008fd0:	8afb      	ldrh	r3, [r7, #22]
 8008fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d01b      	beq.n	8009012 <USB_EPClearStall+0xfc>
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff0:	82bb      	strh	r3, [r7, #20]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	441a      	add	r2, r3
 8008ffc:	8abb      	ldrh	r3, [r7, #20]
 8008ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009006:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800900a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800900e:	b29b      	uxth	r3, r3
 8009010:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	b29b      	uxth	r3, r3
 8009020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009028:	827b      	strh	r3, [r7, #18]
 800902a:	8a7b      	ldrh	r3, [r7, #18]
 800902c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009030:	827b      	strh	r3, [r7, #18]
 8009032:	8a7b      	ldrh	r3, [r7, #18]
 8009034:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009038:	827b      	strh	r3, [r7, #18]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	441a      	add	r2, r3
 8009044:	8a7b      	ldrh	r3, [r7, #18]
 8009046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800904a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800904e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009056:	b29b      	uxth	r3, r3
 8009058:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2280      	movs	r2, #128	@ 0x80
 800907e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800909e:	b29b      	uxth	r3, r3
 80090a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80090be:	b480      	push	{r7}
 80090c0:	b085      	sub	sp, #20
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80090d0:	68fb      	ldr	r3, [r7, #12]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80090de:	b480      	push	{r7}
 80090e0:	b08b      	sub	sp, #44	@ 0x2c
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	4611      	mov	r1, r2
 80090ea:	461a      	mov	r2, r3
 80090ec:	460b      	mov	r3, r1
 80090ee:	80fb      	strh	r3, [r7, #6]
 80090f0:	4613      	mov	r3, r2
 80090f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80090f4:	88bb      	ldrh	r3, [r7, #4]
 80090f6:	3301      	adds	r3, #1
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009104:	88fa      	ldrh	r2, [r7, #6]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800910e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
 8009114:	e01c      	b.n	8009150 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	3301      	adds	r3, #1
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	b21b      	sxth	r3, r3
 8009124:	021b      	lsls	r3, r3, #8
 8009126:	b21a      	sxth	r2, r3
 8009128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800912c:	4313      	orrs	r3, r2
 800912e:	b21b      	sxth	r3, r3
 8009130:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	8a7a      	ldrh	r2, [r7, #18]
 8009136:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	3302      	adds	r3, #2
 800913c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	3301      	adds	r3, #1
 8009142:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3301      	adds	r3, #1
 8009148:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800914a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914c:	3b01      	subs	r3, #1
 800914e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1df      	bne.n	8009116 <USB_WritePMA+0x38>
  }
}
 8009156:	bf00      	nop
 8009158:	bf00      	nop
 800915a:	372c      	adds	r7, #44	@ 0x2c
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009164:	b480      	push	{r7}
 8009166:	b08b      	sub	sp, #44	@ 0x2c
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4611      	mov	r1, r2
 8009170:	461a      	mov	r2, r3
 8009172:	460b      	mov	r3, r1
 8009174:	80fb      	strh	r3, [r7, #6]
 8009176:	4613      	mov	r3, r2
 8009178:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800917a:	88bb      	ldrh	r3, [r7, #4]
 800917c:	085b      	lsrs	r3, r3, #1
 800917e:	b29b      	uxth	r3, r3
 8009180:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800918a:	88fa      	ldrh	r2, [r7, #6]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009194:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	627b      	str	r3, [r7, #36]	@ 0x24
 800919a:	e018      	b.n	80091ce <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	3302      	adds	r3, #2
 80091a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	3301      	adds	r3, #1
 80091b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	0a1b      	lsrs	r3, r3, #8
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	3301      	adds	r3, #1
 80091c6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	3b01      	subs	r3, #1
 80091cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e3      	bne.n	800919c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80091d4:	88bb      	ldrh	r3, [r7, #4]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	701a      	strb	r2, [r3, #0]
  }
}
 80091f0:	bf00      	nop
 80091f2:	372c      	adds	r7, #44	@ 0x2c
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009208:	2010      	movs	r0, #16
 800920a:	f001 fe75 	bl	800aef8 <USBD_static_malloc>
 800920e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800921e:	2302      	movs	r3, #2
 8009220:	e01b      	b.n	800925a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7c1b      	ldrb	r3, [r3, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2207      	movs	r2, #7
 8009236:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8009238:	e002      	b.n	8009240 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	220a      	movs	r2, #10
 800923e:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009240:	2304      	movs	r3, #4
 8009242:	2203      	movs	r2, #3
 8009244:	2181      	movs	r1, #129	@ 0x81
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fd0f 	bl	800ac6a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800926e:	2181      	movs	r1, #129	@ 0x81
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 fd20 	bl	800acb6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009288:	2b00      	cmp	r3, #0
 800928a:	d009      	beq.n	80092a0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009292:	4618      	mov	r0, r3
 8009294:	f001 fe3e 	bl	800af14 <USBD_static_free>
    pdev->pClassData = NULL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092bc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e0e8      	b.n	80094a2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d046      	beq.n	800936a <USBD_HID_Setup+0xbe>
 80092dc:	2b20      	cmp	r3, #32
 80092de:	f040 80d8 	bne.w	8009492 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	3b02      	subs	r3, #2
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d836      	bhi.n	800935a <USBD_HID_Setup+0xae>
 80092ec:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <USBD_HID_Setup+0x48>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	0800934b 	.word	0x0800934b
 80092f8:	0800932b 	.word	0x0800932b
 80092fc:	0800935b 	.word	0x0800935b
 8009300:	0800935b 	.word	0x0800935b
 8009304:	0800935b 	.word	0x0800935b
 8009308:	0800935b 	.word	0x0800935b
 800930c:	0800935b 	.word	0x0800935b
 8009310:	0800935b 	.word	0x0800935b
 8009314:	08009339 	.word	0x08009339
 8009318:	0800931d 	.word	0x0800931d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	601a      	str	r2, [r3, #0]
          break;
 8009328:	e01e      	b.n	8009368 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 f9b2 	bl	800a69a <USBD_CtlSendData>
          break;
 8009336:	e017      	b.n	8009368 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	885b      	ldrh	r3, [r3, #2]
 800933c:	0a1b      	lsrs	r3, r3, #8
 800933e:	b29b      	uxth	r3, r3
 8009340:	b2db      	uxtb	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	605a      	str	r2, [r3, #4]
          break;
 8009348:	e00e      	b.n	8009368 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3304      	adds	r3, #4
 800934e:	2201      	movs	r2, #1
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f9a1 	bl	800a69a <USBD_CtlSendData>
          break;
 8009358:	e006      	b.n	8009368 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 f92b 	bl	800a5b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	75fb      	strb	r3, [r7, #23]
          break;
 8009366:	bf00      	nop
      }
      break;
 8009368:	e09a      	b.n	80094a0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	2b0b      	cmp	r3, #11
 8009370:	f200 8086 	bhi.w	8009480 <USBD_HID_Setup+0x1d4>
 8009374:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <USBD_HID_Setup+0xd0>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	080093ad 	.word	0x080093ad
 8009380:	0800948f 	.word	0x0800948f
 8009384:	08009481 	.word	0x08009481
 8009388:	08009481 	.word	0x08009481
 800938c:	08009481 	.word	0x08009481
 8009390:	08009481 	.word	0x08009481
 8009394:	080093d7 	.word	0x080093d7
 8009398:	08009481 	.word	0x08009481
 800939c:	08009481 	.word	0x08009481
 80093a0:	08009481 	.word	0x08009481
 80093a4:	0800942f 	.word	0x0800942f
 80093a8:	08009459 	.word	0x08009459
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d107      	bne.n	80093c8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093b8:	f107 030a 	add.w	r3, r7, #10
 80093bc:	2202      	movs	r2, #2
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f96a 	bl	800a69a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093c6:	e063      	b.n	8009490 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 f8f4 	bl	800a5b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80093d0:	2303      	movs	r3, #3
 80093d2:	75fb      	strb	r3, [r7, #23]
          break;
 80093d4:	e05c      	b.n	8009490 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	885b      	ldrh	r3, [r3, #2]
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	b29b      	uxth	r3, r3
 80093de:	2b22      	cmp	r3, #34	@ 0x22
 80093e0:	d108      	bne.n	80093f4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	88db      	ldrh	r3, [r3, #6]
 80093e6:	2b4a      	cmp	r3, #74	@ 0x4a
 80093e8:	bf28      	it	cs
 80093ea:	234a      	movcs	r3, #74	@ 0x4a
 80093ec:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80093ee:	4b2f      	ldr	r3, [pc, #188]	@ (80094ac <USBD_HID_Setup+0x200>)
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	e015      	b.n	8009420 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	885b      	ldrh	r3, [r3, #2]
 80093f8:	0a1b      	lsrs	r3, r3, #8
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b21      	cmp	r3, #33	@ 0x21
 80093fe:	d108      	bne.n	8009412 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8009400:	4b2b      	ldr	r3, [pc, #172]	@ (80094b0 <USBD_HID_Setup+0x204>)
 8009402:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	88db      	ldrh	r3, [r3, #6]
 8009408:	2b09      	cmp	r3, #9
 800940a:	bf28      	it	cs
 800940c:	2309      	movcs	r3, #9
 800940e:	82bb      	strh	r3, [r7, #20]
 8009410:	e006      	b.n	8009420 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 f8cf 	bl	800a5b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800941a:	2303      	movs	r3, #3
 800941c:	75fb      	strb	r3, [r7, #23]
            break;
 800941e:	e037      	b.n	8009490 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009420:	8abb      	ldrh	r3, [r7, #20]
 8009422:	461a      	mov	r2, r3
 8009424:	6939      	ldr	r1, [r7, #16]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 f937 	bl	800a69a <USBD_CtlSendData>
          break;
 800942c:	e030      	b.n	8009490 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b03      	cmp	r3, #3
 8009438:	d107      	bne.n	800944a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3308      	adds	r3, #8
 800943e:	2201      	movs	r2, #1
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 f929 	bl	800a69a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009448:	e022      	b.n	8009490 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 f8b3 	bl	800a5b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009452:	2303      	movs	r3, #3
 8009454:	75fb      	strb	r3, [r7, #23]
          break;
 8009456:	e01b      	b.n	8009490 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b03      	cmp	r3, #3
 8009462:	d106      	bne.n	8009472 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	885b      	ldrh	r3, [r3, #2]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009470:	e00e      	b.n	8009490 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 f89f 	bl	800a5b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800947a:	2303      	movs	r3, #3
 800947c:	75fb      	strb	r3, [r7, #23]
          break;
 800947e:	e007      	b.n	8009490 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 f898 	bl	800a5b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009488:	2303      	movs	r3, #3
 800948a:	75fb      	strb	r3, [r7, #23]
          break;
 800948c:	e000      	b.n	8009490 <USBD_HID_Setup+0x1e4>
          break;
 800948e:	bf00      	nop
      }
      break;
 8009490:	e006      	b.n	80094a0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 f88f 	bl	800a5b8 <USBD_CtlError>
      ret = USBD_FAIL;
 800949a:	2303      	movs	r3, #3
 800949c:	75fb      	strb	r3, [r7, #23]
      break;
 800949e:	bf00      	nop
  }

  return (uint8_t)ret;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	200000c8 	.word	0x200000c8
 80094b0:	200000b0 	.word	0x200000b0

080094b4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2222      	movs	r2, #34	@ 0x22
 80094c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	@ (80094d0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20000044 	.word	0x20000044

080094d4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2222      	movs	r2, #34	@ 0x22
 80094e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80094e2:	4b03      	ldr	r3, [pc, #12]	@ (80094f0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	20000068 	.word	0x20000068

080094f4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2222      	movs	r2, #34	@ 0x22
 8009500:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8009502:	4b03      	ldr	r3, [pc, #12]	@ (8009510 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	2000008c 	.word	0x2000008c

08009514 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009526:	2200      	movs	r2, #0
 8009528:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	220a      	movs	r2, #10
 8009544:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009546:	4b03      	ldr	r3, [pc, #12]	@ (8009554 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	200000bc 	.word	0x200000bc

08009558 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	e01f      	b.n	80095b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	79fa      	ldrb	r2, [r7, #7]
 80095a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f001 faf7 	bl	800ab98 <USBD_LL_Init>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e016      	b.n	80095fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ec:	f107 020e 	add.w	r2, r7, #14
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
 80095f4:	4602      	mov	r2, r0
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b082      	sub	sp, #8
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 fb10 	bl	800ac34 <USBD_LL_Start>
 8009614:	4603      	mov	r3, r0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009640:	2303      	movs	r3, #3
 8009642:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	4611      	mov	r1, r2
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	4611      	mov	r1, r2
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4798      	blx	r3
  }

  return USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 ff48 	bl	800a544 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80096c2:	461a      	mov	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096d0:	f003 031f 	and.w	r3, r3, #31
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d01a      	beq.n	800970e <USBD_LL_SetupStage+0x72>
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d822      	bhi.n	8009722 <USBD_LL_SetupStage+0x86>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <USBD_LL_SetupStage+0x4a>
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d00a      	beq.n	80096fa <USBD_LL_SetupStage+0x5e>
 80096e4:	e01d      	b.n	8009722 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f9f0 	bl	8009ad4 <USBD_StdDevReq>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]
      break;
 80096f8:	e020      	b.n	800973c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa54 	bl	8009bb0 <USBD_StdItfReq>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
      break;
 800970c:	e016      	b.n	800973c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa93 	bl	8009c42 <USBD_StdEPReq>
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]
      break;
 8009720:	e00c      	b.n	800973c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009728:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800972c:	b2db      	uxtb	r3, r3
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 fadf 	bl	800acf4 <USBD_LL_StallEP>
 8009736:	4603      	mov	r3, r0
 8009738:	73fb      	strb	r3, [r7, #15]
      break;
 800973a:	bf00      	nop
  }

  return ret;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b086      	sub	sp, #24
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	460b      	mov	r3, r1
 8009750:	607a      	str	r2, [r7, #4]
 8009752:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d138      	bne.n	80097cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009760:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009768:	2b03      	cmp	r3, #3
 800976a:	d14a      	bne.n	8009802 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	429a      	cmp	r2, r3
 8009776:	d913      	bls.n	80097a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	1ad2      	subs	r2, r2, r3
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	4293      	cmp	r3, r2
 8009790:	bf28      	it	cs
 8009792:	4613      	movcs	r3, r2
 8009794:	461a      	mov	r2, r3
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 ffaa 	bl	800a6f2 <USBD_CtlContinueRx>
 800979e:	e030      	b.n	8009802 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d10b      	bne.n	80097c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 ffa5 	bl	800a714 <USBD_CtlSendStatus>
 80097ca:	e01a      	b.n	8009802 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d114      	bne.n	8009802 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00e      	beq.n	8009802 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	7afa      	ldrb	r2, [r7, #11]
 80097ee:	4611      	mov	r1, r2
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	4798      	blx	r3
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	e000      	b.n	8009804 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	460b      	mov	r3, r1
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800981a:	7afb      	ldrb	r3, [r7, #11]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d16b      	bne.n	80098f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3314      	adds	r3, #20
 8009824:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800982c:	2b02      	cmp	r3, #2
 800982e:	d156      	bne.n	80098de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	429a      	cmp	r2, r3
 800983a:	d914      	bls.n	8009866 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	1ad2      	subs	r2, r2, r3
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	461a      	mov	r2, r3
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 ff3c 	bl	800a6d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009858:	2300      	movs	r3, #0
 800985a:	2200      	movs	r2, #0
 800985c:	2100      	movs	r1, #0
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f001 faf2 	bl	800ae48 <USBD_LL_PrepareReceive>
 8009864:	e03b      	b.n	80098de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	429a      	cmp	r2, r3
 8009870:	d11c      	bne.n	80098ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800987a:	429a      	cmp	r2, r3
 800987c:	d316      	bcc.n	80098ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009888:	429a      	cmp	r2, r3
 800988a:	d20f      	bcs.n	80098ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800988c:	2200      	movs	r2, #0
 800988e:	2100      	movs	r1, #0
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 ff1d 	bl	800a6d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800989e:	2300      	movs	r3, #0
 80098a0:	2200      	movs	r2, #0
 80098a2:	2100      	movs	r1, #0
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f001 facf 	bl	800ae48 <USBD_LL_PrepareReceive>
 80098aa:	e018      	b.n	80098de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d10b      	bne.n	80098d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d005      	beq.n	80098d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80098d0:	2180      	movs	r1, #128	@ 0x80
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f001 fa0e 	bl	800acf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 ff2e 	bl	800a73a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d122      	bne.n	800992e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fe98 	bl	800961e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80098f6:	e01a      	b.n	800992e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b03      	cmp	r3, #3
 8009902:	d114      	bne.n	800992e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00e      	beq.n	800992e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	7afa      	ldrb	r2, [r7, #11]
 800991a:	4611      	mov	r1, r2
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	4798      	blx	r3
 8009920:	4603      	mov	r3, r0
 8009922:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	e000      	b.n	8009930 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009968:	2303      	movs	r3, #3
 800996a:	e02f      	b.n	80099cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00f      	beq.n	8009996 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	6852      	ldr	r2, [r2, #4]
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	4611      	mov	r1, r2
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009996:	2340      	movs	r3, #64	@ 0x40
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f964 	bl	800ac6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2240      	movs	r2, #64	@ 0x40
 80099ae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099b2:	2340      	movs	r3, #64	@ 0x40
 80099b4:	2200      	movs	r2, #0
 80099b6:	2180      	movs	r1, #128	@ 0x80
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 f956 	bl	800ac6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2240      	movs	r2, #64	@ 0x40
 80099c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d106      	bne.n	8009a42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e012      	b.n	8009a8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d10b      	bne.n	8009a8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ab2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	b21a      	sxth	r2, r3
 8009aba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	b21b      	sxth	r3, r3
 8009ac2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ac4:	89fb      	ldrh	r3, [r7, #14]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
	...

08009ad4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009aea:	2b40      	cmp	r3, #64	@ 0x40
 8009aec:	d005      	beq.n	8009afa <USBD_StdDevReq+0x26>
 8009aee:	2b40      	cmp	r3, #64	@ 0x40
 8009af0:	d853      	bhi.n	8009b9a <USBD_StdDevReq+0xc6>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <USBD_StdDevReq+0x3a>
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d14f      	bne.n	8009b9a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	4798      	blx	r3
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b0c:	e04a      	b.n	8009ba4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	2b09      	cmp	r3, #9
 8009b14:	d83b      	bhi.n	8009b8e <USBD_StdDevReq+0xba>
 8009b16:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <USBD_StdDevReq+0x48>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b71 	.word	0x08009b71
 8009b20:	08009b85 	.word	0x08009b85
 8009b24:	08009b8f 	.word	0x08009b8f
 8009b28:	08009b7b 	.word	0x08009b7b
 8009b2c:	08009b8f 	.word	0x08009b8f
 8009b30:	08009b4f 	.word	0x08009b4f
 8009b34:	08009b45 	.word	0x08009b45
 8009b38:	08009b8f 	.word	0x08009b8f
 8009b3c:	08009b67 	.word	0x08009b67
 8009b40:	08009b59 	.word	0x08009b59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f9de 	bl	8009f08 <USBD_GetDescriptor>
          break;
 8009b4c:	e024      	b.n	8009b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fb6d 	bl	800a230 <USBD_SetAddress>
          break;
 8009b56:	e01f      	b.n	8009b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fbac 	bl	800a2b8 <USBD_SetConfig>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73fb      	strb	r3, [r7, #15]
          break;
 8009b64:	e018      	b.n	8009b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fc4b 	bl	800a404 <USBD_GetConfig>
          break;
 8009b6e:	e013      	b.n	8009b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fc7c 	bl	800a470 <USBD_GetStatus>
          break;
 8009b78:	e00e      	b.n	8009b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fcab 	bl	800a4d8 <USBD_SetFeature>
          break;
 8009b82:	e009      	b.n	8009b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fcba 	bl	800a500 <USBD_ClrFeature>
          break;
 8009b8c:	e004      	b.n	8009b98 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fd11 	bl	800a5b8 <USBD_CtlError>
          break;
 8009b96:	bf00      	nop
      }
      break;
 8009b98:	e004      	b.n	8009ba4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fd0b 	bl	800a5b8 <USBD_CtlError>
      break;
 8009ba2:	bf00      	nop
  }

  return ret;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop

08009bb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bc6:	2b40      	cmp	r3, #64	@ 0x40
 8009bc8:	d005      	beq.n	8009bd6 <USBD_StdItfReq+0x26>
 8009bca:	2b40      	cmp	r3, #64	@ 0x40
 8009bcc:	d82f      	bhi.n	8009c2e <USBD_StdItfReq+0x7e>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <USBD_StdItfReq+0x26>
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	d12b      	bne.n	8009c2e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d81d      	bhi.n	8009c20 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	889b      	ldrh	r3, [r3, #4]
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d813      	bhi.n	8009c16 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	4798      	blx	r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	88db      	ldrh	r3, [r3, #6]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d110      	bne.n	8009c2a <USBD_StdItfReq+0x7a>
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10d      	bne.n	8009c2a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fd80 	bl	800a714 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c14:	e009      	b.n	8009c2a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fccd 	bl	800a5b8 <USBD_CtlError>
          break;
 8009c1e:	e004      	b.n	8009c2a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fcc8 	bl	800a5b8 <USBD_CtlError>
          break;
 8009c28:	e000      	b.n	8009c2c <USBD_StdItfReq+0x7c>
          break;
 8009c2a:	bf00      	nop
      }
      break;
 8009c2c:	e004      	b.n	8009c38 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fcc1 	bl	800a5b8 <USBD_CtlError>
      break;
 8009c36:	bf00      	nop
  }

  return ret;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	889b      	ldrh	r3, [r3, #4]
 8009c54:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c5e:	2b40      	cmp	r3, #64	@ 0x40
 8009c60:	d007      	beq.n	8009c72 <USBD_StdEPReq+0x30>
 8009c62:	2b40      	cmp	r3, #64	@ 0x40
 8009c64:	f200 8145 	bhi.w	8009ef2 <USBD_StdEPReq+0x2b0>
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00c      	beq.n	8009c86 <USBD_StdEPReq+0x44>
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	f040 8140 	bne.w	8009ef2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
      break;
 8009c84:	e13a      	b.n	8009efc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d007      	beq.n	8009c9e <USBD_StdEPReq+0x5c>
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	f300 8129 	bgt.w	8009ee6 <USBD_StdEPReq+0x2a4>
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d07f      	beq.n	8009d98 <USBD_StdEPReq+0x156>
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d03c      	beq.n	8009d16 <USBD_StdEPReq+0xd4>
 8009c9c:	e123      	b.n	8009ee6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d002      	beq.n	8009cb0 <USBD_StdEPReq+0x6e>
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d016      	beq.n	8009cdc <USBD_StdEPReq+0x9a>
 8009cae:	e02c      	b.n	8009d0a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00d      	beq.n	8009cd2 <USBD_StdEPReq+0x90>
 8009cb6:	7bbb      	ldrb	r3, [r7, #14]
 8009cb8:	2b80      	cmp	r3, #128	@ 0x80
 8009cba:	d00a      	beq.n	8009cd2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f001 f817 	bl	800acf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cc6:	2180      	movs	r1, #128	@ 0x80
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 f813 	bl	800acf4 <USBD_LL_StallEP>
 8009cce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cd0:	e020      	b.n	8009d14 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fc6f 	bl	800a5b8 <USBD_CtlError>
              break;
 8009cda:	e01b      	b.n	8009d14 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	885b      	ldrh	r3, [r3, #2]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10e      	bne.n	8009d02 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00b      	beq.n	8009d02 <USBD_StdEPReq+0xc0>
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	2b80      	cmp	r3, #128	@ 0x80
 8009cee:	d008      	beq.n	8009d02 <USBD_StdEPReq+0xc0>
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	88db      	ldrh	r3, [r3, #6]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d104      	bne.n	8009d02 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fff9 	bl	800acf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fd06 	bl	800a714 <USBD_CtlSendStatus>

              break;
 8009d08:	e004      	b.n	8009d14 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fc53 	bl	800a5b8 <USBD_CtlError>
              break;
 8009d12:	bf00      	nop
          }
          break;
 8009d14:	e0ec      	b.n	8009ef0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d002      	beq.n	8009d28 <USBD_StdEPReq+0xe6>
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d016      	beq.n	8009d54 <USBD_StdEPReq+0x112>
 8009d26:	e030      	b.n	8009d8a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00d      	beq.n	8009d4a <USBD_StdEPReq+0x108>
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
 8009d30:	2b80      	cmp	r3, #128	@ 0x80
 8009d32:	d00a      	beq.n	8009d4a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 ffdb 	bl	800acf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d3e:	2180      	movs	r1, #128	@ 0x80
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 ffd7 	bl	800acf4 <USBD_LL_StallEP>
 8009d46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d48:	e025      	b.n	8009d96 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc33 	bl	800a5b8 <USBD_CtlError>
              break;
 8009d52:	e020      	b.n	8009d96 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	885b      	ldrh	r3, [r3, #2]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d11b      	bne.n	8009d94 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d004      	beq.n	8009d70 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 ffe1 	bl	800ad32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fccf 	bl	800a714 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	4798      	blx	r3
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009d88:	e004      	b.n	8009d94 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fc13 	bl	800a5b8 <USBD_CtlError>
              break;
 8009d92:	e000      	b.n	8009d96 <USBD_StdEPReq+0x154>
              break;
 8009d94:	bf00      	nop
          }
          break;
 8009d96:	e0ab      	b.n	8009ef0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d002      	beq.n	8009daa <USBD_StdEPReq+0x168>
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d032      	beq.n	8009e0e <USBD_StdEPReq+0x1cc>
 8009da8:	e097      	b.n	8009eda <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d007      	beq.n	8009dc0 <USBD_StdEPReq+0x17e>
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b80      	cmp	r3, #128	@ 0x80
 8009db4:	d004      	beq.n	8009dc0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fbfd 	bl	800a5b8 <USBD_CtlError>
                break;
 8009dbe:	e091      	b.n	8009ee4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	da0b      	bge.n	8009de0 <USBD_StdEPReq+0x19e>
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	3310      	adds	r3, #16
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	4413      	add	r3, r2
 8009ddc:	3304      	adds	r3, #4
 8009dde:	e00b      	b.n	8009df8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	4413      	add	r3, r2
 8009df6:	3304      	adds	r3, #4
 8009df8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2202      	movs	r2, #2
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fc47 	bl	800a69a <USBD_CtlSendData>
              break;
 8009e0c:	e06a      	b.n	8009ee4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	da11      	bge.n	8009e3a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	f003 020f 	and.w	r2, r3, #15
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	440b      	add	r3, r1
 8009e28:	3324      	adds	r3, #36	@ 0x24
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d117      	bne.n	8009e60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fbc0 	bl	800a5b8 <USBD_CtlError>
                  break;
 8009e38:	e054      	b.n	8009ee4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	f003 020f 	and.w	r2, r3, #15
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	440b      	add	r3, r1
 8009e4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d104      	bne.n	8009e60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fbad 	bl	800a5b8 <USBD_CtlError>
                  break;
 8009e5e:	e041      	b.n	8009ee4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da0b      	bge.n	8009e80 <USBD_StdEPReq+0x23e>
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	3310      	adds	r3, #16
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	e00b      	b.n	8009e98 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e86:	4613      	mov	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	4413      	add	r3, r2
 8009e96:	3304      	adds	r3, #4
 8009e98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <USBD_StdEPReq+0x264>
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	2b80      	cmp	r3, #128	@ 0x80
 8009ea4:	d103      	bne.n	8009eae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	e00e      	b.n	8009ecc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 ff5c 	bl	800ad70 <USBD_LL_IsStallEP>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	e002      	b.n	8009ecc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fbe1 	bl	800a69a <USBD_CtlSendData>
              break;
 8009ed8:	e004      	b.n	8009ee4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fb6b 	bl	800a5b8 <USBD_CtlError>
              break;
 8009ee2:	bf00      	nop
          }
          break;
 8009ee4:	e004      	b.n	8009ef0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fb65 	bl	800a5b8 <USBD_CtlError>
          break;
 8009eee:	bf00      	nop
      }
      break;
 8009ef0:	e004      	b.n	8009efc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fb5f 	bl	800a5b8 <USBD_CtlError>
      break;
 8009efa:	bf00      	nop
  }

  return ret;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	885b      	ldrh	r3, [r3, #2]
 8009f22:	0a1b      	lsrs	r3, r3, #8
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	3b01      	subs	r3, #1
 8009f28:	2b0e      	cmp	r3, #14
 8009f2a:	f200 8152 	bhi.w	800a1d2 <USBD_GetDescriptor+0x2ca>
 8009f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <USBD_GetDescriptor+0x2c>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009fa5 	.word	0x08009fa5
 8009f38:	08009fbd 	.word	0x08009fbd
 8009f3c:	08009ffd 	.word	0x08009ffd
 8009f40:	0800a1d3 	.word	0x0800a1d3
 8009f44:	0800a1d3 	.word	0x0800a1d3
 8009f48:	0800a173 	.word	0x0800a173
 8009f4c:	0800a19f 	.word	0x0800a19f
 8009f50:	0800a1d3 	.word	0x0800a1d3
 8009f54:	0800a1d3 	.word	0x0800a1d3
 8009f58:	0800a1d3 	.word	0x0800a1d3
 8009f5c:	0800a1d3 	.word	0x0800a1d3
 8009f60:	0800a1d3 	.word	0x0800a1d3
 8009f64:	0800a1d3 	.word	0x0800a1d3
 8009f68:	0800a1d3 	.word	0x0800a1d3
 8009f6c:	08009f71 	.word	0x08009f71
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	7c12      	ldrb	r2, [r2, #16]
 8009f88:	f107 0108 	add.w	r1, r7, #8
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
 8009f90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f92:	e126      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fb0e 	bl	800a5b8 <USBD_CtlError>
        err++;
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	72fb      	strb	r3, [r7, #11]
      break;
 8009fa2:	e11e      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	7c12      	ldrb	r2, [r2, #16]
 8009fb0:	f107 0108 	add.w	r1, r7, #8
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4798      	blx	r3
 8009fb8:	60f8      	str	r0, [r7, #12]
      break;
 8009fba:	e112      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	7c1b      	ldrb	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10d      	bne.n	8009fe0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fcc:	f107 0208 	add.w	r2, r7, #8
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	2202      	movs	r2, #2
 8009fdc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fde:	e100      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe8:	f107 0208 	add.w	r2, r7, #8
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
 8009ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	701a      	strb	r2, [r3, #0]
      break;
 8009ffa:	e0f2      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	885b      	ldrh	r3, [r3, #2]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b05      	cmp	r3, #5
 800a004:	f200 80ac 	bhi.w	800a160 <USBD_GetDescriptor+0x258>
 800a008:	a201      	add	r2, pc, #4	@ (adr r2, 800a010 <USBD_GetDescriptor+0x108>)
 800a00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00e:	bf00      	nop
 800a010:	0800a029 	.word	0x0800a029
 800a014:	0800a05d 	.word	0x0800a05d
 800a018:	0800a091 	.word	0x0800a091
 800a01c:	0800a0c5 	.word	0x0800a0c5
 800a020:	0800a0f9 	.word	0x0800a0f9
 800a024:	0800a12d 	.word	0x0800a12d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7c12      	ldrb	r2, [r2, #16]
 800a040:	f107 0108 	add.w	r1, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a04a:	e091      	b.n	800a170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fab2 	bl	800a5b8 <USBD_CtlError>
            err++;
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	3301      	adds	r3, #1
 800a058:	72fb      	strb	r3, [r7, #11]
          break;
 800a05a:	e089      	b.n	800a170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7c12      	ldrb	r2, [r2, #16]
 800a074:	f107 0108 	add.w	r1, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07e:	e077      	b.n	800a170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa98 	bl	800a5b8 <USBD_CtlError>
            err++;
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	3301      	adds	r3, #1
 800a08c:	72fb      	strb	r3, [r7, #11]
          break;
 800a08e:	e06f      	b.n	800a170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	7c12      	ldrb	r2, [r2, #16]
 800a0a8:	f107 0108 	add.w	r1, r7, #8
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0b2:	e05d      	b.n	800a170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa7e 	bl	800a5b8 <USBD_CtlError>
            err++;
 800a0bc:	7afb      	ldrb	r3, [r7, #11]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0c2:	e055      	b.n	800a170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	7c12      	ldrb	r2, [r2, #16]
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e6:	e043      	b.n	800a170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa64 	bl	800a5b8 <USBD_CtlError>
            err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f6:	e03b      	b.n	800a170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7c12      	ldrb	r2, [r2, #16]
 800a110:	f107 0108 	add.w	r1, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11a:	e029      	b.n	800a170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa4a 	bl	800a5b8 <USBD_CtlError>
            err++;
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	3301      	adds	r3, #1
 800a128:	72fb      	strb	r3, [r7, #11]
          break;
 800a12a:	e021      	b.n	800a170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00b      	beq.n	800a150 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	7c12      	ldrb	r2, [r2, #16]
 800a144:	f107 0108 	add.w	r1, r7, #8
 800a148:	4610      	mov	r0, r2
 800a14a:	4798      	blx	r3
 800a14c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a14e:	e00f      	b.n	800a170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa30 	bl	800a5b8 <USBD_CtlError>
            err++;
 800a158:	7afb      	ldrb	r3, [r7, #11]
 800a15a:	3301      	adds	r3, #1
 800a15c:	72fb      	strb	r3, [r7, #11]
          break;
 800a15e:	e007      	b.n	800a170 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa28 	bl	800a5b8 <USBD_CtlError>
          err++;
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	3301      	adds	r3, #1
 800a16c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a16e:	bf00      	nop
      }
      break;
 800a170:	e037      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7c1b      	ldrb	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d109      	bne.n	800a18e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a182:	f107 0208 	add.w	r2, r7, #8
 800a186:	4610      	mov	r0, r2
 800a188:	4798      	blx	r3
 800a18a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a18c:	e029      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa11 	bl	800a5b8 <USBD_CtlError>
        err++;
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	3301      	adds	r3, #1
 800a19a:	72fb      	strb	r3, [r7, #11]
      break;
 800a19c:	e021      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	7c1b      	ldrb	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10d      	bne.n	800a1c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ae:	f107 0208 	add.w	r2, r7, #8
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4798      	blx	r3
 800a1b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	2207      	movs	r2, #7
 800a1be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1c0:	e00f      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f9f7 	bl	800a5b8 <USBD_CtlError>
        err++;
 800a1ca:	7afb      	ldrb	r3, [r7, #11]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	72fb      	strb	r3, [r7, #11]
      break;
 800a1d0:	e007      	b.n	800a1e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f9ef 	bl	800a5b8 <USBD_CtlError>
      err++;
 800a1da:	7afb      	ldrb	r3, [r7, #11]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e0:	bf00      	nop
  }

  if (err != 0U)
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d11e      	bne.n	800a226 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	88db      	ldrh	r3, [r3, #6]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d016      	beq.n	800a21e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a1f0:	893b      	ldrh	r3, [r7, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00e      	beq.n	800a214 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	88da      	ldrh	r2, [r3, #6]
 800a1fa:	893b      	ldrh	r3, [r7, #8]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bf28      	it	cs
 800a200:	4613      	movcs	r3, r2
 800a202:	b29b      	uxth	r3, r3
 800a204:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a206:	893b      	ldrh	r3, [r7, #8]
 800a208:	461a      	mov	r2, r3
 800a20a:	68f9      	ldr	r1, [r7, #12]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fa44 	bl	800a69a <USBD_CtlSendData>
 800a212:	e009      	b.n	800a228 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f9ce 	bl	800a5b8 <USBD_CtlError>
 800a21c:	e004      	b.n	800a228 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa78 	bl	800a714 <USBD_CtlSendStatus>
 800a224:	e000      	b.n	800a228 <USBD_GetDescriptor+0x320>
    return;
 800a226:	bf00      	nop
  }
}
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop

0800a230 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	889b      	ldrh	r3, [r3, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d131      	bne.n	800a2a6 <USBD_SetAddress+0x76>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	88db      	ldrh	r3, [r3, #6]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d12d      	bne.n	800a2a6 <USBD_SetAddress+0x76>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	885b      	ldrh	r3, [r3, #2]
 800a24e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a250:	d829      	bhi.n	800a2a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	885b      	ldrh	r3, [r3, #2]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a25c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b03      	cmp	r3, #3
 800a268:	d104      	bne.n	800a274 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f9a3 	bl	800a5b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a272:	e01d      	b.n	800a2b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	7bfa      	ldrb	r2, [r7, #15]
 800a278:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fda1 	bl	800adc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa44 	bl	800a714 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d004      	beq.n	800a29c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a29a:	e009      	b.n	800a2b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a4:	e004      	b.n	800a2b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f985 	bl	800a5b8 <USBD_CtlError>
  }
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	885b      	ldrh	r3, [r3, #2]
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	4b4c      	ldr	r3, [pc, #304]	@ (800a400 <USBD_SetConfig+0x148>)
 800a2ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2d0:	4b4b      	ldr	r3, [pc, #300]	@ (800a400 <USBD_SetConfig+0x148>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d905      	bls.n	800a2e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f96c 	bl	800a5b8 <USBD_CtlError>
    return USBD_FAIL;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e088      	b.n	800a3f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d002      	beq.n	800a2f6 <USBD_SetConfig+0x3e>
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d025      	beq.n	800a340 <USBD_SetConfig+0x88>
 800a2f4:	e071      	b.n	800a3da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2f6:	4b42      	ldr	r3, [pc, #264]	@ (800a400 <USBD_SetConfig+0x148>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d01c      	beq.n	800a338 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a2fe:	4b40      	ldr	r3, [pc, #256]	@ (800a400 <USBD_SetConfig+0x148>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a308:	4b3d      	ldr	r3, [pc, #244]	@ (800a400 <USBD_SetConfig+0x148>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff f990 	bl	8009634 <USBD_SetClassConfig>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d004      	beq.n	800a328 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f949 	bl	800a5b8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a326:	e065      	b.n	800a3f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f9f3 	bl	800a714 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2203      	movs	r2, #3
 800a332:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a336:	e05d      	b.n	800a3f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f9eb 	bl	800a714 <USBD_CtlSendStatus>
      break;
 800a33e:	e059      	b.n	800a3f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a340:	4b2f      	ldr	r3, [pc, #188]	@ (800a400 <USBD_SetConfig+0x148>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d112      	bne.n	800a36e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a350:	4b2b      	ldr	r3, [pc, #172]	@ (800a400 <USBD_SetConfig+0x148>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a35a:	4b29      	ldr	r3, [pc, #164]	@ (800a400 <USBD_SetConfig+0x148>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff f983 	bl	800966c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f9d4 	bl	800a714 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a36c:	e042      	b.n	800a3f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a36e:	4b24      	ldr	r3, [pc, #144]	@ (800a400 <USBD_SetConfig+0x148>)
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d02a      	beq.n	800a3d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	b2db      	uxtb	r3, r3
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff f971 	bl	800966c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a38a:	4b1d      	ldr	r3, [pc, #116]	@ (800a400 <USBD_SetConfig+0x148>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a394:	4b1a      	ldr	r3, [pc, #104]	@ (800a400 <USBD_SetConfig+0x148>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff f94a 	bl	8009634 <USBD_SetClassConfig>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00f      	beq.n	800a3ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f903 	bl	800a5b8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff f956 	bl	800966c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a3c8:	e014      	b.n	800a3f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f9a2 	bl	800a714 <USBD_CtlSendStatus>
      break;
 800a3d0:	e010      	b.n	800a3f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f99e 	bl	800a714 <USBD_CtlSendStatus>
      break;
 800a3d8:	e00c      	b.n	800a3f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f8eb 	bl	800a5b8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3e2:	4b07      	ldr	r3, [pc, #28]	@ (800a400 <USBD_SetConfig+0x148>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff f93f 	bl	800966c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f2:	bf00      	nop
  }

  return ret;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000cb8 	.word	0x20000cb8

0800a404 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	88db      	ldrh	r3, [r3, #6]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d004      	beq.n	800a420 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f8cd 	bl	800a5b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a41e:	e023      	b.n	800a468 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b02      	cmp	r3, #2
 800a42a:	dc02      	bgt.n	800a432 <USBD_GetConfig+0x2e>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	dc03      	bgt.n	800a438 <USBD_GetConfig+0x34>
 800a430:	e015      	b.n	800a45e <USBD_GetConfig+0x5a>
 800a432:	2b03      	cmp	r3, #3
 800a434:	d00b      	beq.n	800a44e <USBD_GetConfig+0x4a>
 800a436:	e012      	b.n	800a45e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3308      	adds	r3, #8
 800a442:	2201      	movs	r2, #1
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f927 	bl	800a69a <USBD_CtlSendData>
        break;
 800a44c:	e00c      	b.n	800a468 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3304      	adds	r3, #4
 800a452:	2201      	movs	r2, #1
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f91f 	bl	800a69a <USBD_CtlSendData>
        break;
 800a45c:	e004      	b.n	800a468 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f8a9 	bl	800a5b8 <USBD_CtlError>
        break;
 800a466:	bf00      	nop
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a480:	b2db      	uxtb	r3, r3
 800a482:	3b01      	subs	r3, #1
 800a484:	2b02      	cmp	r3, #2
 800a486:	d81e      	bhi.n	800a4c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	88db      	ldrh	r3, [r3, #6]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d004      	beq.n	800a49a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f890 	bl	800a5b8 <USBD_CtlError>
        break;
 800a498:	e01a      	b.n	800a4d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f043 0202 	orr.w	r2, r3, #2
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	330c      	adds	r3, #12
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f8eb 	bl	800a69a <USBD_CtlSendData>
      break;
 800a4c4:	e004      	b.n	800a4d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f875 	bl	800a5b8 <USBD_CtlError>
      break;
 800a4ce:	bf00      	nop
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	885b      	ldrh	r3, [r3, #2]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d106      	bne.n	800a4f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f90e 	bl	800a714 <USBD_CtlSendStatus>
  }
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a510:	b2db      	uxtb	r3, r3
 800a512:	3b01      	subs	r3, #1
 800a514:	2b02      	cmp	r3, #2
 800a516:	d80b      	bhi.n	800a530 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	885b      	ldrh	r3, [r3, #2]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d10c      	bne.n	800a53a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f8f3 	bl	800a714 <USBD_CtlSendStatus>
      }
      break;
 800a52e:	e004      	b.n	800a53a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f840 	bl	800a5b8 <USBD_CtlError>
      break;
 800a538:	e000      	b.n	800a53c <USBD_ClrFeature+0x3c>
      break;
 800a53a:	bf00      	nop
  }
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3301      	adds	r3, #1
 800a55e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	781a      	ldrb	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3301      	adds	r3, #1
 800a56c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7ff fa90 	bl	8009a94 <SWAPBYTE>
 800a574:	4603      	mov	r3, r0
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3301      	adds	r3, #1
 800a580:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3301      	adds	r3, #1
 800a586:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff fa83 	bl	8009a94 <SWAPBYTE>
 800a58e:	4603      	mov	r3, r0
 800a590:	461a      	mov	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3301      	adds	r3, #1
 800a59a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f7ff fa76 	bl	8009a94 <SWAPBYTE>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	80da      	strh	r2, [r3, #6]
}
 800a5b0:	bf00      	nop
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c2:	2180      	movs	r1, #128	@ 0x80
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fb95 	bl	800acf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fb91 	bl	800acf4 <USBD_LL_StallEP>
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b086      	sub	sp, #24
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d036      	beq.n	800a65e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5f4:	6938      	ldr	r0, [r7, #16]
 800a5f6:	f000 f836 	bl	800a666 <USBD_GetLen>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	b29a      	uxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	7812      	ldrb	r2, [r2, #0]
 800a612:	701a      	strb	r2, [r3, #0]
  idx++;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	3301      	adds	r3, #1
 800a618:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	4413      	add	r3, r2
 800a620:	2203      	movs	r2, #3
 800a622:	701a      	strb	r2, [r3, #0]
  idx++;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	3301      	adds	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a62a:	e013      	b.n	800a654 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	7812      	ldrb	r2, [r2, #0]
 800a636:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	3301      	adds	r3, #1
 800a63c:	613b      	str	r3, [r7, #16]
    idx++;
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	3301      	adds	r3, #1
 800a642:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	4413      	add	r3, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	3301      	adds	r3, #1
 800a652:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e7      	bne.n	800a62c <USBD_GetString+0x52>
 800a65c:	e000      	b.n	800a660 <USBD_GetString+0x86>
    return;
 800a65e:	bf00      	nop
  }
}
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a66e:	2300      	movs	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a676:	e005      	b.n	800a684 <USBD_GetLen+0x1e>
  {
    len++;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
 800a67a:	3301      	adds	r3, #1
 800a67c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	3301      	adds	r3, #1
 800a682:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1f5      	bne.n	800a678 <USBD_GetLen+0x12>
  }

  return len;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	60f8      	str	r0, [r7, #12]
 800a6a2:	60b9      	str	r1, [r7, #8]
 800a6a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	2100      	movs	r1, #0
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 fba0 	bl	800ae06 <USBD_LL_Transmit>

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fb8f 	bl	800ae06 <USBD_LL_Transmit>

  return USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	2100      	movs	r1, #0
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fb9f 	bl	800ae48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2204      	movs	r2, #4
 800a720:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a724:	2300      	movs	r3, #0
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fb6b 	bl	800ae06 <USBD_LL_Transmit>

  return USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2205      	movs	r2, #5
 800a746:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a74a:	2300      	movs	r3, #0
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fb79 	bl	800ae48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800a764:	2200      	movs	r2, #0
 800a766:	490e      	ldr	r1, [pc, #56]	@ (800a7a0 <MX_USB_Device_Init+0x40>)
 800a768:	480e      	ldr	r0, [pc, #56]	@ (800a7a4 <MX_USB_Device_Init+0x44>)
 800a76a:	f7fe fef5 	bl	8009558 <USBD_Init>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a774:	f7f6 f923 	bl	80009be <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800a778:	490b      	ldr	r1, [pc, #44]	@ (800a7a8 <MX_USB_Device_Init+0x48>)
 800a77a:	480a      	ldr	r0, [pc, #40]	@ (800a7a4 <MX_USB_Device_Init+0x44>)
 800a77c:	f7fe ff1c 	bl	80095b8 <USBD_RegisterClass>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a786:	f7f6 f91a 	bl	80009be <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a78a:	4806      	ldr	r0, [pc, #24]	@ (800a7a4 <MX_USB_Device_Init+0x44>)
 800a78c:	f7fe ff3b 	bl	8009606 <USBD_Start>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800a796:	f7f6 f912 	bl	80009be <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a79a:	bf00      	nop
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000114 	.word	0x20000114
 800a7a4:	20000cbc 	.word	0x20000cbc
 800a7a8:	2000000c 	.word	0x2000000c

0800a7ac <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2212      	movs	r2, #18
 800a7bc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800a7be:	4b03      	ldr	r3, [pc, #12]	@ (800a7cc <USBD_HID_DeviceDescriptor+0x20>)
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	20000134 	.word	0x20000134

0800a7d0 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	6039      	str	r1, [r7, #0]
 800a7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2204      	movs	r2, #4
 800a7e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7e2:	4b03      	ldr	r3, [pc, #12]	@ (800a7f0 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20000148 	.word	0x20000148

0800a7f4 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d105      	bne.n	800a812 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	4907      	ldr	r1, [pc, #28]	@ (800a828 <USBD_HID_ProductStrDescriptor+0x34>)
 800a80a:	4808      	ldr	r0, [pc, #32]	@ (800a82c <USBD_HID_ProductStrDescriptor+0x38>)
 800a80c:	f7ff fee5 	bl	800a5da <USBD_GetString>
 800a810:	e004      	b.n	800a81c <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	4904      	ldr	r1, [pc, #16]	@ (800a828 <USBD_HID_ProductStrDescriptor+0x34>)
 800a816:	4805      	ldr	r0, [pc, #20]	@ (800a82c <USBD_HID_ProductStrDescriptor+0x38>)
 800a818:	f7ff fedf 	bl	800a5da <USBD_GetString>
  }
  return USBD_StrDesc;
 800a81c:	4b02      	ldr	r3, [pc, #8]	@ (800a828 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20000f8c 	.word	0x20000f8c
 800a82c:	0800affc 	.word	0x0800affc

0800a830 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	4904      	ldr	r1, [pc, #16]	@ (800a850 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800a840:	4804      	ldr	r0, [pc, #16]	@ (800a854 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800a842:	f7ff feca 	bl	800a5da <USBD_GetString>
  return USBD_StrDesc;
 800a846:	4b02      	ldr	r3, [pc, #8]	@ (800a850 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20000f8c 	.word	0x20000f8c
 800a854:	0800b014 	.word	0x0800b014

0800a858 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	221a      	movs	r2, #26
 800a868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a86a:	f000 f843 	bl	800a8f4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a86e:	4b02      	ldr	r3, [pc, #8]	@ (800a878 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	2000014c 	.word	0x2000014c

0800a87c <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	@ (800a8b0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	@ (800a8b4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a894:	f7ff fea1 	bl	800a5da <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	@ (800a8b0 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	@ (800a8b4 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a8a0:	f7ff fe9b 	bl	800a5da <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	@ (800a8b0 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20000f8c 	.word	0x20000f8c
 800a8b4:	0800b028 	.word	0x0800b028

0800a8b8 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d105      	bne.n	800a8d6 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4907      	ldr	r1, [pc, #28]	@ (800a8ec <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a8ce:	4808      	ldr	r0, [pc, #32]	@ (800a8f0 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a8d0:	f7ff fe83 	bl	800a5da <USBD_GetString>
 800a8d4:	e004      	b.n	800a8e0 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	4904      	ldr	r1, [pc, #16]	@ (800a8ec <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a8da:	4805      	ldr	r0, [pc, #20]	@ (800a8f0 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a8dc:	f7ff fe7d 	bl	800a5da <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8e0:	4b02      	ldr	r3, [pc, #8]	@ (800a8ec <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000f8c 	.word	0x20000f8c
 800a8f0:	0800b034 	.word	0x0800b034

0800a8f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a938 <Get_SerialNum+0x44>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a900:	4b0e      	ldr	r3, [pc, #56]	@ (800a93c <Get_SerialNum+0x48>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a906:	4b0e      	ldr	r3, [pc, #56]	@ (800a940 <Get_SerialNum+0x4c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4413      	add	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d009      	beq.n	800a92e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a91a:	2208      	movs	r2, #8
 800a91c:	4909      	ldr	r1, [pc, #36]	@ (800a944 <Get_SerialNum+0x50>)
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f000 f814 	bl	800a94c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a924:	2204      	movs	r2, #4
 800a926:	4908      	ldr	r1, [pc, #32]	@ (800a948 <Get_SerialNum+0x54>)
 800a928:	68b8      	ldr	r0, [r7, #8]
 800a92a:	f000 f80f 	bl	800a94c <IntToUnicode>
  }
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	1fff7590 	.word	0x1fff7590
 800a93c:	1fff7594 	.word	0x1fff7594
 800a940:	1fff7598 	.word	0x1fff7598
 800a944:	2000014e 	.word	0x2000014e
 800a948:	2000015e 	.word	0x2000015e

0800a94c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	4613      	mov	r3, r2
 800a958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a95e:	2300      	movs	r3, #0
 800a960:	75fb      	strb	r3, [r7, #23]
 800a962:	e027      	b.n	800a9b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	0f1b      	lsrs	r3, r3, #28
 800a968:	2b09      	cmp	r3, #9
 800a96a:	d80b      	bhi.n	800a984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	0f1b      	lsrs	r3, r3, #28
 800a970:	b2da      	uxtb	r2, r3
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	4619      	mov	r1, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	440b      	add	r3, r1
 800a97c:	3230      	adds	r2, #48	@ 0x30
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	e00a      	b.n	800a99a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	0f1b      	lsrs	r3, r3, #28
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4619      	mov	r1, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	440b      	add	r3, r1
 800a994:	3237      	adds	r2, #55	@ 0x37
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	011b      	lsls	r3, r3, #4
 800a99e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9a0:	7dfb      	ldrb	r3, [r7, #23]
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	75fb      	strb	r3, [r7, #23]
 800a9b4:	7dfa      	ldrb	r2, [r7, #23]
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d3d3      	bcc.n	800a964 <IntToUnicode+0x18>
  }
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
	...

0800a9cc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b094      	sub	sp, #80	@ 0x50
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9d4:	f107 030c 	add.w	r3, r7, #12
 800a9d8:	2244      	movs	r2, #68	@ 0x44
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 fad5 	bl	800af8c <memset>
  if(pcdHandle->Instance==USB)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a15      	ldr	r2, [pc, #84]	@ (800aa3c <HAL_PCD_MspInit+0x70>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d122      	bne.n	800aa32 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a9ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a9f0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9f6:	f107 030c 	add.w	r3, r7, #12
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fb fa4e 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800aa06:	f7f5 ffda 	bl	80009be <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa0a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa40 <HAL_PCD_MspInit+0x74>)
 800aa0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa0e:	4a0c      	ldr	r2, [pc, #48]	@ (800aa40 <HAL_PCD_MspInit+0x74>)
 800aa10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aa14:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa16:	4b0a      	ldr	r3, [pc, #40]	@ (800aa40 <HAL_PCD_MspInit+0x74>)
 800aa18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa1e:	60bb      	str	r3, [r7, #8]
 800aa20:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800aa22:	2200      	movs	r2, #0
 800aa24:	2100      	movs	r1, #0
 800aa26:	2014      	movs	r0, #20
 800aa28:	f7f7 ffb7 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800aa2c:	2014      	movs	r0, #20
 800aa2e:	f7f7 ffce 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa32:	bf00      	nop
 800aa34:	3750      	adds	r7, #80	@ 0x50
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	40005c00 	.word	0x40005c00
 800aa40:	40021000 	.word	0x40021000

0800aa44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	f7fe fe1e 	bl	800969c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aa7a:	78fa      	ldrb	r2, [r7, #3]
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	440b      	add	r3, r1
 800aa88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	78fb      	ldrb	r3, [r7, #3]
 800aa90:	4619      	mov	r1, r3
 800aa92:	f7fe fe58 	bl	8009746 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aab0:	78fa      	ldrb	r2, [r7, #3]
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	440b      	add	r3, r1
 800aabe:	3324      	adds	r3, #36	@ 0x24
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	4619      	mov	r1, r3
 800aac6:	f7fe fea1 	bl	800980c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe ffb5 	bl	8009a50 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	795b      	ldrb	r3, [r3, #5]
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d001      	beq.n	800ab06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab02:	f7f5 ff5c 	bl	80009be <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab0c:	7bfa      	ldrb	r2, [r7, #15]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe ff5f 	bl	80099d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe ff0b 	bl	8009938 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe ff5a 	bl	80099f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	7a5b      	ldrb	r3, [r3, #9]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab48:	4b04      	ldr	r3, [pc, #16]	@ (800ab5c <HAL_PCD_SuspendCallback+0x30>)
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	4a03      	ldr	r2, [pc, #12]	@ (800ab5c <HAL_PCD_SuspendCallback+0x30>)
 800ab4e:	f043 0306 	orr.w	r3, r3, #6
 800ab52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	e000ed00 	.word	0xe000ed00

0800ab60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	7a5b      	ldrb	r3, [r3, #9]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d007      	beq.n	800ab80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab70:	4b08      	ldr	r3, [pc, #32]	@ (800ab94 <HAL_PCD_ResumeCallback+0x34>)
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	4a07      	ldr	r2, [pc, #28]	@ (800ab94 <HAL_PCD_ResumeCallback+0x34>)
 800ab76:	f023 0306 	bic.w	r3, r3, #6
 800ab7a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ab7c:	f000 f9d4 	bl	800af28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe ff4a 	bl	8009a20 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	e000ed00 	.word	0xe000ed00

0800ab98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aba0:	4a22      	ldr	r2, [pc, #136]	@ (800ac2c <USBD_LL_Init+0x94>)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a20      	ldr	r2, [pc, #128]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800abb0:	4b1e      	ldr	r3, [pc, #120]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abb2:	4a1f      	ldr	r2, [pc, #124]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800abb6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abb8:	2208      	movs	r2, #8
 800abba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800abbc:	4b1b      	ldr	r3, [pc, #108]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abbe:	2202      	movs	r2, #2
 800abc0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abc4:	2202      	movs	r2, #2
 800abc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800abc8:	4b18      	ldr	r3, [pc, #96]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abca:	2200      	movs	r2, #0
 800abcc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800abce:	4b17      	ldr	r3, [pc, #92]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800abd4:	4b15      	ldr	r3, [pc, #84]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800abda:	4b14      	ldr	r3, [pc, #80]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abdc:	2200      	movs	r2, #0
 800abde:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800abe0:	4812      	ldr	r0, [pc, #72]	@ (800ac2c <USBD_LL_Init+0x94>)
 800abe2:	f7f8 fec8 	bl	8003976 <HAL_PCD_Init>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800abec:	f7f5 fee7 	bl	80009be <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800abf6:	2318      	movs	r3, #24
 800abf8:	2200      	movs	r2, #0
 800abfa:	2100      	movs	r1, #0
 800abfc:	f7fa fb37 	bl	800526e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ac06:	2358      	movs	r3, #88	@ 0x58
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2180      	movs	r1, #128	@ 0x80
 800ac0c:	f7fa fb2f 	bl	800526e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ac16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2181      	movs	r1, #129	@ 0x81
 800ac1e:	f7fa fb26 	bl	800526e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	2000118c 	.word	0x2000118c
 800ac30:	40005c00 	.word	0x40005c00

0800ac34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7f8 ff61 	bl	8003b12 <HAL_PCD_Start>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 f96c 	bl	800af34 <USBD_Get_USB_Status>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	4608      	mov	r0, r1
 800ac74:	4611      	mov	r1, r2
 800ac76:	461a      	mov	r2, r3
 800ac78:	4603      	mov	r3, r0
 800ac7a:	70fb      	strb	r3, [r7, #3]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70bb      	strb	r3, [r7, #2]
 800ac80:	4613      	mov	r3, r2
 800ac82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ac92:	78bb      	ldrb	r3, [r7, #2]
 800ac94:	883a      	ldrh	r2, [r7, #0]
 800ac96:	78f9      	ldrb	r1, [r7, #3]
 800ac98:	f7f9 f8a8 	bl	8003dec <HAL_PCD_EP_Open>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f946 	bl	800af34 <USBD_Get_USB_Status>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acac:	7bbb      	ldrb	r3, [r7, #14]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	460b      	mov	r3, r1
 800acc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800acd0:	78fa      	ldrb	r2, [r7, #3]
 800acd2:	4611      	mov	r1, r2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7f9 f8e8 	bl	8003eaa <HAL_PCD_EP_Close>
 800acda:	4603      	mov	r3, r0
 800acdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acde:	7bfb      	ldrb	r3, [r7, #15]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 f927 	bl	800af34 <USBD_Get_USB_Status>
 800ace6:	4603      	mov	r3, r0
 800ace8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acea:	7bbb      	ldrb	r3, [r7, #14]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ad0e:	78fa      	ldrb	r2, [r7, #3]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f9 f979 	bl	800400a <HAL_PCD_EP_SetStall>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 f908 	bl	800af34 <USBD_Get_USB_Status>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ad4c:	78fa      	ldrb	r2, [r7, #3]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7f9 f9ac 	bl	80040ae <HAL_PCD_EP_ClrStall>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 f8e9 	bl	800af34 <USBD_Get_USB_Status>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ad82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	da0b      	bge.n	800ada4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad8c:	78fb      	ldrb	r3, [r7, #3]
 800ad8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad92:	68f9      	ldr	r1, [r7, #12]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	440b      	add	r3, r1
 800ad9e:	3312      	adds	r3, #18
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	e00b      	b.n	800adbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adaa:	68f9      	ldr	r1, [r7, #12]
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	440b      	add	r3, r1
 800adb6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800adba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ade2:	78fa      	ldrb	r2, [r7, #3]
 800ade4:	4611      	mov	r1, r2
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f8 ffdc 	bl	8003da4 <HAL_PCD_SetAddress>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f89e 	bl	800af34 <USBD_Get_USB_Status>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b086      	sub	sp, #24
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
 800ae12:	460b      	mov	r3, r1
 800ae14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ae24:	7af9      	ldrb	r1, [r7, #11]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	f7f9 f8b7 	bl	8003f9c <HAL_PCD_EP_Transmit>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f87d 	bl	800af34 <USBD_Get_USB_Status>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	607a      	str	r2, [r7, #4]
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	460b      	mov	r3, r1
 800ae56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ae66:	7af9      	ldrb	r1, [r7, #11]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	f7f9 f865 	bl	8003f3a <HAL_PCD_EP_Receive>
 800ae70:	4603      	mov	r3, r0
 800ae72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 f85c 	bl	800af34 <USBD_Get_USB_Status>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae80:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ae98:	78fb      	ldrb	r3, [r7, #3]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <HAL_PCDEx_LPM_Callback+0x18>
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d013      	beq.n	800aeca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aea2:	e023      	b.n	800aeec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7a5b      	ldrb	r3, [r3, #9]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d007      	beq.n	800aebc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aeac:	f000 f83c 	bl	800af28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeb0:	4b10      	ldr	r3, [pc, #64]	@ (800aef4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	4a0f      	ldr	r2, [pc, #60]	@ (800aef4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aeb6:	f023 0306 	bic.w	r3, r3, #6
 800aeba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fdac 	bl	8009a20 <USBD_LL_Resume>
    break;
 800aec8:	e010      	b.n	800aeec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fe fd8f 	bl	80099f4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7a5b      	ldrb	r3, [r3, #9]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aede:	4b05      	ldr	r3, [pc, #20]	@ (800aef4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	4a04      	ldr	r2, [pc, #16]	@ (800aef4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aee4:	f043 0306 	orr.w	r3, r3, #6
 800aee8:	6113      	str	r3, [r2, #16]
    break;
 800aeea:	bf00      	nop
}
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	e000ed00 	.word	0xe000ed00

0800aef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af00:	4b03      	ldr	r3, [pc, #12]	@ (800af10 <USBD_static_malloc+0x18>)
}
 800af02:	4618      	mov	r0, r3
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	20001468 	.word	0x20001468

0800af14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]

}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af2c:	f7f5 fcfc 	bl	8000928 <SystemClock_Config>
}
 800af30:	bf00      	nop
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d817      	bhi.n	800af78 <USBD_Get_USB_Status+0x44>
 800af48:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <USBD_Get_USB_Status+0x1c>)
 800af4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4e:	bf00      	nop
 800af50:	0800af61 	.word	0x0800af61
 800af54:	0800af67 	.word	0x0800af67
 800af58:	0800af6d 	.word	0x0800af6d
 800af5c:	0800af73 	.word	0x0800af73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]
    break;
 800af64:	e00b      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af66:	2303      	movs	r3, #3
 800af68:	73fb      	strb	r3, [r7, #15]
    break;
 800af6a:	e008      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af6c:	2301      	movs	r3, #1
 800af6e:	73fb      	strb	r3, [r7, #15]
    break;
 800af70:	e005      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	73fb      	strb	r3, [r7, #15]
    break;
 800af76:	e002      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af78:	2303      	movs	r3, #3
 800af7a:	73fb      	strb	r3, [r7, #15]
    break;
 800af7c:	bf00      	nop
  }
  return usb_status;
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <memset>:
 800af8c:	4402      	add	r2, r0
 800af8e:	4603      	mov	r3, r0
 800af90:	4293      	cmp	r3, r2
 800af92:	d100      	bne.n	800af96 <memset+0xa>
 800af94:	4770      	bx	lr
 800af96:	f803 1b01 	strb.w	r1, [r3], #1
 800af9a:	e7f9      	b.n	800af90 <memset+0x4>

0800af9c <__libc_init_array>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	4d0d      	ldr	r5, [pc, #52]	@ (800afd4 <__libc_init_array+0x38>)
 800afa0:	4c0d      	ldr	r4, [pc, #52]	@ (800afd8 <__libc_init_array+0x3c>)
 800afa2:	1b64      	subs	r4, r4, r5
 800afa4:	10a4      	asrs	r4, r4, #2
 800afa6:	2600      	movs	r6, #0
 800afa8:	42a6      	cmp	r6, r4
 800afaa:	d109      	bne.n	800afc0 <__libc_init_array+0x24>
 800afac:	4d0b      	ldr	r5, [pc, #44]	@ (800afdc <__libc_init_array+0x40>)
 800afae:	4c0c      	ldr	r4, [pc, #48]	@ (800afe0 <__libc_init_array+0x44>)
 800afb0:	f000 f818 	bl	800afe4 <_init>
 800afb4:	1b64      	subs	r4, r4, r5
 800afb6:	10a4      	asrs	r4, r4, #2
 800afb8:	2600      	movs	r6, #0
 800afba:	42a6      	cmp	r6, r4
 800afbc:	d105      	bne.n	800afca <__libc_init_array+0x2e>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc4:	4798      	blx	r3
 800afc6:	3601      	adds	r6, #1
 800afc8:	e7ee      	b.n	800afa8 <__libc_init_array+0xc>
 800afca:	f855 3b04 	ldr.w	r3, [r5], #4
 800afce:	4798      	blx	r3
 800afd0:	3601      	adds	r6, #1
 800afd2:	e7f2      	b.n	800afba <__libc_init_array+0x1e>
 800afd4:	0800b054 	.word	0x0800b054
 800afd8:	0800b054 	.word	0x0800b054
 800afdc:	0800b054 	.word	0x0800b054
 800afe0:	0800b058 	.word	0x0800b058

0800afe4 <_init>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	bf00      	nop
 800afe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afea:	bc08      	pop	{r3}
 800afec:	469e      	mov	lr, r3
 800afee:	4770      	bx	lr

0800aff0 <_fini>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr
