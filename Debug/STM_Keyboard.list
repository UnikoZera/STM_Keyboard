
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc0c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800cde4  0800cde4  0000dde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0b8  0800d0b8  0000f168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d0b8  0800d0b8  0000e0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c0  0800d0c0  0000f168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c0  0800d0c0  0000e0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0c4  0800d0c4  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800d0c8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  20000168  0800d230  0000f168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800d230  0000f5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002587b  00000000  00000000  0000f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e3  00000000  00000000  00034a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001853  00000000  00000000  0003bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c03  00000000  00000000  0003d793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029472  00000000  00000000  00063396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e440a  00000000  00000000  0008c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008364  00000000  00000000  00170c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00178fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cdcc 	.word	0x0800cdcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800cdcc 	.word	0x0800cdcc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f00c fc09 	bl	800cd74 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000562:	4b39      	ldr	r3, [pc, #228]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000564:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800056a:	4b37      	ldr	r3, [pc, #220]	@ (8000648 <MX_ADC1_Init+0x104>)
 800056c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000570:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000572:	4b35      	ldr	r3, [pc, #212]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b33      	ldr	r3, [pc, #204]	@ (8000648 <MX_ADC1_Init+0x104>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800057e:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000584:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000586:	2201      	movs	r2, #1
 8000588:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b2f      	ldr	r3, [pc, #188]	@ (8000648 <MX_ADC1_Init+0x104>)
 800058c:	2204      	movs	r2, #4
 800058e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000590:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000592:	2200      	movs	r2, #0
 8000594:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000596:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000598:	2201      	movs	r2, #1
 800059a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800059c:	4b2a      	ldr	r3, [pc, #168]	@ (8000648 <MX_ADC1_Init+0x104>)
 800059e:	2202      	movs	r2, #2
 80005a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b6:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005cc:	481e      	ldr	r0, [pc, #120]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ce:	f001 fcd7 	bl	8001f80 <HAL_ADC_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005d8:	f000 fcc5 	bl	8000f66 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e4:	4619      	mov	r1, r3
 80005e6:	4818      	ldr	r0, [pc, #96]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005e8:	f002 fd3e 	bl	8003068 <HAL_ADCEx_MultiModeConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005f2:	f000 fcb8 	bl	8000f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_ADC1_Init+0x108>)
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fa:	2306      	movs	r3, #6
 80005fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000602:	237f      	movs	r3, #127	@ 0x7f
 8000604:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000606:	2304      	movs	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000614:	f001 ff0a 	bl	800242c <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800061e:	f000 fca2 	bl	8000f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_ADC1_Init+0x10c>)
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000626:	230c      	movs	r3, #12
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000630:	f001 fefc 	bl	800242c <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800063a:	f000 fc94 	bl	8000f66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3730      	adds	r7, #48	@ 0x30
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000184 	.word	0x20000184
 800064c:	32601000 	.word	0x32601000
 8000650:	3ef08000 	.word	0x3ef08000

08000654 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f00c fb87 	bl	800cd74 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000668:	4a32      	ldr	r2, [pc, #200]	@ (8000734 <MX_ADC2_Init+0xe0>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800066e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000672:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000688:	2201      	movs	r2, #1
 800068a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800068e:	2204      	movs	r2, #4
 8000690:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000694:	2200      	movs	r2, #0
 8000696:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800069a:	2201      	movs	r2, #1
 800069c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800069e:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ce:	4818      	ldr	r0, [pc, #96]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006d0:	f001 fc56 	bl	8001f80 <HAL_ADC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80006da:	f000 fc44 	bl	8000f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_ADC2_Init+0xe4>)
 80006e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e2:	2306      	movs	r3, #6
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ea:	237f      	movs	r3, #127	@ 0x7f
 80006ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ee:	2304      	movs	r3, #4
 80006f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006fc:	f001 fe96 	bl	800242c <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000706:	f000 fc2e 	bl	8000f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_ADC2_Init+0xe8>)
 800070c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070e:	230c      	movs	r3, #12
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000718:	f001 fe88 	bl	800242c <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000722:	f000 fc20 	bl	8000f66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001f0 	.word	0x200001f0
 8000734:	50000100 	.word	0x50000100
 8000738:	0c900008 	.word	0x0c900008
 800073c:	10c00010 	.word	0x10c00010

08000740 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	2244      	movs	r2, #68	@ 0x44
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f00c fb07 	bl	800cd74 <memset>
  if(adcHandle->Instance==ADC1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800076e:	d169      	bne.n	8000844 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000774:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000776:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800077a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f006 fa0f 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800078c:	f000 fbeb 	bl	8000f66 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000790:	4b66      	ldr	r3, [pc, #408]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a65      	ldr	r2, [pc, #404]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000798:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800079a:	4b64      	ldr	r3, [pc, #400]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d10b      	bne.n	80007ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007a2:	4b63      	ldr	r3, [pc, #396]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a62      	ldr	r2, [pc, #392]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b60      	ldr	r3, [pc, #384]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a5c      	ldr	r2, [pc, #368]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Key_2_Pin|Key_1_Pin;
 80007d2:	2303      	movs	r3, #3
 80007d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d6:	2303      	movs	r3, #3
 80007d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007e2:	4619      	mov	r1, r3
 80007e4:	4853      	ldr	r0, [pc, #332]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 80007e6:	f003 f8cd 	bl	8003984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007ea:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007ec:	4a53      	ldr	r2, [pc, #332]	@ (800093c <HAL_ADC_MspInit+0x1fc>)
 80007ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007f0:	4b51      	ldr	r3, [pc, #324]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007f2:	2205      	movs	r2, #5
 80007f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b50      	ldr	r3, [pc, #320]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b4e      	ldr	r3, [pc, #312]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b4d      	ldr	r3, [pc, #308]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000808:	4b4b      	ldr	r3, [pc, #300]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800080a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000810:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000816:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000818:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800081a:	2220      	movs	r2, #32
 800081c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800081e:	4b46      	ldr	r3, [pc, #280]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000824:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000826:	4844      	ldr	r0, [pc, #272]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000828:	f002 fdd2 	bl	80033d0 <HAL_DMA_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000832:	f000 fb98 	bl	8000f66 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a3f      	ldr	r2, [pc, #252]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800083a:	655a      	str	r2, [r3, #84]	@ 0x54
 800083c:	4a3e      	ldr	r2, [pc, #248]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000842:	e06e      	b.n	8000922 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a3d      	ldr	r2, [pc, #244]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d169      	bne.n	8000922 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800084e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000852:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000854:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000858:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	4618      	mov	r0, r3
 8000860:	f006 f9a0 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800086a:	f000 fb7c 	bl	8000f66 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800086e:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a2d      	ldr	r2, [pc, #180]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000876:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000878:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10b      	bne.n	8000898 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000880:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 8000886:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800088a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088c:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	4a24      	ldr	r2, [pc, #144]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Key_3_Pin|Key_4_Pin;
 80008b0:	23c0      	movs	r3, #192	@ 0xc0
 80008b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b4:	2303      	movs	r3, #3
 80008b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f003 f85d 	bl	8003984 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <HAL_ADC_MspInit+0x208>)
 80008ce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008d2:	2224      	movs	r2, #36	@ 0x24
 80008d4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008fa:	2220      	movs	r2, #32
 80008fc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 8000900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000906:	480f      	ldr	r0, [pc, #60]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 8000908:	f002 fd62 	bl	80033d0 <HAL_DMA_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8000912:	f000 fb28 	bl	8000f66 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 800091a:	655a      	str	r2, [r3, #84]	@ 0x54
 800091c:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	@ 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000031c 	.word	0x2000031c
 8000930:	40021000 	.word	0x40021000
 8000934:	48000400 	.word	0x48000400
 8000938:	2000025c 	.word	0x2000025c
 800093c:	40020008 	.word	0x40020008
 8000940:	50000100 	.word	0x50000100
 8000944:	200002bc 	.word	0x200002bc
 8000948:	4002001c 	.word	0x4002001c

0800094c <ADC_Filter>:

uint16_t filter_adc_1[2];
uint16_t filter_adc_2[2];

void ADC_Filter(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	filter_adc_1[0] = ADC_FILTER_ALPHA * buffer_adc_1[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_1[0];
 8000950:	4b3c      	ldr	r3, [pc, #240]	@ (8000a44 <ADC_Filter+0xf8>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000a48 <ADC_Filter+0xfc>
 8000960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000964:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <ADC_Filter+0x100>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000970:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8000a50 <ADC_Filter+0x104>
 8000974:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000980:	ee17 3a90 	vmov	r3, s15
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <ADC_Filter+0x100>)
 8000988:	801a      	strh	r2, [r3, #0]
	filter_adc_1[1] = ADC_FILTER_ALPHA * buffer_adc_1[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_1[1];
 800098a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <ADC_Filter+0xf8>)
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000a48 <ADC_Filter+0xfc>
 800099a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <ADC_Filter+0x100>)
 80009a0:	885b      	ldrh	r3, [r3, #2]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009aa:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000a50 <ADC_Filter+0x104>
 80009ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ba:	ee17 3a90 	vmov	r3, s15
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <ADC_Filter+0x100>)
 80009c2:	805a      	strh	r2, [r3, #2]

	filter_adc_2[0] = ADC_FILTER_ALPHA * buffer_adc_2[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_2[0];
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <ADC_Filter+0x108>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	ee07 3a90 	vmov	s15, r3
 80009cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000a48 <ADC_Filter+0xfc>
 80009d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <ADC_Filter+0x10c>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e4:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000a50 <ADC_Filter+0x104>
 80009e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f4:	ee17 3a90 	vmov	r3, s15
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <ADC_Filter+0x10c>)
 80009fc:	801a      	strh	r2, [r3, #0]
	filter_adc_2[1] = ADC_FILTER_ALPHA * buffer_adc_2[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_2[1];
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <ADC_Filter+0x108>)
 8000a00:	885b      	ldrh	r3, [r3, #2]
 8000a02:	ee07 3a90 	vmov	s15, r3
 8000a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000a48 <ADC_Filter+0xfc>
 8000a0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <ADC_Filter+0x10c>)
 8000a14:	885b      	ldrh	r3, [r3, #2]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000a50 <ADC_Filter+0x104>
 8000a22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a2e:	ee17 3a90 	vmov	r3, s15
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <ADC_Filter+0x10c>)
 8000a36:	805a      	strh	r2, [r3, #2]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000320 	.word	0x20000320
 8000a48:	3f19999a 	.word	0x3f19999a
 8000a4c:	20000328 	.word	0x20000328
 8000a50:	3ecccccc 	.word	0x3ecccccc
 8000a54:	20000324 	.word	0x20000324
 8000a58:	2000032c 	.word	0x2000032c

08000a5c <ADC_Init>:

void ADC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a60:	217f      	movs	r1, #127	@ 0x7f
 8000a62:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <ADC_Init+0x24>)
 8000a64:	f002 fa9e 	bl	8002fa4 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000a68:	217f      	movs	r1, #127	@ 0x7f
 8000a6a:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <ADC_Init+0x28>)
 8000a6c:	f002 fa9a 	bl	8002fa4 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(10); // 等待校准完成
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f81f 	bl	8001ab4 <HAL_Delay>
    ADC_Start_DMA();
 8000a76:	f000 f807 	bl	8000a88 <ADC_Start_DMA>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000184 	.word	0x20000184
 8000a84:	200001f0 	.word	0x200001f0

08000a88 <ADC_Start_DMA>:


void ADC_Start_DMA(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer_adc_1, sizeof(buffer_adc_1)/sizeof(uint16_t));
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	4905      	ldr	r1, [pc, #20]	@ (8000aa4 <ADC_Start_DMA+0x1c>)
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <ADC_Start_DMA+0x20>)
 8000a92:	f001 fbf9 	bl	8002288 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)buffer_adc_2, sizeof(buffer_adc_2)/sizeof(uint16_t));
 8000a96:	2202      	movs	r2, #2
 8000a98:	4904      	ldr	r1, [pc, #16]	@ (8000aac <ADC_Start_DMA+0x24>)
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <ADC_Start_DMA+0x28>)
 8000a9c:	f001 fbf4 	bl	8002288 <HAL_ADC_Start_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000320 	.word	0x20000320
 8000aa8:	20000184 	.word	0x20000184
 8000aac:	20000324 	.word	0x20000324
 8000ab0:	200001f0 	.word	0x200001f0

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <MX_DMA_Init+0x70>)
 8000abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000abe:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <MX_DMA_Init+0x70>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_DMA_Init+0x70>)
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_DMA_Init+0x70>)
 8000ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ad6:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <MX_DMA_Init+0x70>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_DMA_Init+0x70>)
 8000ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200b      	movs	r0, #11
 8000af0:	f002 fc39 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000af4:	200b      	movs	r0, #11
 8000af6:	f002 fc50 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200c      	movs	r0, #12
 8000b00:	f002 fc31 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b04:	200c      	movs	r0, #12
 8000b06:	f002 fc48 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200d      	movs	r0, #13
 8000b10:	f002 fc29 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b14:	200d      	movs	r0, #13
 8000b16:	f002 fc40 	bl	800339a <HAL_NVIC_EnableIRQ>

}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a2a      	ldr	r2, [pc, #168]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b25      	ldr	r3, [pc, #148]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4a24      	ldr	r2, [pc, #144]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	4a18      	ldr	r2, [pc, #96]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_GPIO_Init+0xc4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <MX_GPIO_Init+0xc8>)
 8000ba6:	f003 f887 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <MX_GPIO_Init+0xc8>)
 8000bc4:	f002 fede 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mode_Buttom_Pin */
  GPIO_InitStruct.Pin = Mode_Buttom_Pin;
 8000bc8:	2320      	movs	r3, #32
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode_Buttom_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f002 fed1 	bl	8003984 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000800 	.word	0x48000800

08000bf4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000c74 <MX_I2C1_Init+0x80>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c00:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <MX_I2C1_Init+0x84>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c16:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c2e:	4810      	ldr	r0, [pc, #64]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c30:	f003 f85a 	bl	8003ce8 <HAL_I2C_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 f994 	bl	8000f66 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c42:	f003 fc1f 	bl	8004484 <HAL_I2CEx_ConfigAnalogFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 f98b 	bl	8000f66 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c54:	f003 fc61 	bl	800451a <HAL_I2CEx_ConfigDigitalFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 f982 	bl	8000f66 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000c62:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000c66:	f003 fca5 	bl	80045b4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000330 	.word	0x20000330
 8000c74:	40005400 	.word	0x40005400
 8000c78:	4052060f 	.word	0x4052060f

08000c7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09c      	sub	sp, #112	@ 0x70
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	2244      	movs	r2, #68	@ 0x44
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f00c f869 	bl	800cd74 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8000d60 <HAL_I2C_MspInit+0xe4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d154      	bne.n	8000d56 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cac:	2340      	movs	r3, #64	@ 0x40
 8000cae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	f107 0318 	add.w	r3, r7, #24
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f005 ff73 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cc4:	f000 f94f 	bl	8000f66 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ccc:	4a25      	ldr	r2, [pc, #148]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfe:	2312      	movs	r3, #18
 8000d00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f002 fe34 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8000d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	2312      	movs	r3, #18
 8000d24:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d36:	4619      	mov	r1, r3
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <HAL_I2C_MspInit+0xec>)
 8000d3a:	f002 fe23 	bl	8003984 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_I2C_MspInit+0xe8>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d56:	bf00      	nop
 8000d58:	3770      	adds	r7, #112	@ 0x70
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40005400 	.word	0x40005400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400

08000d6c <Keyboard_Init>:
// 第1位为保留位0x00
// 第2-6位为普通按键(0x00-0xFF) 这里做的是4key盘的协议
uint8_t hid_buffer[6] = {0};

void Keyboard_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    ADC_Init();
 8000d70:	f7ff fe74 	bl	8000a5c <ADC_Init>
    HAL_Delay(100);
 8000d74:	2064      	movs	r0, #100	@ 0x64
 8000d76:	f000 fe9d 	bl	8001ab4 <HAL_Delay>
    RGB_Init();
 8000d7a:	f000 fad8 	bl	800132e <RGB_Init>
    HAL_Delay(100);
 8000d7e:	2064      	movs	r0, #100	@ 0x64
 8000d80:	f000 fe98 	bl	8001ab4 <HAL_Delay>
    OLED_Init();
 8000d84:	f000 f964 	bl	8001050 <OLED_Init>
    // USB已经在main中初始化
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Keyboard_Update>:

void Keyboard_Update(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    // 读取ADC数据
    ADC_Filter();
 8000d90:	f7ff fddc 	bl	800094c <ADC_Filter>

    // 读取mode按钮
    if (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET)
 8000d94:	2120      	movs	r1, #32
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f002 ff75 	bl	8003c88 <HAL_GPIO_ReadPin>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d120      	bne.n	8000de6 <Keyboard_Update+0x5a>
    {
        HAL_Delay(50); // 防抖
 8000da4:	2032      	movs	r0, #50	@ 0x32
 8000da6:	f000 fe85 	bl	8001ab4 <HAL_Delay>
        if (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET)
 8000daa:	2120      	movs	r1, #32
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db0:	f002 ff6a 	bl	8003c88 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10c      	bne.n	8000dd4 <Keyboard_Update+0x48>
        {
            keyboard_mode++;
 8000dba:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <Keyboard_Update+0xf0>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e7c <Keyboard_Update+0xf0>)
 8000dc4:	701a      	strb	r2, [r3, #0]
            if (keyboard_mode > 2)
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <Keyboard_Update+0xf0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d902      	bls.n	8000dd4 <Keyboard_Update+0x48>
            {
                keyboard_mode = 1;
 8000dce:	4b2b      	ldr	r3, [pc, #172]	@ (8000e7c <Keyboard_Update+0xf0>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
            }
        }
        while (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET);// 等待按键释放
 8000dd4:	bf00      	nop
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f002 ff54 	bl	8003c88 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f7      	beq.n	8000dd6 <Keyboard_Update+0x4a>
    }

    if (keyboard_mode == 1)
 8000de6:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <Keyboard_Update+0xf0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d13b      	bne.n	8000e66 <Keyboard_Update+0xda>
    {
        // 读取按键状态
        hid_buffer[0] = KEYBOARD_BUTTON_NONE; // 特殊按键
 8000dee:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
        hid_buffer[1] = KEYBOARD_BUTTON_NONE; // 保留位
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	705a      	strb	r2, [r3, #1]

        if (filter_adc_1[0] > KEYBOARD_TRIGGER_THRESHOLD)
 8000dfa:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <Keyboard_Update+0xf8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e02:	d903      	bls.n	8000e0c <Keyboard_Update+0x80>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e06:	2207      	movs	r2, #7
 8000e08:	709a      	strb	r2, [r3, #2]
 8000e0a:	e002      	b.n	8000e12 <Keyboard_Update+0x86>
        }
        else
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	709a      	strb	r2, [r3, #2]
        }

        if (filter_adc_1[1] > KEYBOARD_TRIGGER_THRESHOLD)
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <Keyboard_Update+0xf8>)
 8000e14:	885b      	ldrh	r3, [r3, #2]
 8000e16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e1a:	d903      	bls.n	8000e24 <Keyboard_Update+0x98>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e1e:	2209      	movs	r2, #9
 8000e20:	70da      	strb	r2, [r3, #3]
 8000e22:	e002      	b.n	8000e2a <Keyboard_Update+0x9e>
        }
        else
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	70da      	strb	r2, [r3, #3]
        }
        
        if (filter_adc_2[0] > KEYBOARD_TRIGGER_THRESHOLD)
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <Keyboard_Update+0xfc>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e32:	d903      	bls.n	8000e3c <Keyboard_Update+0xb0>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e36:	220d      	movs	r2, #13
 8000e38:	711a      	strb	r2, [r3, #4]
 8000e3a:	e002      	b.n	8000e42 <Keyboard_Update+0xb6>
        }
        else
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	711a      	strb	r2, [r3, #4]
        }

        if (filter_adc_2[1] > KEYBOARD_TRIGGER_THRESHOLD)
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <Keyboard_Update+0xfc>)
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e4a:	d903      	bls.n	8000e54 <Keyboard_Update+0xc8>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e4e:	220e      	movs	r2, #14
 8000e50:	715a      	strb	r2, [r3, #5]
 8000e52:	e002      	b.n	8000e5a <Keyboard_Update+0xce>
        }
        else
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	715a      	strb	r2, [r3, #5]
        }

        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, sizeof(hid_buffer));
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <Keyboard_Update+0xf4>)
 8000e5e:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <Keyboard_Update+0x100>)
 8000e60:	f00a fa54 	bl	800b30c <USBD_HID_SendReport>
        if (filter_adc_2[1] > KEYBOARD_TRIGGER_THRESHOLD)
        {
            // RIGHT
        }
    }
 8000e64:	e008      	b.n	8000e78 <Keyboard_Update+0xec>
    else if (keyboard_mode == 2)
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <Keyboard_Update+0xf0>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d104      	bne.n	8000e78 <Keyboard_Update+0xec>
        OLED_DisplayString(0, 0, "Mod Mode:");
 8000e6e:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <Keyboard_Update+0x104>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 fa0e 	bl	8001294 <OLED_DisplayString>
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000384 	.word	0x20000384
 8000e84:	20000328 	.word	0x20000328
 8000e88:	2000032c 	.word	0x2000032c
 8000e8c:	20000e00 	.word	0x20000e00
 8000e90:	0800cde4 	.word	0x0800cde4

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 fd9b 	bl	80019d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f818 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f7ff fe42 	bl	8000b28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea4:	f7ff fe06 	bl	8000ab4 <MX_DMA_Init>
  MX_ADC2_Init();
 8000ea8:	f7ff fbd4 	bl	8000654 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000eac:	f7ff fea2 	bl	8000bf4 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8000eb0:	f00b fb80 	bl	800c5b4 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8000eb4:	f7ff fb46 	bl	8000544 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000eb8:	f000 fbc4 	bl	8001644 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ebc:	f000 fcbc 	bl	8001838 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 8000ec0:	f7ff ff54 	bl	8000d6c <Keyboard_Init>
  HAL_Delay(100);
 8000ec4:	2064      	movs	r0, #100	@ 0x64
 8000ec6:	f000 fdf5 	bl	8001ab4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Keyboard_Update();
 8000eca:	f7ff ff5f 	bl	8000d8c <Keyboard_Update>
 8000ece:	e7fc      	b.n	8000eca <main+0x36>

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	@ 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	2238      	movs	r2, #56	@ 0x38
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00b ff48 	bl	800cd74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f005 f874 	bl	8005fe0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ef8:	2321      	movs	r3, #33	@ 0x21
 8000efa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000efc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f00:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f06:	2302      	movs	r3, #2
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f12:	2355      	movs	r3, #85	@ 0x55
 8000f14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 f90e 	bl	8006148 <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f32:	f000 f818 	bl	8000f66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 fc0c 	bl	800676c <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f5a:	f000 f804 	bl	8000f66 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	@ 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6a:	b672      	cpsid	i
}
 8000f6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6e:	bf00      	nop
 8000f70:	e7fd      	b.n	8000f6e <Error_Handler+0x8>
	...

08000f74 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <OLED_InitBuffer+0x54>)
 8000f82:	f00b fef7 	bl	800cd74 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000f86:	f240 4201 	movw	r2, #1025	@ 0x401
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	480f      	ldr	r0, [pc, #60]	@ (8000fcc <OLED_InitBuffer+0x58>)
 8000f8e:	f00b fef1 	bl	800cd74 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <OLED_InitBuffer+0x58>)
 8000f94:	2240      	movs	r2, #64	@ 0x40
 8000f96:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <OLED_InitBuffer+0x5c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <OLED_InitBuffer+0x60>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	e006      	b.n	8000fb8 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <OLED_InitBuffer+0x64>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	d9f5      	bls.n	8000faa <OLED_InitBuffer+0x36>
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000394 	.word	0x20000394
 8000fcc:	20000794 	.word	0x20000794
 8000fd0:	2000038a 	.word	0x2000038a
 8000fd4:	2000038b 	.word	0x2000038b
 8000fd8:	2000038c 	.word	0x2000038c

08000fdc <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000fe2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	480a      	ldr	r0, [pc, #40]	@ (8001014 <OLED_ClearBuffer+0x38>)
 8000fea:	f00b fec3 	bl	800cd74 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	e006      	b.n	8001002 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <OLED_ClearBuffer+0x3c>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	3301      	adds	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b07      	cmp	r3, #7
 8001006:	d9f5      	bls.n	8000ff4 <OLED_ClearBuffer+0x18>
    }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000394 	.word	0x20000394
 8001018:	2000038c 	.word	0x2000038c

0800101c <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001026:	2300      	movs	r3, #0
 8001028:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800102e:	f107 020c 	add.w	r2, r7, #12
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	2178      	movs	r1, #120	@ 0x78
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <OLED_SendCommand+0x30>)
 800103e:	f002 feef 	bl	8003e20 <HAL_I2C_Master_Transmit>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000330 	.word	0x20000330

08001050 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001054:	2064      	movs	r0, #100	@ 0x64
 8001056:	f000 fd2d 	bl	8001ab4 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 800105a:	20ae      	movs	r0, #174	@ 0xae
 800105c:	f7ff ffde 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001060:	20d5      	movs	r0, #213	@ 0xd5
 8001062:	f7ff ffdb 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001066:	2080      	movs	r0, #128	@ 0x80
 8001068:	f7ff ffd8 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 800106c:	20a8      	movs	r0, #168	@ 0xa8
 800106e:	f7ff ffd5 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001072:	203f      	movs	r0, #63	@ 0x3f
 8001074:	f7ff ffd2 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001078:	20d3      	movs	r0, #211	@ 0xd3
 800107a:	f7ff ffcf 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ffcc 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001084:	2040      	movs	r0, #64	@ 0x40
 8001086:	f7ff ffc9 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 800108a:	208d      	movs	r0, #141	@ 0x8d
 800108c:	f7ff ffc6 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001090:	2014      	movs	r0, #20
 8001092:	f7ff ffc3 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001096:	2020      	movs	r0, #32
 8001098:	f7ff ffc0 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ffbd 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 80010a2:	20a1      	movs	r0, #161	@ 0xa1
 80010a4:	f7ff ffba 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 80010a8:	20c8      	movs	r0, #200	@ 0xc8
 80010aa:	f7ff ffb7 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 80010ae:	20da      	movs	r0, #218	@ 0xda
 80010b0:	f7ff ffb4 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 80010b4:	2012      	movs	r0, #18
 80010b6:	f7ff ffb1 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 80010ba:	2081      	movs	r0, #129	@ 0x81
 80010bc:	f7ff ffae 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 80010c0:	20cf      	movs	r0, #207	@ 0xcf
 80010c2:	f7ff ffab 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 80010c6:	20d9      	movs	r0, #217	@ 0xd9
 80010c8:	f7ff ffa8 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 80010cc:	20f1      	movs	r0, #241	@ 0xf1
 80010ce:	f7ff ffa5 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 80010d2:	20db      	movs	r0, #219	@ 0xdb
 80010d4:	f7ff ffa2 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 80010d8:	2030      	movs	r0, #48	@ 0x30
 80010da:	f7ff ff9f 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 80010de:	20a4      	movs	r0, #164	@ 0xa4
 80010e0:	f7ff ff9c 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 80010e4:	20a6      	movs	r0, #166	@ 0xa6
 80010e6:	f7ff ff99 	bl	800101c <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 80010ea:	202e      	movs	r0, #46	@ 0x2e
 80010ec:	f7ff ff96 	bl	800101c <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 80010f0:	f7ff ff40 	bl	8000f74 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 80010f4:	f7ff ff72 	bl	8000fdc <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 80010f8:	20af      	movs	r0, #175	@ 0xaf
 80010fa:	f7ff ff8f 	bl	800101c <OLED_SendCommand>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	460b      	mov	r3, r1
 8001110:	80bb      	strh	r3, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8001116:	2306      	movs	r3, #6
 8001118:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 800111a:	2308      	movs	r3, #8
 800111c:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	2b1f      	cmp	r3, #31
 8001122:	f240 80a8 	bls.w	8001276 <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	3b20      	subs	r3, #32
 800112a:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 800112c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db08      	blt.n	8001146 <OLED_DisplayChar+0x42>
 8001134:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	da00      	bge.n	800113e <OLED_DisplayChar+0x3a>
 800113c:	3307      	adds	r3, #7
 800113e:	10db      	asrs	r3, r3, #3
 8001140:	b21b      	sxth	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	e000      	b.n	8001148 <OLED_DisplayChar+0x44>
 8001146:	2300      	movs	r3, #0
 8001148:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 800114a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	4413      	add	r3, r2
 8001152:	2b40      	cmp	r3, #64	@ 0x40
 8001154:	dc0a      	bgt.n	800116c <OLED_DisplayChar+0x68>
 8001156:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800115a:	7efb      	ldrb	r3, [r7, #27]
 800115c:	4413      	add	r3, r2
 800115e:	3b01      	subs	r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	da00      	bge.n	8001166 <OLED_DisplayChar+0x62>
 8001164:	3307      	adds	r3, #7
 8001166:	10db      	asrs	r3, r3, #3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	e000      	b.n	800116e <OLED_DisplayChar+0x6a>
 800116c:	2307      	movs	r3, #7
 800116e:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8001170:	7e7b      	ldrb	r3, [r7, #25]
 8001172:	77fb      	strb	r3, [r7, #31]
 8001174:	e006      	b.n	8001184 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	4a43      	ldr	r2, [pc, #268]	@ (8001288 <OLED_DisplayChar+0x184>)
 800117a:	2101      	movs	r1, #1
 800117c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800117e:	7ffb      	ldrb	r3, [r7, #31]
 8001180:	3301      	adds	r3, #1
 8001182:	77fb      	strb	r3, [r7, #31]
 8001184:	7ffa      	ldrb	r2, [r7, #31]
 8001186:	7e3b      	ldrb	r3, [r7, #24]
 8001188:	429a      	cmp	r2, r3
 800118a:	d802      	bhi.n	8001192 <OLED_DisplayChar+0x8e>
 800118c:	7ffb      	ldrb	r3, [r7, #31]
 800118e:	2b07      	cmp	r3, #7
 8001190:	d9f1      	bls.n	8001176 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001192:	2300      	movs	r3, #0
 8001194:	77bb      	strb	r3, [r7, #30]
 8001196:	e069      	b.n	800126c <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 8001198:	7fbb      	ldrb	r3, [r7, #30]
 800119a:	b29a      	uxth	r2, r3
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4413      	add	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 80011a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db5b      	blt.n	8001264 <OLED_DisplayChar+0x160>
 80011ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80011b2:	dc57      	bgt.n	8001264 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80011b4:	7ebb      	ldrb	r3, [r7, #26]
 80011b6:	7f3a      	ldrb	r2, [r7, #28]
 80011b8:	fb03 f202 	mul.w	r2, r3, r2
 80011bc:	7fbb      	ldrb	r3, [r7, #30]
 80011be:	4413      	add	r3, r2
 80011c0:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80011c4:	d259      	bcs.n	800127a <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80011c6:	7ebb      	ldrb	r3, [r7, #26]
 80011c8:	7f3a      	ldrb	r2, [r7, #28]
 80011ca:	fb03 f202 	mul.w	r2, r3, r2
 80011ce:	7fbb      	ldrb	r3, [r7, #30]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a2e      	ldr	r2, [pc, #184]	@ (800128c <OLED_DisplayChar+0x188>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80011d8:	2300      	movs	r3, #0
 80011da:	777b      	strb	r3, [r7, #29]
 80011dc:	e03d      	b.n	800125a <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 80011de:	7f7b      	ldrb	r3, [r7, #29]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80011ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db2f      	blt.n	8001252 <OLED_DisplayChar+0x14e>
 80011f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80011f8:	dc2b      	bgt.n	8001252 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80011fa:	7d7a      	ldrb	r2, [r7, #21]
 80011fc:	7f7b      	ldrb	r3, [r7, #29]
 80011fe:	fa42 f303 	asr.w	r3, r2, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d024      	beq.n	8001254 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 800120a:	8a7b      	ldrh	r3, [r7, #18]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8001212:	8a7b      	ldrh	r3, [r7, #18]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 800121c:	7c7b      	ldrb	r3, [r7, #17]
 800121e:	b29b      	uxth	r3, r3
 8001220:	01db      	lsls	r3, r3, #7
 8001222:	b29a      	uxth	r2, r3
 8001224:	8afb      	ldrh	r3, [r7, #22]
 8001226:	4413      	add	r3, r2
 8001228:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001230:	d210      	bcs.n	8001254 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	4a16      	ldr	r2, [pc, #88]	@ (8001290 <OLED_DisplayChar+0x18c>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	b25a      	sxtb	r2, r3
 800123a:	7c3b      	ldrb	r3, [r7, #16]
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b25a      	sxtb	r2, r3
 8001248:	89fb      	ldrh	r3, [r7, #14]
 800124a:	b2d1      	uxtb	r1, r2
 800124c:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <OLED_DisplayChar+0x18c>)
 800124e:	54d1      	strb	r1, [r2, r3]
 8001250:	e000      	b.n	8001254 <OLED_DisplayChar+0x150>
                continue;
 8001252:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001254:	7f7b      	ldrb	r3, [r7, #29]
 8001256:	3301      	adds	r3, #1
 8001258:	777b      	strb	r3, [r7, #29]
 800125a:	7f7a      	ldrb	r2, [r7, #29]
 800125c:	7efb      	ldrb	r3, [r7, #27]
 800125e:	429a      	cmp	r2, r3
 8001260:	d3bd      	bcc.n	80011de <OLED_DisplayChar+0xda>
 8001262:	e000      	b.n	8001266 <OLED_DisplayChar+0x162>
            continue;
 8001264:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001266:	7fbb      	ldrb	r3, [r7, #30]
 8001268:	3301      	adds	r3, #1
 800126a:	77bb      	strb	r3, [r7, #30]
 800126c:	7fba      	ldrb	r2, [r7, #30]
 800126e:	7f3b      	ldrb	r3, [r7, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	d391      	bcc.n	8001198 <OLED_DisplayChar+0x94>
 8001274:	e002      	b.n	800127c <OLED_DisplayChar+0x178>
        return;
 8001276:	bf00      	nop
 8001278:	e000      	b.n	800127c <OLED_DisplayChar+0x178>
            break;
 800127a:	bf00      	nop
                }
            }
        }
    }
}
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000038c 	.word	0x2000038c
 800128c:	0800ce38 	.word	0x0800ce38
 8001290:	20000394 	.word	0x20000394

08001294 <OLED_DisplayString>:
        }
    }
}

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	603a      	str	r2, [r7, #0]
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	460b      	mov	r3, r1
 80012a2:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 80012ac:	2308      	movs	r3, #8
 80012ae:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80012b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80012b6:	dc34      	bgt.n	8001322 <OLED_DisplayString+0x8e>
 80012b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012bc:	7b7b      	ldrb	r3, [r7, #13]
 80012be:	4413      	add	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd2e      	ble.n	8001322 <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80012c4:	e026      	b.n	8001314 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	fb12 f303 	smulbb	r3, r2, r3
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 80012dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e2:	dc20      	bgt.n	8001326 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 80012e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	4413      	add	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dc03      	bgt.n	80012f8 <OLED_DisplayString+0x64>
        {
            j++;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
            continue;
 80012f6:	e00d      	b.n	8001314 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001304:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fefb 	bl	8001104 <OLED_DisplayChar>
        j++;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	3301      	adds	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1d2      	bne.n	80012c6 <OLED_DisplayString+0x32>
 8001320:	e002      	b.n	8001328 <OLED_DisplayString+0x94>
        return;
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <OLED_DisplayString+0x94>
            break;
 8001326:	bf00      	nop
    }
}
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <RGB_Init>:
#define PWM_BUFFER_LEN (NUM_LEDS * 24 + RESET_PULSE_LEN) // GRB order, both need 24 bits
static uint8_t led_colors[NUM_LEDS][3];
static uint16_t pwm_buffer[PWM_BUFFER_LEN];

void RGB_Init(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
    RGB_Clear();
 8001332:	f000 f839 	bl	80013a8 <RGB_Clear>
    RGB_Update();
 8001336:	f000 f84f 	bl	80013d8 <RGB_Update>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <RGB_SetColor>:

// RGB范围是0-255
// led_index: 0-3
void RGB_SetColor(uint8_t led_index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001340:	b490      	push	{r4, r7}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	4611      	mov	r1, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4623      	mov	r3, r4
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	4603      	mov	r3, r0
 8001354:	71bb      	strb	r3, [r7, #6]
 8001356:	460b      	mov	r3, r1
 8001358:	717b      	strb	r3, [r7, #5]
 800135a:	4613      	mov	r3, r2
 800135c:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b03      	cmp	r3, #3
 8001362:	d819      	bhi.n	8001398 <RGB_SetColor+0x58>
    {
        led_colors[led_index][0] = red;
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	490f      	ldr	r1, [pc, #60]	@ (80013a4 <RGB_SetColor+0x64>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	440b      	add	r3, r1
 8001370:	79ba      	ldrb	r2, [r7, #6]
 8001372:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][1] = green;
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	490b      	ldr	r1, [pc, #44]	@ (80013a4 <RGB_SetColor+0x64>)
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	440b      	add	r3, r1
 8001380:	3301      	adds	r3, #1
 8001382:	797a      	ldrb	r2, [r7, #5]
 8001384:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][2] = blue;
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4906      	ldr	r1, [pc, #24]	@ (80013a4 <RGB_SetColor+0x64>)
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	440b      	add	r3, r1
 8001392:	3302      	adds	r3, #2
 8001394:	793a      	ldrb	r2, [r7, #4]
 8001396:	701a      	strb	r2, [r3, #0]
    }
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bc90      	pop	{r4, r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000b98 	.word	0x20000b98

080013a8 <RGB_Clear>:

void RGB_Clear(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e009      	b.n	80013c8 <RGB_Clear+0x20>
	{
		RGB_SetColor(i, 0, 0, 0);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	b2d8      	uxtb	r0, r3
 80013b8:	2300      	movs	r3, #0
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	f7ff ffbf 	bl	8001340 <RGB_SetColor>
	for (int i = 0; i < NUM_LEDS; i++)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3301      	adds	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	ddf2      	ble.n	80013b4 <RGB_Clear+0xc>
	}
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <RGB_Update>:

//! setColor之后请直接调用这个来更新LED颜色
void RGB_Update(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	e067      	b.n	80014b8 <RGB_Update+0xe0>
    {
        // Green
        for (int j = 7; j >= 0; j--)
 80013e8:	2307      	movs	r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e01b      	b.n	8001426 <RGB_Update+0x4e>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][1] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 80013ee:	4941      	ldr	r1, [pc, #260]	@ (80014f4 <RGB_Update+0x11c>)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	3301      	adds	r3, #1
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	fa42 f303 	asr.w	r3, r2, r3
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <RGB_Update+0x3a>
 800140e:	2188      	movs	r1, #136	@ 0x88
 8001410:	e000      	b.n	8001414 <RGB_Update+0x3c>
 8001412:	2144      	movs	r1, #68	@ 0x44
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	617a      	str	r2, [r7, #20]
 800141a:	4a37      	ldr	r2, [pc, #220]	@ (80014f8 <RGB_Update+0x120>)
 800141c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3b01      	subs	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	dae0      	bge.n	80013ee <RGB_Update+0x16>
        }
        // Red
        for (int j = 7; j >= 0; j--)
 800142c:	2307      	movs	r3, #7
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	e01a      	b.n	8001468 <RGB_Update+0x90>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][0] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001432:	4930      	ldr	r1, [pc, #192]	@ (80014f4 <RGB_Update+0x11c>)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	440b      	add	r3, r1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	fa42 f303 	asr.w	r3, r2, r3
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <RGB_Update+0x7c>
 8001450:	2188      	movs	r1, #136	@ 0x88
 8001452:	e000      	b.n	8001456 <RGB_Update+0x7e>
 8001454:	2144      	movs	r1, #68	@ 0x44
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	617a      	str	r2, [r7, #20]
 800145c:	4a26      	ldr	r2, [pc, #152]	@ (80014f8 <RGB_Update+0x120>)
 800145e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3b01      	subs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dae1      	bge.n	8001432 <RGB_Update+0x5a>
        }
        // Blue
        for (int j = 7; j >= 0; j--)
 800146e:	2307      	movs	r3, #7
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	e01b      	b.n	80014ac <RGB_Update+0xd4>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][2] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001474:	491f      	ldr	r1, [pc, #124]	@ (80014f4 <RGB_Update+0x11c>)
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	440b      	add	r3, r1
 8001480:	3302      	adds	r3, #2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	fa42 f303 	asr.w	r3, r2, r3
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <RGB_Update+0xc0>
 8001494:	2188      	movs	r1, #136	@ 0x88
 8001496:	e000      	b.n	800149a <RGB_Update+0xc2>
 8001498:	2144      	movs	r1, #68	@ 0x44
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	617a      	str	r2, [r7, #20]
 80014a0:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <RGB_Update+0x120>)
 80014a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dae0      	bge.n	8001474 <RGB_Update+0x9c>
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	3301      	adds	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	dd94      	ble.n	80013e8 <RGB_Update+0x10>
        }
    }

    // Reset pulse
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	e009      	b.n	80014d8 <RGB_Update+0x100>
    {
        pwm_buffer[buffer_index++] = 0;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	617a      	str	r2, [r7, #20]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <RGB_Update+0x120>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b29      	cmp	r3, #41	@ 0x29
 80014dc:	ddf2      	ble.n	80014c4 <RGB_Update+0xec>
    }

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwm_buffer, PWM_BUFFER_LEN);
 80014de:	238a      	movs	r3, #138	@ 0x8a
 80014e0:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <RGB_Update+0x120>)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <RGB_Update+0x124>)
 80014e6:	f005 fe05 	bl	80070f4 <HAL_TIM_PWM_Start_DMA>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000b98 	.word	0x20000b98
 80014f8:	20000ba4 	.word	0x20000ba4
 80014fc:	20000cb8 	.word	0x20000cb8

08001500 <HAL_TIM_PWM_PulseFinishedCallback>:

// 自动回调函数停止DMA
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d103      	bne.n	800151a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f006 f805 	bl	8007524 <HAL_TIM_PWM_Stop_DMA>
    }
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40000400 	.word	0x40000400

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_MspInit+0x44>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_MspInit+0x44>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	@ 0x60
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <HAL_MspInit+0x44>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	4a08      	ldr	r2, [pc, #32]	@ (800156c <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	@ 0x58
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800155e:	f004 fde3 	bl	8006128 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <NMI_Handler+0x4>

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f000 fa57 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <DMA1_Channel1_IRQHandler+0x10>)
 80015d6:	f002 f885 	bl	80036e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000025c 	.word	0x2000025c

080015e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015e8:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <DMA1_Channel2_IRQHandler+0x10>)
 80015ea:	f002 f87b 	bl	80036e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002bc 	.word	0x200002bc

080015f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80015fc:	4802      	ldr	r0, [pc, #8]	@ (8001608 <DMA1_Channel3_IRQHandler+0x10>)
 80015fe:	f002 f871 	bl	80036e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000d04 	.word	0x20000d04

0800160c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001610:	4802      	ldr	r0, [pc, #8]	@ (800161c <USB_LP_IRQHandler+0x10>)
 8001612:	f003 f8df 	bl	80047d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200012d0 	.word	0x200012d0

08001620 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	@ (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	@ 0x38
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001676:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <MX_TIM3_Init+0xe4>)
 8001678:	4a2c      	ldr	r2, [pc, #176]	@ (800172c <MX_TIM3_Init+0xe8>)
 800167a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800167c:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <MX_TIM3_Init+0xe4>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <MX_TIM3_Init+0xe4>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <MX_TIM3_Init+0xe4>)
 800168a:	22d4      	movs	r2, #212	@ 0xd4
 800168c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <MX_TIM3_Init+0xe4>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <MX_TIM3_Init+0xe4>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800169a:	4823      	ldr	r0, [pc, #140]	@ (8001728 <MX_TIM3_Init+0xe4>)
 800169c:	f005 fc72 	bl	8006f84 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016a6:	f7ff fc5e 	bl	8000f66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b4:	4619      	mov	r1, r3
 80016b6:	481c      	ldr	r0, [pc, #112]	@ (8001728 <MX_TIM3_Init+0xe4>)
 80016b8:	f006 f940 	bl	800793c <HAL_TIM_ConfigClockSource>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016c2:	f7ff fc50 	bl	8000f66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016c6:	4818      	ldr	r0, [pc, #96]	@ (8001728 <MX_TIM3_Init+0xe4>)
 80016c8:	f005 fcb3 	bl	8007032 <HAL_TIM_PWM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016d2:	f7ff fc48 	bl	8000f66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4810      	ldr	r0, [pc, #64]	@ (8001728 <MX_TIM3_Init+0xe4>)
 80016e6:	f006 ff5d 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016f0:	f7ff fc39 	bl	8000f66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f4:	2360      	movs	r3, #96	@ 0x60
 80016f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4807      	ldr	r0, [pc, #28]	@ (8001728 <MX_TIM3_Init+0xe4>)
 800170c:	f006 f802 	bl	8007714 <HAL_TIM_PWM_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001716:	f7ff fc26 	bl	8000f66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800171a:	4803      	ldr	r0, [pc, #12]	@ (8001728 <MX_TIM3_Init+0xe4>)
 800171c:	f000 f854 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 8001720:	bf00      	nop
 8001722:	3738      	adds	r7, #56	@ 0x38
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000cb8 	.word	0x20000cb8
 800172c:	40000400 	.word	0x40000400

08001730 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1e      	ldr	r2, [pc, #120]	@ (80017b8 <HAL_TIM_Base_MspInit+0x88>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d136      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001742:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <HAL_TIM_Base_MspInit+0x8c>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_TIM_Base_MspInit+0x8c>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6593      	str	r3, [r2, #88]	@ 0x58
 800174e:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_TIM_Base_MspInit+0x8c>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel3;
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 800175c:	4a19      	ldr	r2, [pc, #100]	@ (80017c4 <HAL_TIM_Base_MspInit+0x94>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 8001762:	223d      	movs	r2, #61	@ 0x3d
 8001764:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 8001768:	2210      	movs	r2, #16
 800176a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 800177a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800177e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 8001782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001786:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001794:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 8001796:	f001 fe1b 	bl	80033d0 <HAL_DMA_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80017a0:	f7ff fbe1 	bl	8000f66 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <HAL_TIM_Base_MspInit+0x90>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	20000d04 	.word	0x20000d04
 80017c4:	40020030 	.word	0x40020030

080017c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a11      	ldr	r2, [pc, #68]	@ (800182c <HAL_TIM_MspPostInit+0x64>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d11b      	bne.n	8001822 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RGB_PWM_Pin;
 8001802:	2310      	movs	r3, #16
 8001804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001812:	2302      	movs	r3, #2
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_PWM_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <HAL_TIM_MspPostInit+0x6c>)
 800181e:	f002 f8b1 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40000400 	.word	0x40000400
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400

08001838 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800183c:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 800183e:	4a23      	ldr	r2, [pc, #140]	@ (80018cc <MX_USART2_UART_Init+0x94>)
 8001840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001880:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001882:	f006 ff11 	bl	80086a8 <HAL_UART_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800188c:	f7ff fb6b 	bl	8000f66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 8001894:	f007 fc7c 	bl	8009190 <HAL_UARTEx_SetTxFifoThreshold>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800189e:	f7ff fb62 	bl	8000f66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 80018a6:	f007 fcb1 	bl	800920c <HAL_UARTEx_SetRxFifoThreshold>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018b0:	f7ff fb59 	bl	8000f66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_USART2_UART_Init+0x90>)
 80018b6:	f007 fc32 	bl	800911e <HAL_UARTEx_DisableFifoMode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f7ff fb51 	bl	8000f66 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000d64 	.word	0x20000d64
 80018cc:	40004400 	.word	0x40004400

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09a      	sub	sp, #104	@ 0x68
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2244      	movs	r2, #68	@ 0x44
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00b fa3f 	bl	800cd74 <memset>
  if(uartHandle->Instance==USART2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001978 <HAL_UART_MspInit+0xa8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d136      	bne.n	800196e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4618      	mov	r0, r3
 800190e:	f005 f949 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001918:	f7ff fb25 	bl	8000f66 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_UART_MspInit+0xac>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	4a16      	ldr	r2, [pc, #88]	@ (800197c <HAL_UART_MspInit+0xac>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001926:	6593      	str	r3, [r2, #88]	@ 0x58
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <HAL_UART_MspInit+0xac>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_UART_MspInit+0xac>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	4a10      	ldr	r2, [pc, #64]	@ (800197c <HAL_UART_MspInit+0xac>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_UART_MspInit+0xac>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800194c:	230c      	movs	r3, #12
 800194e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195c:	2307      	movs	r3, #7
 800195e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f002 f80b 	bl	8003984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3768      	adds	r7, #104	@ 0x68
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004400 	.word	0x40004400
 800197c:	40021000 	.word	0x40021000

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001980:	480d      	ldr	r0, [pc, #52]	@ (80019b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001982:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001984:	f7ff fe4c 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <LoopForever+0x6>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	@ (80019c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <LoopForever+0xe>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	@ (80019cc <LoopForever+0x16>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f00b f9e9 	bl	800cd84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff fa6f 	bl	8000e94 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   r0, =_estack
 80019b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80019c4:	0800d0c8 	.word	0x0800d0c8
  ldr r2, =_sbss
 80019c8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80019cc:	200015c0 	.word	0x200015c0

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>

080019d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f001 fcb7 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f80e 	bl	8001a04 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e001      	b.n	80019f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f4:	f7ff fd98 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f8:	79fb      	ldrb	r3, [r7, #7]

}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_InitTick+0x68>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d022      	beq.n	8001a5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_InitTick+0x6c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <HAL_InitTick+0x68>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 fcc2 	bl	80033b6 <HAL_SYSTICK_Config>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10f      	bne.n	8001a58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	d809      	bhi.n	8001a52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295
 8001a46:	f001 fc8e 	bl	8003366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <HAL_InitTick+0x70>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e004      	b.n	8001a62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e001      	b.n	8001a62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	20000004 	.word	0x20000004
 8001a74:	20000008 	.word	0x20000008

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_IncTick+0x20>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a03      	ldr	r2, [pc, #12]	@ (8001a94 <HAL_IncTick+0x1c>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20000df8 	.word	0x20000df8
 8001a98:	2000000c 	.word	0x2000000c

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000df8 	.word	0x20000df8

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d004      	beq.n	8001ad8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_Delay+0x40>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad8:	bf00      	nop
 8001ada:	f7ff ffdf 	bl	8001a9c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8f7      	bhi.n	8001ada <HAL_Delay+0x26>
  {
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3360      	adds	r3, #96	@ 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <LL_ADC_SetOffset+0x44>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	03fff000 	.word	0x03fff000

08001ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3360      	adds	r3, #96	@ 0x60
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3360      	adds	r3, #96	@ 0x60
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b087      	sub	sp, #28
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3360      	adds	r3, #96	@ 0x60
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3360      	adds	r3, #96	@ 0x60
 8001c50:	461a      	mov	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	615a      	str	r2, [r3, #20]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b087      	sub	sp, #28
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3330      	adds	r3, #48	@ 0x30
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	4413      	add	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	211f      	movs	r1, #31
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	f003 011f 	and.w	r1, r3, #31
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3314      	adds	r3, #20
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0e5b      	lsrs	r3, r3, #25
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	0d1b      	lsrs	r3, r3, #20
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2107      	movs	r1, #7
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	0d1b      	lsrs	r3, r3, #20
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d64:	bf00      	nop
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0318 	and.w	r3, r3, #24
 8001d92:	4908      	ldr	r1, [pc, #32]	@ (8001db4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d94:	40d9      	lsrs	r1, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	400b      	ands	r3, r1
 8001d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	0007ffff 	.word	0x0007ffff

08001db8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6093      	str	r3, [r2, #8]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e0c:	d101      	bne.n	8001e12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e5c:	d101      	bne.n	8001e62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ea8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eac:	f043 0202 	orr.w	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <LL_ADC_IsEnabled+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_ADC_IsEnabled+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsDisableOngoing+0x18>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsDisableOngoing+0x1a>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d101      	bne.n	8001f4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d101      	bne.n	8001f72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e167      	b.n	800226a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe fbc9 	bl	8000740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff19 	bl	8001df8 <LL_ADC_IsDeepPowerDownEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff feff 	bl	8001dd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff34 	bl	8001e48 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d115      	bne.n	8002012 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff18 	bl	8001e20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8002274 <HAL_ADC_Init+0x2f4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	4aa0      	ldr	r2, [pc, #640]	@ (8002278 <HAL_ADC_Init+0x2f8>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	3301      	adds	r3, #1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002004:	e002      	b.n	800200c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3b01      	subs	r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff16 	bl	8001e48 <LL_ADC_IsInternalRegulatorEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff76 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 8002048:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 8100 	bne.w	8002258 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 80fc 	bne.w	8002258 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002068:	f043 0202 	orr.w	r2, r3, #2
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff23 	bl	8001ec0 <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d111      	bne.n	80020a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002080:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002084:	f7ff ff1c 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002088:	4604      	mov	r4, r0
 800208a:	487c      	ldr	r0, [pc, #496]	@ (800227c <HAL_ADC_Init+0x2fc>)
 800208c:	f7ff ff18 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002090:	4603      	mov	r3, r0
 8002092:	4323      	orrs	r3, r4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4619      	mov	r1, r3
 800209e:	4878      	ldr	r0, [pc, #480]	@ (8002280 <HAL_ADC_Init+0x300>)
 80020a0:	f7ff fd2a 	bl	8001af8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7f5b      	ldrb	r3, [r3, #29]
 80020a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	045b      	lsls	r3, r3, #17
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	4b60      	ldr	r3, [pc, #384]	@ (8002284 <HAL_ADC_Init+0x304>)
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	430b      	orrs	r3, r1
 800210e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff15 	bl	8001f5a <LL_ADC_INJ_IsConversionOngoing>
 8002130:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d16d      	bne.n	8002214 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d16a      	bne.n	8002214 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002142:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800214a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800215a:	f023 0302 	bic.w	r3, r3, #2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	430b      	orrs	r3, r1
 8002166:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d017      	beq.n	80021a0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800217e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002188:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800218c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6911      	ldr	r1, [r2, #16]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800219e:	e013      	b.n	80021c8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d118      	bne.n	8002204 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021f4:	430a      	orrs	r2, r1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	e007      	b.n	8002214 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10c      	bne.n	8002236 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f023 010f 	bic.w	r1, r3, #15
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	1e5a      	subs	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
 8002234:	e007      	b.n	8002246 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 020f 	bic.w	r2, r2, #15
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002256:	e007      	b.n	8002268 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	f043 0210 	orr.w	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002268:	7ffb      	ldrb	r3, [r7, #31]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	@ 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	20000004 	.word	0x20000004
 8002278:	053e2d63 	.word	0x053e2d63
 800227c:	50000100 	.word	0x50000100
 8002280:	50000300 	.word	0x50000300
 8002284:	fff04007 	.word	0xfff04007

08002288 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002294:	4851      	ldr	r0, [pc, #324]	@ (80023dc <HAL_ADC_Start_DMA+0x154>)
 8002296:	f7ff fd8f 	bl	8001db8 <LL_ADC_GetMultimode>
 800229a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fe47 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 808f 	bne.w	80023cc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_Start_DMA+0x34>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e08a      	b.n	80023d2 <HAL_ADC_Start_DMA+0x14a>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d002      	beq.n	80022d6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b09      	cmp	r3, #9
 80022d4:	d173      	bne.n	80023be <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fc98 	bl	8002c0c <ADC_Enable>
 80022dc:	4603      	mov	r3, r0
 80022de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d166      	bne.n	80023b4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a38      	ldr	r2, [pc, #224]	@ (80023e0 <HAL_ADC_Start_DMA+0x158>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d002      	beq.n	800230a <HAL_ADC_Start_DMA+0x82>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	e001      	b.n	800230e <HAL_ADC_Start_DMA+0x86>
 800230a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	4293      	cmp	r3, r2
 8002314:	d002      	beq.n	800231c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002320:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f023 0206 	bic.w	r2, r3, #6
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002340:	e002      	b.n	8002348 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	4a25      	ldr	r2, [pc, #148]	@ (80023e4 <HAL_ADC_Start_DMA+0x15c>)
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002354:	4a24      	ldr	r2, [pc, #144]	@ (80023e8 <HAL_ADC_Start_DMA+0x160>)
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <HAL_ADC_Start_DMA+0x164>)
 800235e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	221c      	movs	r2, #28
 8002366:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0210 	orr.w	r2, r2, #16
 800237e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3340      	adds	r3, #64	@ 0x40
 800239a:	4619      	mov	r1, r3
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f001 f8be 	bl	8003520 <HAL_DMA_Start_IT>
 80023a4:	4603      	mov	r3, r0
 80023a6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fdad 	bl	8001f0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023b2:	e00d      	b.n	80023d0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80023bc:	e008      	b.n	80023d0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80023ca:	e001      	b.n	80023d0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	50000300 	.word	0x50000300
 80023e0:	50000100 	.word	0x50000100
 80023e4:	08002dd7 	.word	0x08002dd7
 80023e8:	08002eaf 	.word	0x08002eaf
 80023ec:	08002ecb 	.word	0x08002ecb

080023f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0b6      	sub	sp, #216	@ 0xd8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x22>
 800244a:	2302      	movs	r3, #2
 800244c:	e3c8      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x7b4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fd6a 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 83ad 	bne.w	8002bc2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	f7ff fc24 	bl	8001cc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fd58 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 8002484:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd64 	bl	8001f5a <LL_ADC_INJ_IsConversionOngoing>
 8002492:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 81d9 	bne.w	8002852 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 81d4 	bne.w	8002852 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024b2:	d10f      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	4619      	mov	r1, r3
 80024c0:	f7ff fc2b 	bl	8001d1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fbd2 	bl	8001c76 <LL_ADC_SetSamplingTimeCommonConfig>
 80024d2:	e00e      	b.n	80024f2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f7ff fc1a 	bl	8001d1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fbc2 	bl	8001c76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d022      	beq.n	800255a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6919      	ldr	r1, [r3, #16]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002524:	f7ff fb1c 	bl	8001b60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6919      	ldr	r1, [r3, #16]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff fb68 	bl	8001c0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x124>
 800254a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800254e:	e000      	b.n	8002552 <HAL_ADC_ConfigChannel+0x126>
 8002550:	2300      	movs	r3, #0
 8002552:	461a      	mov	r2, r3
 8002554:	f7ff fb74 	bl	8001c40 <LL_ADC_SetOffsetSaturation>
 8002558:	e17b      	b.n	8002852 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fb21 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x15a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fb16 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	0e9b      	lsrs	r3, r3, #26
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	e01e      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x198>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb0b 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e004      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80025b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1b0>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	e018      	b.n	800260e <HAL_ADC_ConfigChannel+0x1e2>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80025f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80025f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e004      	b.n	800260e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800260e:	429a      	cmp	r2, r3
 8002610:	d106      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fada 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fabe 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <HAL_ADC_ConfigChannel+0x220>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fab3 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	f003 021f 	and.w	r2, r3, #31
 800264a:	e01e      	b.n	800268a <HAL_ADC_ConfigChannel+0x25e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff faa8 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800266a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800266e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e004      	b.n	8002688 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800267e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x276>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0e9b      	lsrs	r3, r3, #26
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	e018      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x2a8>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80026b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80026be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e004      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80026ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	2101      	movs	r1, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fa77 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fa5b 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x2e6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fa50 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	e01e      	b.n	8002750 <HAL_ADC_ConfigChannel+0x324>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fa45 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002730:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002738:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e004      	b.n	800274e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x33c>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	e016      	b.n	8002796 <HAL_ADC_ConfigChannel+0x36a>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800277a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800277c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e004      	b.n	8002796 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800278c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002796:	429a      	cmp	r2, r3
 8002798:	d106      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fa16 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2103      	movs	r1, #3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f9fa 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x3a8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2103      	movs	r1, #3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff f9ef 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	e017      	b.n	8002804 <HAL_ADC_ConfigChannel+0x3d8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2103      	movs	r1, #3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f9e4 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80027f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80027fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_ConfigChannel+0x3f0>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	e011      	b.n	8002840 <HAL_ADC_ConfigChannel+0x414>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800282a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800282c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800282e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002840:	429a      	cmp	r2, r3
 8002842:	d106      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	2103      	movs	r1, #3
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff f9c1 	bl	8001bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fb32 	bl	8001ec0 <LL_ADC_IsEnabled>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 8140 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	461a      	mov	r2, r3
 8002872:	f7ff fa7d 	bl	8001d70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a8f      	ldr	r2, [pc, #572]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x68c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	f040 8131 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x47e>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0e9b      	lsrs	r3, r3, #26
 8002898:	3301      	adds	r3, #1
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	2b09      	cmp	r3, #9
 80028a0:	bf94      	ite	ls
 80028a2:	2301      	movls	r3, #1
 80028a4:	2300      	movhi	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	e019      	b.n	80028de <HAL_ADC_ConfigChannel+0x4b2>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80028b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ba:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80028bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e003      	b.n	80028ce <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80028c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	bf94      	ite	ls
 80028d8:	2301      	movls	r3, #1
 80028da:	2300      	movhi	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d079      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x4d2>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	3301      	adds	r3, #1
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028fc:	e015      	b.n	800292a <HAL_ADC_ConfigChannel+0x4fe>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800290c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800290e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e003      	b.n	8002922 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800291a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	069b      	lsls	r3, r3, #26
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_ADC_ConfigChannel+0x51e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	e017      	b.n	800297a <HAL_ADC_ConfigChannel+0x54e>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800295c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	ea42 0103 	orr.w	r1, r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x574>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	3301      	adds	r3, #1
 8002992:	f003 021f 	and.w	r2, r3, #31
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	051b      	lsls	r3, r3, #20
 800299e:	e018      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x5a6>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80029b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80029bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 021f 	and.w	r2, r3, #31
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d2:	430b      	orrs	r3, r1
 80029d4:	e081      	b.n	8002ada <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x5c6>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0e9b      	lsrs	r3, r3, #26
 80029e8:	3301      	adds	r3, #1
 80029ea:	069b      	lsls	r3, r3, #26
 80029ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029f0:	e015      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x5f2>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e003      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	069b      	lsls	r3, r3, #26
 8002a1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x612>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	e017      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x642>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	ea42 0103 	orr.w	r1, r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10d      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x66e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	0e9b      	lsrs	r3, r3, #26
 8002a84:	3301      	adds	r3, #1
 8002a86:	f003 021f 	and.w	r2, r3, #31
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b1e      	subs	r3, #30
 8002a92:	051b      	lsls	r3, r3, #20
 8002a94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	e01e      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x6ac>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	613b      	str	r3, [r7, #16]
  return result;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e006      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x698>
 8002ab6:	bf00      	nop
 8002ab8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b1e      	subs	r3, #30
 8002ad2:	051b      	lsls	r3, r3, #20
 8002ad4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7ff f91b 	bl	8001d1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8002be8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d071      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002af0:	483e      	ldr	r0, [pc, #248]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002af2:	f7ff f827 	bl	8001b44 <LL_ADC_GetCommonPathInternalCh>
 8002af6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a3c      	ldr	r2, [pc, #240]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0x6e2>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d127      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d121      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b22:	d157      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	482f      	ldr	r0, [pc, #188]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002b30:	f7fe fff5 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b34:	4b30      	ldr	r3, [pc, #192]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	4a30      	ldr	r2, [pc, #192]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7d0>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b4e:	e002      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5c:	e03a      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a27      	ldr	r2, [pc, #156]	@ (8002c00 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d113      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b86:	4619      	mov	r1, r3
 8002b88:	4818      	ldr	r0, [pc, #96]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002b8a:	f7fe ffc8 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b8e:	e021      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d11c      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d011      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480c      	ldr	r0, [pc, #48]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002bbc:	f7fe ffaf 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
 8002bc0:	e008      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bdc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	37d8      	adds	r7, #216	@ 0xd8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	80080000 	.word	0x80080000
 8002bec:	50000300 	.word	0x50000300
 8002bf0:	c3210000 	.word	0xc3210000
 8002bf4:	90c00010 	.word	0x90c00010
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	053e2d63 	.word	0x053e2d63
 8002c00:	c7520000 	.word	0xc7520000
 8002c04:	50000100 	.word	0x50000100
 8002c08:	cb840000 	.word	0xcb840000

08002c0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f94f 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d169      	bne.n	8002cfc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <ADC_Enable+0xfc>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e055      	b.n	8002cfe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff f90a 	bl	8001e70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c5c:	482b      	ldr	r0, [pc, #172]	@ (8002d0c <ADC_Enable+0x100>)
 8002c5e:	f7fe ff71 	bl	8001b44 <LL_ADC_GetCommonPathInternalCh>
 8002c62:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c6c:	4b28      	ldr	r3, [pc, #160]	@ (8002d10 <ADC_Enable+0x104>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	4a28      	ldr	r2, [pc, #160]	@ (8002d14 <ADC_Enable+0x108>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c86:	e002      	b.n	8002c8e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f9      	bne.n	8002c88 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c94:	f7fe ff02 	bl	8001a9c <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c9a:	e028      	b.n	8002cee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff f90d 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f8dd 	bl	8001e70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cb6:	f7fe fef1 	bl	8001a9c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d914      	bls.n	8002cee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d00d      	beq.n	8002cee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	f043 0210 	orr.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e007      	b.n	8002cfe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d1cf      	bne.n	8002c9c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	8000003f 	.word	0x8000003f
 8002d0c:	50000300 	.word	0x50000300
 8002d10:	20000004 	.word	0x20000004
 8002d14:	053e2d63 	.word	0x053e2d63

08002d18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f8de 	bl	8001ee6 <LL_ADC_IsDisableOngoing>
 8002d2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f8c5 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d047      	beq.n	8002dcc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d144      	bne.n	8002dcc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030d 	and.w	r3, r3, #13
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10c      	bne.n	8002d6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f89f 	bl	8001e98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d62:	f7fe fe9b 	bl	8001a9c <HAL_GetTick>
 8002d66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d68:	e029      	b.n	8002dbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e023      	b.n	8002dce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d86:	f7fe fe89 	bl	8001a9c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d914      	bls.n	8002dbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f043 0210 	orr.w	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1dc      	bne.n	8002d86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d14b      	bne.n	8002e88 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d021      	beq.n	8002e4e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe ff44 	bl	8001c9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d032      	beq.n	8002e80 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d12b      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11f      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e4c:	e018      	b.n	8002e80 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d111      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fab5 	bl	80023f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e86:	e00e      	b.n	8002ea6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fabf 	bl	8002418 <HAL_ADC_ErrorCallback>
}
 8002e9a:	e004      	b.n	8002ea6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff faa1 	bl	8002404 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff fa91 	bl	8002418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <LL_ADC_IsEnabled>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <LL_ADC_IsEnabled+0x18>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_ADC_IsEnabled+0x1a>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_ADC_StartCalibration>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002f36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f6a:	d101      	bne.n	8002f70 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d101      	bne.n	8002f96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e04d      	b.n	800305c <HAL_ADCEx_Calibration_Start+0xb8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fea5 	bl	8002d18 <ADC_Disable>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d136      	bne.n	8003046 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	f043 0202 	orr.w	r2, r3, #2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff96 	bl	8002f24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ff8:	e014      	b.n	8003024 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4a18      	ldr	r2, [pc, #96]	@ (8003064 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d90d      	bls.n	8003024 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	f023 0312 	bic.w	r3, r3, #18
 8003010:	f043 0210 	orr.w	r2, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e01b      	b.n	800305c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff94 	bl	8002f56 <LL_ADC_IsCalibrationOnGoing>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e2      	bne.n	8002ffa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	f023 0303 	bic.w	r3, r3, #3
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003044:	e005      	b.n	8003052 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	0004de01 	.word	0x0004de01

08003068 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b0a1      	sub	sp, #132	@ 0x84
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003082:	2302      	movs	r3, #2
 8003084:	e08b      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800308e:	2300      	movs	r3, #0
 8003090:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003092:	2300      	movs	r3, #0
 8003094:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800309e:	d102      	bne.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030a0:	4b41      	ldr	r3, [pc, #260]	@ (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	e001      	b.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e06a      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff57 	bl	8002f7e <LL_ADC_REG_IsConversionOngoing>
 80030d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff51 	bl	8002f7e <LL_ADC_REG_IsConversionOngoing>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d14c      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d149      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030e8:	4b30      	ldr	r3, [pc, #192]	@ (80031ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030ea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d028      	beq.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003106:	035b      	lsls	r3, r3, #13
 8003108:	430b      	orrs	r3, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003110:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003114:	f7ff fef3 	bl	8002efe <LL_ADC_IsEnabled>
 8003118:	4604      	mov	r4, r0
 800311a:	4823      	ldr	r0, [pc, #140]	@ (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800311c:	f7ff feef 	bl	8002efe <LL_ADC_IsEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	4323      	orrs	r3, r4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d133      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	6811      	ldr	r1, [r2, #0]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	6892      	ldr	r2, [r2, #8]
 800313c:	430a      	orrs	r2, r1
 800313e:	431a      	orrs	r2, r3
 8003140:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003142:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003144:	e024      	b.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800314e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003150:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003152:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003156:	f7ff fed2 	bl	8002efe <LL_ADC_IsEnabled>
 800315a:	4604      	mov	r4, r0
 800315c:	4812      	ldr	r0, [pc, #72]	@ (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800315e:	f7ff fece 	bl	8002efe <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	4323      	orrs	r3, r4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d112      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800316a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003172:	f023 030f 	bic.w	r3, r3, #15
 8003176:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003178:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800317a:	e009      	b.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800318e:	e000      	b.n	8003192 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003190:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800319a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3784      	adds	r7, #132	@ 0x84
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	50000100 	.word	0x50000100
 80031ac:	50000300 	.word	0x50000300

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db0b      	blt.n	800323e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4907      	ldr	r1, [pc, #28]	@ (800324c <__NVIC_EnableIRQ+0x38>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2001      	movs	r0, #1
 8003236:	fa00 f202 	lsl.w	r2, r0, r2
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	@ (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	@ (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	@ 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	@ (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7ff ff8e 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	@ (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff29 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003374:	f7ff ff40 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 8003378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7ff ff90 	bl	80032a4 <NVIC_EncodePriority>
 8003384:	4602      	mov	r2, r0
 8003386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff5f 	bl	8003250 <__NVIC_SetPriority>
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff33 	bl	8003214 <__NVIC_EnableIRQ>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ffa4 	bl	800330c <SysTick_Config>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e08d      	b.n	80034fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b47      	ldr	r3, [pc, #284]	@ (8003508 <HAL_DMA_Init+0x138>)
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d80f      	bhi.n	800340e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b45      	ldr	r3, [pc, #276]	@ (800350c <HAL_DMA_Init+0x13c>)
 80033f6:	4413      	add	r3, r2
 80033f8:	4a45      	ldr	r2, [pc, #276]	@ (8003510 <HAL_DMA_Init+0x140>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	009a      	lsls	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a42      	ldr	r2, [pc, #264]	@ (8003514 <HAL_DMA_Init+0x144>)
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
 800340c:	e00e      	b.n	800342c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b40      	ldr	r3, [pc, #256]	@ (8003518 <HAL_DMA_Init+0x148>)
 8003416:	4413      	add	r3, r2
 8003418:	4a3d      	ldr	r2, [pc, #244]	@ (8003510 <HAL_DMA_Init+0x140>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a3c      	ldr	r2, [pc, #240]	@ (800351c <HAL_DMA_Init+0x14c>)
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa1e 	bl	80038c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800348c:	d102      	bne.n	8003494 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_DMA_Init+0x104>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d80c      	bhi.n	80034d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa3e 	bl	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e008      	b.n	80034e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40020407 	.word	0x40020407
 800350c:	bffdfff8 	.word	0xbffdfff8
 8003510:	cccccccd 	.word	0xcccccccd
 8003514:	40020000 	.word	0x40020000
 8003518:	bffdfbf8 	.word	0xbffdfbf8
 800351c:	40020400 	.word	0x40020400

08003520 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_DMA_Start_IT+0x20>
 800353c:	2302      	movs	r3, #2
 800353e:	e066      	b.n	800360e <HAL_DMA_Start_IT+0xee>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d155      	bne.n	8003600 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f962 	bl	8003842 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 020e 	orr.w	r2, r2, #14
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e00f      	b.n	80035b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0204 	bic.w	r2, r2, #4
 80035a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 020a 	orr.w	r2, r2, #10
 80035b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e005      	b.n	800360c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003608:	2302      	movs	r3, #2
 800360a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d00d      	beq.n	800364a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
 8003648:	e047      	b.n	80036da <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020e 	bic.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003678:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f003 021f 	and.w	r2, r3, #31
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003696:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
    }
  }
  return status;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2204      	movs	r2, #4
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d026      	beq.n	800375e <HAL_DMA_IRQHandler+0x7a>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d021      	beq.n	800375e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	f003 021f 	and.w	r2, r3, #31
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2104      	movs	r1, #4
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	2b00      	cmp	r3, #0
 8003752:	d071      	beq.n	8003838 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800375c:	e06c      	b.n	8003838 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2202      	movs	r2, #2
 8003768:	409a      	lsls	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02e      	beq.n	80037d0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d029      	beq.n	80037d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 020a 	bic.w	r2, r2, #10
 8003798:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f003 021f 	and.w	r2, r3, #31
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2102      	movs	r1, #2
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d038      	beq.n	8003838 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037ce:	e033      	b.n	8003838 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2208      	movs	r2, #8
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02a      	beq.n	800383a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d025      	beq.n	800383a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 020e 	bic.w	r2, r2, #14
 80037fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f003 021f 	and.w	r2, r3, #31
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003838:	bf00      	nop
 800383a:	bf00      	nop
}
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003858:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800386a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d108      	bne.n	80038a2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038a0:	e007      	b.n	80038b2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	60da      	str	r2, [r3, #12]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b16      	ldr	r3, [pc, #88]	@ (8003928 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d802      	bhi.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038d4:	4b15      	ldr	r3, [pc, #84]	@ (800392c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e001      	b.n	80038de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3b08      	subs	r3, #8
 80038ea:	4a12      	ldr	r2, [pc, #72]	@ (8003934 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	009a      	lsls	r2, r3, #2
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800390a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2201      	movs	r2, #1
 8003914:	409a      	lsls	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40020407 	.word	0x40020407
 800392c:	40020800 	.word	0x40020800
 8003930:	40020820 	.word	0x40020820
 8003934:	cccccccd 	.word	0xcccccccd
 8003938:	40020880 	.word	0x40020880

0800393c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800395e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3b01      	subs	r3, #1
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	1000823f 	.word	0x1000823f
 8003980:	40020940 	.word	0x40020940

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003992:	e15a      	b.n	8003c4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	4013      	ands	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 814c 	beq.w	8003c44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d005      	beq.n	80039c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d130      	bne.n	8003a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2203      	movs	r2, #3
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039fa:	2201      	movs	r2, #1
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 0201 	and.w	r2, r3, #1
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d017      	beq.n	8003a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d123      	bne.n	8003ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	08da      	lsrs	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3208      	adds	r2, #8
 8003a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	08da      	lsrs	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3208      	adds	r2, #8
 8003ab0:	6939      	ldr	r1, [r7, #16]
 8003ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0203 	and.w	r2, r3, #3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80a6 	beq.w	8003c44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af8:	4b5b      	ldr	r3, [pc, #364]	@ (8003c68 <HAL_GPIO_Init+0x2e4>)
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	4a5a      	ldr	r2, [pc, #360]	@ (8003c68 <HAL_GPIO_Init+0x2e4>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b04:	4b58      	ldr	r3, [pc, #352]	@ (8003c68 <HAL_GPIO_Init+0x2e4>)
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b10:	4a56      	ldr	r2, [pc, #344]	@ (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	3302      	adds	r3, #2
 8003b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	220f      	movs	r2, #15
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b3a:	d01f      	beq.n	8003b7c <HAL_GPIO_Init+0x1f8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8003c70 <HAL_GPIO_Init+0x2ec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d019      	beq.n	8003b78 <HAL_GPIO_Init+0x1f4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a4b      	ldr	r2, [pc, #300]	@ (8003c74 <HAL_GPIO_Init+0x2f0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_GPIO_Init+0x1f0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c78 <HAL_GPIO_Init+0x2f4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00d      	beq.n	8003b70 <HAL_GPIO_Init+0x1ec>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a49      	ldr	r2, [pc, #292]	@ (8003c7c <HAL_GPIO_Init+0x2f8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <HAL_GPIO_Init+0x1e8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a48      	ldr	r2, [pc, #288]	@ (8003c80 <HAL_GPIO_Init+0x2fc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_GPIO_Init+0x1e4>
 8003b64:	2305      	movs	r3, #5
 8003b66:	e00a      	b.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b68:	2306      	movs	r3, #6
 8003b6a:	e008      	b.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	e006      	b.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b70:	2303      	movs	r3, #3
 8003b72:	e004      	b.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e002      	b.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_GPIO_Init+0x1fa>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	f002 0203 	and.w	r2, r2, #3
 8003b84:	0092      	lsls	r2, r2, #2
 8003b86:	4093      	lsls	r3, r2
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b8e:	4937      	ldr	r1, [pc, #220]	@ (8003c6c <HAL_GPIO_Init+0x2e8>)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	3302      	adds	r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9c:	4b39      	ldr	r3, [pc, #228]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bc0:	4a30      	ldr	r2, [pc, #192]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bea:	4a26      	ldr	r2, [pc, #152]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bf0:	4b24      	ldr	r3, [pc, #144]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c14:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c3e:	4a11      	ldr	r2, [pc, #68]	@ (8003c84 <HAL_GPIO_Init+0x300>)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3301      	adds	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f ae9d 	bne.w	8003994 <HAL_GPIO_Init+0x10>
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	48000800 	.word	0x48000800
 8003c78:	48000c00 	.word	0x48000c00
 8003c7c:	48001000 	.word	0x48001000
 8003c80:	48001400 	.word	0x48001400
 8003c84:	40010400 	.word	0x40010400

08003c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e001      	b.n	8003caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc8:	787b      	ldrb	r3, [r7, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e08d      	b.n	8003e16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fc ffb4 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	@ 0x24
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d107      	bne.n	8003d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	e006      	b.n	8003d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d108      	bne.n	8003d8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	e007      	b.n	8003d9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003da8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	817b      	strh	r3, [r7, #10]
 8003e30:	4613      	mov	r3, r2
 8003e32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 80fd 	bne.w	800403c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_I2C_Master_Transmit+0x30>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e0f6      	b.n	800403e <HAL_I2C_Master_Transmit+0x21e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e58:	f7fd fe20 	bl	8001a9c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2319      	movs	r3, #25
 8003e64:	2201      	movs	r2, #1
 8003e66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f914 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0e1      	b.n	800403e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2221      	movs	r2, #33	@ 0x21
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2210      	movs	r2, #16
 8003e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2bff      	cmp	r3, #255	@ 0xff
 8003eaa:	d906      	bls.n	8003eba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	22ff      	movs	r2, #255	@ 0xff
 8003eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e007      	b.n	8003eca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ec4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ec8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d024      	beq.n	8003f1c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004048 <HAL_I2C_Master_Transmit+0x228>)
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fa83 	bl	8004420 <I2C_TransferConfig>
 8003f1a:	e066      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	8979      	ldrh	r1, [r7, #10]
 8003f24:	4b48      	ldr	r3, [pc, #288]	@ (8004048 <HAL_I2C_Master_Transmit+0x228>)
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa78 	bl	8004420 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f30:	e05b      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f907 	bl	800414a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07b      	b.n	800403e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d034      	beq.n	8003fea <HAL_I2C_Master_Transmit+0x1ca>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d130      	bne.n	8003fea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2180      	movs	r1, #128	@ 0x80
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f880 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e04d      	b.n	800403e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2bff      	cmp	r3, #255	@ 0xff
 8003faa:	d90e      	bls.n	8003fca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22ff      	movs	r2, #255	@ 0xff
 8003fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	8979      	ldrh	r1, [r7, #10]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa2c 	bl	8004420 <I2C_TransferConfig>
 8003fc8:	e00f      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fa1b 	bl	8004420 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d19e      	bne.n	8003f32 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	6a39      	ldr	r1, [r7, #32]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f8ed 	bl	80041d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e01a      	b.n	800403e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2220      	movs	r2, #32
 800400e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <HAL_I2C_Master_Transmit+0x22c>)
 800401c:	400b      	ands	r3, r1
 800401e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	80002000 	.word	0x80002000
 800404c:	fe00e800 	.word	0xfe00e800

08004050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d103      	bne.n	800406e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d007      	beq.n	800408c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	619a      	str	r2, [r3, #24]
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a8:	e03b      	b.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f8d6 	bl	8004260 <I2C_IsErrorOccurred>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e041      	b.n	8004142 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d02d      	beq.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fd fce9 	bl	8001a9c <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d122      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4013      	ands	r3, r2
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d113      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	429a      	cmp	r2, r3
 800413e:	d0b4      	beq.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004156:	e033      	b.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f87f 	bl	8004260 <I2C_IsErrorOccurred>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e031      	b.n	80041d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d025      	beq.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fd fc92 	bl	8001a9c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11a      	bne.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b02      	cmp	r3, #2
 8004196:	d013      	beq.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e007      	b.n	80041d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d1c4      	bne.n	8004158 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041e4:	e02f      	b.n	8004246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f838 	bl	8004260 <I2C_IsErrorOccurred>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e02d      	b.n	8004256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fd fc4f 	bl	8001a9c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11a      	bne.n	8004246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b20      	cmp	r3, #32
 800421c:	d013      	beq.n	8004246 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e007      	b.n	8004256 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b20      	cmp	r3, #32
 8004252:	d1c8      	bne.n	80041e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	@ 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d068      	beq.n	800435e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2210      	movs	r2, #16
 8004292:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004294:	e049      	b.n	800432a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d045      	beq.n	800432a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fd fbfd 	bl	8001a9c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_IsErrorOccurred+0x54>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d13a      	bne.n	800432a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d6:	d121      	bne.n	800431c <I2C_IsErrorOccurred+0xbc>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042de:	d01d      	beq.n	800431c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d01a      	beq.n	800431c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042f6:	f7fd fbd1 	bl	8001a9c <HAL_GetTick>
 80042fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042fc:	e00e      	b.n	800431c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042fe:	f7fd fbcd 	bl	8001a9c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b19      	cmp	r3, #25
 800430a:	d907      	bls.n	800431c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	f043 0320 	orr.w	r3, r3, #32
 8004312:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800431a:	e006      	b.n	800432a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d1e9      	bne.n	80042fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b20      	cmp	r3, #32
 8004336:	d003      	beq.n	8004340 <I2C_IsErrorOccurred+0xe0>
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0aa      	beq.n	8004296 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2220      	movs	r2, #32
 800434e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00b      	beq.n	8004388 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004380:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f043 0302 	orr.w	r3, r3, #2
 80043ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80043cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01c      	beq.n	800440e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fe3b 	bl	8004050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <I2C_IsErrorOccurred+0x1bc>)
 80043e6:	400b      	ands	r3, r1
 80043e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800440e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004412:	4618      	mov	r0, r3
 8004414:	3728      	adds	r7, #40	@ 0x28
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	fe00e800 	.word	0xfe00e800

08004420 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	4613      	mov	r3, r2
 8004430:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004438:	7a7b      	ldrb	r3, [r7, #9]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004440:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	4313      	orrs	r3, r2
 800444a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800444e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	0d5b      	lsrs	r3, r3, #21
 800445a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800445e:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <I2C_TransferConfig+0x60>)
 8004460:	430b      	orrs	r3, r1
 8004462:	43db      	mvns	r3, r3
 8004464:	ea02 0103 	and.w	r1, r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	03ff63ff 	.word	0x03ff63ff

08004484 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	d138      	bne.n	800450c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e032      	b.n	800450e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2224      	movs	r2, #36	@ 0x24
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6819      	ldr	r1, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b20      	cmp	r3, #32
 800452e:	d139      	bne.n	80045a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800453a:	2302      	movs	r3, #2
 800453c:	e033      	b.n	80045a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2224      	movs	r2, #36	@ 0x24
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800456c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045bc:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80045be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c0:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80045c8:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80045ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80045d4:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4905      	ldr	r1, [pc, #20]	@ (80045f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40010000 	.word	0x40010000

080045f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e0c0      	b.n	8004788 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f008 f900 	bl	800c820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2203      	movs	r2, #3
 8004624:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f004 fe90 	bl	8009352 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e03e      	b.n	80046b6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	440b      	add	r3, r1
 8004646:	3311      	adds	r3, #17
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	440b      	add	r3, r1
 800465a:	3310      	adds	r3, #16
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	3313      	adds	r3, #19
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	3320      	adds	r3, #32
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	3324      	adds	r3, #36	@ 0x24
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	3301      	adds	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	791b      	ldrb	r3, [r3, #4]
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d3bb      	bcc.n	8004638 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e044      	b.n	8004750 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	440b      	add	r3, r1
 80046ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	440b      	add	r3, r1
 8004700:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	440b      	add	r3, r1
 8004716:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	440b      	add	r3, r1
 800472c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	440b      	add	r3, r1
 8004742:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	3301      	adds	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	791b      	ldrb	r3, [r3, #4]
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	429a      	cmp	r2, r3
 8004758:	d3b5      	bcc.n	80046c6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004766:	f004 fe0f 	bl	8009388 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7a9b      	ldrb	r3, [r3, #10]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fbf6 	bl	8005f72 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_PCD_Start+0x16>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e012      	b.n	80047cc <HAL_PCD_Start+0x3c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f004 fdb6 	bl	8009324 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f006 fb93 	bl	800aee8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f006 fb98 	bl	800af16 <USB_ReadInterrupts>
 80047e6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 faee 	bl	8004dd4 <PCD_EP_ISR_Handler>

    return;
 80047f8:	e110      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004816:	b292      	uxth	r2, r2
 8004818:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f008 f890 	bl	800c942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004822:	2100      	movs	r1, #0
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f8fc 	bl	8004a22 <HAL_PCD_SetAddress>

    return;
 800482a:	e0f7      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00c      	beq.n	8004850 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004848:	b292      	uxth	r2, r2
 800484a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800484e:	e0e5      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800486c:	b292      	uxth	r2, r2
 800486e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004872:	e0d3      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d034      	beq.n	80048e8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0204 	bic.w	r2, r2, #4
 8004890:	b292      	uxth	r2, r2
 8004892:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0208 	bic.w	r2, r2, #8
 80048a8:	b292      	uxth	r2, r2
 80048aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d107      	bne.n	80048c8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048c0:	2100      	movs	r1, #0
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f001 fb7f 	bl	8005fc6 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f008 f873 	bl	800c9b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048e0:	b292      	uxth	r2, r2
 80048e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048e6:	e099      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d027      	beq.n	8004942 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0208 	orr.w	r2, r2, #8
 8004904:	b292      	uxth	r2, r2
 8004906:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800491c:	b292      	uxth	r2, r2
 800491e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0204 	orr.w	r2, r2, #4
 8004934:	b292      	uxth	r2, r2
 8004936:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f008 f820 	bl	800c980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004940:	e06c      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004948:	2b00      	cmp	r3, #0
 800494a:	d040      	beq.n	80049ce <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800495e:	b292      	uxth	r2, r2
 8004960:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d12b      	bne.n	80049c6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0204 	orr.w	r2, r2, #4
 8004980:	b292      	uxth	r2, r2
 8004982:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800498e:	b29a      	uxth	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0208 	orr.w	r2, r2, #8
 8004998:	b292      	uxth	r2, r2
 800499a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049bc:	2101      	movs	r1, #1
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 fb01 	bl	8005fc6 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80049c4:	e02a      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f007 ffda 	bl	800c980 <HAL_PCD_SuspendCallback>
    return;
 80049cc:	e026      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00f      	beq.n	80049f8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049ea:	b292      	uxth	r2, r2
 80049ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f007 ff98 	bl	800c926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80049f6:	e011      	b.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00c      	beq.n	8004a1c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a14:	b292      	uxth	r2, r2
 8004a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004a1a:	bf00      	nop
  }
}
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_PCD_SetAddress+0x1a>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e012      	b.n	8004a62 <HAL_PCD_SetAddress+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f006 fa34 	bl	800aec0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	461a      	mov	r2, r3
 8004a78:	4603      	mov	r3, r0
 8004a7a:	70fb      	strb	r3, [r7, #3]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	803b      	strh	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da0e      	bge.n	8004aae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 0207 	and.w	r2, r3, #7
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	3310      	adds	r3, #16
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	705a      	strb	r2, [r3, #1]
 8004aac:	e00e      	b.n	8004acc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	f003 0207 	and.w	r2, r3, #7
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004ad8:	883b      	ldrh	r3, [r7, #0]
 8004ada:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	78ba      	ldrb	r2, [r7, #2]
 8004ae6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ae8:	78bb      	ldrb	r3, [r7, #2]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d102      	bne.n	8004af4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_PCD_EP_Open+0x98>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e00e      	b.n	8004b20 <HAL_PCD_EP_Open+0xb6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f004 fc57 	bl	80093c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da0e      	bge.n	8004b5a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 0207 	and.w	r2, r3, #7
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	3310      	adds	r3, #16
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4413      	add	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	705a      	strb	r2, [r3, #1]
 8004b58:	e00e      	b.n	8004b78 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	f003 0207 	and.w	r2, r3, #7
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_PCD_EP_Close+0x6a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e00e      	b.n	8004bb0 <HAL_PCD_EP_Close+0x88>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f005 f8f7 	bl	8009d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6979      	ldr	r1, [r7, #20]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f005 faaf 	bl	800a16e <USB_EPStartXfer>

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	460b      	mov	r3, r1
 8004c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
 8004c2c:	f003 0207 	and.w	r2, r3, #7
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	3310      	adds	r3, #16
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2201      	movs	r2, #1
 8004c64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c66:	7afb      	ldrb	r3, [r7, #11]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6979      	ldr	r1, [r7, #20]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f005 fa78 	bl	800a16e <USB_EPStartXfer>

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	7912      	ldrb	r2, [r2, #4]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e03e      	b.n	8004d24 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da0e      	bge.n	8004ccc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 0207 	and.w	r2, r3, #7
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	3310      	adds	r3, #16
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	705a      	strb	r2, [r3, #1]
 8004cca:	e00c      	b.n	8004ce6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_PCD_EP_SetStall+0x7e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e00e      	b.n	8004d24 <HAL_PCD_EP_SetStall+0x9c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f005 ffd9 	bl	800accc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	7912      	ldrb	r2, [r2, #4]
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e040      	b.n	8004dcc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da0e      	bge.n	8004d70 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	f003 0207 	and.w	r2, r3, #7
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	3310      	adds	r3, #16
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	705a      	strb	r2, [r3, #1]
 8004d6e:	e00e      	b.n	8004d8e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 0207 	and.w	r2, r3, #7
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4413      	add	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_PCD_EP_ClrStall+0x82>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e00e      	b.n	8004dcc <HAL_PCD_EP_ClrStall+0xa0>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f005 ffd6 	bl	800ad6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b092      	sub	sp, #72	@ 0x48
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ddc:	e333      	b.n	8005446 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004de6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004de8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004df4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f040 8108 	bne.w	800500e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004dfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d14c      	bne.n	8004ea2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e18:	813b      	strh	r3, [r7, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	893b      	ldrh	r3, [r7, #8]
 8004e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3310      	adds	r3, #16
 8004e30:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	441a      	add	r2, r3
 8004e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e66:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f007 fd41 	bl	800c8f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	7b1b      	ldrb	r3, [r3, #12]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 82e5 	beq.w	8005446 <PCD_EP_ISR_Handler+0x672>
 8004e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f040 82e0 	bne.w	8005446 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	7b1b      	ldrb	r3, [r3, #12]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	731a      	strb	r2, [r3, #12]
 8004ea0:	e2d1      	b.n	8005446 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ea8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004eb2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d032      	beq.n	8004f22 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f006 f860 	bl	800afbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004f08:	4013      	ands	r3, r2
 8004f0a:	817b      	strh	r3, [r7, #10]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	897a      	ldrh	r2, [r7, #10]
 8004f12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f16:	b292      	uxth	r2, r2
 8004f18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f007 fcbc 	bl	800c898 <HAL_PCD_SetupStageCallback>
 8004f20:	e291      	b.n	8005446 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f22:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f280 828d 	bge.w	8005446 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004f38:	4013      	ands	r3, r2
 8004f3a:	81fb      	strh	r3, [r7, #14]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	89fa      	ldrh	r2, [r7, #14]
 8004f42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f46:	b292      	uxth	r2, r2
 8004f48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d019      	beq.n	8004fae <PCD_EP_ISR_Handler+0x1da>
 8004f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d015      	beq.n	8004fae <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f88:	6959      	ldr	r1, [r3, #20]
 8004f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f006 f812 	bl	800afbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	441a      	add	r2, r3
 8004fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f007 fc87 	bl	800c8bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004fb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8242 	bne.w	8005446 <PCD_EP_ISR_Handler+0x672>
 8004fc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fc4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004fc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fcc:	f000 823b 	beq.w	8005446 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe0:	81bb      	strh	r3, [r7, #12]
 8004fe2:	89bb      	ldrh	r3, [r7, #12]
 8004fe4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fe8:	81bb      	strh	r3, [r7, #12]
 8004fea:	89bb      	ldrh	r3, [r7, #12]
 8004fec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ff0:	81bb      	strh	r3, [r7, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	89bb      	ldrh	r3, [r7, #12]
 8004ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005008:	b29b      	uxth	r3, r3
 800500a:	8013      	strh	r3, [r2, #0]
 800500c:	e21b      	b.n	8005446 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005020:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005024:	2b00      	cmp	r3, #0
 8005026:	f280 80f1 	bge.w	800520c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29a      	uxth	r2, r3
 800503c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005040:	4013      	ands	r3, r2
 8005042:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005054:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005058:	b292      	uxth	r2, r2
 800505a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800505c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005074:	7b1b      	ldrb	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d123      	bne.n	80050c2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	4413      	add	r3, r2
 8005094:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800509e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80050a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 808b 	beq.w	80051c2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b2:	6959      	ldr	r1, [r3, #20]
 80050b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b6:	88da      	ldrh	r2, [r3, #6]
 80050b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80050bc:	f005 ff7e 	bl	800afbc <USB_ReadPMA>
 80050c0:	e07f      	b.n	80051c2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d109      	bne.n	80050de <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050cc:	461a      	mov	r2, r3
 80050ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f9c6 	bl	8005462 <HAL_PCD_EP_DB_Receive>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80050dc:	e071      	b.n	80051c2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800510a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800510e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005116:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d022      	beq.n	800517e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005140:	b29b      	uxth	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4413      	add	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	4413      	add	r3, r2
 8005152:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800515c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005160:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02c      	beq.n	80051c2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800516e:	6959      	ldr	r1, [r3, #20]
 8005170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005172:	891a      	ldrh	r2, [r3, #8]
 8005174:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005178:	f005 ff20 	bl	800afbc <USB_ReadPMA>
 800517c:	e021      	b.n	80051c2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	4413      	add	r3, r2
 8005198:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80051a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051b4:	6959      	ldr	r1, [r3, #20]
 80051b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051b8:	895a      	ldrh	r2, [r3, #10]
 80051ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80051be:	f005 fefd 	bl	800afbc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80051ca:	441a      	add	r2, r3
 80051cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80051d8:	441a      	add	r2, r3
 80051da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <PCD_EP_ISR_Handler+0x41e>
 80051e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80051ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d206      	bcs.n	8005200 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f007 fb5f 	bl	800c8bc <HAL_PCD_DataOutStageCallback>
 80051fe:	e005      	b.n	800520c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005206:	4618      	mov	r0, r3
 8005208:	f004 ffb1 	bl	800a16e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800520c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800520e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8117 	beq.w	8005446 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005218:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	3310      	adds	r3, #16
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005246:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	2b01      	cmp	r3, #1
 800526a:	f040 80a1 	bne.w	80053b0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800526e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005276:	7b1b      	ldrb	r3, [r3, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8092 	beq.w	80053a2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800527e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d046      	beq.n	8005316 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d126      	bne.n	80052de <PCD_EP_ISR_Handler+0x50a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4413      	add	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	00da      	lsls	r2, r3, #3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e061      	b.n	80053a2 <PCD_EP_ISR_Handler+0x5ce>
 80052de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d15d      	bne.n	80053a2 <PCD_EP_ISR_Handler+0x5ce>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	00da      	lsls	r2, r3, #3
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2200      	movs	r2, #0
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e045      	b.n	80053a2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800531c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d126      	bne.n	8005372 <PCD_EP_ISR_Handler+0x59e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	4413      	add	r3, r2
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
 800533c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	00da      	lsls	r2, r3, #3
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	4413      	add	r3, r2
 8005346:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800534a:	623b      	str	r3, [r7, #32]
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005356:	b29a      	uxth	r2, r3
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536a:	b29a      	uxth	r2, r3
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e017      	b.n	80053a2 <PCD_EP_ISR_Handler+0x5ce>
 8005372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d113      	bne.n	80053a2 <PCD_EP_ISR_Handler+0x5ce>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	4413      	add	r3, r2
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	00da      	lsls	r2, r3, #3
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	4413      	add	r3, r2
 8005396:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	2200      	movs	r2, #0
 80053a0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f007 faa2 	bl	800c8f2 <HAL_PCD_DataInStageCallback>
 80053ae:	e04a      	b.n	8005446 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80053b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d13f      	bne.n	800543a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053de:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80053e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d906      	bls.n	80053f8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80053ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80053f0:	1ad2      	subs	r2, r2, r3
 80053f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f4:	619a      	str	r2, [r3, #24]
 80053f6:	e002      	b.n	80053fe <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80053f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053fa:	2200      	movs	r2, #0
 80053fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80053fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f007 fa70 	bl	800c8f2 <HAL_PCD_DataInStageCallback>
 8005412:	e018      	b.n	8005446 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800541a:	441a      	add	r2, r3
 800541c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800541e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005426:	441a      	add	r2, r3
 8005428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005432:	4618      	mov	r0, r3
 8005434:	f004 fe9b 	bl	800a16e <USB_EPStartXfer>
 8005438:	e005      	b.n	8005446 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800543a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800543c:	461a      	mov	r2, r3
 800543e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f917 	bl	8005674 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800544e:	b29b      	uxth	r3, r3
 8005450:	b21b      	sxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	f6ff acc3 	blt.w	8004dde <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3748      	adds	r7, #72	@ 0x48
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	4613      	mov	r3, r2
 800546e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d07c      	beq.n	8005574 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	4413      	add	r3, r2
 8005494:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	8b7b      	ldrh	r3, [r7, #26]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d306      	bcc.n	80054b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	8b7b      	ldrh	r3, [r7, #26]
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	619a      	str	r2, [r3, #24]
 80054b6:	e002      	b.n	80054be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d123      	bne.n	800550e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e0:	833b      	strh	r3, [r7, #24]
 80054e2:	8b3b      	ldrh	r3, [r7, #24]
 80054e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054e8:	833b      	strh	r3, [r7, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	8b3b      	ldrh	r3, [r7, #24]
 80054fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550a:	b29b      	uxth	r3, r3
 800550c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01f      	beq.n	8005558 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800552e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005532:	82fb      	strh	r3, [r7, #22]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	441a      	add	r2, r3
 8005542:	8afb      	ldrh	r3, [r7, #22]
 8005544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800554c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005550:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005554:	b29b      	uxth	r3, r3
 8005556:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005558:	8b7b      	ldrh	r3, [r7, #26]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8085 	beq.w	800566a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6959      	ldr	r1, [r3, #20]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	891a      	ldrh	r2, [r3, #8]
 800556c:	8b7b      	ldrh	r3, [r7, #26]
 800556e:	f005 fd25 	bl	800afbc <USB_ReadPMA>
 8005572:	e07a      	b.n	800566a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800557c:	b29b      	uxth	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4413      	add	r3, r2
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	4413      	add	r3, r2
 800558e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005598:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	8b7b      	ldrh	r3, [r7, #26]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d306      	bcc.n	80055b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	8b7b      	ldrh	r3, [r7, #26]
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	619a      	str	r2, [r3, #24]
 80055b0:	e002      	b.n	80055b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d123      	bne.n	8005608 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	83fb      	strh	r3, [r7, #30]
 80055dc:	8bfb      	ldrh	r3, [r7, #30]
 80055de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055e2:	83fb      	strh	r3, [r7, #30]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	8bfb      	ldrh	r3, [r7, #30]
 80055f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005604:	b29b      	uxth	r3, r3
 8005606:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d11f      	bne.n	8005652 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562c:	83bb      	strh	r3, [r7, #28]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	441a      	add	r2, r3
 800563c:	8bbb      	ldrh	r3, [r7, #28]
 800563e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800564a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800564e:	b29b      	uxth	r3, r3
 8005650:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005652:	8b7b      	ldrh	r3, [r7, #26]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6959      	ldr	r1, [r3, #20]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	895a      	ldrh	r2, [r3, #10]
 8005664:	8b7b      	ldrh	r3, [r7, #26]
 8005666:	f005 fca9 	bl	800afbc <USB_ReadPMA>
    }
  }

  return count;
 800566a:	8b7b      	ldrh	r3, [r7, #26]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b0a6      	sub	sp, #152	@ 0x98
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 81f7 	beq.w	8005a7c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005696:	b29b      	uxth	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80056be:	429a      	cmp	r2, r3
 80056c0:	d907      	bls.n	80056d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	619a      	str	r2, [r3, #24]
 80056d0:	e002      	b.n	80056d8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 80e1 	bne.w	80058a4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d126      	bne.n	8005738 <HAL_PCD_EP_DB_Transmit+0xc4>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	4413      	add	r3, r2
 8005700:	633b      	str	r3, [r7, #48]	@ 0x30
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	00da      	lsls	r2, r3, #3
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	4413      	add	r3, r2
 800570c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800571c:	b29a      	uxth	r2, r3
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e01a      	b.n	800576e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d116      	bne.n	800576e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574e:	b29b      	uxth	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	4413      	add	r3, r2
 8005756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	00da      	lsls	r2, r3, #3
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	4413      	add	r3, r2
 8005762:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576a:	2200      	movs	r2, #0
 800576c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d126      	bne.n	80057ca <HAL_PCD_EP_DB_Transmit+0x156>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	623b      	str	r3, [r7, #32]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800578a:	b29b      	uxth	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	4413      	add	r3, r2
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	00da      	lsls	r2, r3, #3
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	4413      	add	r3, r2
 800579e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e017      	b.n	80057fa <HAL_PCD_EP_DB_Transmit+0x186>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d113      	bne.n	80057fa <HAL_PCD_EP_DB_Transmit+0x186>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057da:	b29b      	uxth	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	4413      	add	r3, r2
 80057e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	00da      	lsls	r2, r3, #3
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	4413      	add	r3, r2
 80057ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	2200      	movs	r2, #0
 80057f8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d123      	bne.n	800584a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581c:	837b      	strh	r3, [r7, #26]
 800581e:	8b7b      	ldrh	r3, [r7, #26]
 8005820:	f083 0320 	eor.w	r3, r3, #32
 8005824:	837b      	strh	r3, [r7, #26]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	8b7b      	ldrh	r3, [r7, #26]
 8005836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800583a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005846:	b29b      	uxth	r3, r3
 8005848:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	4619      	mov	r1, r3
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f007 f84e 	bl	800c8f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01f      	beq.n	80058a0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587a:	833b      	strh	r3, [r7, #24]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	8b3b      	ldrh	r3, [r7, #24]
 800588c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005894:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800589c:	b29b      	uxth	r3, r3
 800589e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e31f      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d021      	beq.n	80058f2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 82ca 	bne.w	8005e92 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005906:	441a      	add	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005914:	441a      	add	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	429a      	cmp	r2, r3
 8005924:	d309      	bcc.n	800593a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	621a      	str	r2, [r3, #32]
 8005938:	e015      	b.n	8005966 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005942:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005946:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005950:	e009      	b.n	8005966 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d15f      	bne.n	8005a2e <HAL_PCD_EP_DB_Transmit+0x3ba>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	643b      	str	r3, [r7, #64]	@ 0x40
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005982:	4413      	add	r3, r2
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	00da      	lsls	r2, r3, #3
 800598c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800598e:	4413      	add	r3, r2
 8005990:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x34e>
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e051      	b.n	8005a66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80059c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80059c6:	d816      	bhi.n	80059f6 <HAL_PCD_EP_DB_Transmit+0x382>
 80059c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_PCD_EP_DB_Transmit+0x36a>
 80059d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059da:	3301      	adds	r3, #1
 80059dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80059de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	e037      	b.n	8005a66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80059f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80059fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x398>
 8005a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	e01b      	b.n	8005a66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d117      	bne.n	8005a66 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a4a:	4413      	add	r3, r2
 8005a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	00da      	lsls	r2, r3, #3
 8005a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a56:	4413      	add	r3, r2
 8005a58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a64:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6959      	ldr	r1, [r3, #20]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	891a      	ldrh	r2, [r3, #8]
 8005a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f005 fa5e 	bl	800af36 <USB_WritePMA>
 8005a7a:	e20a      	b.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d307      	bcc.n	8005ac0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ab8:	1ad2      	subs	r2, r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	619a      	str	r2, [r3, #24]
 8005abe:	e002      	b.n	8005ac6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 80f6 	bne.w	8005cbc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d126      	bne.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aec:	4413      	add	r3, r2
 8005aee:	677b      	str	r3, [r7, #116]	@ 0x74
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	00da      	lsls	r2, r3, #3
 8005af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e01a      	b.n	8005b5c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d116      	bne.n	8005b5c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b42:	4413      	add	r3, r2
 8005b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	00da      	lsls	r2, r3, #3
 8005b4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b4e:	4413      	add	r3, r2
 8005b50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b58:	2200      	movs	r2, #0
 8005b5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d12f      	bne.n	8005bcc <HAL_PCD_EP_DB_Transmit+0x558>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b84:	4413      	add	r3, r2
 8005b86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	00da      	lsls	r2, r3, #3
 8005b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b94:	4413      	add	r3, r2
 8005b96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e01c      	b.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x592>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d118      	bne.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x592>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005be4:	4413      	add	r3, r2
 8005be6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	00da      	lsls	r2, r3, #3
 8005bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c02:	2200      	movs	r2, #0
 8005c04:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	78db      	ldrb	r3, [r3, #3]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d127      	bne.n	8005c5e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c28:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005c2c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005c30:	f083 0320 	eor.w	r3, r3, #32
 8005c34:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	4619      	mov	r1, r3
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f006 fe44 	bl	800c8f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d121      	bne.n	8005cb8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e113      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d121      	bne.n	8005d0a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	441a      	add	r2, r3
 8005cf2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f040 80be 	bne.w	8005e92 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d1e:	441a      	add	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d2c:	441a      	add	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6a1a      	ldr	r2, [r3, #32]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d309      	bcc.n	8005d52 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	621a      	str	r2, [r3, #32]
 8005d50:	e015      	b.n	8005d7e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8005d5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005d68:	e009      	b.n	8005d7e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d15f      	bne.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005da0:	4413      	add	r3, r2
 8005da2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	00da      	lsls	r2, r3, #3
 8005daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dac:	4413      	add	r3, r2
 8005dae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005db2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x76c>
 8005dca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	e04e      	b.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005de2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005de4:	d816      	bhi.n	8005e14 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x788>
 8005df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005df8:	3301      	adds	r3, #1
 8005dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e034      	b.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8005e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e26:	3b01      	subs	r3, #1
 8005e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	029b      	lsls	r3, r3, #10
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	e018      	b.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d114      	bne.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e62:	4413      	add	r3, r2
 8005e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	00da      	lsls	r2, r3, #3
 8005e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e6e:	4413      	add	r3, r2
 8005e70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e7c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6959      	ldr	r1, [r3, #20]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	895a      	ldrh	r2, [r3, #10]
 8005e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f005 f852 	bl	800af36 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eac:	82fb      	strh	r3, [r7, #22]
 8005eae:	8afb      	ldrh	r3, [r7, #22]
 8005eb0:	f083 0310 	eor.w	r3, r3, #16
 8005eb4:	82fb      	strh	r3, [r7, #22]
 8005eb6:	8afb      	ldrh	r3, [r7, #22]
 8005eb8:	f083 0320 	eor.w	r3, r3, #32
 8005ebc:	82fb      	strh	r3, [r7, #22]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	8afb      	ldrh	r3, [r7, #22]
 8005ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3798      	adds	r7, #152	@ 0x98
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	607b      	str	r3, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	817b      	strh	r3, [r7, #10]
 8005efa:	4613      	mov	r3, r2
 8005efc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005efe:	897b      	ldrh	r3, [r7, #10]
 8005f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	f003 0207 	and.w	r2, r3, #7
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	3310      	adds	r3, #16
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e009      	b.n	8005f36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f22:	897a      	ldrh	r2, [r7, #10]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f36:	893b      	ldrh	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	80da      	strh	r2, [r3, #6]
 8005f4a:	e00b      	b.n	8005f64 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f043 0302 	orr.w	r3, r3, #2
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d141      	bne.n	8006072 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fee:	4b4b      	ldr	r3, [pc, #300]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffa:	d131      	bne.n	8006060 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ffc:	4b47      	ldr	r3, [pc, #284]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006002:	4a46      	ldr	r2, [pc, #280]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800600c:	4b43      	ldr	r3, [pc, #268]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006014:	4a41      	ldr	r2, [pc, #260]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800601a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800601c:	4b40      	ldr	r3, [pc, #256]	@ (8006120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2232      	movs	r2, #50	@ 0x32
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	4a3f      	ldr	r2, [pc, #252]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006028:	fba2 2303 	umull	r2, r3, r2, r3
 800602c:	0c9b      	lsrs	r3, r3, #18
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006032:	e002      	b.n	800603a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3b01      	subs	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800603a:	4b38      	ldr	r3, [pc, #224]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006046:	d102      	bne.n	800604e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f2      	bne.n	8006034 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800604e:	4b33      	ldr	r3, [pc, #204]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800605a:	d158      	bne.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e057      	b.n	8006110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006060:	4b2e      	ldr	r3, [pc, #184]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006066:	4a2d      	ldr	r2, [pc, #180]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800606c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006070:	e04d      	b.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006078:	d141      	bne.n	80060fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800607a:	4b28      	ldr	r3, [pc, #160]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006086:	d131      	bne.n	80060ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006088:	4b24      	ldr	r3, [pc, #144]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800608e:	4a23      	ldr	r2, [pc, #140]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006098:	4b20      	ldr	r3, [pc, #128]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060a0:	4a1e      	ldr	r2, [pc, #120]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2232      	movs	r2, #50	@ 0x32
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	0c9b      	lsrs	r3, r3, #18
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060be:	e002      	b.n	80060c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060c6:	4b15      	ldr	r3, [pc, #84]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d2:	d102      	bne.n	80060da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f2      	bne.n	80060c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060da:	4b10      	ldr	r3, [pc, #64]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e6:	d112      	bne.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e011      	b.n	8006110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060ec:	4b0b      	ldr	r3, [pc, #44]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f2:	4a0a      	ldr	r2, [pc, #40]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80060fc:	e007      	b.n	800610e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060fe:	4b07      	ldr	r3, [pc, #28]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006106:	4a05      	ldr	r2, [pc, #20]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006108:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800610c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40007000 	.word	0x40007000
 8006120:	20000004 	.word	0x20000004
 8006124:	431bde83 	.word	0x431bde83

08006128 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4a04      	ldr	r2, [pc, #16]	@ (8006144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006136:	6093      	str	r3, [r2, #8]
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40007000 	.word	0x40007000

08006148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e2fe      	b.n	8006758 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d075      	beq.n	8006252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006166:	4b97      	ldr	r3, [pc, #604]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 030c 	and.w	r3, r3, #12
 800616e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006170:	4b94      	ldr	r3, [pc, #592]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d102      	bne.n	8006186 <HAL_RCC_OscConfig+0x3e>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d002      	beq.n	800618c <HAL_RCC_OscConfig+0x44>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10b      	bne.n	80061a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800618c:	4b8d      	ldr	r3, [pc, #564]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d05b      	beq.n	8006250 <HAL_RCC_OscConfig+0x108>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d157      	bne.n	8006250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e2d9      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ac:	d106      	bne.n	80061bc <HAL_RCC_OscConfig+0x74>
 80061ae:	4b85      	ldr	r3, [pc, #532]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a84      	ldr	r2, [pc, #528]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e01d      	b.n	80061f8 <HAL_RCC_OscConfig+0xb0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061c4:	d10c      	bne.n	80061e0 <HAL_RCC_OscConfig+0x98>
 80061c6:	4b7f      	ldr	r3, [pc, #508]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a7e      	ldr	r2, [pc, #504]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	4b7c      	ldr	r3, [pc, #496]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a7b      	ldr	r2, [pc, #492]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e00b      	b.n	80061f8 <HAL_RCC_OscConfig+0xb0>
 80061e0:	4b78      	ldr	r3, [pc, #480]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a77      	ldr	r2, [pc, #476]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	4b75      	ldr	r3, [pc, #468]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a74      	ldr	r2, [pc, #464]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80061f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d013      	beq.n	8006228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fb fc4c 	bl	8001a9c <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006208:	f7fb fc48 	bl	8001a9c <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b64      	cmp	r3, #100	@ 0x64
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e29e      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800621a:	4b6a      	ldr	r3, [pc, #424]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <HAL_RCC_OscConfig+0xc0>
 8006226:	e014      	b.n	8006252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fb fc38 	bl	8001a9c <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006230:	f7fb fc34 	bl	8001a9c <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b64      	cmp	r3, #100	@ 0x64
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e28a      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006242:	4b60      	ldr	r3, [pc, #384]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <HAL_RCC_OscConfig+0xe8>
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d075      	beq.n	800634a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800625e:	4b59      	ldr	r3, [pc, #356]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006268:	4b56      	ldr	r3, [pc, #344]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d102      	bne.n	800627e <HAL_RCC_OscConfig+0x136>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d002      	beq.n	8006284 <HAL_RCC_OscConfig+0x13c>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b04      	cmp	r3, #4
 8006282:	d11f      	bne.n	80062c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006284:	4b4f      	ldr	r3, [pc, #316]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_OscConfig+0x154>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e25d      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800629c:	4b49      	ldr	r3, [pc, #292]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	061b      	lsls	r3, r3, #24
 80062aa:	4946      	ldr	r1, [pc, #280]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062b0:	4b45      	ldr	r3, [pc, #276]	@ (80063c8 <HAL_RCC_OscConfig+0x280>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fb fba5 	bl	8001a04 <HAL_InitTick>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d043      	beq.n	8006348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e249      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d023      	beq.n	8006314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062cc:	4b3d      	ldr	r3, [pc, #244]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3c      	ldr	r2, [pc, #240]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fb fbe0 	bl	8001a9c <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e0:	f7fb fbdc 	bl	8001a9c <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e232      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062f2:	4b34      	ldr	r3, [pc, #208]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f0      	beq.n	80062e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fe:	4b31      	ldr	r3, [pc, #196]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	061b      	lsls	r3, r3, #24
 800630c:	492d      	ldr	r1, [pc, #180]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	604b      	str	r3, [r1, #4]
 8006312:	e01a      	b.n	800634a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006314:	4b2b      	ldr	r3, [pc, #172]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2a      	ldr	r2, [pc, #168]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800631a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800631e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fb fbbc 	bl	8001a9c <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006328:	f7fb fbb8 	bl	8001a9c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e20e      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800633a:	4b22      	ldr	r3, [pc, #136]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x1e0>
 8006346:	e000      	b.n	800634a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d041      	beq.n	80063da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01c      	beq.n	8006398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800635e:	4b19      	ldr	r3, [pc, #100]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006364:	4a17      	ldr	r2, [pc, #92]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636e:	f7fb fb95 	bl	8001a9c <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006376:	f7fb fb91 	bl	8001a9c <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e1e7      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006388:	4b0e      	ldr	r3, [pc, #56]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800638a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ef      	beq.n	8006376 <HAL_RCC_OscConfig+0x22e>
 8006396:	e020      	b.n	80063da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006398:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800639a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800639e:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fb fb78 	bl	8001a9c <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063ae:	e00d      	b.n	80063cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b0:	f7fb fb74 	bl	8001a9c <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d906      	bls.n	80063cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e1ca      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000
 80063c8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ea      	bne.n	80063b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80a6 	beq.w	8006534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063ec:	4b84      	ldr	r3, [pc, #528]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_OscConfig+0x2b4>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x2b6>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00d      	beq.n	800641e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	4b7f      	ldr	r3, [pc, #508]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006406:	4a7e      	ldr	r2, [pc, #504]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800640c:	6593      	str	r3, [r2, #88]	@ 0x58
 800640e:	4b7c      	ldr	r3, [pc, #496]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800641a:	2301      	movs	r3, #1
 800641c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800641e:	4b79      	ldr	r3, [pc, #484]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d118      	bne.n	800645c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800642a:	4b76      	ldr	r3, [pc, #472]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a75      	ldr	r2, [pc, #468]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006436:	f7fb fb31 	bl	8001a9c <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643e:	f7fb fb2d 	bl	8001a9c <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e183      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006450:	4b6c      	ldr	r3, [pc, #432]	@ (8006604 <HAL_RCC_OscConfig+0x4bc>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d108      	bne.n	8006476 <HAL_RCC_OscConfig+0x32e>
 8006464:	4b66      	ldr	r3, [pc, #408]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646a:	4a65      	ldr	r2, [pc, #404]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006474:	e024      	b.n	80064c0 <HAL_RCC_OscConfig+0x378>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2b05      	cmp	r3, #5
 800647c:	d110      	bne.n	80064a0 <HAL_RCC_OscConfig+0x358>
 800647e:	4b60      	ldr	r3, [pc, #384]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006484:	4a5e      	ldr	r2, [pc, #376]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006486:	f043 0304 	orr.w	r3, r3, #4
 800648a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800648e:	4b5c      	ldr	r3, [pc, #368]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006494:	4a5a      	ldr	r2, [pc, #360]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800649e:	e00f      	b.n	80064c0 <HAL_RCC_OscConfig+0x378>
 80064a0:	4b57      	ldr	r3, [pc, #348]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a6:	4a56      	ldr	r2, [pc, #344]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064b0:	4b53      	ldr	r3, [pc, #332]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b6:	4a52      	ldr	r2, [pc, #328]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d016      	beq.n	80064f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7fb fae8 	bl	8001a9c <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d0:	f7fb fae4 	bl	8001a9c <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e138      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e6:	4b46      	ldr	r3, [pc, #280]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0ed      	beq.n	80064d0 <HAL_RCC_OscConfig+0x388>
 80064f4:	e015      	b.n	8006522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f6:	f7fb fad1 	bl	8001a9c <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fb facd 	bl	8001a9c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e121      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006514:	4b3a      	ldr	r3, [pc, #232]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ed      	bne.n	80064fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006522:	7ffb      	ldrb	r3, [r7, #31]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d105      	bne.n	8006534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006528:	4b35      	ldr	r3, [pc, #212]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800652a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652c:	4a34      	ldr	r2, [pc, #208]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800652e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006532:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d03c      	beq.n	80065ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01c      	beq.n	8006582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006548:	4b2d      	ldr	r3, [pc, #180]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800654a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800654e:	4a2c      	ldr	r2, [pc, #176]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fb faa0 	bl	8001a9c <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006560:	f7fb fa9c 	bl	8001a9c <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e0f2      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006572:	4b23      	ldr	r3, [pc, #140]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006574:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0ef      	beq.n	8006560 <HAL_RCC_OscConfig+0x418>
 8006580:	e01b      	b.n	80065ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006582:	4b1f      	ldr	r3, [pc, #124]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 8006584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006588:	4a1d      	ldr	r2, [pc, #116]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006592:	f7fb fa83 	bl	8001a9c <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800659a:	f7fb fa7f 	bl	8001a9c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0d5      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1ef      	bne.n	800659a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80c9 	beq.w	8006756 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b0c      	cmp	r3, #12
 80065ce:	f000 8083 	beq.w	80066d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d15e      	bne.n	8006698 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065da:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a08      	ldr	r2, [pc, #32]	@ (8006600 <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e6:	f7fb fa59 	bl	8001a9c <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065ec:	e00c      	b.n	8006608 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ee:	f7fb fa55 	bl	8001a9c <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d905      	bls.n	8006608 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0ab      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
 8006600:	40021000 	.word	0x40021000
 8006604:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006608:	4b55      	ldr	r3, [pc, #340]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ec      	bne.n	80065ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006614:	4b52      	ldr	r3, [pc, #328]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	4b52      	ldr	r3, [pc, #328]	@ (8006764 <HAL_RCC_OscConfig+0x61c>)
 800661a:	4013      	ands	r3, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6a11      	ldr	r1, [r2, #32]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006624:	3a01      	subs	r2, #1
 8006626:	0112      	lsls	r2, r2, #4
 8006628:	4311      	orrs	r1, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800662e:	0212      	lsls	r2, r2, #8
 8006630:	4311      	orrs	r1, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006636:	0852      	lsrs	r2, r2, #1
 8006638:	3a01      	subs	r2, #1
 800663a:	0552      	lsls	r2, r2, #21
 800663c:	4311      	orrs	r1, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006642:	0852      	lsrs	r2, r2, #1
 8006644:	3a01      	subs	r2, #1
 8006646:	0652      	lsls	r2, r2, #25
 8006648:	4311      	orrs	r1, r2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800664e:	06d2      	lsls	r2, r2, #27
 8006650:	430a      	orrs	r2, r1
 8006652:	4943      	ldr	r1, [pc, #268]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 8006654:	4313      	orrs	r3, r2
 8006656:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006658:	4b41      	ldr	r3, [pc, #260]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a40      	ldr	r2, [pc, #256]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800665e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006662:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006664:	4b3e      	ldr	r3, [pc, #248]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a3d      	ldr	r2, [pc, #244]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800666a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800666e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fb fa14 	bl	8001a9c <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006678:	f7fb fa10 	bl	8001a9c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e066      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668a:	4b35      	ldr	r3, [pc, #212]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0f0      	beq.n	8006678 <HAL_RCC_OscConfig+0x530>
 8006696:	e05e      	b.n	8006756 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006698:	4b31      	ldr	r3, [pc, #196]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a30      	ldr	r2, [pc, #192]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 800669e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fb f9fa 	bl	8001a9c <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ac:	f7fb f9f6 	bl	8001a9c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e04c      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066be:	4b28      	ldr	r3, [pc, #160]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80066ca:	4b25      	ldr	r3, [pc, #148]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	4924      	ldr	r1, [pc, #144]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066d0:	4b25      	ldr	r3, [pc, #148]	@ (8006768 <HAL_RCC_OscConfig+0x620>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	60cb      	str	r3, [r1, #12]
 80066d6:	e03e      	b.n	8006756 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e039      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80066e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006760 <HAL_RCC_OscConfig+0x618>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f003 0203 	and.w	r2, r3, #3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d12c      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	3b01      	subs	r3, #1
 8006704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006706:	429a      	cmp	r2, r3
 8006708:	d123      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006716:	429a      	cmp	r2, r3
 8006718:	d11b      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006724:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d113      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	3b01      	subs	r3, #1
 8006738:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d109      	bne.n	8006752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	3b01      	subs	r3, #1
 800674c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d001      	beq.n	8006756 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40021000 	.word	0x40021000
 8006764:	019f800c 	.word	0x019f800c
 8006768:	feeefffc 	.word	0xfeeefffc

0800676c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e11e      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006784:	4b91      	ldr	r3, [pc, #580]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d910      	bls.n	80067b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b8e      	ldr	r3, [pc, #568]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f023 020f 	bic.w	r2, r3, #15
 800679a:	498c      	ldr	r1, [pc, #560]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	4313      	orrs	r3, r2
 80067a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	4b8a      	ldr	r3, [pc, #552]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e106      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d073      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d129      	bne.n	800681c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c8:	4b81      	ldr	r3, [pc, #516]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0f4      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80067d8:	f000 f99e 	bl	8006b18 <RCC_GetSysClockFreqFromPLLSource>
 80067dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4a7c      	ldr	r2, [pc, #496]	@ (80069d4 <HAL_RCC_ClockConfig+0x268>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d93f      	bls.n	8006866 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80067e6:	4b7a      	ldr	r3, [pc, #488]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d033      	beq.n	8006866 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006802:	2b00      	cmp	r3, #0
 8006804:	d12f      	bne.n	8006866 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006806:	4b72      	ldr	r3, [pc, #456]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800680e:	4a70      	ldr	r2, [pc, #448]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006814:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006816:	2380      	movs	r3, #128	@ 0x80
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	e024      	b.n	8006866 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d107      	bne.n	8006834 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006824:	4b6a      	ldr	r3, [pc, #424]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e0c6      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006834:	4b66      	ldr	r3, [pc, #408]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0be      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006844:	f000 f8ce 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8006848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4a61      	ldr	r2, [pc, #388]	@ (80069d4 <HAL_RCC_ClockConfig+0x268>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d909      	bls.n	8006866 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006852:	4b5f      	ldr	r3, [pc, #380]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800685a:	4a5d      	ldr	r2, [pc, #372]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 800685c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006860:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006862:	2380      	movs	r3, #128	@ 0x80
 8006864:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006866:	4b5a      	ldr	r3, [pc, #360]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 0203 	bic.w	r2, r3, #3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4957      	ldr	r1, [pc, #348]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006874:	4313      	orrs	r3, r2
 8006876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006878:	f7fb f910 	bl	8001a9c <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	e00a      	b.n	8006896 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006880:	f7fb f90c 	bl	8001a9c <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e095      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006896:	4b4e      	ldr	r3, [pc, #312]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 020c 	and.w	r2, r3, #12
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1eb      	bne.n	8006880 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d023      	beq.n	80068fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068c0:	4b43      	ldr	r3, [pc, #268]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4a42      	ldr	r2, [pc, #264]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80068d8:	4b3d      	ldr	r3, [pc, #244]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068e0:	4a3b      	ldr	r2, [pc, #236]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e8:	4b39      	ldr	r3, [pc, #228]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	4936      	ldr	r1, [pc, #216]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
 80068fa:	e008      	b.n	800690e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b80      	cmp	r3, #128	@ 0x80
 8006900:	d105      	bne.n	800690e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006902:	4b33      	ldr	r3, [pc, #204]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	4a32      	ldr	r2, [pc, #200]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006908:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800690c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800690e:	4b2f      	ldr	r3, [pc, #188]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d21d      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691c:	4b2b      	ldr	r3, [pc, #172]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f023 020f 	bic.w	r2, r3, #15
 8006924:	4929      	ldr	r1, [pc, #164]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	4313      	orrs	r3, r2
 800692a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800692c:	f7fb f8b6 	bl	8001a9c <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	e00a      	b.n	800694a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006934:	f7fb f8b2 	bl	8001a9c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e03b      	b.n	80069c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800694a:	4b20      	ldr	r3, [pc, #128]	@ (80069cc <HAL_RCC_ClockConfig+0x260>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d1ed      	bne.n	8006934 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006964:	4b1a      	ldr	r3, [pc, #104]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4917      	ldr	r1, [pc, #92]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	490f      	ldr	r1, [pc, #60]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006996:	f000 f825 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 800699a:	4602      	mov	r2, r0
 800699c:	4b0c      	ldr	r3, [pc, #48]	@ (80069d0 <HAL_RCC_ClockConfig+0x264>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	490c      	ldr	r1, [pc, #48]	@ (80069d8 <HAL_RCC_ClockConfig+0x26c>)
 80069a8:	5ccb      	ldrb	r3, [r1, r3]
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	fa22 f303 	lsr.w	r3, r2, r3
 80069b2:	4a0a      	ldr	r2, [pc, #40]	@ (80069dc <HAL_RCC_ClockConfig+0x270>)
 80069b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <HAL_RCC_ClockConfig+0x274>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fb f822 	bl	8001a04 <HAL_InitTick>
 80069c0:	4603      	mov	r3, r0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40022000 	.word	0x40022000
 80069d0:	40021000 	.word	0x40021000
 80069d4:	04c4b400 	.word	0x04c4b400
 80069d8:	0800d078 	.word	0x0800d078
 80069dc:	20000004 	.word	0x20000004
 80069e0:	20000008 	.word	0x20000008

080069e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80069ea:	4b2c      	ldr	r3, [pc, #176]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d102      	bne.n	80069fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069f6:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	e047      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80069fc:	4b27      	ldr	r3, [pc, #156]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 030c 	and.w	r3, r3, #12
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d102      	bne.n	8006a0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a08:	4b26      	ldr	r3, [pc, #152]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	e03e      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006a0e:	4b23      	ldr	r3, [pc, #140]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b0c      	cmp	r3, #12
 8006a18:	d136      	bne.n	8006a88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a1a:	4b20      	ldr	r3, [pc, #128]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a24:	4b1d      	ldr	r3, [pc, #116]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a38:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a42:	68d2      	ldr	r2, [r2, #12]
 8006a44:	0a12      	lsrs	r2, r2, #8
 8006a46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	617b      	str	r3, [r7, #20]
      break;
 8006a50:	e00c      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a52:	4a13      	ldr	r2, [pc, #76]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	4a10      	ldr	r2, [pc, #64]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a5c:	68d2      	ldr	r2, [r2, #12]
 8006a5e:	0a12      	lsrs	r2, r2, #8
 8006a60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a64:	fb02 f303 	mul.w	r3, r2, r3
 8006a68:	617b      	str	r3, [r7, #20]
      break;
 8006a6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	0e5b      	lsrs	r3, r3, #25
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	3301      	adds	r3, #1
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	e001      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a8c:	693b      	ldr	r3, [r7, #16]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	00f42400 	.word	0x00f42400
 8006aa4:	007a1200 	.word	0x007a1200

08006aa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aac:	4b03      	ldr	r3, [pc, #12]	@ (8006abc <HAL_RCC_GetHCLKFreq+0x14>)
 8006aae:	681b      	ldr	r3, [r3, #0]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000004 	.word	0x20000004

08006ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ac4:	f7ff fff0 	bl	8006aa8 <HAL_RCC_GetHCLKFreq>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	4904      	ldr	r1, [pc, #16]	@ (8006ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ad6:	5ccb      	ldrb	r3, [r1, r3]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	0800d088 	.word	0x0800d088

08006aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006af0:	f7ff ffda 	bl	8006aa8 <HAL_RCC_GetHCLKFreq>
 8006af4:	4602      	mov	r2, r0
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	0adb      	lsrs	r3, r3, #11
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	4904      	ldr	r1, [pc, #16]	@ (8006b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b02:	5ccb      	ldrb	r3, [r1, r3]
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40021000 	.word	0x40021000
 8006b14:	0800d088 	.word	0x0800d088

08006b18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b28:	4b1b      	ldr	r3, [pc, #108]	@ (8006b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	091b      	lsrs	r3, r3, #4
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d10c      	bne.n	8006b56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b3c:	4a17      	ldr	r2, [pc, #92]	@ (8006b9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	4a14      	ldr	r2, [pc, #80]	@ (8006b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b46:	68d2      	ldr	r2, [r2, #12]
 8006b48:	0a12      	lsrs	r2, r2, #8
 8006b4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	617b      	str	r3, [r7, #20]
    break;
 8006b54:	e00c      	b.n	8006b70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b56:	4a12      	ldr	r2, [pc, #72]	@ (8006ba0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b60:	68d2      	ldr	r2, [r2, #12]
 8006b62:	0a12      	lsrs	r2, r2, #8
 8006b64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	617b      	str	r3, [r7, #20]
    break;
 8006b6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b70:	4b09      	ldr	r3, [pc, #36]	@ (8006b98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	0e5b      	lsrs	r3, r3, #25
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b8a:	687b      	ldr	r3, [r7, #4]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	007a1200 	.word	0x007a1200
 8006ba0:	00f42400 	.word	0x00f42400

08006ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bac:	2300      	movs	r3, #0
 8006bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8098 	beq.w	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bc6:	4b43      	ldr	r3, [pc, #268]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10d      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd2:	4b40      	ldr	r3, [pc, #256]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bde:	4b3d      	ldr	r3, [pc, #244]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bea:	2301      	movs	r3, #1
 8006bec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bee:	4b3a      	ldr	r3, [pc, #232]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a39      	ldr	r2, [pc, #228]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bfa:	f7fa ff4f 	bl	8001a9c <HAL_GetTick>
 8006bfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c00:	e009      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c02:	f7fa ff4b 	bl	8001a9c <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d902      	bls.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	74fb      	strb	r3, [r7, #19]
        break;
 8006c14:	e005      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c16:	4b30      	ldr	r3, [pc, #192]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ef      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006c22:	7cfb      	ldrb	r3, [r7, #19]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d159      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c28:	4b2a      	ldr	r3, [pc, #168]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01e      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d019      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c44:	4b23      	ldr	r3, [pc, #140]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c50:	4b20      	ldr	r3, [pc, #128]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c56:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c60:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c66:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c70:	4a18      	ldr	r2, [pc, #96]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d016      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c82:	f7fa ff0b 	bl	8001a9c <HAL_GetTick>
 8006c86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c88:	e00b      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c8a:	f7fa ff07 	bl	8001a9c <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d902      	bls.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	74fb      	strb	r3, [r7, #19]
            break;
 8006ca0:	e006      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0ec      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006cb0:	7cfb      	ldrb	r3, [r7, #19]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cb6:	4b07      	ldr	r3, [pc, #28]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc4:	4903      	ldr	r1, [pc, #12]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cce:	7cfb      	ldrb	r3, [r7, #19]
 8006cd0:	74bb      	strb	r3, [r7, #18]
 8006cd2:	e005      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	7cfb      	ldrb	r3, [r7, #19]
 8006cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ce0:	7c7b      	ldrb	r3, [r7, #17]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d105      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce6:	4ba6      	ldr	r3, [pc, #664]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cea:	4aa5      	ldr	r2, [pc, #660]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cf0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d04:	f023 0203 	bic.w	r2, r3, #3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	499c      	ldr	r1, [pc, #624]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d20:	4b97      	ldr	r3, [pc, #604]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d26:	f023 020c 	bic.w	r2, r3, #12
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4994      	ldr	r1, [pc, #592]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d42:	4b8f      	ldr	r3, [pc, #572]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	498b      	ldr	r1, [pc, #556]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d64:	4b86      	ldr	r3, [pc, #536]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	4983      	ldr	r1, [pc, #524]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d86:	4b7e      	ldr	r3, [pc, #504]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	497a      	ldr	r1, [pc, #488]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006da8:	4b75      	ldr	r3, [pc, #468]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	4972      	ldr	r1, [pc, #456]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dca:	4b6d      	ldr	r3, [pc, #436]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	4969      	ldr	r1, [pc, #420]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dec:	4b64      	ldr	r3, [pc, #400]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	4961      	ldr	r1, [pc, #388]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	4958      	ldr	r1, [pc, #352]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e30:	4b53      	ldr	r3, [pc, #332]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	4950      	ldr	r1, [pc, #320]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e4e:	d105      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e50:	4b4b      	ldr	r3, [pc, #300]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4a4a      	ldr	r2, [pc, #296]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e5a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d015      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e68:	4b45      	ldr	r3, [pc, #276]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	4942      	ldr	r1, [pc, #264]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e86:	d105      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e88:	4b3d      	ldr	r3, [pc, #244]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e92:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ea0:	4b37      	ldr	r3, [pc, #220]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eae:	4934      	ldr	r1, [pc, #208]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d015      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ed8:	4b29      	ldr	r3, [pc, #164]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee6:	4926      	ldr	r1, [pc, #152]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ef6:	d105      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ef8:	4b21      	ldr	r3, [pc, #132]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a20      	ldr	r2, [pc, #128]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d015      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f10:	4b1b      	ldr	r3, [pc, #108]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	4918      	ldr	r1, [pc, #96]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f2e:	d105      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f30:	4b13      	ldr	r3, [pc, #76]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d015      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f48:	4b0d      	ldr	r3, [pc, #52]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f56:	490a      	ldr	r1, [pc, #40]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f66:	d105      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f68:	4b05      	ldr	r3, [pc, #20]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	4a04      	ldr	r2, [pc, #16]	@ (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006f74:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40021000 	.word	0x40021000

08006f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e049      	b.n	800702a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa fbc0 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f000 fe9a 	bl	8007cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e049      	b.n	80070d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f841 	bl	80070e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f000 fe43 	bl	8007cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <HAL_TIM_PWM_Start_DMA+0x2c>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e03c      	b.n	800719a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b04      	cmp	r3, #4
 8007124:	d109      	bne.n	800713a <HAL_TIM_PWM_Start_DMA+0x46>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	bf0c      	ite	eq
 8007132:	2301      	moveq	r3, #1
 8007134:	2300      	movne	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	e02f      	b.n	800719a <HAL_TIM_PWM_Start_DMA+0xa6>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d109      	bne.n	8007154 <HAL_TIM_PWM_Start_DMA+0x60>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	bf0c      	ite	eq
 800714c:	2301      	moveq	r3, #1
 800714e:	2300      	movne	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	e022      	b.n	800719a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b0c      	cmp	r3, #12
 8007158:	d109      	bne.n	800716e <HAL_TIM_PWM_Start_DMA+0x7a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	bf0c      	ite	eq
 8007166:	2301      	moveq	r3, #1
 8007168:	2300      	movne	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	e015      	b.n	800719a <HAL_TIM_PWM_Start_DMA+0xa6>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b10      	cmp	r3, #16
 8007172:	d109      	bne.n	8007188 <HAL_TIM_PWM_Start_DMA+0x94>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	bf0c      	ite	eq
 8007180:	2301      	moveq	r3, #1
 8007182:	2300      	movne	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	e008      	b.n	800719a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	bf0c      	ite	eq
 8007194:	2301      	moveq	r3, #1
 8007196:	2300      	movne	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800719e:	2302      	movs	r3, #2
 80071a0:	e1a6      	b.n	80074f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d109      	bne.n	80071bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	e03c      	b.n	8007236 <HAL_TIM_PWM_Start_DMA+0x142>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d109      	bne.n	80071d6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	bf0c      	ite	eq
 80071ce:	2301      	moveq	r3, #1
 80071d0:	2300      	movne	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	e02f      	b.n	8007236 <HAL_TIM_PWM_Start_DMA+0x142>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d109      	bne.n	80071f0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	bf0c      	ite	eq
 80071e8:	2301      	moveq	r3, #1
 80071ea:	2300      	movne	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	e022      	b.n	8007236 <HAL_TIM_PWM_Start_DMA+0x142>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d109      	bne.n	800720a <HAL_TIM_PWM_Start_DMA+0x116>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b01      	cmp	r3, #1
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	e015      	b.n	8007236 <HAL_TIM_PWM_Start_DMA+0x142>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b10      	cmp	r3, #16
 800720e:	d109      	bne.n	8007224 <HAL_TIM_PWM_Start_DMA+0x130>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	bf0c      	ite	eq
 800721c:	2301      	moveq	r3, #1
 800721e:	2300      	movne	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	e008      	b.n	8007236 <HAL_TIM_PWM_Start_DMA+0x142>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b01      	cmp	r3, #1
 800722e:	bf0c      	ite	eq
 8007230:	2301      	moveq	r3, #1
 8007232:	2300      	movne	r3, #0
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d034      	beq.n	80072a4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <HAL_TIM_PWM_Start_DMA+0x152>
 8007240:	887b      	ldrh	r3, [r7, #2]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e152      	b.n	80074f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <HAL_TIM_PWM_Start_DMA+0x166>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007258:	e026      	b.n	80072a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b04      	cmp	r3, #4
 800725e:	d104      	bne.n	800726a <HAL_TIM_PWM_Start_DMA+0x176>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007268:	e01e      	b.n	80072a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b08      	cmp	r3, #8
 800726e:	d104      	bne.n	800727a <HAL_TIM_PWM_Start_DMA+0x186>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007278:	e016      	b.n	80072a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b0c      	cmp	r3, #12
 800727e:	d104      	bne.n	800728a <HAL_TIM_PWM_Start_DMA+0x196>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007288:	e00e      	b.n	80072a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b10      	cmp	r3, #16
 800728e:	d104      	bne.n	800729a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007298:	e006      	b.n	80072a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2202      	movs	r2, #2
 800729e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072a2:	e001      	b.n	80072a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e123      	b.n	80074f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b0c      	cmp	r3, #12
 80072ac:	f200 80ae 	bhi.w	800740c <HAL_TIM_PWM_Start_DMA+0x318>
 80072b0:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072ed 	.word	0x080072ed
 80072bc:	0800740d 	.word	0x0800740d
 80072c0:	0800740d 	.word	0x0800740d
 80072c4:	0800740d 	.word	0x0800740d
 80072c8:	08007335 	.word	0x08007335
 80072cc:	0800740d 	.word	0x0800740d
 80072d0:	0800740d 	.word	0x0800740d
 80072d4:	0800740d 	.word	0x0800740d
 80072d8:	0800737d 	.word	0x0800737d
 80072dc:	0800740d 	.word	0x0800740d
 80072e0:	0800740d 	.word	0x0800740d
 80072e4:	0800740d 	.word	0x0800740d
 80072e8:	080073c5 	.word	0x080073c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f0:	4a81      	ldr	r2, [pc, #516]	@ (80074f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 80072f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f8:	4a80      	ldr	r2, [pc, #512]	@ (80074fc <HAL_TIM_PWM_Start_DMA+0x408>)
 80072fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007300:	4a7f      	ldr	r2, [pc, #508]	@ (8007500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007302:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3334      	adds	r3, #52	@ 0x34
 8007310:	461a      	mov	r2, r3
 8007312:	887b      	ldrh	r3, [r7, #2]
 8007314:	f7fc f904 	bl	8003520 <HAL_DMA_Start_IT>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e0e6      	b.n	80074f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007330:	60da      	str	r2, [r3, #12]
      break;
 8007332:	e06e      	b.n	8007412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	4a6f      	ldr	r2, [pc, #444]	@ (80074f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800733a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	4a6e      	ldr	r2, [pc, #440]	@ (80074fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007348:	4a6d      	ldr	r2, [pc, #436]	@ (8007500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800734a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3338      	adds	r3, #56	@ 0x38
 8007358:	461a      	mov	r2, r3
 800735a:	887b      	ldrh	r3, [r7, #2]
 800735c:	f7fc f8e0 	bl	8003520 <HAL_DMA_Start_IT>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e0c2      	b.n	80074f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007378:	60da      	str	r2, [r3, #12]
      break;
 800737a:	e04a      	b.n	8007412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007380:	4a5d      	ldr	r2, [pc, #372]	@ (80074f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007382:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	4a5c      	ldr	r2, [pc, #368]	@ (80074fc <HAL_TIM_PWM_Start_DMA+0x408>)
 800738a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	4a5b      	ldr	r2, [pc, #364]	@ (8007500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007392:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	333c      	adds	r3, #60	@ 0x3c
 80073a0:	461a      	mov	r2, r3
 80073a2:	887b      	ldrh	r3, [r7, #2]
 80073a4:	f7fc f8bc 	bl	8003520 <HAL_DMA_Start_IT>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e09e      	b.n	80074f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073c0:	60da      	str	r2, [r3, #12]
      break;
 80073c2:	e026      	b.n	8007412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c8:	4a4b      	ldr	r2, [pc, #300]	@ (80074f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 80073ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d0:	4a4a      	ldr	r2, [pc, #296]	@ (80074fc <HAL_TIM_PWM_Start_DMA+0x408>)
 80073d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d8:	4a49      	ldr	r2, [pc, #292]	@ (8007500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80073da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3340      	adds	r3, #64	@ 0x40
 80073e8:	461a      	mov	r2, r3
 80073ea:	887b      	ldrh	r3, [r7, #2]
 80073ec:	f7fc f898 	bl	8003520 <HAL_DMA_Start_IT>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e07a      	b.n	80074f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007408:	60da      	str	r2, [r3, #12]
      break;
 800740a:	e002      	b.n	8007412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]
      break;
 8007410:	bf00      	nop
  }

  if (status == HAL_OK)
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d16a      	bne.n	80074ee <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2201      	movs	r2, #1
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f899 	bl	8008558 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a36      	ldr	r2, [pc, #216]	@ (8007504 <HAL_TIM_PWM_Start_DMA+0x410>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <HAL_TIM_PWM_Start_DMA+0x364>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a34      	ldr	r2, [pc, #208]	@ (8007508 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00e      	beq.n	8007458 <HAL_TIM_PWM_Start_DMA+0x364>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a33      	ldr	r2, [pc, #204]	@ (800750c <HAL_TIM_PWM_Start_DMA+0x418>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d009      	beq.n	8007458 <HAL_TIM_PWM_Start_DMA+0x364>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a31      	ldr	r2, [pc, #196]	@ (8007510 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_TIM_PWM_Start_DMA+0x364>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a30      	ldr	r2, [pc, #192]	@ (8007514 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d101      	bne.n	800745c <HAL_TIM_PWM_Start_DMA+0x368>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <HAL_TIM_PWM_Start_DMA+0x36a>
 800745c:	2300      	movs	r3, #0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a23      	ldr	r2, [pc, #140]	@ (8007504 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007484:	d013      	beq.n	80074ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a23      	ldr	r2, [pc, #140]	@ (8007518 <HAL_TIM_PWM_Start_DMA+0x424>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a21      	ldr	r2, [pc, #132]	@ (800751c <HAL_TIM_PWM_Start_DMA+0x428>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1a      	ldr	r2, [pc, #104]	@ (8007508 <HAL_TIM_PWM_Start_DMA+0x414>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a18      	ldr	r2, [pc, #96]	@ (800750c <HAL_TIM_PWM_Start_DMA+0x418>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d115      	bne.n	80074da <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007520 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b06      	cmp	r3, #6
 80074be:	d015      	beq.n	80074ec <HAL_TIM_PWM_Start_DMA+0x3f8>
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074c6:	d011      	beq.n	80074ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d8:	e008      	b.n	80074ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0201 	orr.w	r2, r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	e000      	b.n	80074ee <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	08007beb 	.word	0x08007beb
 80074fc:	08007c93 	.word	0x08007c93
 8007500:	08007b59 	.word	0x08007b59
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40013400 	.word	0x40013400
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400
 8007514:	40014800 	.word	0x40014800
 8007518:	40000400 	.word	0x40000400
 800751c:	40000800 	.word	0x40000800
 8007520:	00010007 	.word	0x00010007

08007524 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b0c      	cmp	r3, #12
 8007536:	d855      	bhi.n	80075e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007538:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007575 	.word	0x08007575
 8007544:	080075e5 	.word	0x080075e5
 8007548:	080075e5 	.word	0x080075e5
 800754c:	080075e5 	.word	0x080075e5
 8007550:	08007591 	.word	0x08007591
 8007554:	080075e5 	.word	0x080075e5
 8007558:	080075e5 	.word	0x080075e5
 800755c:	080075e5 	.word	0x080075e5
 8007560:	080075ad 	.word	0x080075ad
 8007564:	080075e5 	.word	0x080075e5
 8007568:	080075e5 	.word	0x080075e5
 800756c:	080075e5 	.word	0x080075e5
 8007570:	080075c9 	.word	0x080075c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007582:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	4618      	mov	r0, r3
 800758a:	f7fc f844 	bl	8003616 <HAL_DMA_Abort_IT>
      break;
 800758e:	e02c      	b.n	80075ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800759e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fc f836 	bl	8003616 <HAL_DMA_Abort_IT>
      break;
 80075aa:	e01e      	b.n	80075ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fc f828 	bl	8003616 <HAL_DMA_Abort_IT>
      break;
 80075c6:	e010      	b.n	80075ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fc f81a 	bl	8003616 <HAL_DMA_Abort_IT>
      break;
 80075e2:	e002      	b.n	80075ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
      break;
 80075e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 8081 	bne.w	80076f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 ffac 	bl	8008558 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a3e      	ldr	r2, [pc, #248]	@ (8007700 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a3d      	ldr	r2, [pc, #244]	@ (8007704 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a3b      	ldr	r2, [pc, #236]	@ (8007708 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a3a      	ldr	r2, [pc, #232]	@ (800770c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a38      	ldr	r2, [pc, #224]	@ (8007710 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d101      	bne.n	8007636 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007636:	2300      	movs	r3, #0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d017      	beq.n	800766c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a1a      	ldr	r2, [r3, #32]
 8007642:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <HAL_TIM_PWM_Stop_DMA+0x148>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a1a      	ldr	r2, [r3, #32]
 8007652:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d107      	bne.n	800766c <HAL_TIM_PWM_Stop_DMA+0x148>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800766a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007676:	4013      	ands	r3, r2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10f      	bne.n	800769c <HAL_TIM_PWM_Stop_DMA+0x178>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a1a      	ldr	r2, [r3, #32]
 8007682:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d107      	bne.n	800769c <HAL_TIM_PWM_Stop_DMA+0x178>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <HAL_TIM_PWM_Stop_DMA+0x188>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076aa:	e023      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d104      	bne.n	80076bc <HAL_TIM_PWM_Stop_DMA+0x198>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076ba:	e01b      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d104      	bne.n	80076cc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076ca:	e013      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b0c      	cmp	r3, #12
 80076d0:	d104      	bne.n	80076dc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076da:	e00b      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d104      	bne.n	80076ec <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076ea:	e003      	b.n	80076f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40012c00 	.word	0x40012c00
 8007704:	40013400 	.word	0x40013400
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400
 8007710:	40014800 	.word	0x40014800

08007714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800772e:	2302      	movs	r3, #2
 8007730:	e0ff      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b14      	cmp	r3, #20
 800773e:	f200 80f0 	bhi.w	8007922 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007742:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	0800779d 	.word	0x0800779d
 800774c:	08007923 	.word	0x08007923
 8007750:	08007923 	.word	0x08007923
 8007754:	08007923 	.word	0x08007923
 8007758:	080077dd 	.word	0x080077dd
 800775c:	08007923 	.word	0x08007923
 8007760:	08007923 	.word	0x08007923
 8007764:	08007923 	.word	0x08007923
 8007768:	0800781f 	.word	0x0800781f
 800776c:	08007923 	.word	0x08007923
 8007770:	08007923 	.word	0x08007923
 8007774:	08007923 	.word	0x08007923
 8007778:	0800785f 	.word	0x0800785f
 800777c:	08007923 	.word	0x08007923
 8007780:	08007923 	.word	0x08007923
 8007784:	08007923 	.word	0x08007923
 8007788:	080078a1 	.word	0x080078a1
 800778c:	08007923 	.word	0x08007923
 8007790:	08007923 	.word	0x08007923
 8007794:	08007923 	.word	0x08007923
 8007798:	080078e1 	.word	0x080078e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fb46 	bl	8007e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0208 	orr.w	r2, r2, #8
 80077b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0204 	bic.w	r2, r2, #4
 80077c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6999      	ldr	r1, [r3, #24]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	619a      	str	r2, [r3, #24]
      break;
 80077da:	e0a5      	b.n	8007928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fbb6 	bl	8007f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6999      	ldr	r1, [r3, #24]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	021a      	lsls	r2, r3, #8
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	619a      	str	r2, [r3, #24]
      break;
 800781c:	e084      	b.n	8007928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fc1f 	bl	8008068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0208 	orr.w	r2, r2, #8
 8007838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0204 	bic.w	r2, r2, #4
 8007848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69d9      	ldr	r1, [r3, #28]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	61da      	str	r2, [r3, #28]
      break;
 800785c:	e064      	b.n	8007928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fc87 	bl	8008178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69d9      	ldr	r1, [r3, #28]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	021a      	lsls	r2, r3, #8
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	61da      	str	r2, [r3, #28]
      break;
 800789e:	e043      	b.n	8007928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 fcf0 	bl	800828c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0208 	orr.w	r2, r2, #8
 80078ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0204 	bic.w	r2, r2, #4
 80078ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80078de:	e023      	b.n	8007928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fd34 	bl	8008354 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800790a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	021a      	lsls	r2, r3, #8
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007920:	e002      	b.n	8007928 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]
      break;
 8007926:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop

0800793c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_TIM_ConfigClockSource+0x1c>
 8007954:	2302      	movs	r3, #2
 8007956:	e0de      	b.n	8007b16 <HAL_TIM_ConfigClockSource+0x1da>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007976:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800797a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a63      	ldr	r2, [pc, #396]	@ (8007b20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	f000 80a9 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 8007998:	4a61      	ldr	r2, [pc, #388]	@ (8007b20 <HAL_TIM_ConfigClockSource+0x1e4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	f200 80ae 	bhi.w	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 80079a0:	4a60      	ldr	r2, [pc, #384]	@ (8007b24 <HAL_TIM_ConfigClockSource+0x1e8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	f000 80a1 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 80079a8:	4a5e      	ldr	r2, [pc, #376]	@ (8007b24 <HAL_TIM_ConfigClockSource+0x1e8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	f200 80a6 	bhi.w	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 80079b0:	4a5d      	ldr	r2, [pc, #372]	@ (8007b28 <HAL_TIM_ConfigClockSource+0x1ec>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	f000 8099 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 80079b8:	4a5b      	ldr	r2, [pc, #364]	@ (8007b28 <HAL_TIM_ConfigClockSource+0x1ec>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	f200 809e 	bhi.w	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 80079c0:	4a5a      	ldr	r2, [pc, #360]	@ (8007b2c <HAL_TIM_ConfigClockSource+0x1f0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	f000 8091 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 80079c8:	4a58      	ldr	r2, [pc, #352]	@ (8007b2c <HAL_TIM_ConfigClockSource+0x1f0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	f200 8096 	bhi.w	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 80079d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079d4:	f000 8089 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 80079d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079dc:	f200 808e 	bhi.w	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 80079e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079e4:	d03e      	beq.n	8007a64 <HAL_TIM_ConfigClockSource+0x128>
 80079e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ea:	f200 8087 	bhi.w	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f2:	f000 8086 	beq.w	8007b02 <HAL_TIM_ConfigClockSource+0x1c6>
 80079f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079fa:	d87f      	bhi.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 80079fc:	2b70      	cmp	r3, #112	@ 0x70
 80079fe:	d01a      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0xfa>
 8007a00:	2b70      	cmp	r3, #112	@ 0x70
 8007a02:	d87b      	bhi.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a04:	2b60      	cmp	r3, #96	@ 0x60
 8007a06:	d050      	beq.n	8007aaa <HAL_TIM_ConfigClockSource+0x16e>
 8007a08:	2b60      	cmp	r3, #96	@ 0x60
 8007a0a:	d877      	bhi.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a0c:	2b50      	cmp	r3, #80	@ 0x50
 8007a0e:	d03c      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x14e>
 8007a10:	2b50      	cmp	r3, #80	@ 0x50
 8007a12:	d873      	bhi.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a14:	2b40      	cmp	r3, #64	@ 0x40
 8007a16:	d058      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x18e>
 8007a18:	2b40      	cmp	r3, #64	@ 0x40
 8007a1a:	d86f      	bhi.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a1c:	2b30      	cmp	r3, #48	@ 0x30
 8007a1e:	d064      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 8007a20:	2b30      	cmp	r3, #48	@ 0x30
 8007a22:	d86b      	bhi.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d060      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d867      	bhi.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d05c      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d05a      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x1ae>
 8007a34:	e062      	b.n	8007afc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a46:	f000 fd67 	bl	8008518 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	609a      	str	r2, [r3, #8]
      break;
 8007a62:	e04f      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a74:	f000 fd50 	bl	8008518 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a86:	609a      	str	r2, [r3, #8]
      break;
 8007a88:	e03c      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a96:	461a      	mov	r2, r3
 8007a98:	f000 fcc2 	bl	8008420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2150      	movs	r1, #80	@ 0x50
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fd1b 	bl	80084de <TIM_ITRx_SetConfig>
      break;
 8007aa8:	e02c      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f000 fce1 	bl	800847e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2160      	movs	r1, #96	@ 0x60
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fd0b 	bl	80084de <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e01c      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f000 fca2 	bl	8008420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2140      	movs	r1, #64	@ 0x40
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fcfb 	bl	80084de <TIM_ITRx_SetConfig>
      break;
 8007ae8:	e00c      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f000 fcf2 	bl	80084de <TIM_ITRx_SetConfig>
      break;
 8007afa:	e003      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	73fb      	strb	r3, [r7, #15]
      break;
 8007b00:	e000      	b.n	8007b04 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	00100070 	.word	0x00100070
 8007b24:	00100040 	.word	0x00100040
 8007b28:	00100030 	.word	0x00100030
 8007b2c:	00100020 	.word	0x00100020

08007b30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d107      	bne.n	8007b80 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2201      	movs	r2, #1
 8007b74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b7e:	e02a      	b.n	8007bd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d107      	bne.n	8007b9a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b98:	e01d      	b.n	8007bd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d107      	bne.n	8007bb4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bb2:	e010      	b.n	8007bd6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d107      	bne.n	8007bce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bcc:	e003      	b.n	8007bd6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff ffb4 	bl	8007b44 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	771a      	strb	r2, [r3, #28]
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d10b      	bne.n	8007c1a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d136      	bne.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c18:	e031      	b.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d10b      	bne.n	8007c3c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2202      	movs	r2, #2
 8007c28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d125      	bne.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c3a:	e020      	b.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d10b      	bne.n	8007c5e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2204      	movs	r2, #4
 8007c4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d114      	bne.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c5c:	e00f      	b.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d10a      	bne.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7f9 fc3e 	bl	8001500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	771a      	strb	r2, [r3, #28]
}
 8007c8a:	bf00      	nop
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d103      	bne.n	8007cb2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	771a      	strb	r2, [r3, #28]
 8007cb0:	e019      	b.n	8007ce6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d103      	bne.n	8007cc4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	771a      	strb	r2, [r3, #28]
 8007cc2:	e010      	b.n	8007ce6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d103      	bne.n	8007cd6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	771a      	strb	r2, [r3, #28]
 8007cd4:	e007      	b.n	8007ce6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d102      	bne.n	8007ce6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2208      	movs	r2, #8
 8007ce4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff ff22 	bl	8007b30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	771a      	strb	r2, [r3, #28]
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a42      	ldr	r2, [pc, #264]	@ (8007e18 <TIM_Base_SetConfig+0x11c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00f      	beq.n	8007d34 <TIM_Base_SetConfig+0x38>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1a:	d00b      	beq.n	8007d34 <TIM_Base_SetConfig+0x38>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8007e1c <TIM_Base_SetConfig+0x120>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <TIM_Base_SetConfig+0x38>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a3e      	ldr	r2, [pc, #248]	@ (8007e20 <TIM_Base_SetConfig+0x124>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_Base_SetConfig+0x38>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8007e24 <TIM_Base_SetConfig+0x128>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d108      	bne.n	8007d46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a33      	ldr	r2, [pc, #204]	@ (8007e18 <TIM_Base_SetConfig+0x11c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01b      	beq.n	8007d86 <TIM_Base_SetConfig+0x8a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d54:	d017      	beq.n	8007d86 <TIM_Base_SetConfig+0x8a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a30      	ldr	r2, [pc, #192]	@ (8007e1c <TIM_Base_SetConfig+0x120>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <TIM_Base_SetConfig+0x8a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a2f      	ldr	r2, [pc, #188]	@ (8007e20 <TIM_Base_SetConfig+0x124>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00f      	beq.n	8007d86 <TIM_Base_SetConfig+0x8a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a2e      	ldr	r2, [pc, #184]	@ (8007e24 <TIM_Base_SetConfig+0x128>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00b      	beq.n	8007d86 <TIM_Base_SetConfig+0x8a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a2d      	ldr	r2, [pc, #180]	@ (8007e28 <TIM_Base_SetConfig+0x12c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d007      	beq.n	8007d86 <TIM_Base_SetConfig+0x8a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a2c      	ldr	r2, [pc, #176]	@ (8007e2c <TIM_Base_SetConfig+0x130>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d003      	beq.n	8007d86 <TIM_Base_SetConfig+0x8a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2b      	ldr	r2, [pc, #172]	@ (8007e30 <TIM_Base_SetConfig+0x134>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d108      	bne.n	8007d98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a16      	ldr	r2, [pc, #88]	@ (8007e18 <TIM_Base_SetConfig+0x11c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00f      	beq.n	8007de4 <TIM_Base_SetConfig+0xe8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a17      	ldr	r2, [pc, #92]	@ (8007e24 <TIM_Base_SetConfig+0x128>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00b      	beq.n	8007de4 <TIM_Base_SetConfig+0xe8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a16      	ldr	r2, [pc, #88]	@ (8007e28 <TIM_Base_SetConfig+0x12c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d007      	beq.n	8007de4 <TIM_Base_SetConfig+0xe8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a15      	ldr	r2, [pc, #84]	@ (8007e2c <TIM_Base_SetConfig+0x130>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_Base_SetConfig+0xe8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a14      	ldr	r2, [pc, #80]	@ (8007e30 <TIM_Base_SetConfig+0x134>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d103      	bne.n	8007dec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d105      	bne.n	8007e0a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f023 0201 	bic.w	r2, r3, #1
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	611a      	str	r2, [r3, #16]
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40012c00 	.word	0x40012c00
 8007e1c:	40000400 	.word	0x40000400
 8007e20:	40000800 	.word	0x40000800
 8007e24:	40013400 	.word	0x40013400
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800

08007e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	f023 0201 	bic.w	r2, r3, #1
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0303 	bic.w	r3, r3, #3
 8007e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f023 0302 	bic.w	r3, r3, #2
 8007e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f40 <TIM_OC1_SetConfig+0x10c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00f      	beq.n	8007eb4 <TIM_OC1_SetConfig+0x80>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a2b      	ldr	r2, [pc, #172]	@ (8007f44 <TIM_OC1_SetConfig+0x110>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d00b      	beq.n	8007eb4 <TIM_OC1_SetConfig+0x80>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007f48 <TIM_OC1_SetConfig+0x114>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d007      	beq.n	8007eb4 <TIM_OC1_SetConfig+0x80>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a29      	ldr	r2, [pc, #164]	@ (8007f4c <TIM_OC1_SetConfig+0x118>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_OC1_SetConfig+0x80>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a28      	ldr	r2, [pc, #160]	@ (8007f50 <TIM_OC1_SetConfig+0x11c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d10c      	bne.n	8007ece <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f023 0308 	bic.w	r3, r3, #8
 8007eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f023 0304 	bic.w	r3, r3, #4
 8007ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8007f40 <TIM_OC1_SetConfig+0x10c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00f      	beq.n	8007ef6 <TIM_OC1_SetConfig+0xc2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f44 <TIM_OC1_SetConfig+0x110>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00b      	beq.n	8007ef6 <TIM_OC1_SetConfig+0xc2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a19      	ldr	r2, [pc, #100]	@ (8007f48 <TIM_OC1_SetConfig+0x114>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d007      	beq.n	8007ef6 <TIM_OC1_SetConfig+0xc2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a18      	ldr	r2, [pc, #96]	@ (8007f4c <TIM_OC1_SetConfig+0x118>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d003      	beq.n	8007ef6 <TIM_OC1_SetConfig+0xc2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a17      	ldr	r2, [pc, #92]	@ (8007f50 <TIM_OC1_SetConfig+0x11c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d111      	bne.n	8007f1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	621a      	str	r2, [r3, #32]
}
 8007f34:	bf00      	nop
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40013400 	.word	0x40013400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800

08007f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	f023 0210 	bic.w	r2, r3, #16
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0320 	bic.w	r3, r3, #32
 8007fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a28      	ldr	r2, [pc, #160]	@ (8008054 <TIM_OC2_SetConfig+0x100>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_OC2_SetConfig+0x6c>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a27      	ldr	r2, [pc, #156]	@ (8008058 <TIM_OC2_SetConfig+0x104>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10d      	bne.n	8007fdc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a1d      	ldr	r2, [pc, #116]	@ (8008054 <TIM_OC2_SetConfig+0x100>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d00f      	beq.n	8008004 <TIM_OC2_SetConfig+0xb0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8008058 <TIM_OC2_SetConfig+0x104>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00b      	beq.n	8008004 <TIM_OC2_SetConfig+0xb0>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a1b      	ldr	r2, [pc, #108]	@ (800805c <TIM_OC2_SetConfig+0x108>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d007      	beq.n	8008004 <TIM_OC2_SetConfig+0xb0>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8008060 <TIM_OC2_SetConfig+0x10c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d003      	beq.n	8008004 <TIM_OC2_SetConfig+0xb0>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a19      	ldr	r2, [pc, #100]	@ (8008064 <TIM_OC2_SetConfig+0x110>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d113      	bne.n	800802c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800800a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40012c00 	.word	0x40012c00
 8008058:	40013400 	.word	0x40013400
 800805c:	40014000 	.word	0x40014000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800

08008068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800809a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	021b      	lsls	r3, r3, #8
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a27      	ldr	r2, [pc, #156]	@ (8008164 <TIM_OC3_SetConfig+0xfc>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_OC3_SetConfig+0x6a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a26      	ldr	r2, [pc, #152]	@ (8008168 <TIM_OC3_SetConfig+0x100>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d10d      	bne.n	80080ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008164 <TIM_OC3_SetConfig+0xfc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00f      	beq.n	8008116 <TIM_OC3_SetConfig+0xae>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <TIM_OC3_SetConfig+0x100>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00b      	beq.n	8008116 <TIM_OC3_SetConfig+0xae>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a1a      	ldr	r2, [pc, #104]	@ (800816c <TIM_OC3_SetConfig+0x104>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d007      	beq.n	8008116 <TIM_OC3_SetConfig+0xae>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a19      	ldr	r2, [pc, #100]	@ (8008170 <TIM_OC3_SetConfig+0x108>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d003      	beq.n	8008116 <TIM_OC3_SetConfig+0xae>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a18      	ldr	r2, [pc, #96]	@ (8008174 <TIM_OC3_SetConfig+0x10c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d113      	bne.n	800813e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800811c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	621a      	str	r2, [r3, #32]
}
 8008158:	bf00      	nop
 800815a:	371c      	adds	r7, #28
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40013400 	.word	0x40013400
 800816c:	40014000 	.word	0x40014000
 8008170:	40014400 	.word	0x40014400
 8008174:	40014800 	.word	0x40014800

08008178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	031b      	lsls	r3, r3, #12
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a28      	ldr	r2, [pc, #160]	@ (8008278 <TIM_OC4_SetConfig+0x100>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC4_SetConfig+0x6c>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a27      	ldr	r2, [pc, #156]	@ (800827c <TIM_OC4_SetConfig+0x104>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d10d      	bne.n	8008200 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	031b      	lsls	r3, r3, #12
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a1d      	ldr	r2, [pc, #116]	@ (8008278 <TIM_OC4_SetConfig+0x100>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00f      	beq.n	8008228 <TIM_OC4_SetConfig+0xb0>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a1c      	ldr	r2, [pc, #112]	@ (800827c <TIM_OC4_SetConfig+0x104>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_OC4_SetConfig+0xb0>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <TIM_OC4_SetConfig+0x108>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_OC4_SetConfig+0xb0>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a1a      	ldr	r2, [pc, #104]	@ (8008284 <TIM_OC4_SetConfig+0x10c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_OC4_SetConfig+0xb0>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a19      	ldr	r2, [pc, #100]	@ (8008288 <TIM_OC4_SetConfig+0x110>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d113      	bne.n	8008250 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800822e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008236:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	019b      	lsls	r3, r3, #6
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	019b      	lsls	r3, r3, #6
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	4313      	orrs	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40012c00 	.word	0x40012c00
 800827c:	40013400 	.word	0x40013400
 8008280:	40014000 	.word	0x40014000
 8008284:	40014400 	.word	0x40014400
 8008288:	40014800 	.word	0x40014800

0800828c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80082d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	041b      	lsls	r3, r3, #16
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a17      	ldr	r2, [pc, #92]	@ (8008340 <TIM_OC5_SetConfig+0xb4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00f      	beq.n	8008306 <TIM_OC5_SetConfig+0x7a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a16      	ldr	r2, [pc, #88]	@ (8008344 <TIM_OC5_SetConfig+0xb8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00b      	beq.n	8008306 <TIM_OC5_SetConfig+0x7a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a15      	ldr	r2, [pc, #84]	@ (8008348 <TIM_OC5_SetConfig+0xbc>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d007      	beq.n	8008306 <TIM_OC5_SetConfig+0x7a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a14      	ldr	r2, [pc, #80]	@ (800834c <TIM_OC5_SetConfig+0xc0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d003      	beq.n	8008306 <TIM_OC5_SetConfig+0x7a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a13      	ldr	r2, [pc, #76]	@ (8008350 <TIM_OC5_SetConfig+0xc4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d109      	bne.n	800831a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800830c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	621a      	str	r2, [r3, #32]
}
 8008334:	bf00      	nop
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	40012c00 	.word	0x40012c00
 8008344:	40013400 	.word	0x40013400
 8008348:	40014000 	.word	0x40014000
 800834c:	40014400 	.word	0x40014400
 8008350:	40014800 	.word	0x40014800

08008354 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4313      	orrs	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800839a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	051b      	lsls	r3, r3, #20
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a18      	ldr	r2, [pc, #96]	@ (800840c <TIM_OC6_SetConfig+0xb8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00f      	beq.n	80083d0 <TIM_OC6_SetConfig+0x7c>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a17      	ldr	r2, [pc, #92]	@ (8008410 <TIM_OC6_SetConfig+0xbc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00b      	beq.n	80083d0 <TIM_OC6_SetConfig+0x7c>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a16      	ldr	r2, [pc, #88]	@ (8008414 <TIM_OC6_SetConfig+0xc0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d007      	beq.n	80083d0 <TIM_OC6_SetConfig+0x7c>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a15      	ldr	r2, [pc, #84]	@ (8008418 <TIM_OC6_SetConfig+0xc4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_OC6_SetConfig+0x7c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a14      	ldr	r2, [pc, #80]	@ (800841c <TIM_OC6_SetConfig+0xc8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d109      	bne.n	80083e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	029b      	lsls	r3, r3, #10
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	621a      	str	r2, [r3, #32]
}
 80083fe:	bf00      	nop
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40012c00 	.word	0x40012c00
 8008410:	40013400 	.word	0x40013400
 8008414:	40014000 	.word	0x40014000
 8008418:	40014400 	.word	0x40014400
 800841c:	40014800 	.word	0x40014800

08008420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f023 0201 	bic.w	r2, r3, #1
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800844a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f023 030a 	bic.w	r3, r3, #10
 800845c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	621a      	str	r2, [r3, #32]
}
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800847e:	b480      	push	{r7}
 8008480:	b087      	sub	sp, #28
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	f023 0210 	bic.w	r2, r3, #16
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	031b      	lsls	r3, r3, #12
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	621a      	str	r2, [r3, #32]
}
 80084d2:	bf00      	nop
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084de:	b480      	push	{r7}
 80084e0:	b085      	sub	sp, #20
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80084f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	f043 0307 	orr.w	r3, r3, #7
 8008504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	609a      	str	r2, [r3, #8]
}
 800850c:	bf00      	nop
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	021a      	lsls	r2, r3, #8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	431a      	orrs	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4313      	orrs	r3, r2
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	609a      	str	r2, [r3, #8]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	2201      	movs	r2, #1
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a1a      	ldr	r2, [r3, #32]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	43db      	mvns	r3, r3
 800857a:	401a      	ands	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a1a      	ldr	r2, [r3, #32]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	fa01 f303 	lsl.w	r3, r1, r3
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e065      	b.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d004      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a2b      	ldr	r2, [pc, #172]	@ (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d108      	bne.n	8008602 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a1b      	ldr	r2, [pc, #108]	@ (8008694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d018      	beq.n	800865c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008632:	d013      	beq.n	800865c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a18      	ldr	r2, [pc, #96]	@ (800869c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00e      	beq.n	800865c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a17      	ldr	r2, [pc, #92]	@ (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d009      	beq.n	800865c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a12      	ldr	r2, [pc, #72]	@ (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d004      	beq.n	800865c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a13      	ldr	r2, [pc, #76]	@ (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d10c      	bne.n	8008676 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	4313      	orrs	r3, r2
 800866c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	40012c00 	.word	0x40012c00
 8008698:	40013400 	.word	0x40013400
 800869c:	40000400 	.word	0x40000400
 80086a0:	40000800 	.word	0x40000800
 80086a4:	40014000 	.word	0x40014000

080086a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e042      	b.n	8008740 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d106      	bne.n	80086d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7f9 f8ff 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2224      	movs	r2, #36	@ 0x24
 80086d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0201 	bic.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 faf4 	bl	8008ce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f825 	bl	8008748 <UART_SetConfig>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e01b      	b.n	8008740 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fb73 	bl	8008e24 <UART_CheckIdleState>
 800873e:	4603      	mov	r3, r0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800874c:	b08c      	sub	sp, #48	@ 0x30
 800874e:	af00      	add	r7, sp, #0
 8008750:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	431a      	orrs	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	431a      	orrs	r2, r3
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	4313      	orrs	r3, r2
 800876e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4bab      	ldr	r3, [pc, #684]	@ (8008a24 <UART_SetConfig+0x2dc>)
 8008778:	4013      	ands	r3, r2
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	6812      	ldr	r2, [r2, #0]
 800877e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008780:	430b      	orrs	r3, r1
 8008782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4aa0      	ldr	r2, [pc, #640]	@ (8008a28 <UART_SetConfig+0x2e0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087b0:	4313      	orrs	r3, r2
 80087b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80087be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c8:	430b      	orrs	r3, r1
 80087ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d2:	f023 010f 	bic.w	r1, r3, #15
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a91      	ldr	r2, [pc, #580]	@ (8008a2c <UART_SetConfig+0x2e4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d125      	bne.n	8008838 <UART_SetConfig+0xf0>
 80087ec:	4b90      	ldr	r3, [pc, #576]	@ (8008a30 <UART_SetConfig+0x2e8>)
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f2:	f003 0303 	and.w	r3, r3, #3
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d81a      	bhi.n	8008830 <UART_SetConfig+0xe8>
 80087fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008800 <UART_SetConfig+0xb8>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008811 	.word	0x08008811
 8008804:	08008821 	.word	0x08008821
 8008808:	08008819 	.word	0x08008819
 800880c:	08008829 	.word	0x08008829
 8008810:	2301      	movs	r3, #1
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008816:	e0d6      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008818:	2302      	movs	r3, #2
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800881e:	e0d2      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008820:	2304      	movs	r3, #4
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008826:	e0ce      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008828:	2308      	movs	r3, #8
 800882a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882e:	e0ca      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008830:	2310      	movs	r3, #16
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008836:	e0c6      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a7d      	ldr	r2, [pc, #500]	@ (8008a34 <UART_SetConfig+0x2ec>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d138      	bne.n	80088b4 <UART_SetConfig+0x16c>
 8008842:	4b7b      	ldr	r3, [pc, #492]	@ (8008a30 <UART_SetConfig+0x2e8>)
 8008844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008848:	f003 030c 	and.w	r3, r3, #12
 800884c:	2b0c      	cmp	r3, #12
 800884e:	d82d      	bhi.n	80088ac <UART_SetConfig+0x164>
 8008850:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <UART_SetConfig+0x110>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	0800888d 	.word	0x0800888d
 800885c:	080088ad 	.word	0x080088ad
 8008860:	080088ad 	.word	0x080088ad
 8008864:	080088ad 	.word	0x080088ad
 8008868:	0800889d 	.word	0x0800889d
 800886c:	080088ad 	.word	0x080088ad
 8008870:	080088ad 	.word	0x080088ad
 8008874:	080088ad 	.word	0x080088ad
 8008878:	08008895 	.word	0x08008895
 800887c:	080088ad 	.word	0x080088ad
 8008880:	080088ad 	.word	0x080088ad
 8008884:	080088ad 	.word	0x080088ad
 8008888:	080088a5 	.word	0x080088a5
 800888c:	2300      	movs	r3, #0
 800888e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008892:	e098      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008894:	2302      	movs	r3, #2
 8008896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800889a:	e094      	b.n	80089c6 <UART_SetConfig+0x27e>
 800889c:	2304      	movs	r3, #4
 800889e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a2:	e090      	b.n	80089c6 <UART_SetConfig+0x27e>
 80088a4:	2308      	movs	r3, #8
 80088a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088aa:	e08c      	b.n	80089c6 <UART_SetConfig+0x27e>
 80088ac:	2310      	movs	r3, #16
 80088ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b2:	e088      	b.n	80089c6 <UART_SetConfig+0x27e>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a5f      	ldr	r2, [pc, #380]	@ (8008a38 <UART_SetConfig+0x2f0>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d125      	bne.n	800890a <UART_SetConfig+0x1c2>
 80088be:	4b5c      	ldr	r3, [pc, #368]	@ (8008a30 <UART_SetConfig+0x2e8>)
 80088c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088c8:	2b30      	cmp	r3, #48	@ 0x30
 80088ca:	d016      	beq.n	80088fa <UART_SetConfig+0x1b2>
 80088cc:	2b30      	cmp	r3, #48	@ 0x30
 80088ce:	d818      	bhi.n	8008902 <UART_SetConfig+0x1ba>
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	d00a      	beq.n	80088ea <UART_SetConfig+0x1a2>
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d814      	bhi.n	8008902 <UART_SetConfig+0x1ba>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <UART_SetConfig+0x19a>
 80088dc:	2b10      	cmp	r3, #16
 80088de:	d008      	beq.n	80088f2 <UART_SetConfig+0x1aa>
 80088e0:	e00f      	b.n	8008902 <UART_SetConfig+0x1ba>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e8:	e06d      	b.n	80089c6 <UART_SetConfig+0x27e>
 80088ea:	2302      	movs	r3, #2
 80088ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f0:	e069      	b.n	80089c6 <UART_SetConfig+0x27e>
 80088f2:	2304      	movs	r3, #4
 80088f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f8:	e065      	b.n	80089c6 <UART_SetConfig+0x27e>
 80088fa:	2308      	movs	r3, #8
 80088fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008900:	e061      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008902:	2310      	movs	r3, #16
 8008904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008908:	e05d      	b.n	80089c6 <UART_SetConfig+0x27e>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a4b      	ldr	r2, [pc, #300]	@ (8008a3c <UART_SetConfig+0x2f4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d125      	bne.n	8008960 <UART_SetConfig+0x218>
 8008914:	4b46      	ldr	r3, [pc, #280]	@ (8008a30 <UART_SetConfig+0x2e8>)
 8008916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800891e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008920:	d016      	beq.n	8008950 <UART_SetConfig+0x208>
 8008922:	2bc0      	cmp	r3, #192	@ 0xc0
 8008924:	d818      	bhi.n	8008958 <UART_SetConfig+0x210>
 8008926:	2b80      	cmp	r3, #128	@ 0x80
 8008928:	d00a      	beq.n	8008940 <UART_SetConfig+0x1f8>
 800892a:	2b80      	cmp	r3, #128	@ 0x80
 800892c:	d814      	bhi.n	8008958 <UART_SetConfig+0x210>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <UART_SetConfig+0x1f0>
 8008932:	2b40      	cmp	r3, #64	@ 0x40
 8008934:	d008      	beq.n	8008948 <UART_SetConfig+0x200>
 8008936:	e00f      	b.n	8008958 <UART_SetConfig+0x210>
 8008938:	2300      	movs	r3, #0
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893e:	e042      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008940:	2302      	movs	r3, #2
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008946:	e03e      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008948:	2304      	movs	r3, #4
 800894a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894e:	e03a      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008950:	2308      	movs	r3, #8
 8008952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008956:	e036      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008958:	2310      	movs	r3, #16
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800895e:	e032      	b.n	80089c6 <UART_SetConfig+0x27e>
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a30      	ldr	r2, [pc, #192]	@ (8008a28 <UART_SetConfig+0x2e0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d12a      	bne.n	80089c0 <UART_SetConfig+0x278>
 800896a:	4b31      	ldr	r3, [pc, #196]	@ (8008a30 <UART_SetConfig+0x2e8>)
 800896c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008970:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008974:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008978:	d01a      	beq.n	80089b0 <UART_SetConfig+0x268>
 800897a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800897e:	d81b      	bhi.n	80089b8 <UART_SetConfig+0x270>
 8008980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008984:	d00c      	beq.n	80089a0 <UART_SetConfig+0x258>
 8008986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800898a:	d815      	bhi.n	80089b8 <UART_SetConfig+0x270>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <UART_SetConfig+0x250>
 8008990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008994:	d008      	beq.n	80089a8 <UART_SetConfig+0x260>
 8008996:	e00f      	b.n	80089b8 <UART_SetConfig+0x270>
 8008998:	2300      	movs	r3, #0
 800899a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800899e:	e012      	b.n	80089c6 <UART_SetConfig+0x27e>
 80089a0:	2302      	movs	r3, #2
 80089a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089a6:	e00e      	b.n	80089c6 <UART_SetConfig+0x27e>
 80089a8:	2304      	movs	r3, #4
 80089aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ae:	e00a      	b.n	80089c6 <UART_SetConfig+0x27e>
 80089b0:	2308      	movs	r3, #8
 80089b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089b6:	e006      	b.n	80089c6 <UART_SetConfig+0x27e>
 80089b8:	2310      	movs	r3, #16
 80089ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089be:	e002      	b.n	80089c6 <UART_SetConfig+0x27e>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a17      	ldr	r2, [pc, #92]	@ (8008a28 <UART_SetConfig+0x2e0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	f040 80a8 	bne.w	8008b22 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089d6:	2b08      	cmp	r3, #8
 80089d8:	d834      	bhi.n	8008a44 <UART_SetConfig+0x2fc>
 80089da:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <UART_SetConfig+0x298>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	08008a05 	.word	0x08008a05
 80089e4:	08008a45 	.word	0x08008a45
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a45 	.word	0x08008a45
 80089f0:	08008a13 	.word	0x08008a13
 80089f4:	08008a45 	.word	0x08008a45
 80089f8:	08008a45 	.word	0x08008a45
 80089fc:	08008a45 	.word	0x08008a45
 8008a00:	08008a1b 	.word	0x08008a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a04:	f7fe f85c 	bl	8006ac0 <HAL_RCC_GetPCLK1Freq>
 8008a08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a0a:	e021      	b.n	8008a50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a40 <UART_SetConfig+0x2f8>)
 8008a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a10:	e01e      	b.n	8008a50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a12:	f7fd ffe7 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8008a16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a18:	e01a      	b.n	8008a50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a20:	e016      	b.n	8008a50 <UART_SetConfig+0x308>
 8008a22:	bf00      	nop
 8008a24:	cfff69f3 	.word	0xcfff69f3
 8008a28:	40008000 	.word	0x40008000
 8008a2c:	40013800 	.word	0x40013800
 8008a30:	40021000 	.word	0x40021000
 8008a34:	40004400 	.word	0x40004400
 8008a38:	40004800 	.word	0x40004800
 8008a3c:	40004c00 	.word	0x40004c00
 8008a40:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 812a 	beq.w	8008cac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5c:	4a9e      	ldr	r2, [pc, #632]	@ (8008cd8 <UART_SetConfig+0x590>)
 8008a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a6a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	4613      	mov	r3, r2
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	4413      	add	r3, r2
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d305      	bcc.n	8008a88 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d903      	bls.n	8008a90 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a8e:	e10d      	b.n	8008cac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	2200      	movs	r2, #0
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	60fa      	str	r2, [r7, #12]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	4a8e      	ldr	r2, [pc, #568]	@ (8008cd8 <UART_SetConfig+0x590>)
 8008a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	607a      	str	r2, [r7, #4]
 8008aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ab2:	f7f7 fbb1 	bl	8000218 <__aeabi_uldivmod>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4610      	mov	r0, r2
 8008abc:	4619      	mov	r1, r3
 8008abe:	f04f 0200 	mov.w	r2, #0
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	020b      	lsls	r3, r1, #8
 8008ac8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008acc:	0202      	lsls	r2, r0, #8
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	6849      	ldr	r1, [r1, #4]
 8008ad2:	0849      	lsrs	r1, r1, #1
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	4605      	mov	r5, r0
 8008ada:	eb12 0804 	adds.w	r8, r2, r4
 8008ade:	eb43 0905 	adc.w	r9, r3, r5
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	469a      	mov	sl, r3
 8008aea:	4693      	mov	fp, r2
 8008aec:	4652      	mov	r2, sl
 8008aee:	465b      	mov	r3, fp
 8008af0:	4640      	mov	r0, r8
 8008af2:	4649      	mov	r1, r9
 8008af4:	f7f7 fb90 	bl	8000218 <__aeabi_uldivmod>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4613      	mov	r3, r2
 8008afe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b06:	d308      	bcc.n	8008b1a <UART_SetConfig+0x3d2>
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b0e:	d204      	bcs.n	8008b1a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	60da      	str	r2, [r3, #12]
 8008b18:	e0c8      	b.n	8008cac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b20:	e0c4      	b.n	8008cac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b2a:	d167      	bne.n	8008bfc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d828      	bhi.n	8008b86 <UART_SetConfig+0x43e>
 8008b34:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <UART_SetConfig+0x3f4>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b69 	.word	0x08008b69
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	08008b87 	.word	0x08008b87
 8008b4c:	08008b77 	.word	0x08008b77
 8008b50:	08008b87 	.word	0x08008b87
 8008b54:	08008b87 	.word	0x08008b87
 8008b58:	08008b87 	.word	0x08008b87
 8008b5c:	08008b7f 	.word	0x08008b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b60:	f7fd ffae 	bl	8006ac0 <HAL_RCC_GetPCLK1Freq>
 8008b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b66:	e014      	b.n	8008b92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b68:	f7fd ffc0 	bl	8006aec <HAL_RCC_GetPCLK2Freq>
 8008b6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b6e:	e010      	b.n	8008b92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b70:	4b5a      	ldr	r3, [pc, #360]	@ (8008cdc <UART_SetConfig+0x594>)
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b74:	e00d      	b.n	8008b92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b76:	f7fd ff35 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8008b7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b7c:	e009      	b.n	8008b92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b84:	e005      	b.n	8008b92 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8089 	beq.w	8008cac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9e:	4a4e      	ldr	r2, [pc, #312]	@ (8008cd8 <UART_SetConfig+0x590>)
 8008ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bac:	005a      	lsls	r2, r3, #1
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	441a      	add	r2, r3
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b0f      	cmp	r3, #15
 8008bc4:	d916      	bls.n	8008bf4 <UART_SetConfig+0x4ac>
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bcc:	d212      	bcs.n	8008bf4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	f023 030f 	bic.w	r3, r3, #15
 8008bd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	8bfb      	ldrh	r3, [r7, #30]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	8bfa      	ldrh	r2, [r7, #30]
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	e05b      	b.n	8008cac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008bfa:	e057      	b.n	8008cac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d828      	bhi.n	8008c56 <UART_SetConfig+0x50e>
 8008c04:	a201      	add	r2, pc, #4	@ (adr r2, 8008c0c <UART_SetConfig+0x4c4>)
 8008c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0a:	bf00      	nop
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	08008c57 	.word	0x08008c57
 8008c1c:	08008c47 	.word	0x08008c47
 8008c20:	08008c57 	.word	0x08008c57
 8008c24:	08008c57 	.word	0x08008c57
 8008c28:	08008c57 	.word	0x08008c57
 8008c2c:	08008c4f 	.word	0x08008c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c30:	f7fd ff46 	bl	8006ac0 <HAL_RCC_GetPCLK1Freq>
 8008c34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c36:	e014      	b.n	8008c62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c38:	f7fd ff58 	bl	8006aec <HAL_RCC_GetPCLK2Freq>
 8008c3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c3e:	e010      	b.n	8008c62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c40:	4b26      	ldr	r3, [pc, #152]	@ (8008cdc <UART_SetConfig+0x594>)
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c44:	e00d      	b.n	8008c62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c46:	f7fd fecd 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8008c4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c4c:	e009      	b.n	8008c62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c54:	e005      	b.n	8008c62 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c60:	bf00      	nop
    }

    if (pclk != 0U)
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d021      	beq.n	8008cac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8008cd8 <UART_SetConfig+0x590>)
 8008c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c72:	461a      	mov	r2, r3
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	441a      	add	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	2b0f      	cmp	r3, #15
 8008c90:	d909      	bls.n	8008ca6 <UART_SetConfig+0x55e>
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c98:	d205      	bcs.n	8008ca6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60da      	str	r2, [r3, #12]
 8008ca4:	e002      	b.n	8008cac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008cc8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3730      	adds	r7, #48	@ 0x30
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cd6:	bf00      	nop
 8008cd8:	0800d090 	.word	0x0800d090
 8008cdc:	00f42400 	.word	0x00f42400

08008ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d52:	f003 0304 	and.w	r3, r3, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	f003 0310 	and.w	r3, r3, #16
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01a      	beq.n	8008df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dde:	d10a      	bne.n	8008df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	605a      	str	r2, [r3, #4]
  }
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b098      	sub	sp, #96	@ 0x60
 8008e28:	af02      	add	r7, sp, #8
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e34:	f7f8 fe32 	bl	8001a9c <HAL_GetTick>
 8008e38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0308 	and.w	r3, r3, #8
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d12f      	bne.n	8008ea8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e50:	2200      	movs	r2, #0
 8008e52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f88e 	bl	8008f78 <UART_WaitOnFlagUntilTimeout>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d022      	beq.n	8008ea8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e6      	bne.n	8008e62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e063      	b.n	8008f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d149      	bne.n	8008f4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f857 	bl	8008f78 <UART_WaitOnFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d03c      	beq.n	8008f4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eee:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e6      	bne.n	8008ed0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3308      	adds	r3, #8
 8008f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f023 0301 	bic.w	r3, r3, #1
 8008f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f22:	61fa      	str	r2, [r7, #28]
 8008f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	69b9      	ldr	r1, [r7, #24]
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e5      	bne.n	8008f02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e012      	b.n	8008f70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3758      	adds	r7, #88	@ 0x58
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f88:	e04f      	b.n	800902a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d04b      	beq.n	800902a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f92:	f7f8 fd83 	bl	8001a9c <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d302      	bcc.n	8008fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e04e      	b.n	800904a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d037      	beq.n	800902a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b80      	cmp	r3, #128	@ 0x80
 8008fbe:	d034      	beq.n	800902a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b40      	cmp	r3, #64	@ 0x40
 8008fc4:	d031      	beq.n	800902a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	f003 0308 	and.w	r3, r3, #8
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d110      	bne.n	8008ff6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2208      	movs	r2, #8
 8008fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 f838 	bl	8009052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e029      	b.n	800904a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009004:	d111      	bne.n	800902a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800900e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f81e 	bl	8009052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2220      	movs	r2, #32
 800901a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e00f      	b.n	800904a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69da      	ldr	r2, [r3, #28]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4013      	ands	r3, r2
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	429a      	cmp	r2, r3
 8009038:	bf0c      	ite	eq
 800903a:	2301      	moveq	r3, #1
 800903c:	2300      	movne	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	461a      	mov	r2, r3
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	429a      	cmp	r2, r3
 8009046:	d0a0      	beq.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009052:	b480      	push	{r7}
 8009054:	b095      	sub	sp, #84	@ 0x54
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800906e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009078:	643b      	str	r3, [r7, #64]	@ 0x40
 800907a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800907e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e6      	bne.n	800905a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3308      	adds	r3, #8
 8009092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	61fb      	str	r3, [r7, #28]
   return(result);
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e3      	bne.n	800908c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d118      	bne.n	80090fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f023 0310 	bic.w	r3, r3, #16
 80090e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ea:	61bb      	str	r3, [r7, #24]
 80090ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6979      	ldr	r1, [r7, #20]
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	613b      	str	r3, [r7, #16]
   return(result);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e6      	bne.n	80090cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009112:	bf00      	nop
 8009114:	3754      	adds	r7, #84	@ 0x54
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_UARTEx_DisableFifoMode+0x16>
 8009130:	2302      	movs	r3, #2
 8009132:	e027      	b.n	8009184 <HAL_UARTEx_DisableFifoMode+0x66>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2224      	movs	r2, #36	@ 0x24
 8009140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0201 	bic.w	r2, r2, #1
 800915a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009162:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d101      	bne.n	80091a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091a4:	2302      	movs	r3, #2
 80091a6:	e02d      	b.n	8009204 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2224      	movs	r2, #36	@ 0x24
 80091b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0201 	bic.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f84f 	bl	8009288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800921c:	2b01      	cmp	r3, #1
 800921e:	d101      	bne.n	8009224 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009220:	2302      	movs	r3, #2
 8009222:	e02d      	b.n	8009280 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2224      	movs	r2, #36	@ 0x24
 8009230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0201 	bic.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f811 	bl	8009288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009294:	2b00      	cmp	r3, #0
 8009296:	d108      	bne.n	80092aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092a8:	e031      	b.n	800930e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092aa:	2308      	movs	r3, #8
 80092ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092ae:	2308      	movs	r3, #8
 80092b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	0e5b      	lsrs	r3, r3, #25
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	0f5b      	lsrs	r3, r3, #29
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	7b3a      	ldrb	r2, [r7, #12]
 80092d6:	4911      	ldr	r1, [pc, #68]	@ (800931c <UARTEx_SetNbDataToProcess+0x94>)
 80092d8:	5c8a      	ldrb	r2, [r1, r2]
 80092da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092de:	7b3a      	ldrb	r2, [r7, #12]
 80092e0:	490f      	ldr	r1, [pc, #60]	@ (8009320 <UARTEx_SetNbDataToProcess+0x98>)
 80092e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	7b7a      	ldrb	r2, [r7, #13]
 80092f4:	4909      	ldr	r1, [pc, #36]	@ (800931c <UARTEx_SetNbDataToProcess+0x94>)
 80092f6:	5c8a      	ldrb	r2, [r1, r2]
 80092f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092fc:	7b7a      	ldrb	r2, [r7, #13]
 80092fe:	4908      	ldr	r1, [pc, #32]	@ (8009320 <UARTEx_SetNbDataToProcess+0x98>)
 8009300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009302:	fb93 f3f2 	sdiv	r3, r3, r2
 8009306:	b29a      	uxth	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	0800d0a8 	.word	0x0800d0a8
 8009320:	0800d0b0 	.word	0x0800d0b0

08009324 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009334:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009338:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800935a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800935e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	b29b      	uxth	r3, r3
 800936c:	43db      	mvns	r3, r3
 800936e:	b29b      	uxth	r3, r3
 8009370:	4013      	ands	r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	1d3b      	adds	r3, r7, #4
 8009392:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b0a7      	sub	sp, #156	@ 0x9c
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80093e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	78db      	ldrb	r3, [r3, #3]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d81f      	bhi.n	8009436 <USB_ActivateEndpoint+0x72>
 80093f6:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <USB_ActivateEndpoint+0x38>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	0800940d 	.word	0x0800940d
 8009400:	08009429 	.word	0x08009429
 8009404:	0800943f 	.word	0x0800943f
 8009408:	0800941b 	.word	0x0800941b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800940c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009410:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009414:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009418:	e012      	b.n	8009440 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800941a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800941e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009422:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009426:	e00b      	b.n	8009440 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009428:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800942c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009430:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009434:	e004      	b.n	8009440 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800943c:	e000      	b.n	8009440 <USB_ActivateEndpoint+0x7c>
      break;
 800943e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	441a      	add	r2, r3
 800944a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800944e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800945a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800945e:	b29b      	uxth	r3, r3
 8009460:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	b21b      	sxth	r3, r3
 8009472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947a:	b21a      	sxth	r2, r3
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	b21b      	sxth	r3, r3
 8009482:	4313      	orrs	r3, r2
 8009484:	b21b      	sxth	r3, r3
 8009486:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	441a      	add	r2, r3
 8009494:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800949c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	7b1b      	ldrb	r3, [r3, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f040 8180 	bne.w	80097b6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8084 	beq.w	80095c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	61bb      	str	r3, [r7, #24]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	461a      	mov	r2, r3
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	4413      	add	r3, r2
 80094d2:	61bb      	str	r3, [r7, #24]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	00da      	lsls	r2, r3, #3
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	88db      	ldrh	r3, [r3, #6]
 80094e8:	085b      	lsrs	r3, r3, #1
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	827b      	strh	r3, [r7, #18]
 8009502:	8a7b      	ldrh	r3, [r7, #18]
 8009504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01b      	beq.n	8009544 <USB_ActivateEndpoint+0x180>
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	b29b      	uxth	r3, r3
 800951a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800951e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009522:	823b      	strh	r3, [r7, #16]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	441a      	add	r2, r3
 800952e:	8a3b      	ldrh	r3, [r7, #16]
 8009530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800953c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009540:	b29b      	uxth	r3, r3
 8009542:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	78db      	ldrb	r3, [r3, #3]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d020      	beq.n	800958e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800955e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009562:	81bb      	strh	r3, [r7, #12]
 8009564:	89bb      	ldrh	r3, [r7, #12]
 8009566:	f083 0320 	eor.w	r3, r3, #32
 800956a:	81bb      	strh	r3, [r7, #12]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	441a      	add	r2, r3
 8009576:	89bb      	ldrh	r3, [r7, #12]
 8009578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800957c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009588:	b29b      	uxth	r3, r3
 800958a:	8013      	strh	r3, [r2, #0]
 800958c:	e3f9      	b.n	8009d82 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	b29b      	uxth	r3, r3
 800959c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095a4:	81fb      	strh	r3, [r7, #14]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	441a      	add	r2, r3
 80095b0:	89fb      	ldrh	r3, [r7, #14]
 80095b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	8013      	strh	r3, [r2, #0]
 80095c6:	e3dc      	b.n	8009d82 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	461a      	mov	r2, r3
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	4413      	add	r3, r2
 80095da:	633b      	str	r3, [r7, #48]	@ 0x30
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	00da      	lsls	r2, r3, #3
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	4413      	add	r3, r2
 80095e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	88db      	ldrh	r3, [r3, #6]
 80095f0:	085b      	lsrs	r3, r3, #1
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009606:	b29b      	uxth	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960c:	4413      	add	r3, r2
 800960e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	00da      	lsls	r2, r3, #3
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	4413      	add	r3, r2
 800961a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800961e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800962a:	b29a      	uxth	r2, r3
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	801a      	strh	r2, [r3, #0]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <USB_ActivateEndpoint+0x28a>
 8009638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	b29b      	uxth	r3, r3
 800963e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009646:	b29a      	uxth	r2, r3
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	801a      	strh	r2, [r3, #0]
 800964c:	e041      	b.n	80096d2 <USB_ActivateEndpoint+0x30e>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b3e      	cmp	r3, #62	@ 0x3e
 8009654:	d81c      	bhi.n	8009690 <USB_ActivateEndpoint+0x2cc>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	085b      	lsrs	r3, r3, #1
 800965c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <USB_ActivateEndpoint+0x2b2>
 800966c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009670:	3301      	adds	r3, #1
 8009672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	b29a      	uxth	r2, r3
 800967c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009680:	b29b      	uxth	r3, r3
 8009682:	029b      	lsls	r3, r3, #10
 8009684:	b29b      	uxth	r3, r3
 8009686:	4313      	orrs	r3, r2
 8009688:	b29a      	uxth	r2, r3
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968c:	801a      	strh	r2, [r3, #0]
 800968e:	e020      	b.n	80096d2 <USB_ActivateEndpoint+0x30e>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	095b      	lsrs	r3, r3, #5
 8009696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	f003 031f 	and.w	r3, r3, #31
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <USB_ActivateEndpoint+0x2ec>
 80096a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096aa:	3b01      	subs	r3, #1
 80096ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	029b      	lsls	r3, r3, #10
 80096be:	b29b      	uxth	r3, r3
 80096c0:	4313      	orrs	r3, r2
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d01b      	beq.n	8009722 <USB_ActivateEndpoint+0x35e>
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009700:	843b      	strh	r3, [r7, #32]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	441a      	add	r2, r3
 800970c:	8c3b      	ldrh	r3, [r7, #32]
 800970e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800971a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800971e:	b29b      	uxth	r3, r3
 8009720:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d124      	bne.n	8009774 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800973c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009740:	83bb      	strh	r3, [r7, #28]
 8009742:	8bbb      	ldrh	r3, [r7, #28]
 8009744:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009748:	83bb      	strh	r3, [r7, #28]
 800974a:	8bbb      	ldrh	r3, [r7, #28]
 800974c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009750:	83bb      	strh	r3, [r7, #28]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	441a      	add	r2, r3
 800975c:	8bbb      	ldrh	r3, [r7, #28]
 800975e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800976a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800976e:	b29b      	uxth	r3, r3
 8009770:	8013      	strh	r3, [r2, #0]
 8009772:	e306      	b.n	8009d82 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800978a:	83fb      	strh	r3, [r7, #30]
 800978c:	8bfb      	ldrh	r3, [r7, #30]
 800978e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009792:	83fb      	strh	r3, [r7, #30]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	441a      	add	r2, r3
 800979e:	8bfb      	ldrh	r3, [r7, #30]
 80097a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	8013      	strh	r3, [r2, #0]
 80097b4:	e2e5      	b.n	8009d82 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	78db      	ldrb	r3, [r3, #3]
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d11e      	bne.n	80097fc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097d4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	441a      	add	r2, r3
 80097e2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80097e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80097f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	8013      	strh	r3, [r2, #0]
 80097fa:	e01d      	b.n	8009838 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b29b      	uxth	r3, r3
 800980a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800980e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009812:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	441a      	add	r2, r3
 8009820:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800982c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009834:	b29b      	uxth	r3, r3
 8009836:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009842:	b29b      	uxth	r3, r3
 8009844:	461a      	mov	r2, r3
 8009846:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009848:	4413      	add	r3, r2
 800984a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	00da      	lsls	r2, r3, #3
 8009852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009854:	4413      	add	r3, r2
 8009856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800985a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	891b      	ldrh	r3, [r3, #8]
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	b29b      	uxth	r3, r3
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	b29a      	uxth	r2, r3
 8009868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800986a:	801a      	strh	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009876:	b29b      	uxth	r3, r3
 8009878:	461a      	mov	r2, r3
 800987a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800987c:	4413      	add	r3, r2
 800987e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	00da      	lsls	r2, r3, #3
 8009886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009888:	4413      	add	r3, r2
 800988a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800988e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	895b      	ldrh	r3, [r3, #10]
 8009894:	085b      	lsrs	r3, r3, #1
 8009896:	b29b      	uxth	r3, r3
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	b29a      	uxth	r2, r3
 800989c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800989e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f040 81af 	bne.w	8009c08 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80098ba:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80098be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01d      	beq.n	8009902 <USB_ActivateEndpoint+0x53e>
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098dc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	441a      	add	r2, r3
 80098ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80098ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098fe:	b29b      	uxth	r3, r3
 8009900:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009912:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01d      	beq.n	800995a <USB_ActivateEndpoint+0x596>
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009934:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	441a      	add	r2, r3
 8009942:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800994a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800994e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009952:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009956:	b29b      	uxth	r3, r3
 8009958:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	785b      	ldrb	r3, [r3, #1]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d16b      	bne.n	8009a3a <USB_ActivateEndpoint+0x676>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800996c:	b29b      	uxth	r3, r3
 800996e:	461a      	mov	r2, r3
 8009970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009972:	4413      	add	r3, r2
 8009974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	00da      	lsls	r2, r3, #3
 800997c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800997e:	4413      	add	r3, r2
 8009980:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b29b      	uxth	r3, r3
 800998c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009990:	b29a      	uxth	r2, r3
 8009992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009994:	801a      	strh	r2, [r3, #0]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <USB_ActivateEndpoint+0x5f0>
 800999e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	e05d      	b.n	8009a70 <USB_ActivateEndpoint+0x6ac>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80099ba:	d81c      	bhi.n	80099f6 <USB_ActivateEndpoint+0x632>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	085b      	lsrs	r3, r3, #1
 80099c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d004      	beq.n	80099dc <USB_ActivateEndpoint+0x618>
 80099d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099d6:	3301      	adds	r3, #1
 80099d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	029b      	lsls	r3, r3, #10
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	4313      	orrs	r3, r2
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099f2:	801a      	strh	r2, [r3, #0]
 80099f4:	e03c      	b.n	8009a70 <USB_ActivateEndpoint+0x6ac>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	095b      	lsrs	r3, r3, #5
 80099fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f003 031f 	and.w	r3, r3, #31
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d104      	bne.n	8009a16 <USB_ActivateEndpoint+0x652>
 8009a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a10:	3b01      	subs	r3, #1
 8009a12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	029b      	lsls	r3, r3, #10
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	4313      	orrs	r3, r2
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	e01a      	b.n	8009a70 <USB_ActivateEndpoint+0x6ac>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d116      	bne.n	8009a70 <USB_ActivateEndpoint+0x6ac>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a52:	4413      	add	r3, r2
 8009a54:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	00da      	lsls	r2, r3, #3
 8009a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a5e:	4413      	add	r3, r2
 8009a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d16b      	bne.n	8009b54 <USB_ActivateEndpoint+0x790>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8c:	4413      	add	r3, r2
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	00da      	lsls	r2, r3, #3
 8009a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a98:	4413      	add	r3, r2
 8009a9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	801a      	strh	r2, [r3, #0]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <USB_ActivateEndpoint+0x70a>
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	801a      	strh	r2, [r3, #0]
 8009acc:	e05b      	b.n	8009b86 <USB_ActivateEndpoint+0x7c2>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ad4:	d81c      	bhi.n	8009b10 <USB_ActivateEndpoint+0x74c>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	085b      	lsrs	r3, r3, #1
 8009adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <USB_ActivateEndpoint+0x732>
 8009aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009af0:	3301      	adds	r3, #1
 8009af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	029b      	lsls	r3, r3, #10
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	4313      	orrs	r3, r2
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0c:	801a      	strh	r2, [r3, #0]
 8009b0e:	e03a      	b.n	8009b86 <USB_ActivateEndpoint+0x7c2>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	095b      	lsrs	r3, r3, #5
 8009b16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	f003 031f 	and.w	r3, r3, #31
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d104      	bne.n	8009b30 <USB_ActivateEndpoint+0x76c>
 8009b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	029b      	lsls	r3, r3, #10
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4313      	orrs	r3, r2
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	801a      	strh	r2, [r3, #0]
 8009b52:	e018      	b.n	8009b86 <USB_ActivateEndpoint+0x7c2>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	785b      	ldrb	r3, [r3, #1]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d114      	bne.n	8009b86 <USB_ActivateEndpoint+0x7c2>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	461a      	mov	r2, r3
 8009b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b68:	4413      	add	r3, r2
 8009b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	00da      	lsls	r2, r3, #3
 8009b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b74:	4413      	add	r3, r2
 8009b76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b84:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009b9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009ba0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ba4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009ba6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009ba8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009bac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	441a      	add	r2, r3
 8009bb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009be4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	441a      	add	r2, r3
 8009bf0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	8013      	strh	r3, [r2, #0]
 8009c06:	e0bc      	b.n	8009d82 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009c18:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d01d      	beq.n	8009c60 <USB_ActivateEndpoint+0x89c>
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	441a      	add	r2, r3
 8009c48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009c70:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01d      	beq.n	8009cb8 <USB_ActivateEndpoint+0x8f4>
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c92:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	441a      	add	r2, r3
 8009ca0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	78db      	ldrb	r3, [r3, #3]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d024      	beq.n	8009d0a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cd6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009cda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009cde:	f083 0320 	eor.w	r3, r3, #32
 8009ce2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	441a      	add	r2, r3
 8009cf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009cf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	8013      	strh	r3, [r2, #0]
 8009d08:	e01d      	b.n	8009d46 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d20:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	441a      	add	r2, r3
 8009d2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d5c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	441a      	add	r2, r3
 8009d6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d82:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	379c      	adds	r7, #156	@ 0x9c
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop

08009d94 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b08d      	sub	sp, #52	@ 0x34
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	7b1b      	ldrb	r3, [r3, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 808e 	bne.w	8009ec4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d044      	beq.n	8009e3a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	81bb      	strh	r3, [r7, #12]
 8009dbe:	89bb      	ldrh	r3, [r7, #12]
 8009dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d01b      	beq.n	8009e00 <USB_DeactivateEndpoint+0x6c>
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dde:	817b      	strh	r3, [r7, #10]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	441a      	add	r2, r3
 8009dea:	897b      	ldrh	r3, [r7, #10]
 8009dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009df8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e16:	813b      	strh	r3, [r7, #8]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	441a      	add	r2, r3
 8009e22:	893b      	ldrh	r3, [r7, #8]
 8009e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	8013      	strh	r3, [r2, #0]
 8009e38:	e192      	b.n	800a160 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	827b      	strh	r3, [r7, #18]
 8009e48:	8a7b      	ldrh	r3, [r7, #18]
 8009e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01b      	beq.n	8009e8a <USB_DeactivateEndpoint+0xf6>
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e68:	823b      	strh	r3, [r7, #16]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	441a      	add	r2, r3
 8009e74:	8a3b      	ldrh	r3, [r7, #16]
 8009e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ea0:	81fb      	strh	r3, [r7, #14]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	441a      	add	r2, r3
 8009eac:	89fb      	ldrh	r3, [r7, #14]
 8009eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	8013      	strh	r3, [r2, #0]
 8009ec2:	e14d      	b.n	800a160 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f040 80a5 	bne.w	800a018 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	843b      	strh	r3, [r7, #32]
 8009edc:	8c3b      	ldrh	r3, [r7, #32]
 8009ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d01b      	beq.n	8009f1e <USB_DeactivateEndpoint+0x18a>
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009efc:	83fb      	strh	r3, [r7, #30]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	441a      	add	r2, r3
 8009f08:	8bfb      	ldrh	r3, [r7, #30]
 8009f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	83bb      	strh	r3, [r7, #28]
 8009f2c:	8bbb      	ldrh	r3, [r7, #28]
 8009f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01b      	beq.n	8009f6e <USB_DeactivateEndpoint+0x1da>
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f4c:	837b      	strh	r3, [r7, #26]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	8b7b      	ldrh	r3, [r7, #26]
 8009f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f84:	833b      	strh	r3, [r7, #24]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	441a      	add	r2, r3
 8009f90:	8b3b      	ldrh	r3, [r7, #24]
 8009f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fbc:	82fb      	strh	r3, [r7, #22]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	441a      	add	r2, r3
 8009fc8:	8afb      	ldrh	r3, [r7, #22]
 8009fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ff4:	82bb      	strh	r3, [r7, #20]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	441a      	add	r2, r3
 800a000:	8abb      	ldrh	r3, [r7, #20]
 800a002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a00a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a00e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a012:	b29b      	uxth	r3, r3
 800a014:	8013      	strh	r3, [r2, #0]
 800a016:	e0a3      	b.n	800a160 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a026:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01b      	beq.n	800a068 <USB_DeactivateEndpoint+0x2d4>
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	881b      	ldrh	r3, [r3, #0]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a046:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	441a      	add	r2, r3
 800a052:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a05c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a064:	b29b      	uxth	r3, r3
 800a066:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a076:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01b      	beq.n	800a0b8 <USB_DeactivateEndpoint+0x324>
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a096:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	441a      	add	r2, r3
 800a0a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	441a      	add	r2, r3
 800a0da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a106:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	441a      	add	r2, r3
 800a112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a11c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a124:	b29b      	uxth	r3, r3
 800a126:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a13a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a13e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	441a      	add	r2, r3
 800a14a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a14c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3734      	adds	r7, #52	@ 0x34
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b0ac      	sub	sp, #176	@ 0xb0
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	f040 84ca 	bne.w	800ab16 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d904      	bls.n	800a198 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a196:	e003      	b.n	800a1a0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	7b1b      	ldrb	r3, [r3, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d122      	bne.n	800a1ee <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	6959      	ldr	r1, [r3, #20]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	88da      	ldrh	r2, [r3, #6]
 800a1b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 febd 	bl	800af36 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	613b      	str	r3, [r7, #16]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	00da      	lsls	r2, r3, #3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	801a      	strh	r2, [r3, #0]
 800a1ea:	f000 bc6f 	b.w	800aacc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	78db      	ldrb	r3, [r3, #3]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	f040 831e 	bne.w	800a834 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	6a1a      	ldr	r2, [r3, #32]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	429a      	cmp	r2, r3
 800a202:	f240 82cf 	bls.w	800a7a4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	441a      	add	r2, r3
 800a22a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a22e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a236:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a23e:	b29b      	uxth	r3, r3
 800a240:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	6a1a      	ldr	r2, [r3, #32]
 800a246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a24a:	1ad2      	subs	r2, r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 814f 	beq.w	800a506 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d16b      	bne.n	800a34c <USB_EPStartXfer+0x1de>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a27e:	b29b      	uxth	r3, r3
 800a280:	461a      	mov	r2, r3
 800a282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a284:	4413      	add	r3, r2
 800a286:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	00da      	lsls	r2, r3, #3
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	4413      	add	r3, r2
 800a292:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a296:	627b      	str	r3, [r7, #36]	@ 0x24
 800a298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10a      	bne.n	800a2c6 <USB_EPStartXfer+0x158>
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	801a      	strh	r2, [r3, #0]
 800a2c4:	e05b      	b.n	800a37e <USB_EPStartXfer+0x210>
 800a2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2cc:	d81c      	bhi.n	800a308 <USB_EPStartXfer+0x19a>
 800a2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2d2:	085b      	lsrs	r3, r3, #1
 800a2d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <USB_EPStartXfer+0x180>
 800a2e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	029b      	lsls	r3, r3, #10
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	4313      	orrs	r3, r2
 800a300:	b29a      	uxth	r2, r3
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	801a      	strh	r2, [r3, #0]
 800a306:	e03a      	b.n	800a37e <USB_EPStartXfer+0x210>
 800a308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a30c:	095b      	lsrs	r3, r3, #5
 800a30e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a316:	f003 031f 	and.w	r3, r3, #31
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d104      	bne.n	800a328 <USB_EPStartXfer+0x1ba>
 800a31e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a322:	3b01      	subs	r3, #1
 800a324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a332:	b29b      	uxth	r3, r3
 800a334:	029b      	lsls	r3, r3, #10
 800a336:	b29b      	uxth	r3, r3
 800a338:	4313      	orrs	r3, r2
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a344:	b29a      	uxth	r2, r3
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	801a      	strh	r2, [r3, #0]
 800a34a:	e018      	b.n	800a37e <USB_EPStartXfer+0x210>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	785b      	ldrb	r3, [r3, #1]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d114      	bne.n	800a37e <USB_EPStartXfer+0x210>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	4413      	add	r3, r2
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	00da      	lsls	r2, r3, #3
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	4413      	add	r3, r2
 800a36e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a378:	b29a      	uxth	r2, r3
 800a37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	895b      	ldrh	r3, [r3, #10]
 800a382:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	6959      	ldr	r1, [r3, #20]
 800a38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a38e:	b29b      	uxth	r3, r3
 800a390:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fdce 	bl	800af36 <USB_WritePMA>
            ep->xfer_buff += len;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	695a      	ldr	r2, [r3, #20]
 800a39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3a2:	441a      	add	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	6a1a      	ldr	r2, [r3, #32]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d907      	bls.n	800a3c4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	6a1a      	ldr	r2, [r3, #32]
 800a3b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3bc:	1ad2      	subs	r2, r2, r3
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	621a      	str	r2, [r3, #32]
 800a3c2:	e006      	b.n	800a3d2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	785b      	ldrb	r3, [r3, #1]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d16b      	bne.n	800a4b2 <USB_EPStartXfer+0x344>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	61bb      	str	r3, [r7, #24]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	00da      	lsls	r2, r3, #3
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	b29b      	uxth	r3, r3
 800a404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a408:	b29a      	uxth	r2, r3
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	801a      	strh	r2, [r3, #0]
 800a40e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <USB_EPStartXfer+0x2be>
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a424:	b29a      	uxth	r2, r3
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	801a      	strh	r2, [r3, #0]
 800a42a:	e05d      	b.n	800a4e8 <USB_EPStartXfer+0x37a>
 800a42c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a430:	2b3e      	cmp	r3, #62	@ 0x3e
 800a432:	d81c      	bhi.n	800a46e <USB_EPStartXfer+0x300>
 800a434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a438:	085b      	lsrs	r3, r3, #1
 800a43a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	2b00      	cmp	r3, #0
 800a448:	d004      	beq.n	800a454 <USB_EPStartXfer+0x2e6>
 800a44a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a44e:	3301      	adds	r3, #1
 800a450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	b29a      	uxth	r2, r3
 800a45a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a45e:	b29b      	uxth	r3, r3
 800a460:	029b      	lsls	r3, r3, #10
 800a462:	b29b      	uxth	r3, r3
 800a464:	4313      	orrs	r3, r2
 800a466:	b29a      	uxth	r2, r3
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	e03c      	b.n	800a4e8 <USB_EPStartXfer+0x37a>
 800a46e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a472:	095b      	lsrs	r3, r3, #5
 800a474:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a47c:	f003 031f 	and.w	r3, r3, #31
 800a480:	2b00      	cmp	r3, #0
 800a482:	d104      	bne.n	800a48e <USB_EPStartXfer+0x320>
 800a484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a488:	3b01      	subs	r3, #1
 800a48a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	b29a      	uxth	r2, r3
 800a494:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a498:	b29b      	uxth	r3, r3
 800a49a:	029b      	lsls	r3, r3, #10
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	801a      	strh	r2, [r3, #0]
 800a4b0:	e01a      	b.n	800a4e8 <USB_EPStartXfer+0x37a>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	785b      	ldrb	r3, [r3, #1]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d116      	bne.n	800a4e8 <USB_EPStartXfer+0x37a>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	623b      	str	r3, [r7, #32]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	623b      	str	r3, [r7, #32]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	00da      	lsls	r2, r3, #3
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a4dc:	61fb      	str	r3, [r7, #28]
 800a4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	891b      	ldrh	r3, [r3, #8]
 800a4ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	6959      	ldr	r1, [r3, #20]
 800a4f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fd19 	bl	800af36 <USB_WritePMA>
 800a504:	e2e2      	b.n	800aacc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d16b      	bne.n	800a5e6 <USB_EPStartXfer+0x478>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a518:	b29b      	uxth	r3, r3
 800a51a:	461a      	mov	r2, r3
 800a51c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a51e:	4413      	add	r3, r2
 800a520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	00da      	lsls	r2, r3, #3
 800a528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a52a:	4413      	add	r3, r2
 800a52c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a530:	647b      	str	r3, [r7, #68]	@ 0x44
 800a532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	b29b      	uxth	r3, r3
 800a538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a540:	801a      	strh	r2, [r3, #0]
 800a542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10a      	bne.n	800a560 <USB_EPStartXfer+0x3f2>
 800a54a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a558:	b29a      	uxth	r2, r3
 800a55a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a55c:	801a      	strh	r2, [r3, #0]
 800a55e:	e05d      	b.n	800a61c <USB_EPStartXfer+0x4ae>
 800a560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a564:	2b3e      	cmp	r3, #62	@ 0x3e
 800a566:	d81c      	bhi.n	800a5a2 <USB_EPStartXfer+0x434>
 800a568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a56c:	085b      	lsrs	r3, r3, #1
 800a56e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d004      	beq.n	800a588 <USB_EPStartXfer+0x41a>
 800a57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a582:	3301      	adds	r3, #1
 800a584:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a592:	b29b      	uxth	r3, r3
 800a594:	029b      	lsls	r3, r3, #10
 800a596:	b29b      	uxth	r3, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a59e:	801a      	strh	r2, [r3, #0]
 800a5a0:	e03c      	b.n	800a61c <USB_EPStartXfer+0x4ae>
 800a5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5b0:	f003 031f 	and.w	r3, r3, #31
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <USB_EPStartXfer+0x454>
 800a5b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a5c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	029b      	lsls	r3, r3, #10
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5e2:	801a      	strh	r2, [r3, #0]
 800a5e4:	e01a      	b.n	800a61c <USB_EPStartXfer+0x4ae>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d116      	bne.n	800a61c <USB_EPStartXfer+0x4ae>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5fe:	4413      	add	r3, r2
 800a600:	653b      	str	r3, [r7, #80]	@ 0x50
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	00da      	lsls	r2, r3, #3
 800a608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a60a:	4413      	add	r3, r2
 800a60c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a616:	b29a      	uxth	r2, r3
 800a618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a61a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	891b      	ldrh	r3, [r3, #8]
 800a620:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	6959      	ldr	r1, [r3, #20]
 800a628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fc7f 	bl	800af36 <USB_WritePMA>
            ep->xfer_buff += len;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	695a      	ldr	r2, [r3, #20]
 800a63c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a640:	441a      	add	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6a1a      	ldr	r2, [r3, #32]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d907      	bls.n	800a662 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6a1a      	ldr	r2, [r3, #32]
 800a656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	621a      	str	r2, [r3, #32]
 800a660:	e006      	b.n	800a670 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2200      	movs	r2, #0
 800a66e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	643b      	str	r3, [r7, #64]	@ 0x40
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	785b      	ldrb	r3, [r3, #1]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d16b      	bne.n	800a754 <USB_EPStartXfer+0x5e6>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a686:	b29b      	uxth	r3, r3
 800a688:	461a      	mov	r2, r3
 800a68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68c:	4413      	add	r3, r2
 800a68e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	00da      	lsls	r2, r3, #3
 800a696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a698:	4413      	add	r3, r2
 800a69a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ae:	801a      	strh	r2, [r3, #0]
 800a6b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10a      	bne.n	800a6ce <USB_EPStartXfer+0x560>
 800a6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ca:	801a      	strh	r2, [r3, #0]
 800a6cc:	e05b      	b.n	800a786 <USB_EPStartXfer+0x618>
 800a6ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6d4:	d81c      	bhi.n	800a710 <USB_EPStartXfer+0x5a2>
 800a6d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6da:	085b      	lsrs	r3, r3, #1
 800a6dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a6e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <USB_EPStartXfer+0x588>
 800a6ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a700:	b29b      	uxth	r3, r3
 800a702:	029b      	lsls	r3, r3, #10
 800a704:	b29b      	uxth	r3, r3
 800a706:	4313      	orrs	r3, r2
 800a708:	b29a      	uxth	r2, r3
 800a70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70c:	801a      	strh	r2, [r3, #0]
 800a70e:	e03a      	b.n	800a786 <USB_EPStartXfer+0x618>
 800a710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a714:	095b      	lsrs	r3, r3, #5
 800a716:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a71a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	2b00      	cmp	r3, #0
 800a724:	d104      	bne.n	800a730 <USB_EPStartXfer+0x5c2>
 800a726:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a72a:	3b01      	subs	r3, #1
 800a72c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	b29a      	uxth	r2, r3
 800a736:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	029b      	lsls	r3, r3, #10
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4313      	orrs	r3, r2
 800a742:	b29b      	uxth	r3, r3
 800a744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a750:	801a      	strh	r2, [r3, #0]
 800a752:	e018      	b.n	800a786 <USB_EPStartXfer+0x618>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d114      	bne.n	800a786 <USB_EPStartXfer+0x618>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a762:	b29b      	uxth	r3, r3
 800a764:	461a      	mov	r2, r3
 800a766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a768:	4413      	add	r3, r2
 800a76a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	00da      	lsls	r2, r3, #3
 800a772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a774:	4413      	add	r3, r2
 800a776:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a77c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a780:	b29a      	uxth	r2, r3
 800a782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a784:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	895b      	ldrh	r3, [r3, #10]
 800a78a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6959      	ldr	r1, [r3, #20]
 800a792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a796:	b29b      	uxth	r3, r3
 800a798:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fbca 	bl	800af36 <USB_WritePMA>
 800a7a2:	e193      	b.n	800aacc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a7be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7c2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	441a      	add	r2, r3
 800a7d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a7d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7f8:	4413      	add	r3, r2
 800a7fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	00da      	lsls	r2, r3, #3
 800a802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a804:	4413      	add	r3, r2
 800a806:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a80a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a80c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a810:	b29a      	uxth	r2, r3
 800a812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a814:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	891b      	ldrh	r3, [r3, #8]
 800a81a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6959      	ldr	r1, [r3, #20]
 800a822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a826:	b29b      	uxth	r3, r3
 800a828:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fb82 	bl	800af36 <USB_WritePMA>
 800a832:	e14b      	b.n	800aacc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	6a1a      	ldr	r2, [r3, #32]
 800a838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a83c:	1ad2      	subs	r2, r2, r3
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 809a 	beq.w	800a98e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d16b      	bne.n	800a93e <USB_EPStartXfer+0x7d0>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a870:	b29b      	uxth	r3, r3
 800a872:	461a      	mov	r2, r3
 800a874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a876:	4413      	add	r3, r2
 800a878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	00da      	lsls	r2, r3, #3
 800a880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a882:	4413      	add	r3, r2
 800a884:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a888:	667b      	str	r3, [r7, #100]	@ 0x64
 800a88a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a894:	b29a      	uxth	r2, r3
 800a896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a898:	801a      	strh	r2, [r3, #0]
 800a89a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <USB_EPStartXfer+0x74a>
 800a8a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	e05b      	b.n	800a970 <USB_EPStartXfer+0x802>
 800a8b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8be:	d81c      	bhi.n	800a8fa <USB_EPStartXfer+0x78c>
 800a8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8c4:	085b      	lsrs	r3, r3, #1
 800a8c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d004      	beq.n	800a8e0 <USB_EPStartXfer+0x772>
 800a8d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8da:	3301      	adds	r3, #1
 800a8dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	029b      	lsls	r3, r3, #10
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8f6:	801a      	strh	r2, [r3, #0]
 800a8f8:	e03a      	b.n	800a970 <USB_EPStartXfer+0x802>
 800a8fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8fe:	095b      	lsrs	r3, r3, #5
 800a900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a908:	f003 031f 	and.w	r3, r3, #31
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <USB_EPStartXfer+0x7ac>
 800a910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a914:	3b01      	subs	r3, #1
 800a916:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a91a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29a      	uxth	r2, r3
 800a920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a924:	b29b      	uxth	r3, r3
 800a926:	029b      	lsls	r3, r3, #10
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4313      	orrs	r3, r2
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a936:	b29a      	uxth	r2, r3
 800a938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a93a:	801a      	strh	r2, [r3, #0]
 800a93c:	e018      	b.n	800a970 <USB_EPStartXfer+0x802>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	785b      	ldrb	r3, [r3, #1]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d114      	bne.n	800a970 <USB_EPStartXfer+0x802>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	461a      	mov	r2, r3
 800a950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a952:	4413      	add	r3, r2
 800a954:	673b      	str	r3, [r7, #112]	@ 0x70
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	00da      	lsls	r2, r3, #3
 800a95c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a95e:	4413      	add	r3, r2
 800a960:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a964:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a96e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	895b      	ldrh	r3, [r3, #10]
 800a974:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	6959      	ldr	r1, [r3, #20]
 800a97c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a980:	b29b      	uxth	r3, r3
 800a982:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fad5 	bl	800af36 <USB_WritePMA>
 800a98c:	e09e      	b.n	800aacc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d16b      	bne.n	800aa6e <USB_EPStartXfer+0x900>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9a6:	4413      	add	r3, r2
 800a9a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	00da      	lsls	r2, r3, #3
 800a9b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9c8:	801a      	strh	r2, [r3, #0]
 800a9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <USB_EPStartXfer+0x87a>
 800a9d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9e4:	801a      	strh	r2, [r3, #0]
 800a9e6:	e063      	b.n	800aab0 <USB_EPStartXfer+0x942>
 800a9e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9ee:	d81c      	bhi.n	800aa2a <USB_EPStartXfer+0x8bc>
 800a9f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9f4:	085b      	lsrs	r3, r3, #1
 800a9f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d004      	beq.n	800aa10 <USB_EPStartXfer+0x8a2>
 800aa06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	029b      	lsls	r3, r3, #10
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	4313      	orrs	r3, r2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa26:	801a      	strh	r2, [r3, #0]
 800aa28:	e042      	b.n	800aab0 <USB_EPStartXfer+0x942>
 800aa2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa2e:	095b      	lsrs	r3, r3, #5
 800aa30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d104      	bne.n	800aa4a <USB_EPStartXfer+0x8dc>
 800aa40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa44:	3b01      	subs	r3, #1
 800aa46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	029b      	lsls	r3, r3, #10
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa6a:	801a      	strh	r2, [r3, #0]
 800aa6c:	e020      	b.n	800aab0 <USB_EPStartXfer+0x942>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	785b      	ldrb	r3, [r3, #1]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d11c      	bne.n	800aab0 <USB_EPStartXfer+0x942>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	00da      	lsls	r2, r3, #3
 800aa96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aaa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aaa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aaae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	891b      	ldrh	r3, [r3, #8]
 800aab4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	6959      	ldr	r1, [r3, #20]
 800aabc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fa35 	bl	800af36 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aae2:	817b      	strh	r3, [r7, #10]
 800aae4:	897b      	ldrh	r3, [r7, #10]
 800aae6:	f083 0310 	eor.w	r3, r3, #16
 800aaea:	817b      	strh	r3, [r7, #10]
 800aaec:	897b      	ldrh	r3, [r7, #10]
 800aaee:	f083 0320 	eor.w	r3, r3, #32
 800aaf2:	817b      	strh	r3, [r7, #10]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	441a      	add	r2, r3
 800aafe:	897b      	ldrh	r3, [r7, #10]
 800ab00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	8013      	strh	r3, [r2, #0]
 800ab14:	e0d5      	b.n	800acc2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	7b1b      	ldrb	r3, [r3, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d156      	bne.n	800abcc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d122      	bne.n	800ab6c <USB_EPStartXfer+0x9fe>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	78db      	ldrb	r3, [r3, #3]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d11e      	bne.n	800ab6c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab44:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	441a      	add	r2, r3
 800ab52:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ab56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab5e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ab62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	8013      	strh	r3, [r2, #0]
 800ab6a:	e01d      	b.n	800aba8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ab7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab82:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	441a      	add	r2, r3
 800ab90:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800ab94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	699a      	ldr	r2, [r3, #24]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d907      	bls.n	800abc4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	699a      	ldr	r2, [r3, #24]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	1ad2      	subs	r2, r2, r3
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	619a      	str	r2, [r3, #24]
 800abc2:	e054      	b.n	800ac6e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2200      	movs	r2, #0
 800abc8:	619a      	str	r2, [r3, #24]
 800abca:	e050      	b.n	800ac6e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	78db      	ldrb	r3, [r3, #3]
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d142      	bne.n	800ac5a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d048      	beq.n	800ac6e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800abec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800abf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <USB_EPStartXfer+0xa96>
 800abf8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800abfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10b      	bne.n	800ac1c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ac08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d12e      	bne.n	800ac6e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ac14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d128      	bne.n	800ac6e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	881b      	ldrh	r3, [r3, #0]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac32:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	441a      	add	r2, r3
 800ac40:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800ac44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	8013      	strh	r3, [r2, #0]
 800ac58:	e009      	b.n	800ac6e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	78db      	ldrb	r3, [r3, #3]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d103      	bne.n	800ac6a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2200      	movs	r2, #0
 800ac66:	619a      	str	r2, [r3, #24]
 800ac68:	e001      	b.n	800ac6e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e02a      	b.n	800acc4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	441a      	add	r2, r3
 800acaa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800acae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	37b0      	adds	r7, #176	@ 0xb0
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d020      	beq.n	800ad20 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	b29b      	uxth	r3, r3
 800acec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acf4:	81bb      	strh	r3, [r7, #12]
 800acf6:	89bb      	ldrh	r3, [r7, #12]
 800acf8:	f083 0310 	eor.w	r3, r3, #16
 800acfc:	81bb      	strh	r3, [r7, #12]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	441a      	add	r2, r3
 800ad08:	89bb      	ldrh	r3, [r7, #12]
 800ad0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	8013      	strh	r3, [r2, #0]
 800ad1e:	e01f      	b.n	800ad60 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad36:	81fb      	strh	r3, [r7, #14]
 800ad38:	89fb      	ldrh	r3, [r7, #14]
 800ad3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ad3e:	81fb      	strh	r3, [r7, #14]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	441a      	add	r2, r3
 800ad4a:	89fb      	ldrh	r3, [r7, #14]
 800ad4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b087      	sub	sp, #28
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	785b      	ldrb	r3, [r3, #1]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d04c      	beq.n	800ae1a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	823b      	strh	r3, [r7, #16]
 800ad8e:	8a3b      	ldrh	r3, [r7, #16]
 800ad90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d01b      	beq.n	800add0 <USB_EPClearStall+0x62>
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adae:	81fb      	strh	r3, [r7, #14]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	441a      	add	r2, r3
 800adba:	89fb      	ldrh	r3, [r7, #14]
 800adbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800adcc:	b29b      	uxth	r3, r3
 800adce:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	78db      	ldrb	r3, [r3, #3]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d06c      	beq.n	800aeb2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	881b      	ldrh	r3, [r3, #0]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adee:	81bb      	strh	r3, [r7, #12]
 800adf0:	89bb      	ldrh	r3, [r7, #12]
 800adf2:	f083 0320 	eor.w	r3, r3, #32
 800adf6:	81bb      	strh	r3, [r7, #12]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	441a      	add	r2, r3
 800ae02:	89bb      	ldrh	r3, [r7, #12]
 800ae04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	8013      	strh	r3, [r2, #0]
 800ae18:	e04b      	b.n	800aeb2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	82fb      	strh	r3, [r7, #22]
 800ae28:	8afb      	ldrh	r3, [r7, #22]
 800ae2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d01b      	beq.n	800ae6a <USB_EPClearStall+0xfc>
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae48:	82bb      	strh	r3, [r7, #20]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	441a      	add	r2, r3
 800ae54:	8abb      	ldrh	r3, [r7, #20]
 800ae56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	881b      	ldrh	r3, [r3, #0]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae80:	827b      	strh	r3, [r7, #18]
 800ae82:	8a7b      	ldrh	r3, [r7, #18]
 800ae84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae88:	827b      	strh	r3, [r7, #18]
 800ae8a:	8a7b      	ldrh	r3, [r7, #18]
 800ae8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae90:	827b      	strh	r3, [r7, #18]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	441a      	add	r2, r3
 800ae9c:	8a7b      	ldrh	r3, [r7, #18]
 800ae9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	371c      	adds	r7, #28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d103      	bne.n	800aeda <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2280      	movs	r2, #128	@ 0x80
 800aed6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aefc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af00:	b29a      	uxth	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800af16:	b480      	push	{r7}
 800af18:	b085      	sub	sp, #20
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800af24:	b29b      	uxth	r3, r3
 800af26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800af28:	68fb      	ldr	r3, [r7, #12]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af36:	b480      	push	{r7}
 800af38:	b08b      	sub	sp, #44	@ 0x2c
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	4611      	mov	r1, r2
 800af42:	461a      	mov	r2, r3
 800af44:	460b      	mov	r3, r1
 800af46:	80fb      	strh	r3, [r7, #6]
 800af48:	4613      	mov	r3, r2
 800af4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af4c:	88bb      	ldrh	r3, [r7, #4]
 800af4e:	3301      	adds	r3, #1
 800af50:	085b      	lsrs	r3, r3, #1
 800af52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af5c:	88fa      	ldrh	r2, [r7, #6]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	4413      	add	r3, r2
 800af62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af6c:	e01c      	b.n	800afa8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	3301      	adds	r3, #1
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	b21b      	sxth	r3, r3
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	b21a      	sxth	r2, r3
 800af80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af84:	4313      	orrs	r3, r2
 800af86:	b21b      	sxth	r3, r3
 800af88:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	8a7a      	ldrh	r2, [r7, #18]
 800af8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	3302      	adds	r3, #2
 800af94:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	3301      	adds	r3, #1
 800af9a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	3301      	adds	r3, #1
 800afa0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	3b01      	subs	r3, #1
 800afa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800afa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1df      	bne.n	800af6e <USB_WritePMA+0x38>
  }
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	372c      	adds	r7, #44	@ 0x2c
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b08b      	sub	sp, #44	@ 0x2c
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	4611      	mov	r1, r2
 800afc8:	461a      	mov	r2, r3
 800afca:	460b      	mov	r3, r1
 800afcc:	80fb      	strh	r3, [r7, #6]
 800afce:	4613      	mov	r3, r2
 800afd0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800afd2:	88bb      	ldrh	r3, [r7, #4]
 800afd4:	085b      	lsrs	r3, r3, #1
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afe2:	88fa      	ldrh	r2, [r7, #6]
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	627b      	str	r3, [r7, #36]	@ 0x24
 800aff2:	e018      	b.n	800b026 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	3302      	adds	r3, #2
 800b000:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	b2da      	uxtb	r2, r3
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	3301      	adds	r3, #1
 800b00e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	b2da      	uxtb	r2, r3
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	3301      	adds	r3, #1
 800b01e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b022:	3b01      	subs	r3, #1
 800b024:	627b      	str	r3, [r7, #36]	@ 0x24
 800b026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1e3      	bne.n	800aff4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b02c:	88bb      	ldrh	r3, [r7, #4]
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	b29b      	uxth	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	d007      	beq.n	800b048 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	b2da      	uxtb	r2, r3
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	701a      	strb	r2, [r3, #0]
  }
}
 800b048:	bf00      	nop
 800b04a:	372c      	adds	r7, #44	@ 0x2c
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800b060:	2010      	movs	r0, #16
 800b062:	f001 fe3d 	bl	800cce0 <USBD_static_malloc>
 800b066:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d105      	bne.n	800b07a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b076:	2302      	movs	r3, #2
 800b078:	e01b      	b.n	800b0b2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	7c1b      	ldrb	r3, [r3, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2207      	movs	r2, #7
 800b08e:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800b090:	e002      	b.n	800b098 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800b098:	2304      	movs	r3, #4
 800b09a:	2203      	movs	r2, #3
 800b09c:	2181      	movs	r1, #129	@ 0x81
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 fd0d 	bl	800cabe <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b082      	sub	sp, #8
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800b0c6:	2181      	movs	r1, #129	@ 0x81
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 fd1e 	bl	800cb0a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d009      	beq.n	800b0f8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f001 fe06 	bl	800ccfc <USBD_static_free>
    pdev->pClassData = NULL;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b114:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b124:	2303      	movs	r3, #3
 800b126:	e0e8      	b.n	800b2fa <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b130:	2b00      	cmp	r3, #0
 800b132:	d046      	beq.n	800b1c2 <USBD_HID_Setup+0xbe>
 800b134:	2b20      	cmp	r3, #32
 800b136:	f040 80d8 	bne.w	800b2ea <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	785b      	ldrb	r3, [r3, #1]
 800b13e:	3b02      	subs	r3, #2
 800b140:	2b09      	cmp	r3, #9
 800b142:	d836      	bhi.n	800b1b2 <USBD_HID_Setup+0xae>
 800b144:	a201      	add	r2, pc, #4	@ (adr r2, 800b14c <USBD_HID_Setup+0x48>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b1a3 	.word	0x0800b1a3
 800b150:	0800b183 	.word	0x0800b183
 800b154:	0800b1b3 	.word	0x0800b1b3
 800b158:	0800b1b3 	.word	0x0800b1b3
 800b15c:	0800b1b3 	.word	0x0800b1b3
 800b160:	0800b1b3 	.word	0x0800b1b3
 800b164:	0800b1b3 	.word	0x0800b1b3
 800b168:	0800b1b3 	.word	0x0800b1b3
 800b16c:	0800b191 	.word	0x0800b191
 800b170:	0800b175 	.word	0x0800b175
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	885b      	ldrh	r3, [r3, #2]
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	601a      	str	r2, [r3, #0]
          break;
 800b180:	e01e      	b.n	800b1c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 f9b0 	bl	800c4ee <USBD_CtlSendData>
          break;
 800b18e:	e017      	b.n	800b1c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	885b      	ldrh	r3, [r3, #2]
 800b194:	0a1b      	lsrs	r3, r3, #8
 800b196:	b29b      	uxth	r3, r3
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	461a      	mov	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	605a      	str	r2, [r3, #4]
          break;
 800b1a0:	e00e      	b.n	800b1c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 f99f 	bl	800c4ee <USBD_CtlSendData>
          break;
 800b1b0:	e006      	b.n	800b1c0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f001 f929 	bl	800c40c <USBD_CtlError>
          ret = USBD_FAIL;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	75fb      	strb	r3, [r7, #23]
          break;
 800b1be:	bf00      	nop
      }
      break;
 800b1c0:	e09a      	b.n	800b2f8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	785b      	ldrb	r3, [r3, #1]
 800b1c6:	2b0b      	cmp	r3, #11
 800b1c8:	f200 8086 	bhi.w	800b2d8 <USBD_HID_Setup+0x1d4>
 800b1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <USBD_HID_Setup+0xd0>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b205 	.word	0x0800b205
 800b1d8:	0800b2e7 	.word	0x0800b2e7
 800b1dc:	0800b2d9 	.word	0x0800b2d9
 800b1e0:	0800b2d9 	.word	0x0800b2d9
 800b1e4:	0800b2d9 	.word	0x0800b2d9
 800b1e8:	0800b2d9 	.word	0x0800b2d9
 800b1ec:	0800b22f 	.word	0x0800b22f
 800b1f0:	0800b2d9 	.word	0x0800b2d9
 800b1f4:	0800b2d9 	.word	0x0800b2d9
 800b1f8:	0800b2d9 	.word	0x0800b2d9
 800b1fc:	0800b287 	.word	0x0800b287
 800b200:	0800b2b1 	.word	0x0800b2b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d107      	bne.n	800b220 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b210:	f107 030a 	add.w	r3, r7, #10
 800b214:	2202      	movs	r2, #2
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f001 f968 	bl	800c4ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b21e:	e063      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f001 f8f2 	bl	800c40c <USBD_CtlError>
            ret = USBD_FAIL;
 800b228:	2303      	movs	r3, #3
 800b22a:	75fb      	strb	r3, [r7, #23]
          break;
 800b22c:	e05c      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	885b      	ldrh	r3, [r3, #2]
 800b232:	0a1b      	lsrs	r3, r3, #8
 800b234:	b29b      	uxth	r3, r3
 800b236:	2b22      	cmp	r3, #34	@ 0x22
 800b238:	d108      	bne.n	800b24c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	88db      	ldrh	r3, [r3, #6]
 800b23e:	2b4a      	cmp	r3, #74	@ 0x4a
 800b240:	bf28      	it	cs
 800b242:	234a      	movcs	r3, #74	@ 0x4a
 800b244:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800b246:	4b2f      	ldr	r3, [pc, #188]	@ (800b304 <USBD_HID_Setup+0x200>)
 800b248:	613b      	str	r3, [r7, #16]
 800b24a:	e015      	b.n	800b278 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	885b      	ldrh	r3, [r3, #2]
 800b250:	0a1b      	lsrs	r3, r3, #8
 800b252:	b29b      	uxth	r3, r3
 800b254:	2b21      	cmp	r3, #33	@ 0x21
 800b256:	d108      	bne.n	800b26a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800b258:	4b2b      	ldr	r3, [pc, #172]	@ (800b308 <USBD_HID_Setup+0x204>)
 800b25a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	88db      	ldrh	r3, [r3, #6]
 800b260:	2b09      	cmp	r3, #9
 800b262:	bf28      	it	cs
 800b264:	2309      	movcs	r3, #9
 800b266:	82bb      	strh	r3, [r7, #20]
 800b268:	e006      	b.n	800b278 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 f8cd 	bl	800c40c <USBD_CtlError>
            ret = USBD_FAIL;
 800b272:	2303      	movs	r3, #3
 800b274:	75fb      	strb	r3, [r7, #23]
            break;
 800b276:	e037      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800b278:	8abb      	ldrh	r3, [r7, #20]
 800b27a:	461a      	mov	r2, r3
 800b27c:	6939      	ldr	r1, [r7, #16]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 f935 	bl	800c4ee <USBD_CtlSendData>
          break;
 800b284:	e030      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d107      	bne.n	800b2a2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3308      	adds	r3, #8
 800b296:	2201      	movs	r2, #1
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f001 f927 	bl	800c4ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2a0:	e022      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 f8b1 	bl	800c40c <USBD_CtlError>
            ret = USBD_FAIL;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b2ae:	e01b      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d106      	bne.n	800b2ca <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	885b      	ldrh	r3, [r3, #2]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2c8:	e00e      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 f89d 	bl	800c40c <USBD_CtlError>
            ret = USBD_FAIL;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2d6:	e007      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 f896 	bl	800c40c <USBD_CtlError>
          ret = USBD_FAIL;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	75fb      	strb	r3, [r7, #23]
          break;
 800b2e4:	e000      	b.n	800b2e8 <USBD_HID_Setup+0x1e4>
          break;
 800b2e6:	bf00      	nop
      }
      break;
 800b2e8:	e006      	b.n	800b2f8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f001 f88d 	bl	800c40c <USBD_CtlError>
      ret = USBD_FAIL;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f6:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	200000cc 	.word	0x200000cc
 800b308:	200000b4 	.word	0x200000b4

0800b30c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	4613      	mov	r3, r2
 800b318:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b320:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800b328:	2303      	movs	r3, #3
 800b32a:	e013      	b.n	800b354 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b03      	cmp	r3, #3
 800b336:	d10c      	bne.n	800b352 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	7b1b      	ldrb	r3, [r3, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d108      	bne.n	800b352 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2201      	movs	r2, #1
 800b344:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	2181      	movs	r1, #129	@ 0x81
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f001 fc84 	bl	800cc5a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2222      	movs	r2, #34	@ 0x22
 800b368:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800b36a:	4b03      	ldr	r3, [pc, #12]	@ (800b378 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	20000048 	.word	0x20000048

0800b37c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2222      	movs	r2, #34	@ 0x22
 800b388:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800b38a:	4b03      	ldr	r3, [pc, #12]	@ (800b398 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	2000006c 	.word	0x2000006c

0800b39c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2222      	movs	r2, #34	@ 0x22
 800b3a8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800b3aa:	4b03      	ldr	r3, [pc, #12]	@ (800b3b8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	20000090 	.word	0x20000090

0800b3bc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	220a      	movs	r2, #10
 800b3ec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800b3ee:	4b03      	ldr	r3, [pc, #12]	@ (800b3fc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	200000c0 	.word	0x200000c0

0800b400 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b414:	2303      	movs	r3, #3
 800b416:	e01f      	b.n	800b458 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d003      	beq.n	800b43e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	79fa      	ldrb	r2, [r7, #7]
 800b44a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f001 facd 	bl	800c9ec <USBD_LL_Init>
 800b452:	4603      	mov	r3, r0
 800b454:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b456:	7dfb      	ldrb	r3, [r7, #23]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b46a:	2300      	movs	r3, #0
 800b46c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b474:	2303      	movs	r3, #3
 800b476:	e016      	b.n	800b4a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b494:	f107 020e 	add.w	r2, r7, #14
 800b498:	4610      	mov	r0, r2
 800b49a:	4798      	blx	r3
 800b49c:	4602      	mov	r2, r0
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 fae6 	bl	800ca88 <USBD_LL_Start>
 800b4bc:	4603      	mov	r3, r0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	78fa      	ldrb	r2, [r7, #3]
 800b500:	4611      	mov	r1, r2
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
 800b506:	4603      	mov	r3, r0
 800b508:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b526:	2b00      	cmp	r3, #0
 800b528:	d007      	beq.n	800b53a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	78fa      	ldrb	r2, [r7, #3]
 800b534:	4611      	mov	r1, r2
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	4798      	blx	r3
  }

  return USBD_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 ff1e 	bl	800c398 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b56a:	461a      	mov	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b578:	f003 031f 	and.w	r3, r3, #31
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d01a      	beq.n	800b5b6 <USBD_LL_SetupStage+0x72>
 800b580:	2b02      	cmp	r3, #2
 800b582:	d822      	bhi.n	800b5ca <USBD_LL_SetupStage+0x86>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <USBD_LL_SetupStage+0x4a>
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d00a      	beq.n	800b5a2 <USBD_LL_SetupStage+0x5e>
 800b58c:	e01d      	b.n	800b5ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f9f0 	bl	800b97c <USBD_StdDevReq>
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]
      break;
 800b5a0:	e020      	b.n	800b5e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fa54 	bl	800ba58 <USBD_StdItfReq>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b4:	e016      	b.n	800b5e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa93 	bl	800baea <USBD_StdEPReq>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5c8:	e00c      	b.n	800b5e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 fab5 	bl	800cb48 <USBD_LL_StallEP>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e2:	bf00      	nop
  }

  return ret;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b086      	sub	sp, #24
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	607a      	str	r2, [r7, #4]
 800b5fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5fc:	7afb      	ldrb	r3, [r7, #11]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d138      	bne.n	800b674 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b608:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b610:	2b03      	cmp	r3, #3
 800b612:	d14a      	bne.n	800b6aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d913      	bls.n	800b648 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	689a      	ldr	r2, [r3, #8]
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	1ad2      	subs	r2, r2, r3
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	4293      	cmp	r3, r2
 800b638:	bf28      	it	cs
 800b63a:	4613      	movcs	r3, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	6879      	ldr	r1, [r7, #4]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 ff80 	bl	800c546 <USBD_CtlContinueRx>
 800b646:	e030      	b.n	800b6aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b03      	cmp	r3, #3
 800b652:	d10b      	bne.n	800b66c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d005      	beq.n	800b66c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 ff7b 	bl	800c568 <USBD_CtlSendStatus>
 800b672:	e01a      	b.n	800b6aa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	d114      	bne.n	800b6aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00e      	beq.n	800b6aa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	7afa      	ldrb	r2, [r7, #11]
 800b696:	4611      	mov	r1, r2
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	4798      	blx	r3
 800b69c:	4603      	mov	r3, r0
 800b69e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
 800b6a8:	e000      	b.n	800b6ac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d16b      	bne.n	800b7a0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	3314      	adds	r3, #20
 800b6cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d156      	bne.n	800b786 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	689a      	ldr	r2, [r3, #8]
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d914      	bls.n	800b70e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	689a      	ldr	r2, [r3, #8]
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	1ad2      	subs	r2, r2, r3
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 ff12 	bl	800c524 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b700:	2300      	movs	r3, #0
 800b702:	2200      	movs	r2, #0
 800b704:	2100      	movs	r1, #0
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f001 fac8 	bl	800cc9c <USBD_LL_PrepareReceive>
 800b70c:	e03b      	b.n	800b786 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	68da      	ldr	r2, [r3, #12]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	429a      	cmp	r2, r3
 800b718:	d11c      	bne.n	800b754 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b722:	429a      	cmp	r2, r3
 800b724:	d316      	bcc.n	800b754 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b730:	429a      	cmp	r2, r3
 800b732:	d20f      	bcs.n	800b754 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b734:	2200      	movs	r2, #0
 800b736:	2100      	movs	r1, #0
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fef3 	bl	800c524 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b746:	2300      	movs	r3, #0
 800b748:	2200      	movs	r2, #0
 800b74a:	2100      	movs	r1, #0
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f001 faa5 	bl	800cc9c <USBD_LL_PrepareReceive>
 800b752:	e018      	b.n	800b786 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	d10b      	bne.n	800b778 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d005      	beq.n	800b778 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b778:	2180      	movs	r1, #128	@ 0x80
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f001 f9e4 	bl	800cb48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f000 ff04 	bl	800c58e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d122      	bne.n	800b7d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7ff fe98 	bl	800b4c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b79e:	e01a      	b.n	800b7d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d114      	bne.n	800b7d6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00e      	beq.n	800b7d6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7be:	695b      	ldr	r3, [r3, #20]
 800b7c0:	7afa      	ldrb	r2, [r7, #11]
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	4798      	blx	r3
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
 800b7d4:	e000      	b.n	800b7d8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b810:	2303      	movs	r3, #3
 800b812:	e02f      	b.n	800b874 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00f      	beq.n	800b83e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d009      	beq.n	800b83e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	6852      	ldr	r2, [r2, #4]
 800b836:	b2d2      	uxtb	r2, r2
 800b838:	4611      	mov	r1, r2
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b83e:	2340      	movs	r3, #64	@ 0x40
 800b840:	2200      	movs	r2, #0
 800b842:	2100      	movs	r1, #0
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f001 f93a 	bl	800cabe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2240      	movs	r2, #64	@ 0x40
 800b856:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b85a:	2340      	movs	r3, #64	@ 0x40
 800b85c:	2200      	movs	r2, #0
 800b85e:	2180      	movs	r1, #128	@ 0x80
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f001 f92c 	bl	800cabe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2240      	movs	r2, #64	@ 0x40
 800b870:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	78fa      	ldrb	r2, [r7, #3]
 800b88c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2204      	movs	r2, #4
 800b8b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d106      	bne.n	800b8ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e012      	b.n	800b934 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b03      	cmp	r3, #3
 800b918:	d10b      	bne.n	800b932 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d005      	beq.n	800b932 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	3301      	adds	r3, #1
 800b952:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b95a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b95e:	021b      	lsls	r3, r3, #8
 800b960:	b21a      	sxth	r2, r3
 800b962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b966:	4313      	orrs	r3, r2
 800b968:	b21b      	sxth	r3, r3
 800b96a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b96c:	89fb      	ldrh	r3, [r7, #14]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	371c      	adds	r7, #28
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b992:	2b40      	cmp	r3, #64	@ 0x40
 800b994:	d005      	beq.n	800b9a2 <USBD_StdDevReq+0x26>
 800b996:	2b40      	cmp	r3, #64	@ 0x40
 800b998:	d853      	bhi.n	800ba42 <USBD_StdDevReq+0xc6>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00b      	beq.n	800b9b6 <USBD_StdDevReq+0x3a>
 800b99e:	2b20      	cmp	r3, #32
 800b9a0:	d14f      	bne.n	800ba42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	4798      	blx	r3
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b4:	e04a      	b.n	800ba4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	785b      	ldrb	r3, [r3, #1]
 800b9ba:	2b09      	cmp	r3, #9
 800b9bc:	d83b      	bhi.n	800ba36 <USBD_StdDevReq+0xba>
 800b9be:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c4 <USBD_StdDevReq+0x48>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800ba19 	.word	0x0800ba19
 800b9c8:	0800ba2d 	.word	0x0800ba2d
 800b9cc:	0800ba37 	.word	0x0800ba37
 800b9d0:	0800ba23 	.word	0x0800ba23
 800b9d4:	0800ba37 	.word	0x0800ba37
 800b9d8:	0800b9f7 	.word	0x0800b9f7
 800b9dc:	0800b9ed 	.word	0x0800b9ed
 800b9e0:	0800ba37 	.word	0x0800ba37
 800b9e4:	0800ba0f 	.word	0x0800ba0f
 800b9e8:	0800ba01 	.word	0x0800ba01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f9de 	bl	800bdb0 <USBD_GetDescriptor>
          break;
 800b9f4:	e024      	b.n	800ba40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fb43 	bl	800c084 <USBD_SetAddress>
          break;
 800b9fe:	e01f      	b.n	800ba40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fb82 	bl	800c10c <USBD_SetConfig>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
          break;
 800ba0c:	e018      	b.n	800ba40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fc21 	bl	800c258 <USBD_GetConfig>
          break;
 800ba16:	e013      	b.n	800ba40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fc52 	bl	800c2c4 <USBD_GetStatus>
          break;
 800ba20:	e00e      	b.n	800ba40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fc81 	bl	800c32c <USBD_SetFeature>
          break;
 800ba2a:	e009      	b.n	800ba40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fc90 	bl	800c354 <USBD_ClrFeature>
          break;
 800ba34:	e004      	b.n	800ba40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fce7 	bl	800c40c <USBD_CtlError>
          break;
 800ba3e:	bf00      	nop
      }
      break;
 800ba40:	e004      	b.n	800ba4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fce1 	bl	800c40c <USBD_CtlError>
      break;
 800ba4a:	bf00      	nop
  }

  return ret;
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop

0800ba58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba6e:	2b40      	cmp	r3, #64	@ 0x40
 800ba70:	d005      	beq.n	800ba7e <USBD_StdItfReq+0x26>
 800ba72:	2b40      	cmp	r3, #64	@ 0x40
 800ba74:	d82f      	bhi.n	800bad6 <USBD_StdItfReq+0x7e>
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <USBD_StdItfReq+0x26>
 800ba7a:	2b20      	cmp	r3, #32
 800ba7c:	d12b      	bne.n	800bad6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	3b01      	subs	r3, #1
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d81d      	bhi.n	800bac8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	889b      	ldrh	r3, [r3, #4]
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d813      	bhi.n	800babe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	4798      	blx	r3
 800baa4:	4603      	mov	r3, r0
 800baa6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	88db      	ldrh	r3, [r3, #6]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d110      	bne.n	800bad2 <USBD_StdItfReq+0x7a>
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10d      	bne.n	800bad2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fd56 	bl	800c568 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800babc:	e009      	b.n	800bad2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fca3 	bl	800c40c <USBD_CtlError>
          break;
 800bac6:	e004      	b.n	800bad2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fc9e 	bl	800c40c <USBD_CtlError>
          break;
 800bad0:	e000      	b.n	800bad4 <USBD_StdItfReq+0x7c>
          break;
 800bad2:	bf00      	nop
      }
      break;
 800bad4:	e004      	b.n	800bae0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bad6:	6839      	ldr	r1, [r7, #0]
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fc97 	bl	800c40c <USBD_CtlError>
      break;
 800bade:	bf00      	nop
  }

  return ret;
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	889b      	ldrh	r3, [r3, #4]
 800bafc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb06:	2b40      	cmp	r3, #64	@ 0x40
 800bb08:	d007      	beq.n	800bb1a <USBD_StdEPReq+0x30>
 800bb0a:	2b40      	cmp	r3, #64	@ 0x40
 800bb0c:	f200 8145 	bhi.w	800bd9a <USBD_StdEPReq+0x2b0>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00c      	beq.n	800bb2e <USBD_StdEPReq+0x44>
 800bb14:	2b20      	cmp	r3, #32
 800bb16:	f040 8140 	bne.w	800bd9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	4798      	blx	r3
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb2c:	e13a      	b.n	800bda4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	785b      	ldrb	r3, [r3, #1]
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d007      	beq.n	800bb46 <USBD_StdEPReq+0x5c>
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	f300 8129 	bgt.w	800bd8e <USBD_StdEPReq+0x2a4>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d07f      	beq.n	800bc40 <USBD_StdEPReq+0x156>
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d03c      	beq.n	800bbbe <USBD_StdEPReq+0xd4>
 800bb44:	e123      	b.n	800bd8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d002      	beq.n	800bb58 <USBD_StdEPReq+0x6e>
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d016      	beq.n	800bb84 <USBD_StdEPReq+0x9a>
 800bb56:	e02c      	b.n	800bbb2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00d      	beq.n	800bb7a <USBD_StdEPReq+0x90>
 800bb5e:	7bbb      	ldrb	r3, [r7, #14]
 800bb60:	2b80      	cmp	r3, #128	@ 0x80
 800bb62:	d00a      	beq.n	800bb7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 ffed 	bl	800cb48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb6e:	2180      	movs	r1, #128	@ 0x80
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 ffe9 	bl	800cb48 <USBD_LL_StallEP>
 800bb76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb78:	e020      	b.n	800bbbc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc45 	bl	800c40c <USBD_CtlError>
              break;
 800bb82:	e01b      	b.n	800bbbc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	885b      	ldrh	r3, [r3, #2]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10e      	bne.n	800bbaa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <USBD_StdEPReq+0xc0>
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
 800bb94:	2b80      	cmp	r3, #128	@ 0x80
 800bb96:	d008      	beq.n	800bbaa <USBD_StdEPReq+0xc0>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	88db      	ldrh	r3, [r3, #6]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 ffcf 	bl	800cb48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fcdc 	bl	800c568 <USBD_CtlSendStatus>

              break;
 800bbb0:	e004      	b.n	800bbbc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fc29 	bl	800c40c <USBD_CtlError>
              break;
 800bbba:	bf00      	nop
          }
          break;
 800bbbc:	e0ec      	b.n	800bd98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d002      	beq.n	800bbd0 <USBD_StdEPReq+0xe6>
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d016      	beq.n	800bbfc <USBD_StdEPReq+0x112>
 800bbce:	e030      	b.n	800bc32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00d      	beq.n	800bbf2 <USBD_StdEPReq+0x108>
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	2b80      	cmp	r3, #128	@ 0x80
 800bbda:	d00a      	beq.n	800bbf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 ffb1 	bl	800cb48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbe6:	2180      	movs	r1, #128	@ 0x80
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 ffad 	bl	800cb48 <USBD_LL_StallEP>
 800bbee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbf0:	e025      	b.n	800bc3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fc09 	bl	800c40c <USBD_CtlError>
              break;
 800bbfa:	e020      	b.n	800bc3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	885b      	ldrh	r3, [r3, #2]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d11b      	bne.n	800bc3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d004      	beq.n	800bc18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 ffb7 	bl	800cb86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fca5 	bl	800c568 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	4798      	blx	r3
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bc30:	e004      	b.n	800bc3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fbe9 	bl	800c40c <USBD_CtlError>
              break;
 800bc3a:	e000      	b.n	800bc3e <USBD_StdEPReq+0x154>
              break;
 800bc3c:	bf00      	nop
          }
          break;
 800bc3e:	e0ab      	b.n	800bd98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d002      	beq.n	800bc52 <USBD_StdEPReq+0x168>
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d032      	beq.n	800bcb6 <USBD_StdEPReq+0x1cc>
 800bc50:	e097      	b.n	800bd82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc52:	7bbb      	ldrb	r3, [r7, #14]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d007      	beq.n	800bc68 <USBD_StdEPReq+0x17e>
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	2b80      	cmp	r3, #128	@ 0x80
 800bc5c:	d004      	beq.n	800bc68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fbd3 	bl	800c40c <USBD_CtlError>
                break;
 800bc66:	e091      	b.n	800bd8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	da0b      	bge.n	800bc88 <USBD_StdEPReq+0x19e>
 800bc70:	7bbb      	ldrb	r3, [r7, #14]
 800bc72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	3310      	adds	r3, #16
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	3304      	adds	r3, #4
 800bc86:	e00b      	b.n	800bca0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	3304      	adds	r3, #4
 800bca0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2200      	movs	r2, #0
 800bca6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	4619      	mov	r1, r3
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fc1d 	bl	800c4ee <USBD_CtlSendData>
              break;
 800bcb4:	e06a      	b.n	800bd8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da11      	bge.n	800bce2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	f003 020f 	and.w	r2, r3, #15
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	440b      	add	r3, r1
 800bcd0:	3324      	adds	r3, #36	@ 0x24
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d117      	bne.n	800bd08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fb96 	bl	800c40c <USBD_CtlError>
                  break;
 800bce0:	e054      	b.n	800bd8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
 800bce4:	f003 020f 	and.w	r2, r3, #15
 800bce8:	6879      	ldr	r1, [r7, #4]
 800bcea:	4613      	mov	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	440b      	add	r3, r1
 800bcf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d104      	bne.n	800bd08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fb83 	bl	800c40c <USBD_CtlError>
                  break;
 800bd06:	e041      	b.n	800bd8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	da0b      	bge.n	800bd28 <USBD_StdEPReq+0x23e>
 800bd10:	7bbb      	ldrb	r3, [r7, #14]
 800bd12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	3310      	adds	r3, #16
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	4413      	add	r3, r2
 800bd24:	3304      	adds	r3, #4
 800bd26:	e00b      	b.n	800bd40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd28:	7bbb      	ldrb	r3, [r7, #14]
 800bd2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	3304      	adds	r3, #4
 800bd40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd42:	7bbb      	ldrb	r3, [r7, #14]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <USBD_StdEPReq+0x264>
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	2b80      	cmp	r3, #128	@ 0x80
 800bd4c:	d103      	bne.n	800bd56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	e00e      	b.n	800bd74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd56:	7bbb      	ldrb	r3, [r7, #14]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 ff32 	bl	800cbc4 <USBD_LL_IsStallEP>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d003      	beq.n	800bd6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	e002      	b.n	800bd74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2202      	movs	r2, #2
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fbb7 	bl	800c4ee <USBD_CtlSendData>
              break;
 800bd80:	e004      	b.n	800bd8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fb41 	bl	800c40c <USBD_CtlError>
              break;
 800bd8a:	bf00      	nop
          }
          break;
 800bd8c:	e004      	b.n	800bd98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fb3b 	bl	800c40c <USBD_CtlError>
          break;
 800bd96:	bf00      	nop
      }
      break;
 800bd98:	e004      	b.n	800bda4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fb35 	bl	800c40c <USBD_CtlError>
      break;
 800bda2:	bf00      	nop
  }

  return ret;
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
	...

0800bdb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	885b      	ldrh	r3, [r3, #2]
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	2b06      	cmp	r3, #6
 800bdd2:	f200 8128 	bhi.w	800c026 <USBD_GetDescriptor+0x276>
 800bdd6:	a201      	add	r2, pc, #4	@ (adr r2, 800bddc <USBD_GetDescriptor+0x2c>)
 800bdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bddc:	0800bdf9 	.word	0x0800bdf9
 800bde0:	0800be11 	.word	0x0800be11
 800bde4:	0800be51 	.word	0x0800be51
 800bde8:	0800c027 	.word	0x0800c027
 800bdec:	0800c027 	.word	0x0800c027
 800bdf0:	0800bfc7 	.word	0x0800bfc7
 800bdf4:	0800bff3 	.word	0x0800bff3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	7c12      	ldrb	r2, [r2, #16]
 800be04:	f107 0108 	add.w	r1, r7, #8
 800be08:	4610      	mov	r0, r2
 800be0a:	4798      	blx	r3
 800be0c:	60f8      	str	r0, [r7, #12]
      break;
 800be0e:	e112      	b.n	800c036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	7c1b      	ldrb	r3, [r3, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10d      	bne.n	800be34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be20:	f107 0208 	add.w	r2, r7, #8
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3301      	adds	r3, #1
 800be2e:	2202      	movs	r2, #2
 800be30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be32:	e100      	b.n	800c036 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3c:	f107 0208 	add.w	r2, r7, #8
 800be40:	4610      	mov	r0, r2
 800be42:	4798      	blx	r3
 800be44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3301      	adds	r3, #1
 800be4a:	2202      	movs	r2, #2
 800be4c:	701a      	strb	r2, [r3, #0]
      break;
 800be4e:	e0f2      	b.n	800c036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	885b      	ldrh	r3, [r3, #2]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b05      	cmp	r3, #5
 800be58:	f200 80ac 	bhi.w	800bfb4 <USBD_GetDescriptor+0x204>
 800be5c:	a201      	add	r2, pc, #4	@ (adr r2, 800be64 <USBD_GetDescriptor+0xb4>)
 800be5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be62:	bf00      	nop
 800be64:	0800be7d 	.word	0x0800be7d
 800be68:	0800beb1 	.word	0x0800beb1
 800be6c:	0800bee5 	.word	0x0800bee5
 800be70:	0800bf19 	.word	0x0800bf19
 800be74:	0800bf4d 	.word	0x0800bf4d
 800be78:	0800bf81 	.word	0x0800bf81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00b      	beq.n	800bea0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	7c12      	ldrb	r2, [r2, #16]
 800be94:	f107 0108 	add.w	r1, r7, #8
 800be98:	4610      	mov	r0, r2
 800be9a:	4798      	blx	r3
 800be9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be9e:	e091      	b.n	800bfc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fab2 	bl	800c40c <USBD_CtlError>
            err++;
 800bea8:	7afb      	ldrb	r3, [r7, #11]
 800beaa:	3301      	adds	r3, #1
 800beac:	72fb      	strb	r3, [r7, #11]
          break;
 800beae:	e089      	b.n	800bfc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00b      	beq.n	800bed4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	7c12      	ldrb	r2, [r2, #16]
 800bec8:	f107 0108 	add.w	r1, r7, #8
 800becc:	4610      	mov	r0, r2
 800bece:	4798      	blx	r3
 800bed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bed2:	e077      	b.n	800bfc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fa98 	bl	800c40c <USBD_CtlError>
            err++;
 800bedc:	7afb      	ldrb	r3, [r7, #11]
 800bede:	3301      	adds	r3, #1
 800bee0:	72fb      	strb	r3, [r7, #11]
          break;
 800bee2:	e06f      	b.n	800bfc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00b      	beq.n	800bf08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	7c12      	ldrb	r2, [r2, #16]
 800befc:	f107 0108 	add.w	r1, r7, #8
 800bf00:	4610      	mov	r0, r2
 800bf02:	4798      	blx	r3
 800bf04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf06:	e05d      	b.n	800bfc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fa7e 	bl	800c40c <USBD_CtlError>
            err++;
 800bf10:	7afb      	ldrb	r3, [r7, #11]
 800bf12:	3301      	adds	r3, #1
 800bf14:	72fb      	strb	r3, [r7, #11]
          break;
 800bf16:	e055      	b.n	800bfc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00b      	beq.n	800bf3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	7c12      	ldrb	r2, [r2, #16]
 800bf30:	f107 0108 	add.w	r1, r7, #8
 800bf34:	4610      	mov	r0, r2
 800bf36:	4798      	blx	r3
 800bf38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf3a:	e043      	b.n	800bfc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fa64 	bl	800c40c <USBD_CtlError>
            err++;
 800bf44:	7afb      	ldrb	r3, [r7, #11]
 800bf46:	3301      	adds	r3, #1
 800bf48:	72fb      	strb	r3, [r7, #11]
          break;
 800bf4a:	e03b      	b.n	800bfc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00b      	beq.n	800bf70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	7c12      	ldrb	r2, [r2, #16]
 800bf64:	f107 0108 	add.w	r1, r7, #8
 800bf68:	4610      	mov	r0, r2
 800bf6a:	4798      	blx	r3
 800bf6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf6e:	e029      	b.n	800bfc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fa4a 	bl	800c40c <USBD_CtlError>
            err++;
 800bf78:	7afb      	ldrb	r3, [r7, #11]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf7e:	e021      	b.n	800bfc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00b      	beq.n	800bfa4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	7c12      	ldrb	r2, [r2, #16]
 800bf98:	f107 0108 	add.w	r1, r7, #8
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4798      	blx	r3
 800bfa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfa2:	e00f      	b.n	800bfc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fa30 	bl	800c40c <USBD_CtlError>
            err++;
 800bfac:	7afb      	ldrb	r3, [r7, #11]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfb2:	e007      	b.n	800bfc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fa28 	bl	800c40c <USBD_CtlError>
          err++;
 800bfbc:	7afb      	ldrb	r3, [r7, #11]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bfc2:	bf00      	nop
      }
      break;
 800bfc4:	e037      	b.n	800c036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	7c1b      	ldrb	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d109      	bne.n	800bfe2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd6:	f107 0208 	add.w	r2, r7, #8
 800bfda:	4610      	mov	r0, r2
 800bfdc:	4798      	blx	r3
 800bfde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfe0:	e029      	b.n	800c036 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fa11 	bl	800c40c <USBD_CtlError>
        err++;
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	3301      	adds	r3, #1
 800bfee:	72fb      	strb	r3, [r7, #11]
      break;
 800bff0:	e021      	b.n	800c036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	7c1b      	ldrb	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10d      	bne.n	800c016 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c002:	f107 0208 	add.w	r2, r7, #8
 800c006:	4610      	mov	r0, r2
 800c008:	4798      	blx	r3
 800c00a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
 800c010:	2207      	movs	r2, #7
 800c012:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c014:	e00f      	b.n	800c036 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f9f7 	bl	800c40c <USBD_CtlError>
        err++;
 800c01e:	7afb      	ldrb	r3, [r7, #11]
 800c020:	3301      	adds	r3, #1
 800c022:	72fb      	strb	r3, [r7, #11]
      break;
 800c024:	e007      	b.n	800c036 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f9ef 	bl	800c40c <USBD_CtlError>
      err++;
 800c02e:	7afb      	ldrb	r3, [r7, #11]
 800c030:	3301      	adds	r3, #1
 800c032:	72fb      	strb	r3, [r7, #11]
      break;
 800c034:	bf00      	nop
  }

  if (err != 0U)
 800c036:	7afb      	ldrb	r3, [r7, #11]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d11e      	bne.n	800c07a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	88db      	ldrh	r3, [r3, #6]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d016      	beq.n	800c072 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c044:	893b      	ldrh	r3, [r7, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00e      	beq.n	800c068 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	88da      	ldrh	r2, [r3, #6]
 800c04e:	893b      	ldrh	r3, [r7, #8]
 800c050:	4293      	cmp	r3, r2
 800c052:	bf28      	it	cs
 800c054:	4613      	movcs	r3, r2
 800c056:	b29b      	uxth	r3, r3
 800c058:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c05a:	893b      	ldrh	r3, [r7, #8]
 800c05c:	461a      	mov	r2, r3
 800c05e:	68f9      	ldr	r1, [r7, #12]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fa44 	bl	800c4ee <USBD_CtlSendData>
 800c066:	e009      	b.n	800c07c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f9ce 	bl	800c40c <USBD_CtlError>
 800c070:	e004      	b.n	800c07c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fa78 	bl	800c568 <USBD_CtlSendStatus>
 800c078:	e000      	b.n	800c07c <USBD_GetDescriptor+0x2cc>
    return;
 800c07a:	bf00      	nop
  }
}
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop

0800c084 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	889b      	ldrh	r3, [r3, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d131      	bne.n	800c0fa <USBD_SetAddress+0x76>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	88db      	ldrh	r3, [r3, #6]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d12d      	bne.n	800c0fa <USBD_SetAddress+0x76>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	885b      	ldrh	r3, [r3, #2]
 800c0a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c0a4:	d829      	bhi.n	800c0fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	885b      	ldrh	r3, [r3, #2]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b03      	cmp	r3, #3
 800c0bc:	d104      	bne.n	800c0c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f9a3 	bl	800c40c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c6:	e01d      	b.n	800c104 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7bfa      	ldrb	r2, [r7, #15]
 800c0cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fda1 	bl	800cc1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fa44 	bl	800c568 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d004      	beq.n	800c0f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2202      	movs	r2, #2
 800c0ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ee:	e009      	b.n	800c104 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f8:	e004      	b.n	800c104 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f985 	bl	800c40c <USBD_CtlError>
  }
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	885b      	ldrh	r3, [r3, #2]
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	4b4c      	ldr	r3, [pc, #304]	@ (800c254 <USBD_SetConfig+0x148>)
 800c122:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c124:	4b4b      	ldr	r3, [pc, #300]	@ (800c254 <USBD_SetConfig+0x148>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d905      	bls.n	800c138 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f96c 	bl	800c40c <USBD_CtlError>
    return USBD_FAIL;
 800c134:	2303      	movs	r3, #3
 800c136:	e088      	b.n	800c24a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b02      	cmp	r3, #2
 800c142:	d002      	beq.n	800c14a <USBD_SetConfig+0x3e>
 800c144:	2b03      	cmp	r3, #3
 800c146:	d025      	beq.n	800c194 <USBD_SetConfig+0x88>
 800c148:	e071      	b.n	800c22e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c14a:	4b42      	ldr	r3, [pc, #264]	@ (800c254 <USBD_SetConfig+0x148>)
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d01c      	beq.n	800c18c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c152:	4b40      	ldr	r3, [pc, #256]	@ (800c254 <USBD_SetConfig+0x148>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c15c:	4b3d      	ldr	r3, [pc, #244]	@ (800c254 <USBD_SetConfig+0x148>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff f9ba 	bl	800b4dc <USBD_SetClassConfig>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f949 	bl	800c40c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c17a:	e065      	b.n	800c248 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f9f3 	bl	800c568 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2203      	movs	r2, #3
 800c186:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c18a:	e05d      	b.n	800c248 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f9eb 	bl	800c568 <USBD_CtlSendStatus>
      break;
 800c192:	e059      	b.n	800c248 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c194:	4b2f      	ldr	r3, [pc, #188]	@ (800c254 <USBD_SetConfig+0x148>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d112      	bne.n	800c1c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c1a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c254 <USBD_SetConfig+0x148>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1ae:	4b29      	ldr	r3, [pc, #164]	@ (800c254 <USBD_SetConfig+0x148>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f7ff f9ad 	bl	800b514 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f9d4 	bl	800c568 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1c0:	e042      	b.n	800c248 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c1c2:	4b24      	ldr	r3, [pc, #144]	@ (800c254 <USBD_SetConfig+0x148>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d02a      	beq.n	800c226 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff f99b 	bl	800b514 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1de:	4b1d      	ldr	r3, [pc, #116]	@ (800c254 <USBD_SetConfig+0x148>)
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c254 <USBD_SetConfig+0x148>)
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7ff f974 	bl	800b4dc <USBD_SetClassConfig>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00f      	beq.n	800c21e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f903 	bl	800c40c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff f980 	bl	800b514 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c21c:	e014      	b.n	800c248 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f9a2 	bl	800c568 <USBD_CtlSendStatus>
      break;
 800c224:	e010      	b.n	800c248 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f99e 	bl	800c568 <USBD_CtlSendStatus>
      break;
 800c22c:	e00c      	b.n	800c248 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f8eb 	bl	800c40c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c236:	4b07      	ldr	r3, [pc, #28]	@ (800c254 <USBD_SetConfig+0x148>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff f969 	bl	800b514 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c242:	2303      	movs	r3, #3
 800c244:	73fb      	strb	r3, [r7, #15]
      break;
 800c246:	bf00      	nop
  }

  return ret;
 800c248:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	20000dfc 	.word	0x20000dfc

0800c258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	88db      	ldrh	r3, [r3, #6]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d004      	beq.n	800c274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f8cd 	bl	800c40c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c272:	e023      	b.n	800c2bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	dc02      	bgt.n	800c286 <USBD_GetConfig+0x2e>
 800c280:	2b00      	cmp	r3, #0
 800c282:	dc03      	bgt.n	800c28c <USBD_GetConfig+0x34>
 800c284:	e015      	b.n	800c2b2 <USBD_GetConfig+0x5a>
 800c286:	2b03      	cmp	r3, #3
 800c288:	d00b      	beq.n	800c2a2 <USBD_GetConfig+0x4a>
 800c28a:	e012      	b.n	800c2b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3308      	adds	r3, #8
 800c296:	2201      	movs	r2, #1
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f927 	bl	800c4ee <USBD_CtlSendData>
        break;
 800c2a0:	e00c      	b.n	800c2bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f91f 	bl	800c4ee <USBD_CtlSendData>
        break;
 800c2b0:	e004      	b.n	800c2bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f8a9 	bl	800c40c <USBD_CtlError>
        break;
 800c2ba:	bf00      	nop
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d81e      	bhi.n	800c31a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	88db      	ldrh	r3, [r3, #6]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d004      	beq.n	800c2ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f890 	bl	800c40c <USBD_CtlError>
        break;
 800c2ec:	e01a      	b.n	800c324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d005      	beq.n	800c30a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	f043 0202 	orr.w	r2, r3, #2
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	330c      	adds	r3, #12
 800c30e:	2202      	movs	r2, #2
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f8eb 	bl	800c4ee <USBD_CtlSendData>
      break;
 800c318:	e004      	b.n	800c324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f875 	bl	800c40c <USBD_CtlError>
      break;
 800c322:	bf00      	nop
  }
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	885b      	ldrh	r3, [r3, #2]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d106      	bne.n	800c34c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f90e 	bl	800c568 <USBD_CtlSendStatus>
  }
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c364:	b2db      	uxtb	r3, r3
 800c366:	3b01      	subs	r3, #1
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d80b      	bhi.n	800c384 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	885b      	ldrh	r3, [r3, #2]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d10c      	bne.n	800c38e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f8f3 	bl	800c568 <USBD_CtlSendStatus>
      }
      break;
 800c382:	e004      	b.n	800c38e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f840 	bl	800c40c <USBD_CtlError>
      break;
 800c38c:	e000      	b.n	800c390 <USBD_ClrFeature+0x3c>
      break;
 800c38e:	bf00      	nop
  }
}
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	781a      	ldrb	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f7ff faba 	bl	800b93c <SWAPBYTE>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f7ff faad 	bl	800b93c <SWAPBYTE>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f7ff faa0 	bl	800b93c <SWAPBYTE>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	461a      	mov	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	80da      	strh	r2, [r3, #6]
}
 800c404:	bf00      	nop
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c416:	2180      	movs	r1, #128	@ 0x80
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fb95 	bl	800cb48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c41e:	2100      	movs	r1, #0
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fb91 	bl	800cb48 <USBD_LL_StallEP>
}
 800c426:	bf00      	nop
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b086      	sub	sp, #24
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d036      	beq.n	800c4b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c448:	6938      	ldr	r0, [r7, #16]
 800c44a:	f000 f836 	bl	800c4ba <USBD_GetLen>
 800c44e:	4603      	mov	r3, r0
 800c450:	3301      	adds	r3, #1
 800c452:	b29b      	uxth	r3, r3
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	b29a      	uxth	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	4413      	add	r3, r2
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	7812      	ldrb	r2, [r2, #0]
 800c466:	701a      	strb	r2, [r3, #0]
  idx++;
 800c468:	7dfb      	ldrb	r3, [r7, #23]
 800c46a:	3301      	adds	r3, #1
 800c46c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	4413      	add	r3, r2
 800c474:	2203      	movs	r2, #3
 800c476:	701a      	strb	r2, [r3, #0]
  idx++;
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	3301      	adds	r3, #1
 800c47c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c47e:	e013      	b.n	800c4a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	4413      	add	r3, r2
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	7812      	ldrb	r2, [r2, #0]
 800c48a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	3301      	adds	r3, #1
 800c490:	613b      	str	r3, [r7, #16]
    idx++;
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	3301      	adds	r3, #1
 800c496:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c498:	7dfb      	ldrb	r3, [r7, #23]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	4413      	add	r3, r2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1e7      	bne.n	800c480 <USBD_GetString+0x52>
 800c4b0:	e000      	b.n	800c4b4 <USBD_GetString+0x86>
    return;
 800c4b2:	bf00      	nop
  }
}
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b085      	sub	sp, #20
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4ca:	e005      	b.n	800c4d8 <USBD_GetLen+0x1e>
  {
    len++;
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1f5      	bne.n	800c4cc <USBD_GetLen+0x12>
  }

  return len;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	60f8      	str	r0, [r7, #12]
 800c4f6:	60b9      	str	r1, [r7, #8]
 800c4f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	2100      	movs	r1, #0
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f000 fba0 	bl	800cc5a <USBD_LL_Transmit>

  return USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	2100      	movs	r1, #0
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 fb8f 	bl	800cc5a <USBD_LL_Transmit>

  return USBD_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	60b9      	str	r1, [r7, #8]
 800c550:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	2100      	movs	r1, #0
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f000 fb9f 	bl	800cc9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2204      	movs	r2, #4
 800c574:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c578:	2300      	movs	r3, #0
 800c57a:	2200      	movs	r2, #0
 800c57c:	2100      	movs	r1, #0
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fb6b 	bl	800cc5a <USBD_LL_Transmit>

  return USBD_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2205      	movs	r2, #5
 800c59a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c59e:	2300      	movs	r3, #0
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 fb79 	bl	800cc9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	490e      	ldr	r1, [pc, #56]	@ (800c5f4 <MX_USB_Device_Init+0x40>)
 800c5bc:	480e      	ldr	r0, [pc, #56]	@ (800c5f8 <MX_USB_Device_Init+0x44>)
 800c5be:	f7fe ff1f 	bl	800b400 <USBD_Init>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c5c8:	f7f4 fccd 	bl	8000f66 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800c5cc:	490b      	ldr	r1, [pc, #44]	@ (800c5fc <MX_USB_Device_Init+0x48>)
 800c5ce:	480a      	ldr	r0, [pc, #40]	@ (800c5f8 <MX_USB_Device_Init+0x44>)
 800c5d0:	f7fe ff46 	bl	800b460 <USBD_RegisterClass>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c5da:	f7f4 fcc4 	bl	8000f66 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c5de:	4806      	ldr	r0, [pc, #24]	@ (800c5f8 <MX_USB_Device_Init+0x44>)
 800c5e0:	f7fe ff65 	bl	800b4ae <USBD_Start>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800c5ea:	f7f4 fcbc 	bl	8000f66 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c5ee:	bf00      	nop
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000118 	.word	0x20000118
 800c5f8:	20000e00 	.word	0x20000e00
 800c5fc:	20000010 	.word	0x20000010

0800c600 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	6039      	str	r1, [r7, #0]
 800c60a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2212      	movs	r2, #18
 800c610:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800c612:	4b03      	ldr	r3, [pc, #12]	@ (800c620 <USBD_HID_DeviceDescriptor+0x20>)
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	20000134 	.word	0x20000134

0800c624 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	6039      	str	r1, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2204      	movs	r2, #4
 800c634:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c636:	4b03      	ldr	r3, [pc, #12]	@ (800c644 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800c638:	4618      	mov	r0, r3
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	20000148 	.word	0x20000148

0800c648 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	6039      	str	r1, [r7, #0]
 800c652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d105      	bne.n	800c666 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	4907      	ldr	r1, [pc, #28]	@ (800c67c <USBD_HID_ProductStrDescriptor+0x34>)
 800c65e:	4808      	ldr	r0, [pc, #32]	@ (800c680 <USBD_HID_ProductStrDescriptor+0x38>)
 800c660:	f7ff fee5 	bl	800c42e <USBD_GetString>
 800c664:	e004      	b.n	800c670 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	4904      	ldr	r1, [pc, #16]	@ (800c67c <USBD_HID_ProductStrDescriptor+0x34>)
 800c66a:	4805      	ldr	r0, [pc, #20]	@ (800c680 <USBD_HID_ProductStrDescriptor+0x38>)
 800c66c:	f7ff fedf 	bl	800c42e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c670:	4b02      	ldr	r3, [pc, #8]	@ (800c67c <USBD_HID_ProductStrDescriptor+0x34>)
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	200010d0 	.word	0x200010d0
 800c680:	0800cdf0 	.word	0x0800cdf0

0800c684 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	4603      	mov	r3, r0
 800c68c:	6039      	str	r1, [r7, #0]
 800c68e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	4904      	ldr	r1, [pc, #16]	@ (800c6a4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800c694:	4804      	ldr	r0, [pc, #16]	@ (800c6a8 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800c696:	f7ff feca 	bl	800c42e <USBD_GetString>
  return USBD_StrDesc;
 800c69a:	4b02      	ldr	r3, [pc, #8]	@ (800c6a4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	200010d0 	.word	0x200010d0
 800c6a8:	0800ce08 	.word	0x0800ce08

0800c6ac <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	221a      	movs	r2, #26
 800c6bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6be:	f000 f843 	bl	800c748 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c6c2:	4b02      	ldr	r3, [pc, #8]	@ (800c6cc <USBD_HID_SerialStrDescriptor+0x20>)
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	2000014c 	.word	0x2000014c

0800c6d0 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	6039      	str	r1, [r7, #0]
 800c6da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6dc:	79fb      	ldrb	r3, [r7, #7]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d105      	bne.n	800c6ee <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	4907      	ldr	r1, [pc, #28]	@ (800c704 <USBD_HID_ConfigStrDescriptor+0x34>)
 800c6e6:	4808      	ldr	r0, [pc, #32]	@ (800c708 <USBD_HID_ConfigStrDescriptor+0x38>)
 800c6e8:	f7ff fea1 	bl	800c42e <USBD_GetString>
 800c6ec:	e004      	b.n	800c6f8 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	4904      	ldr	r1, [pc, #16]	@ (800c704 <USBD_HID_ConfigStrDescriptor+0x34>)
 800c6f2:	4805      	ldr	r0, [pc, #20]	@ (800c708 <USBD_HID_ConfigStrDescriptor+0x38>)
 800c6f4:	f7ff fe9b 	bl	800c42e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6f8:	4b02      	ldr	r3, [pc, #8]	@ (800c704 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	200010d0 	.word	0x200010d0
 800c708:	0800ce1c 	.word	0x0800ce1c

0800c70c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	6039      	str	r1, [r7, #0]
 800c716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d105      	bne.n	800c72a <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	4907      	ldr	r1, [pc, #28]	@ (800c740 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800c722:	4808      	ldr	r0, [pc, #32]	@ (800c744 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800c724:	f7ff fe83 	bl	800c42e <USBD_GetString>
 800c728:	e004      	b.n	800c734 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	4904      	ldr	r1, [pc, #16]	@ (800c740 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800c72e:	4805      	ldr	r0, [pc, #20]	@ (800c744 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800c730:	f7ff fe7d 	bl	800c42e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c734:	4b02      	ldr	r3, [pc, #8]	@ (800c740 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	200010d0 	.word	0x200010d0
 800c744:	0800ce28 	.word	0x0800ce28

0800c748 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c74e:	4b0f      	ldr	r3, [pc, #60]	@ (800c78c <Get_SerialNum+0x44>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c754:	4b0e      	ldr	r3, [pc, #56]	@ (800c790 <Get_SerialNum+0x48>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c75a:	4b0e      	ldr	r3, [pc, #56]	@ (800c794 <Get_SerialNum+0x4c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4413      	add	r3, r2
 800c766:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c76e:	2208      	movs	r2, #8
 800c770:	4909      	ldr	r1, [pc, #36]	@ (800c798 <Get_SerialNum+0x50>)
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 f814 	bl	800c7a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c778:	2204      	movs	r2, #4
 800c77a:	4908      	ldr	r1, [pc, #32]	@ (800c79c <Get_SerialNum+0x54>)
 800c77c:	68b8      	ldr	r0, [r7, #8]
 800c77e:	f000 f80f 	bl	800c7a0 <IntToUnicode>
  }
}
 800c782:	bf00      	nop
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	1fff7590 	.word	0x1fff7590
 800c790:	1fff7594 	.word	0x1fff7594
 800c794:	1fff7598 	.word	0x1fff7598
 800c798:	2000014e 	.word	0x2000014e
 800c79c:	2000015e 	.word	0x2000015e

0800c7a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	75fb      	strb	r3, [r7, #23]
 800c7b6:	e027      	b.n	800c808 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	0f1b      	lsrs	r3, r3, #28
 800c7bc:	2b09      	cmp	r3, #9
 800c7be:	d80b      	bhi.n	800c7d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	0f1b      	lsrs	r3, r3, #28
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	005b      	lsls	r3, r3, #1
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	440b      	add	r3, r1
 800c7d0:	3230      	adds	r2, #48	@ 0x30
 800c7d2:	b2d2      	uxtb	r2, r2
 800c7d4:	701a      	strb	r2, [r3, #0]
 800c7d6:	e00a      	b.n	800c7ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	0f1b      	lsrs	r3, r3, #28
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	440b      	add	r3, r1
 800c7e8:	3237      	adds	r2, #55	@ 0x37
 800c7ea:	b2d2      	uxtb	r2, r2
 800c7ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	011b      	lsls	r3, r3, #4
 800c7f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	2200      	movs	r2, #0
 800c800:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c802:	7dfb      	ldrb	r3, [r7, #23]
 800c804:	3301      	adds	r3, #1
 800c806:	75fb      	strb	r3, [r7, #23]
 800c808:	7dfa      	ldrb	r2, [r7, #23]
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d3d3      	bcc.n	800c7b8 <IntToUnicode+0x18>
  }
}
 800c810:	bf00      	nop
 800c812:	bf00      	nop
 800c814:	371c      	adds	r7, #28
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
	...

0800c820 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b094      	sub	sp, #80	@ 0x50
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c828:	f107 030c 	add.w	r3, r7, #12
 800c82c:	2244      	movs	r2, #68	@ 0x44
 800c82e:	2100      	movs	r1, #0
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fa9f 	bl	800cd74 <memset>
  if(pcdHandle->Instance==USB)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a15      	ldr	r2, [pc, #84]	@ (800c890 <HAL_PCD_MspInit+0x70>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d122      	bne.n	800c886 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c840:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c844:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c846:	2300      	movs	r3, #0
 800c848:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c84a:	f107 030c 	add.w	r3, r7, #12
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fa f9a8 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c85a:	f7f4 fb84 	bl	8000f66 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c85e:	4b0d      	ldr	r3, [pc, #52]	@ (800c894 <HAL_PCD_MspInit+0x74>)
 800c860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c862:	4a0c      	ldr	r2, [pc, #48]	@ (800c894 <HAL_PCD_MspInit+0x74>)
 800c864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c868:	6593      	str	r3, [r2, #88]	@ 0x58
 800c86a:	4b0a      	ldr	r3, [pc, #40]	@ (800c894 <HAL_PCD_MspInit+0x74>)
 800c86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c86e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c872:	60bb      	str	r3, [r7, #8]
 800c874:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c876:	2200      	movs	r2, #0
 800c878:	2100      	movs	r1, #0
 800c87a:	2014      	movs	r0, #20
 800c87c:	f7f6 fd73 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c880:	2014      	movs	r0, #20
 800c882:	f7f6 fd8a 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c886:	bf00      	nop
 800c888:	3750      	adds	r7, #80	@ 0x50
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	40005c00 	.word	0x40005c00
 800c894:	40021000 	.word	0x40021000

0800c898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7fe fe48 	bl	800b544 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c8ce:	78fa      	ldrb	r2, [r7, #3]
 800c8d0:	6879      	ldr	r1, [r7, #4]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	00db      	lsls	r3, r3, #3
 800c8da:	440b      	add	r3, r1
 800c8dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	78fb      	ldrb	r3, [r7, #3]
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	f7fe fe82 	bl	800b5ee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c904:	78fa      	ldrb	r2, [r7, #3]
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	4613      	mov	r3, r2
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	4413      	add	r3, r2
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	440b      	add	r3, r1
 800c912:	3324      	adds	r3, #36	@ 0x24
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	78fb      	ldrb	r3, [r7, #3]
 800c918:	4619      	mov	r1, r3
 800c91a:	f7fe fecb 	bl	800b6b4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe ffdf 	bl	800b8f8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c94a:	2301      	movs	r3, #1
 800c94c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	795b      	ldrb	r3, [r3, #5]
 800c952:	2b02      	cmp	r3, #2
 800c954:	d001      	beq.n	800c95a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c956:	f7f4 fb06 	bl	8000f66 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c960:	7bfa      	ldrb	r2, [r7, #15]
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe ff89 	bl	800b87c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe ff35 	bl	800b7e0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c976:	bf00      	nop
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
	...

0800c980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fe ff84 	bl	800b89c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7a5b      	ldrb	r3, [r3, #9]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d005      	beq.n	800c9a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c99c:	4b04      	ldr	r3, [pc, #16]	@ (800c9b0 <HAL_PCD_SuspendCallback+0x30>)
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	4a03      	ldr	r2, [pc, #12]	@ (800c9b0 <HAL_PCD_SuspendCallback+0x30>)
 800c9a2:	f043 0306 	orr.w	r3, r3, #6
 800c9a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	e000ed00 	.word	0xe000ed00

0800c9b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7a5b      	ldrb	r3, [r3, #9]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d007      	beq.n	800c9d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9c4:	4b08      	ldr	r3, [pc, #32]	@ (800c9e8 <HAL_PCD_ResumeCallback+0x34>)
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	4a07      	ldr	r2, [pc, #28]	@ (800c9e8 <HAL_PCD_ResumeCallback+0x34>)
 800c9ca:	f023 0306 	bic.w	r3, r3, #6
 800c9ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c9d0:	f000 f99e 	bl	800cd10 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe ff74 	bl	800b8c8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	e000ed00 	.word	0xe000ed00

0800c9ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c9f4:	4a22      	ldr	r2, [pc, #136]	@ (800ca80 <USBD_LL_Init+0x94>)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a20      	ldr	r2, [pc, #128]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ca04:	4b1e      	ldr	r3, [pc, #120]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca06:	4a1f      	ldr	r2, [pc, #124]	@ (800ca84 <USBD_LL_Init+0x98>)
 800ca08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca0c:	2208      	movs	r2, #8
 800ca0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca10:	4b1b      	ldr	r3, [pc, #108]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca12:	2202      	movs	r2, #2
 800ca14:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca16:	4b1a      	ldr	r3, [pc, #104]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca18:	2202      	movs	r2, #2
 800ca1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca1c:	4b18      	ldr	r3, [pc, #96]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca22:	4b17      	ldr	r3, [pc, #92]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca28:	4b15      	ldr	r3, [pc, #84]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca2e:	4b14      	ldr	r3, [pc, #80]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca34:	4812      	ldr	r0, [pc, #72]	@ (800ca80 <USBD_LL_Init+0x94>)
 800ca36:	f7f7 fddd 	bl	80045f4 <HAL_PCD_Init>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ca40:	f7f4 fa91 	bl	8000f66 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ca4a:	2318      	movs	r3, #24
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2100      	movs	r1, #0
 800ca50:	f7f9 fa4c 	bl	8005eec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ca5a:	2358      	movs	r3, #88	@ 0x58
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2180      	movs	r1, #128	@ 0x80
 800ca60:	f7f9 fa44 	bl	8005eec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ca6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2181      	movs	r1, #129	@ 0x81
 800ca72:	f7f9 fa3b 	bl	8005eec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	200012d0 	.word	0x200012d0
 800ca84:	40005c00 	.word	0x40005c00

0800ca88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca90:	2300      	movs	r3, #0
 800ca92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7f7 fe76 	bl	8004790 <HAL_PCD_Start>
 800caa4:	4603      	mov	r3, r0
 800caa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 f936 	bl	800cd1c <USBD_Get_USB_Status>
 800cab0:	4603      	mov	r3, r0
 800cab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b084      	sub	sp, #16
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	4608      	mov	r0, r1
 800cac8:	4611      	mov	r1, r2
 800caca:	461a      	mov	r2, r3
 800cacc:	4603      	mov	r3, r0
 800cace:	70fb      	strb	r3, [r7, #3]
 800cad0:	460b      	mov	r3, r1
 800cad2:	70bb      	strb	r3, [r7, #2]
 800cad4:	4613      	mov	r3, r2
 800cad6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cae6:	78bb      	ldrb	r3, [r7, #2]
 800cae8:	883a      	ldrh	r2, [r7, #0]
 800caea:	78f9      	ldrb	r1, [r7, #3]
 800caec:	f7f7 ffbd 	bl	8004a6a <HAL_PCD_EP_Open>
 800caf0:	4603      	mov	r3, r0
 800caf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 f910 	bl	800cd1c <USBD_Get_USB_Status>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb00:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	460b      	mov	r3, r1
 800cb14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb24:	78fa      	ldrb	r2, [r7, #3]
 800cb26:	4611      	mov	r1, r2
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7f7 fffd 	bl	8004b28 <HAL_PCD_EP_Close>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f000 f8f1 	bl	800cd1c <USBD_Get_USB_Status>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	460b      	mov	r3, r1
 800cb52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb62:	78fa      	ldrb	r2, [r7, #3]
 800cb64:	4611      	mov	r1, r2
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7f8 f88e 	bl	8004c88 <HAL_PCD_EP_SetStall>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 f8d2 	bl	800cd1c <USBD_Get_USB_Status>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b084      	sub	sp, #16
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb96:	2300      	movs	r3, #0
 800cb98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cba0:	78fa      	ldrb	r2, [r7, #3]
 800cba2:	4611      	mov	r1, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7f8 f8c1 	bl	8004d2c <HAL_PCD_EP_ClrStall>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f8b3 	bl	800cd1c <USBD_Get_USB_Status>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cbd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cbd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	da0b      	bge.n	800cbf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4413      	add	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	440b      	add	r3, r1
 800cbf2:	3312      	adds	r3, #18
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	e00b      	b.n	800cc10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cbf8:	78fb      	ldrb	r3, [r7, #3]
 800cbfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbfe:	68f9      	ldr	r1, [r7, #12]
 800cc00:	4613      	mov	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	440b      	add	r3, r1
 800cc0a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cc0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc36:	78fa      	ldrb	r2, [r7, #3]
 800cc38:	4611      	mov	r1, r2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f7 fef1 	bl	8004a22 <HAL_PCD_SetAddress>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 f868 	bl	800cd1c <USBD_Get_USB_Status>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b086      	sub	sp, #24
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	460b      	mov	r3, r1
 800cc68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc78:	7af9      	ldrb	r1, [r7, #11]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	f7f7 ffcc 	bl	8004c1a <HAL_PCD_EP_Transmit>
 800cc82:	4603      	mov	r3, r0
 800cc84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 f847 	bl	800cd1c <USBD_Get_USB_Status>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc92:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	603b      	str	r3, [r7, #0]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ccba:	7af9      	ldrb	r1, [r7, #11]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	f7f7 ff7a 	bl	8004bb8 <HAL_PCD_EP_Receive>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 f826 	bl	800cd1c <USBD_Get_USB_Status>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3718      	adds	r7, #24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cce8:	4b03      	ldr	r3, [pc, #12]	@ (800ccf8 <USBD_static_malloc+0x18>)
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	200015ac 	.word	0x200015ac

0800ccfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]

}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cd14:	f7f4 f8dc 	bl	8000ed0 <SystemClock_Config>
}
 800cd18:	bf00      	nop
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	4603      	mov	r3, r0
 800cd24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	2b03      	cmp	r3, #3
 800cd2e:	d817      	bhi.n	800cd60 <USBD_Get_USB_Status+0x44>
 800cd30:	a201      	add	r2, pc, #4	@ (adr r2, 800cd38 <USBD_Get_USB_Status+0x1c>)
 800cd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd36:	bf00      	nop
 800cd38:	0800cd49 	.word	0x0800cd49
 800cd3c:	0800cd4f 	.word	0x0800cd4f
 800cd40:	0800cd55 	.word	0x0800cd55
 800cd44:	0800cd5b 	.word	0x0800cd5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd4c:	e00b      	b.n	800cd66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	73fb      	strb	r3, [r7, #15]
    break;
 800cd52:	e008      	b.n	800cd66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd54:	2301      	movs	r3, #1
 800cd56:	73fb      	strb	r3, [r7, #15]
    break;
 800cd58:	e005      	b.n	800cd66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd5e:	e002      	b.n	800cd66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd60:	2303      	movs	r3, #3
 800cd62:	73fb      	strb	r3, [r7, #15]
    break;
 800cd64:	bf00      	nop
  }
  return usb_status;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3714      	adds	r7, #20
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <memset>:
 800cd74:	4402      	add	r2, r0
 800cd76:	4603      	mov	r3, r0
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d100      	bne.n	800cd7e <memset+0xa>
 800cd7c:	4770      	bx	lr
 800cd7e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd82:	e7f9      	b.n	800cd78 <memset+0x4>

0800cd84 <__libc_init_array>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	4d0d      	ldr	r5, [pc, #52]	@ (800cdbc <__libc_init_array+0x38>)
 800cd88:	4c0d      	ldr	r4, [pc, #52]	@ (800cdc0 <__libc_init_array+0x3c>)
 800cd8a:	1b64      	subs	r4, r4, r5
 800cd8c:	10a4      	asrs	r4, r4, #2
 800cd8e:	2600      	movs	r6, #0
 800cd90:	42a6      	cmp	r6, r4
 800cd92:	d109      	bne.n	800cda8 <__libc_init_array+0x24>
 800cd94:	4d0b      	ldr	r5, [pc, #44]	@ (800cdc4 <__libc_init_array+0x40>)
 800cd96:	4c0c      	ldr	r4, [pc, #48]	@ (800cdc8 <__libc_init_array+0x44>)
 800cd98:	f000 f818 	bl	800cdcc <_init>
 800cd9c:	1b64      	subs	r4, r4, r5
 800cd9e:	10a4      	asrs	r4, r4, #2
 800cda0:	2600      	movs	r6, #0
 800cda2:	42a6      	cmp	r6, r4
 800cda4:	d105      	bne.n	800cdb2 <__libc_init_array+0x2e>
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdac:	4798      	blx	r3
 800cdae:	3601      	adds	r6, #1
 800cdb0:	e7ee      	b.n	800cd90 <__libc_init_array+0xc>
 800cdb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb6:	4798      	blx	r3
 800cdb8:	3601      	adds	r6, #1
 800cdba:	e7f2      	b.n	800cda2 <__libc_init_array+0x1e>
 800cdbc:	0800d0c0 	.word	0x0800d0c0
 800cdc0:	0800d0c0 	.word	0x0800d0c0
 800cdc4:	0800d0c0 	.word	0x0800d0c0
 800cdc8:	0800d0c4 	.word	0x0800d0c4

0800cdcc <_init>:
 800cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdce:	bf00      	nop
 800cdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd2:	bc08      	pop	{r3}
 800cdd4:	469e      	mov	lr, r3
 800cdd6:	4770      	bx	lr

0800cdd8 <_fini>:
 800cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdda:	bf00      	nop
 800cddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdde:	bc08      	pop	{r3}
 800cde0:	469e      	mov	lr, r3
 800cde2:	4770      	bx	lr
