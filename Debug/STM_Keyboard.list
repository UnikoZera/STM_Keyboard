
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbf8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800ddd0  0800ddd0  0000edd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de68  0800de68  0000f168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800de68  0800de68  0000ee68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de70  0800de70  0000f168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de70  0800de70  0000ee70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de74  0800de74  0000ee74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800de78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001964  20000168  0800dfe0  0000f168  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001acc  0800dfe0  0000facc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028dea  00000000  00000000  0000f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060ab  00000000  00000000  00037f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c8  00000000  00000000  0003e030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001967  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027150  00000000  00000000  00041a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d6aa  00000000  00000000  00068baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5c62  00000000  00000000  00096259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088d0  00000000  00000000  0017bf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001847d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ddb8 	.word	0x0800ddb8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800ddb8 	.word	0x0800ddb8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f00d fbf1 	bl	800dd44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000562:	4b39      	ldr	r3, [pc, #228]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000564:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800056a:	4b37      	ldr	r3, [pc, #220]	@ (8000648 <MX_ADC1_Init+0x104>)
 800056c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000570:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000572:	4b35      	ldr	r3, [pc, #212]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b33      	ldr	r3, [pc, #204]	@ (8000648 <MX_ADC1_Init+0x104>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800057e:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000584:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000586:	2201      	movs	r2, #1
 8000588:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b2f      	ldr	r3, [pc, #188]	@ (8000648 <MX_ADC1_Init+0x104>)
 800058c:	2204      	movs	r2, #4
 800058e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000590:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000592:	2200      	movs	r2, #0
 8000594:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000596:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000598:	2201      	movs	r2, #1
 800059a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800059c:	4b2a      	ldr	r3, [pc, #168]	@ (8000648 <MX_ADC1_Init+0x104>)
 800059e:	2202      	movs	r2, #2
 80005a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b6:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005cc:	481e      	ldr	r0, [pc, #120]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ce:	f002 f903 	bl	80027d8 <HAL_ADC_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005d8:	f001 f87d 	bl	80016d6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e4:	4619      	mov	r1, r3
 80005e6:	4818      	ldr	r0, [pc, #96]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005e8:	f003 f96a 	bl	80038c0 <HAL_ADCEx_MultiModeConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005f2:	f001 f870 	bl	80016d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_ADC1_Init+0x108>)
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fa:	2306      	movs	r3, #6
 80005fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000602:	237f      	movs	r3, #127	@ 0x7f
 8000604:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000606:	2304      	movs	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000614:	f002 fb36 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800061e:	f001 f85a 	bl	80016d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_ADC1_Init+0x10c>)
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000626:	230c      	movs	r3, #12
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000630:	f002 fb28 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800063a:	f001 f84c 	bl	80016d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3730      	adds	r7, #48	@ 0x30
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000184 	.word	0x20000184
 800064c:	32601000 	.word	0x32601000
 8000650:	3ef08000 	.word	0x3ef08000

08000654 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f00d fb6f 	bl	800dd44 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000668:	4a32      	ldr	r2, [pc, #200]	@ (8000734 <MX_ADC2_Init+0xe0>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800066e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000672:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000688:	2201      	movs	r2, #1
 800068a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800068e:	2204      	movs	r2, #4
 8000690:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000694:	2200      	movs	r2, #0
 8000696:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800069a:	2201      	movs	r2, #1
 800069c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800069e:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ce:	4818      	ldr	r0, [pc, #96]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006d0:	f002 f882 	bl	80027d8 <HAL_ADC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80006da:	f000 fffc 	bl	80016d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_ADC2_Init+0xe4>)
 80006e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e2:	2306      	movs	r3, #6
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ea:	237f      	movs	r3, #127	@ 0x7f
 80006ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ee:	2304      	movs	r3, #4
 80006f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006fc:	f002 fac2 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000706:	f000 ffe6 	bl	80016d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_ADC2_Init+0xe8>)
 800070c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070e:	230c      	movs	r3, #12
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000718:	f002 fab4 	bl	8002c84 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000722:	f000 ffd8 	bl	80016d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001f0 	.word	0x200001f0
 8000734:	50000100 	.word	0x50000100
 8000738:	0c900008 	.word	0x0c900008
 800073c:	10c00010 	.word	0x10c00010

08000740 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	2244      	movs	r2, #68	@ 0x44
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f00d faef 	bl	800dd44 <memset>
  if(adcHandle->Instance==ADC1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800076e:	d169      	bne.n	8000844 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000774:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000776:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800077a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f007 f843 	bl	800780c <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800078c:	f000 ffa3 	bl	80016d6 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000790:	4b66      	ldr	r3, [pc, #408]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a65      	ldr	r2, [pc, #404]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000798:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800079a:	4b64      	ldr	r3, [pc, #400]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d10b      	bne.n	80007ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007a2:	4b63      	ldr	r3, [pc, #396]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a62      	ldr	r2, [pc, #392]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b60      	ldr	r3, [pc, #384]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a5c      	ldr	r2, [pc, #368]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Key_2_Pin|Key_1_Pin;
 80007d2:	2303      	movs	r3, #3
 80007d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d6:	2303      	movs	r3, #3
 80007d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007e2:	4619      	mov	r1, r3
 80007e4:	4853      	ldr	r0, [pc, #332]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 80007e6:	f003 ff01 	bl	80045ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007ea:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007ec:	4a53      	ldr	r2, [pc, #332]	@ (800093c <HAL_ADC_MspInit+0x1fc>)
 80007ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007f0:	4b51      	ldr	r3, [pc, #324]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007f2:	2205      	movs	r2, #5
 80007f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b50      	ldr	r3, [pc, #320]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b4e      	ldr	r3, [pc, #312]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b4d      	ldr	r3, [pc, #308]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000808:	4b4b      	ldr	r3, [pc, #300]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800080a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000810:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000816:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000818:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800081a:	2220      	movs	r2, #32
 800081c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800081e:	4b46      	ldr	r3, [pc, #280]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000824:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000826:	4844      	ldr	r0, [pc, #272]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 8000828:	f003 fc06 	bl	8004038 <HAL_DMA_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8000832:	f000 ff50 	bl	80016d6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a3f      	ldr	r2, [pc, #252]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800083a:	655a      	str	r2, [r3, #84]	@ 0x54
 800083c:	4a3e      	ldr	r2, [pc, #248]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000842:	e06e      	b.n	8000922 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a3d      	ldr	r2, [pc, #244]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d169      	bne.n	8000922 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800084e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000852:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000854:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000858:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	4618      	mov	r0, r3
 8000860:	f006 ffd4 	bl	800780c <HAL_RCCEx_PeriphCLKConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800086a:	f000 ff34 	bl	80016d6 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800086e:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a2d      	ldr	r2, [pc, #180]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000876:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000878:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10b      	bne.n	8000898 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000880:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 8000886:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800088a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088c:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	4a24      	ldr	r2, [pc, #144]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Key_3_Pin|Key_4_Pin;
 80008b0:	23c0      	movs	r3, #192	@ 0xc0
 80008b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b4:	2303      	movs	r3, #3
 80008b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f003 fe91 	bl	80045ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <HAL_ADC_MspInit+0x208>)
 80008ce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008d2:	2224      	movs	r2, #36	@ 0x24
 80008d4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008fa:	2220      	movs	r2, #32
 80008fc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 8000900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000906:	480f      	ldr	r0, [pc, #60]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 8000908:	f003 fb96 	bl	8004038 <HAL_DMA_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8000912:	f000 fee0 	bl	80016d6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 800091a:	655a      	str	r2, [r3, #84]	@ 0x54
 800091c:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	@ 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000031c 	.word	0x2000031c
 8000930:	40021000 	.word	0x40021000
 8000934:	48000400 	.word	0x48000400
 8000938:	2000025c 	.word	0x2000025c
 800093c:	40020008 	.word	0x40020008
 8000940:	50000100 	.word	0x50000100
 8000944:	200002bc 	.word	0x200002bc
 8000948:	4002001c 	.word	0x4002001c

0800094c <ADC_Filter>:

uint16_t filter_adc_data[4]; // 用于存储滤波后的ADC数据
uint16_t last_adc_data[4]; // 用于记录上一次的ADC数据

void ADC_Filter(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
    last_adc_data[0] = filter_adc_data[0];
 8000950:	4b44      	ldr	r3, [pc, #272]	@ (8000a64 <ADC_Filter+0x118>)
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	4b44      	ldr	r3, [pc, #272]	@ (8000a68 <ADC_Filter+0x11c>)
 8000956:	801a      	strh	r2, [r3, #0]
    last_adc_data[1] = filter_adc_data[1];
 8000958:	4b42      	ldr	r3, [pc, #264]	@ (8000a64 <ADC_Filter+0x118>)
 800095a:	885a      	ldrh	r2, [r3, #2]
 800095c:	4b42      	ldr	r3, [pc, #264]	@ (8000a68 <ADC_Filter+0x11c>)
 800095e:	805a      	strh	r2, [r3, #2]
    last_adc_data[2] = filter_adc_data[2];
 8000960:	4b40      	ldr	r3, [pc, #256]	@ (8000a64 <ADC_Filter+0x118>)
 8000962:	889a      	ldrh	r2, [r3, #4]
 8000964:	4b40      	ldr	r3, [pc, #256]	@ (8000a68 <ADC_Filter+0x11c>)
 8000966:	809a      	strh	r2, [r3, #4]
    last_adc_data[3] = filter_adc_data[3];
 8000968:	4b3e      	ldr	r3, [pc, #248]	@ (8000a64 <ADC_Filter+0x118>)
 800096a:	88da      	ldrh	r2, [r3, #6]
 800096c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a68 <ADC_Filter+0x11c>)
 800096e:	80da      	strh	r2, [r3, #6]

	filter_adc_data[0] = ADC_FILTER_ALPHA * buffer_adc_1[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[0];
 8000970:	4b3e      	ldr	r3, [pc, #248]	@ (8000a6c <ADC_Filter+0x120>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000a70 <ADC_Filter+0x124>
 8000980:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000984:	4b37      	ldr	r3, [pc, #220]	@ (8000a64 <ADC_Filter+0x118>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000990:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000a74 <ADC_Filter+0x128>
 8000994:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800099c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a0:	ee17 3a90 	vmov	r3, s15
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a64 <ADC_Filter+0x118>)
 80009a8:	801a      	strh	r2, [r3, #0]
	filter_adc_data[1] = ADC_FILTER_ALPHA * buffer_adc_1[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[1];
 80009aa:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <ADC_Filter+0x120>)
 80009ac:	885b      	ldrh	r3, [r3, #2]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000a70 <ADC_Filter+0x124>
 80009ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009be:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <ADC_Filter+0x118>)
 80009c0:	885b      	ldrh	r3, [r3, #2]
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ca:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000a74 <ADC_Filter+0x128>
 80009ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <ADC_Filter+0x118>)
 80009e2:	805a      	strh	r2, [r3, #2]
	filter_adc_data[2] = ADC_FILTER_ALPHA * buffer_adc_2[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[2];
 80009e4:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <ADC_Filter+0x12c>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000a70 <ADC_Filter+0x124>
 80009f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <ADC_Filter+0x118>)
 80009fa:	889b      	ldrh	r3, [r3, #4]
 80009fc:	ee07 3a90 	vmov	s15, r3
 8000a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a04:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000a74 <ADC_Filter+0x128>
 8000a08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a14:	ee17 3a90 	vmov	r3, s15
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <ADC_Filter+0x118>)
 8000a1c:	809a      	strh	r2, [r3, #4]
	filter_adc_data[3] = ADC_FILTER_ALPHA * buffer_adc_2[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_data[3];
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <ADC_Filter+0x12c>)
 8000a20:	885b      	ldrh	r3, [r3, #2]
 8000a22:	ee07 3a90 	vmov	s15, r3
 8000a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000a70 <ADC_Filter+0x124>
 8000a2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <ADC_Filter+0x118>)
 8000a34:	88db      	ldrh	r3, [r3, #6]
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3e:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000a74 <ADC_Filter+0x128>
 8000a42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a4e:	ee17 3a90 	vmov	r3, s15
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <ADC_Filter+0x118>)
 8000a56:	80da      	strh	r2, [r3, #6]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000328 	.word	0x20000328
 8000a68:	20000330 	.word	0x20000330
 8000a6c:	20000320 	.word	0x20000320
 8000a70:	3f19999a 	.word	0x3f19999a
 8000a74:	3ecccccc 	.word	0x3ecccccc
 8000a78:	20000324 	.word	0x20000324

08000a7c <ADC_Init>:

void ADC_Init(void) // 只需要在初始化调用这个就可以持续收集adc数据
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    memset(last_adc_data, 0, sizeof(last_adc_data));
 8000a80:	2208      	movs	r2, #8
 8000a82:	2100      	movs	r1, #0
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <ADC_Init+0x38>)
 8000a86:	f00d f95d 	bl	800dd44 <memset>
    memset(filter_adc_data, 0, sizeof(filter_adc_data));
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480a      	ldr	r0, [pc, #40]	@ (8000ab8 <ADC_Init+0x3c>)
 8000a90:	f00d f958 	bl	800dd44 <memset>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a94:	217f      	movs	r1, #127	@ 0x7f
 8000a96:	4809      	ldr	r0, [pc, #36]	@ (8000abc <ADC_Init+0x40>)
 8000a98:	f002 feb0 	bl	80037fc <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000a9c:	217f      	movs	r1, #127	@ 0x7f
 8000a9e:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <ADC_Init+0x44>)
 8000aa0:	f002 feac 	bl	80037fc <HAL_ADCEx_Calibration_Start>
    HAL_Delay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f001 fc0d 	bl	80022c4 <HAL_Delay>
    ADC_Start_DMA();
 8000aaa:	f000 f80b 	bl	8000ac4 <ADC_Start_DMA>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000330 	.word	0x20000330
 8000ab8:	20000328 	.word	0x20000328
 8000abc:	20000184 	.word	0x20000184
 8000ac0:	200001f0 	.word	0x200001f0

08000ac4 <ADC_Start_DMA>:


void ADC_Start_DMA(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer_adc_1, sizeof(buffer_adc_1)/sizeof(uint16_t));
 8000ac8:	2202      	movs	r2, #2
 8000aca:	4905      	ldr	r1, [pc, #20]	@ (8000ae0 <ADC_Start_DMA+0x1c>)
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <ADC_Start_DMA+0x20>)
 8000ace:	f002 f807 	bl	8002ae0 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)buffer_adc_2, sizeof(buffer_adc_2)/sizeof(uint16_t));
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	4904      	ldr	r1, [pc, #16]	@ (8000ae8 <ADC_Start_DMA+0x24>)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <ADC_Start_DMA+0x28>)
 8000ad8:	f002 f802 	bl	8002ae0 <HAL_ADC_Start_DMA>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000320 	.word	0x20000320
 8000ae4:	20000184 	.word	0x20000184
 8000ae8:	20000324 	.word	0x20000324
 8000aec:	200001f0 	.word	0x200001f0

08000af0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <MX_CRC_Init+0x3c>)
 8000af6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <MX_CRC_Init+0x40>)
 8000af8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_CRC_Init+0x3c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_CRC_Init+0x3c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_CRC_Init+0x3c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_CRC_Init+0x3c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_CRC_Init+0x3c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_CRC_Init+0x3c>)
 8000b1a:	f003 f885 	bl	8003c28 <HAL_CRC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b24:	f000 fdd7 	bl	80016d6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000338 	.word	0x20000338
 8000b30:	40023000 	.word	0x40023000

08000b34 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_CRC_MspInit+0x38>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d10b      	bne.n	8000b5e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_CRC_MspInit+0x3c>)
 8000b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b4a:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <HAL_CRC_MspInit+0x3c>)
 8000b4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b50:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_CRC_MspInit+0x3c>)
 8000b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023000 	.word	0x40023000
 8000b70:	40021000 	.word	0x40021000

08000b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_DMA_Init+0x70>)
 8000b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b7e:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <MX_DMA_Init+0x70>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_DMA_Init+0x70>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_DMA_Init+0x70>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b96:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <MX_DMA_Init+0x70>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <MX_DMA_Init+0x70>)
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	200b      	movs	r0, #11
 8000bb0:	f003 f805 	bl	8003bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bb4:	200b      	movs	r0, #11
 8000bb6:	f003 f81c 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	200c      	movs	r0, #12
 8000bc0:	f002 fffd 	bl	8003bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bc4:	200c      	movs	r0, #12
 8000bc6:	f003 f814 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	200d      	movs	r0, #13
 8000bd0:	f002 fff5 	bl	8003bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bd4:	200d      	movs	r0, #13
 8000bd6:	f003 f80c 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a2a      	ldr	r2, [pc, #168]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c22:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <MX_GPIO_Init+0xc4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c64:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <MX_GPIO_Init+0xc8>)
 8000c66:	f003 fe5b 	bl	8004920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480b      	ldr	r0, [pc, #44]	@ (8000cb0 <MX_GPIO_Init+0xc8>)
 8000c84:	f003 fcb2 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ESC_Buttom_Pin Mode_Buttom_Pin */
  GPIO_InitStruct.Pin = ESC_Buttom_Pin|Mode_Buttom_Pin;
 8000c88:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_GPIO_Init+0xcc>)
 8000c9e:	f003 fca5 	bl	80045ec <HAL_GPIO_Init>

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	@ 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <MX_I2C1_Init+0x80>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <MX_I2C1_Init+0x84>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	4810      	ldr	r0, [pc, #64]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000cf4:	f003 fe2c 	bl	8004950 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 fcea 	bl	80016d6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000d06:	f004 f9f1 	bl	80050ec <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 fce1 	bl	80016d6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <MX_I2C1_Init+0x7c>)
 8000d18:	f004 fa33 	bl	8005182 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fcd8 	bl	80016d6 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000d26:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000d2a:	f004 fa77 	bl	800521c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000035c 	.word	0x2000035c
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	4052060f 	.word	0x4052060f

08000d40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b09c      	sub	sp, #112	@ 0x70
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	2244      	movs	r2, #68	@ 0x44
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00c ffef 	bl	800dd44 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000e24 <HAL_I2C_MspInit+0xe4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d154      	bne.n	8000e1a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d70:	2340      	movs	r3, #64	@ 0x40
 8000d72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0318 	add.w	r3, r7, #24
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f006 fd45 	bl	800780c <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d88:	f000 fca5 	bl	80016d6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a25      	ldr	r2, [pc, #148]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000dbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc2:	2312      	movs	r3, #18
 8000dc4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f003 fc06 	bl	80045ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8000de0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de6:	2312      	movs	r3, #18
 8000de8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df2:	2304      	movs	r3, #4
 8000df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <HAL_I2C_MspInit+0xec>)
 8000dfe:	f003 fbf5 	bl	80045ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e06:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000e08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_I2C_MspInit+0xe8>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3770      	adds	r7, #112	@ 0x70
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40005400 	.word	0x40005400
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400

08000e30 <Keyboard_Init>:
// 第1位为保留位0x00
// 第2-7位为普通按键(0x00-0xFF) 这里做的是4key键盘的协议(外加ESC)
uint8_t hid_buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void Keyboard_Init(void)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b08d      	sub	sp, #52	@ 0x34
 8000e34:	af00      	add	r7, sp, #0
    ADC_Init();
 8000e36:	f7ff fe21 	bl	8000a7c <ADC_Init>
    HAL_Delay(100);
 8000e3a:	2064      	movs	r0, #100	@ 0x64
 8000e3c:	f001 fa42 	bl	80022c4 <HAL_Delay>
    RGB_Init();
 8000e40:	f000 fd8e 	bl	8001960 <RGB_Init>
    HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	@ 0x64
 8000e46:	f001 fa3d 	bl	80022c4 <HAL_Delay>

    OLED_EnableDiffMode(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 fd5a 	bl	8001904 <OLED_EnableDiffMode>
    OLED_EnableFastUpdate(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 fd75 	bl	8001940 <OLED_EnableFastUpdate>
    OLED_Init();
 8000e56:	f000 fcb3 	bl	80017c0 <OLED_Init>
    // USB已经在main中初始化

    // 初始化键盘状态
    Keyboard_Settings_Read();
 8000e5a:	f000 fb5d 	bl	8001518 <Keyboard_Settings_Read>

    HAL_Delay(100);
 8000e5e:	2064      	movs	r0, #100	@ 0x64
 8000e60:	f001 fa30 	bl	80022c4 <HAL_Delay>

    magnetic_key_info_t *keys_info_init[4] = {
 8000e64:	4b42      	ldr	r3, [pc, #264]	@ (8000f70 <Keyboard_Init+0x140>)
 8000e66:	f107 041c 	add.w	r4, r7, #28
 8000e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        &keyboard_state.KEY_3_info,
        &keyboard_state.KEY_4_info
    };

    uint16_t keys_threshold_init[12] = {
        keyboard_settings._1trigger_position_threshold,
 8000e70:	4b40      	ldr	r3, [pc, #256]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e72:	889b      	ldrh	r3, [r3, #4]
    uint16_t keys_threshold_init[12] = {
 8000e74:	80bb      	strh	r3, [r7, #4]
        keyboard_settings._2trigger_position_threshold,
 8000e76:	4b3f      	ldr	r3, [pc, #252]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e78:	895b      	ldrh	r3, [r3, #10]
    uint16_t keys_threshold_init[12] = {
 8000e7a:	80fb      	strh	r3, [r7, #6]
        keyboard_settings._3trigger_position_threshold,
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e7e:	8a1b      	ldrh	r3, [r3, #16]
    uint16_t keys_threshold_init[12] = {
 8000e80:	813b      	strh	r3, [r7, #8]
        keyboard_settings._4trigger_position_threshold,
 8000e82:	4b3c      	ldr	r3, [pc, #240]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e84:	8adb      	ldrh	r3, [r3, #22]
    uint16_t keys_threshold_init[12] = {
 8000e86:	817b      	strh	r3, [r7, #10]

        keyboard_settings._1trigger_speed_threshold,
 8000e88:	4b3a      	ldr	r3, [pc, #232]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e8a:	88db      	ldrh	r3, [r3, #6]
    uint16_t keys_threshold_init[12] = {
 8000e8c:	81bb      	strh	r3, [r7, #12]
        keyboard_settings._2trigger_speed_threshold,
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e90:	899b      	ldrh	r3, [r3, #12]
    uint16_t keys_threshold_init[12] = {
 8000e92:	81fb      	strh	r3, [r7, #14]
        keyboard_settings._3trigger_speed_threshold,
 8000e94:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e96:	8a5b      	ldrh	r3, [r3, #18]
    uint16_t keys_threshold_init[12] = {
 8000e98:	823b      	strh	r3, [r7, #16]
        keyboard_settings._4trigger_speed_threshold,
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <Keyboard_Init+0x144>)
 8000e9c:	8b1b      	ldrh	r3, [r3, #24]
    uint16_t keys_threshold_init[12] = {
 8000e9e:	827b      	strh	r3, [r7, #18]

        keyboard_settings._1release_speed_threshold,
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <Keyboard_Init+0x144>)
 8000ea2:	891b      	ldrh	r3, [r3, #8]
    uint16_t keys_threshold_init[12] = {
 8000ea4:	82bb      	strh	r3, [r7, #20]
        keyboard_settings._2release_speed_threshold,
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <Keyboard_Init+0x144>)
 8000ea8:	89db      	ldrh	r3, [r3, #14]
    uint16_t keys_threshold_init[12] = {
 8000eaa:	82fb      	strh	r3, [r7, #22]
        keyboard_settings._3release_speed_threshold,
 8000eac:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <Keyboard_Init+0x144>)
 8000eae:	8a9b      	ldrh	r3, [r3, #20]
    uint16_t keys_threshold_init[12] = {
 8000eb0:	833b      	strh	r3, [r7, #24]
        keyboard_settings._4release_speed_threshold
 8000eb2:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <Keyboard_Init+0x144>)
 8000eb4:	8b5b      	ldrh	r3, [r3, #26]
    uint16_t keys_threshold_init[12] = {
 8000eb6:	837b      	strh	r3, [r7, #26]
    };

    for (int i = 0; i < 4; i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ebc:	e046      	b.n	8000f4c <Keyboard_Init+0x11c>
    {
        keys_info_init[i]->key_state = KEY_RELEASED;
 8000ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	3330      	adds	r3, #48	@ 0x30
 8000ec4:	443b      	add	r3, r7
 8000ec6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	701a      	strb	r2, [r3, #0]
        keys_info_init[i]->trigger_position_threshold = keys_threshold_init[i]; // 触发位置阈值
 8000ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	3330      	adds	r3, #48	@ 0x30
 8000ed4:	443b      	add	r3, r7
 8000ed6:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	3330      	adds	r3, #48	@ 0x30
 8000ee0:	443b      	add	r3, r7
 8000ee2:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000ee6:	8053      	strh	r3, [r2, #2]
        keys_info_init[i]->trigger_speed_threshold = keys_threshold_init[i + 4]; // 触发速度阈值
 8000ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eea:	1d19      	adds	r1, r3, #4
 8000eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	3330      	adds	r3, #48	@ 0x30
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000ef8:	004b      	lsls	r3, r1, #1
 8000efa:	3330      	adds	r3, #48	@ 0x30
 8000efc:	443b      	add	r3, r7
 8000efe:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000f02:	8093      	strh	r3, [r2, #4]
        keys_info_init[i]->release_speed_threshold = keys_threshold_init[i + 8]; // 释放速度阈值
 8000f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f06:	f103 0108 	add.w	r1, r3, #8
 8000f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	3330      	adds	r3, #48	@ 0x30
 8000f10:	443b      	add	r3, r7
 8000f12:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000f16:	004b      	lsls	r3, r1, #1
 8000f18:	3330      	adds	r3, #48	@ 0x30
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000f20:	80d3      	strh	r3, [r2, #6]
        keys_info_init[i]->press_time = HAL_GetTick(); // 初始化按下时间戳
 8000f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	3330      	adds	r3, #48	@ 0x30
 8000f28:	443b      	add	r3, r7
 8000f2a:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8000f2e:	f001 f9bd 	bl	80022ac <HAL_GetTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	60a3      	str	r3, [r4, #8]
        keys_info_init[i]->press_speed = 0; // 初始化按下速度
 8000f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	3330      	adds	r3, #48	@ 0x30
 8000f3c:	443b      	add	r3, r7
 8000f3e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000f42:	2200      	movs	r2, #0
 8000f44:	819a      	strh	r2, [r3, #12]
    for (int i = 0; i < 4; i++)
 8000f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f48:	3301      	adds	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	ddb5      	ble.n	8000ebe <Keyboard_Init+0x8e>
    }

    keyboard_state.TouchButton_1 = false;
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <Keyboard_Init+0x148>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    keyboard_state.TouchButton_2 = false;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <Keyboard_Init+0x148>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    keyboard_settings.keyboard_mode = 1;
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <Keyboard_Init+0x144>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	3734      	adds	r7, #52	@ 0x34
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	0800ddd0 	.word	0x0800ddd0
 8000f74:	200003b0 	.word	0x200003b0
 8000f78:	200003d8 	.word	0x200003d8

08000f7c <update_key_state>:

// Helper Func
static void update_key_state(magnetic_key_info_t *key_info, float current_adc, uint16_t pos_threshold, int16_t speed_trigger, int16_t speed_release)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
    switch (key_info->key_state)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	f200 80c1 	bhi.w	8001126 <update_key_state+0x1aa>
 8000fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fac <update_key_state+0x30>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08001009 	.word	0x08001009
 8000fb0:	08001073 	.word	0x08001073
 8000fb4:	080010bd 	.word	0x080010bd
 8000fb8:	08000fbd 	.word	0x08000fbd
    {
        case KEY_RELEASED:
            if (current_adc >= pos_threshold)
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	db08      	blt.n	8000fe6 <update_key_state+0x6a>
            {
                key_info->key_state = KEY_PRESSED;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8000fda:	f001 f967 	bl	80022ac <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed >= speed_trigger)
            {
                key_info->key_state = KEY_PRESSING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 8000fe4:	e0a3      	b.n	800112e <update_key_state+0x1b2>
            else if (key_info->press_speed >= speed_trigger)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000fec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f300 809c 	bgt.w	800112e <update_key_state+0x1b2>
                key_info->key_state = KEY_PRESSING;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8000ffc:	f001 f956 	bl	80022ac <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	609a      	str	r2, [r3, #8]
            break;
 8001006:	e092      	b.n	800112e <update_key_state+0x1b2>
        case KEY_PRESSING:
            if (current_adc >= pos_threshold)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ed97 7a02 	vldr	s14, [r7, #8]
 8001016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	db08      	blt.n	8001032 <update_key_state+0xb6>
            {
                key_info->key_state = KEY_PRESSED;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001026:	f001 f941 	bl	80022ac <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed < speed_release)
            {
                key_info->key_state = KEY_RELEASING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 8001030:	e07f      	b.n	8001132 <update_key_state+0x1b6>
            else if (key_info->press_speed < speed_trigger) // 可能是有点抖动造成的
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001038:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dd08      	ble.n	8001052 <update_key_state+0xd6>
                key_info->key_state = KEY_RELEASED;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2203      	movs	r2, #3
 8001044:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001046:	f001 f931 	bl	80022ac <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	609a      	str	r2, [r3, #8]
            break;
 8001050:	e06f      	b.n	8001132 <update_key_state+0x1b6>
            else if (key_info->press_speed < speed_release)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001058:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd68      	ble.n	8001132 <update_key_state+0x1b6>
                key_info->key_state = KEY_RELEASING;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001066:	f001 f921 	bl	80022ac <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	609a      	str	r2, [r3, #8]
            break;
 8001070:	e05f      	b.n	8001132 <update_key_state+0x1b6>
        case KEY_PRESSED:
            if (current_adc < pos_threshold)
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d508      	bpl.n	800109c <update_key_state+0x120>
            {
                key_info->key_state = KEY_RELEASED;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2203      	movs	r2, #3
 800108e:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 8001090:	f001 f90c 	bl	80022ac <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed < speed_release)
            {
                key_info->key_state = KEY_RELEASING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 800109a:	e04c      	b.n	8001136 <update_key_state+0x1ba>
            else if (key_info->press_speed < speed_release)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dd45      	ble.n	8001136 <update_key_state+0x1ba>
                key_info->key_state = KEY_RELEASING;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010b0:	f001 f8fc 	bl	80022ac <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	609a      	str	r2, [r3, #8]
            break;
 80010ba:	e03c      	b.n	8001136 <update_key_state+0x1ba>
        case KEY_RELEASING:
            if (current_adc < pos_threshold)
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	d508      	bpl.n	80010e6 <update_key_state+0x16a>
            {
                key_info->key_state = KEY_RELEASED;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2203      	movs	r2, #3
 80010d8:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010da:	f001 f8e7 	bl	80022ac <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	609a      	str	r2, [r3, #8]
            else if (key_info->press_speed >= speed_trigger)
            {
                key_info->key_state = KEY_PRESSING;
                key_info->press_time = HAL_GetTick();
            }
            break;
 80010e4:	e029      	b.n	800113a <update_key_state+0x1be>
            else if (key_info->press_speed > speed_release)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	da08      	bge.n	8001106 <update_key_state+0x18a>
                key_info->key_state = KEY_PRESSED;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 80010fa:	f001 f8d7 	bl	80022ac <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	609a      	str	r2, [r3, #8]
            break;
 8001104:	e019      	b.n	800113a <update_key_state+0x1be>
            else if (key_info->press_speed >= speed_trigger)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800110c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dc12      	bgt.n	800113a <update_key_state+0x1be>
                key_info->key_state = KEY_PRESSING;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
                key_info->press_time = HAL_GetTick();
 800111a:	f001 f8c7 	bl	80022ac <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	609a      	str	r2, [r3, #8]
            break;
 8001124:	e009      	b.n	800113a <update_key_state+0x1be>

    default:
        key_info->key_state = KEY_RELEASED;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2203      	movs	r2, #3
 800112a:	701a      	strb	r2, [r3, #0]
        break;
 800112c:	e006      	b.n	800113c <update_key_state+0x1c0>
            break;
 800112e:	bf00      	nop
 8001130:	e004      	b.n	800113c <update_key_state+0x1c0>
            break;
 8001132:	bf00      	nop
 8001134:	e002      	b.n	800113c <update_key_state+0x1c0>
            break;
 8001136:	bf00      	nop
 8001138:	e000      	b.n	800113c <update_key_state+0x1c0>
            break;
 800113a:	bf00      	nop
    }
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <Keyboard_Read_Input>:

void Keyboard_Read_Input(keyboard_settings_t *settings, keyboard_state_t *state)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	@ 0x38
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    ADC_Filter();
 800114e:	f7ff fbfd 	bl	800094c <ADC_Filter>

    state->TouchButton_1 = (HAL_GPIO_ReadPin(ESC_Buttom_GPIO_Port, ESC_Buttom_Pin) == GPIO_PIN_RESET);
 8001152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001156:	484e      	ldr	r0, [pc, #312]	@ (8001290 <Keyboard_Read_Input+0x14c>)
 8001158:	f003 fbca 	bl	80048f0 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2da      	uxtb	r2, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    state->TouchButton_2 = (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET);
 800116e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001172:	4847      	ldr	r0, [pc, #284]	@ (8001290 <Keyboard_Read_Input+0x14c>)
 8001174:	f003 fbbc 	bl	80048f0 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2da      	uxtb	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    // 状态机部分
    magnetic_key_info_t *keys[4] = {
        &state->KEY_1_info,
 800118a:	683b      	ldr	r3, [r7, #0]
    magnetic_key_info_t *keys[4] = {
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
        &state->KEY_2_info,
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3310      	adds	r3, #16
    magnetic_key_info_t *keys[4] = {
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
        &state->KEY_3_info,
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3320      	adds	r3, #32
    magnetic_key_info_t *keys[4] = {
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
        &state->KEY_4_info
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3330      	adds	r3, #48	@ 0x30
    magnetic_key_info_t *keys[4] = {
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    uint16_t pos_thresholds[4] = {
        settings->_1trigger_position_threshold,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	889b      	ldrh	r3, [r3, #4]
    uint16_t pos_thresholds[4] = {
 80011a4:	83bb      	strh	r3, [r7, #28]
        settings->_2trigger_position_threshold,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	895b      	ldrh	r3, [r3, #10]
    uint16_t pos_thresholds[4] = {
 80011aa:	83fb      	strh	r3, [r7, #30]
        settings->_3trigger_position_threshold,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	8a1b      	ldrh	r3, [r3, #16]
    uint16_t pos_thresholds[4] = {
 80011b0:	843b      	strh	r3, [r7, #32]
        settings->_4trigger_position_threshold
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	8adb      	ldrh	r3, [r3, #22]
    uint16_t pos_thresholds[4] = {
 80011b6:	847b      	strh	r3, [r7, #34]	@ 0x22
    };

    int16_t speed_triggers[4] = {
        settings->_1trigger_speed_threshold,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	88db      	ldrh	r3, [r3, #6]
 80011bc:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 80011be:	82bb      	strh	r3, [r7, #20]
        settings->_2trigger_speed_threshold,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	899b      	ldrh	r3, [r3, #12]
 80011c4:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 80011c6:	82fb      	strh	r3, [r7, #22]
        settings->_3trigger_speed_threshold,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	8a5b      	ldrh	r3, [r3, #18]
 80011cc:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 80011ce:	833b      	strh	r3, [r7, #24]
        settings->_4trigger_speed_threshold
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	8b1b      	ldrh	r3, [r3, #24]
 80011d4:	b21b      	sxth	r3, r3
    int16_t speed_triggers[4] = {
 80011d6:	837b      	strh	r3, [r7, #26]
    };

    int16_t speed_releases[4] = {
        settings->_1release_speed_threshold,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	891b      	ldrh	r3, [r3, #8]
 80011dc:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 80011de:	81bb      	strh	r3, [r7, #12]
        settings->_2release_speed_threshold,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	89db      	ldrh	r3, [r3, #14]
 80011e4:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 80011e6:	81fb      	strh	r3, [r7, #14]
        settings->_3release_speed_threshold,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	8a9b      	ldrh	r3, [r3, #20]
 80011ec:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 80011ee:	823b      	strh	r3, [r7, #16]
        settings->_4release_speed_threshold
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	8b5b      	ldrh	r3, [r3, #26]
 80011f4:	b21b      	sxth	r3, r3
    int16_t speed_releases[4] = {
 80011f6:	827b      	strh	r3, [r7, #18]
    };

    for (int i = 0; i < 4; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80011fc:	e040      	b.n	8001280 <Keyboard_Read_Input+0x13c>
    {
        keys[i]->press_speed = CALCULATE_PRESS_SPEED(filter_adc_data[i], last_adc_data[i], 1);
 80011fe:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <Keyboard_Read_Input+0x150>)
 8001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001206:	4619      	mov	r1, r3
 8001208:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <Keyboard_Read_Input+0x154>)
 800120a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001210:	1acb      	subs	r3, r1, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	0152      	lsls	r2, r2, #5
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	b29a      	uxth	r2, r3
 8001222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	3338      	adds	r3, #56	@ 0x38
 8001228:	443b      	add	r3, r7
 800122a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800122e:	b212      	sxth	r2, r2
 8001230:	819a      	strh	r2, [r3, #12]
        update_key_state(keys[i], filter_adc_data[i], pos_thresholds[i], speed_triggers[i], speed_releases[i]);
 8001232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	3338      	adds	r3, #56	@ 0x38
 8001238:	443b      	add	r3, r7
 800123a:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800123e:	4a15      	ldr	r2, [pc, #84]	@ (8001294 <Keyboard_Read_Input+0x150>)
 8001240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	3338      	adds	r3, #56	@ 0x38
 8001254:	443b      	add	r3, r7
 8001256:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 800125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	3338      	adds	r3, #56	@ 0x38
 8001260:	443b      	add	r3, r7
 8001262:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8001266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	3338      	adds	r3, #56	@ 0x38
 800126c:	443b      	add	r3, r7
 800126e:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	f7ff fe81 	bl	8000f7c <update_key_state>
    for (int i = 0; i < 4; i++)
 800127a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800127c:	3301      	adds	r3, #1
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001282:	2b03      	cmp	r3, #3
 8001284:	ddbb      	ble.n	80011fe <Keyboard_Read_Input+0xba>
    }
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3738      	adds	r7, #56	@ 0x38
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	48000400 	.word	0x48000400
 8001294:	20000328 	.word	0x20000328
 8001298:	20000330 	.word	0x20000330

0800129c <Handle_Mode_Switch>:

void Handle_Mode_Switch(keyboard_settings_t *settings, keyboard_state_t *state)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    static bool last_mode_button_state = false;
    if (state->TouchButton_2 && !last_mode_button_state) // 检测按钮下降沿
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <Handle_Mode_Switch+0x3c>
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <Handle_Mode_Switch+0x54>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f083 0301 	eor.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <Handle_Mode_Switch+0x3c>
    {
        settings->keyboard_mode++;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	701a      	strb	r2, [r3, #0]
        if (settings->keyboard_mode > 3)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d902      	bls.n	80012d8 <Handle_Mode_Switch+0x3c>
        {
            settings->keyboard_mode = 1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
        }
    }
    last_mode_button_state = state->TouchButton_2;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <Handle_Mode_Switch+0x54>)
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000428 	.word	0x20000428

080012f4 <Keyboard_Updater>:

void Keyboard_Updater(keyboard_settings_t *settings, keyboard_state_t *state)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
    Keyboard_Read_Input(settings, state);
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff1f 	bl	8001144 <Keyboard_Read_Input>
    Handle_Mode_Switch(settings, state);
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ffc7 	bl	800129c <Handle_Mode_Switch>
    hid_buffer[0] = KEYBOARD_BUTTON_NONE; // 特殊按键位
 800130e:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
    hid_buffer[1] = KEYBOARD_BUTTON_NONE; // 保留位
 8001314:	4b64      	ldr	r3, [pc, #400]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001316:	2200      	movs	r2, #0
 8001318:	705a      	strb	r2, [r3, #1]

    if (settings->enable_quick_trigger)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d064      	beq.n	80013ec <Keyboard_Updater+0xf8>
    {
        if (state->KEY_1_info.key_state == KEY_PRESSED || state->KEY_1_info.key_state == KEY_PRESSING)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d003      	beq.n	8001332 <Keyboard_Updater+0x3e>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <Keyboard_Updater+0x46>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 8001332:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001334:	2207      	movs	r2, #7
 8001336:	709a      	strb	r2, [r3, #2]
 8001338:	e00a      	b.n	8001350 <Keyboard_Updater+0x5c>
        }
        else if (state->KEY_1_info.key_state == KEY_RELEASED || state->KEY_1_info.key_state == KEY_RELEASING)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d003      	beq.n	800134a <Keyboard_Updater+0x56>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d102      	bne.n	8001350 <Keyboard_Updater+0x5c>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 800134a:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 800134c:	2200      	movs	r2, #0
 800134e:	709a      	strb	r2, [r3, #2]
        }

        if (state->KEY_2_info.key_state == KEY_PRESSED || state->KEY_2_info.key_state == KEY_PRESSING)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	7c1b      	ldrb	r3, [r3, #16]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d003      	beq.n	8001360 <Keyboard_Updater+0x6c>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	7c1b      	ldrb	r3, [r3, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <Keyboard_Updater+0x74>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 8001360:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001362:	2209      	movs	r2, #9
 8001364:	70da      	strb	r2, [r3, #3]
 8001366:	e00a      	b.n	800137e <Keyboard_Updater+0x8a>
        }
        else if (state->KEY_2_info.key_state == KEY_RELEASED || state->KEY_2_info.key_state == KEY_RELEASING)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	7c1b      	ldrb	r3, [r3, #16]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d003      	beq.n	8001378 <Keyboard_Updater+0x84>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	7c1b      	ldrb	r3, [r3, #16]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d102      	bne.n	800137e <Keyboard_Updater+0x8a>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 8001378:	4b4b      	ldr	r3, [pc, #300]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 800137a:	2200      	movs	r2, #0
 800137c:	70da      	strb	r2, [r3, #3]
        }

        if (state->KEY_3_info.key_state == KEY_PRESSED || state->KEY_3_info.key_state == KEY_PRESSING)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d004      	beq.n	8001392 <Keyboard_Updater+0x9e>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <Keyboard_Updater+0xa6>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 8001392:	4b45      	ldr	r3, [pc, #276]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001394:	220d      	movs	r2, #13
 8001396:	711a      	strb	r2, [r3, #4]
 8001398:	e00c      	b.n	80013b4 <Keyboard_Updater+0xc0>
        }
        else if (state->KEY_3_info.key_state == KEY_RELEASED || state->KEY_3_info.key_state == KEY_RELEASING)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d004      	beq.n	80013ae <Keyboard_Updater+0xba>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d102      	bne.n	80013b4 <Keyboard_Updater+0xc0>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 80013ae:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	711a      	strb	r2, [r3, #4]
        }

        if (state->KEY_4_info.key_state == KEY_PRESSED || state->KEY_4_info.key_state == KEY_PRESSING)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d004      	beq.n	80013c8 <Keyboard_Updater+0xd4>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d103      	bne.n	80013d0 <Keyboard_Updater+0xdc>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 80013c8:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 80013ca:	220e      	movs	r2, #14
 80013cc:	715a      	strb	r2, [r3, #5]
 80013ce:	e04d      	b.n	800146c <Keyboard_Updater+0x178>
        }
        else if (state->KEY_4_info.key_state == KEY_RELEASED || state->KEY_4_info.key_state == KEY_RELEASING)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d004      	beq.n	80013e4 <Keyboard_Updater+0xf0>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d143      	bne.n	800146c <Keyboard_Updater+0x178>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 80013e4:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	715a      	strb	r2, [r3, #5]
 80013ea:	e03f      	b.n	800146c <Keyboard_Updater+0x178>
        }
    }
    else
    {
        if (state->KEY_1_info.key_state == KEY_PRESSED)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d103      	bne.n	80013fc <Keyboard_Updater+0x108>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	709a      	strb	r2, [r3, #2]
 80013fa:	e006      	b.n	800140a <Keyboard_Updater+0x116>
        }
        else if (state->KEY_1_info.key_state == KEY_RELEASED)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d102      	bne.n	800140a <Keyboard_Updater+0x116>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 8001404:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001406:	2200      	movs	r2, #0
 8001408:	709a      	strb	r2, [r3, #2]
        }

        if (state->KEY_2_info.key_state == KEY_PRESSED)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	7c1b      	ldrb	r3, [r3, #16]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d103      	bne.n	800141a <Keyboard_Updater+0x126>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001414:	2209      	movs	r2, #9
 8001416:	70da      	strb	r2, [r3, #3]
 8001418:	e006      	b.n	8001428 <Keyboard_Updater+0x134>
        }
        else if (state->KEY_2_info.key_state == KEY_RELEASED)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	7c1b      	ldrb	r3, [r3, #16]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d102      	bne.n	8001428 <Keyboard_Updater+0x134>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]
        }

        if (state->KEY_3_info.key_state == KEY_PRESSED)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d103      	bne.n	800143a <Keyboard_Updater+0x146>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001434:	220d      	movs	r2, #13
 8001436:	711a      	strb	r2, [r3, #4]
 8001438:	e007      	b.n	800144a <Keyboard_Updater+0x156>
        }
        else if (state->KEY_3_info.key_state == KEY_RELEASED)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d102      	bne.n	800144a <Keyboard_Updater+0x156>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001446:	2200      	movs	r2, #0
 8001448:	711a      	strb	r2, [r3, #4]
        }

        if (state->KEY_4_info.key_state == KEY_PRESSED)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001450:	2b01      	cmp	r3, #1
 8001452:	d103      	bne.n	800145c <Keyboard_Updater+0x168>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001456:	220e      	movs	r2, #14
 8001458:	715a      	strb	r2, [r3, #5]
 800145a:	e007      	b.n	800146c <Keyboard_Updater+0x178>
        }
        else if (state->KEY_4_info.key_state == KEY_RELEASED)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001462:	2b03      	cmp	r3, #3
 8001464:	d102      	bne.n	800146c <Keyboard_Updater+0x178>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001468:	2200      	movs	r2, #0
 800146a:	715a      	strb	r2, [r3, #5]
        }

    }
    
    hid_buffer[6] = state->TouchButton_1 ? KEYBOARD_BUTTON_ESC : KEYBOARD_BUTTON_NONE;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <Keyboard_Updater+0x186>
 8001476:	2229      	movs	r2, #41	@ 0x29
 8001478:	e000      	b.n	800147c <Keyboard_Updater+0x188>
 800147a:	2200      	movs	r2, #0
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 800147e:	719a      	strb	r2, [r3, #6]
    hid_buffer[7] = KEYBOARD_BUTTON_NONE; // 这是padding
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001482:	2200      	movs	r2, #0
 8001484:	71da      	strb	r2, [r3, #7]

    // 这里的TouchButton_2是模式切换按钮,不需要发送到USB HID
    // 发送USB HID报告
    if (settings->keyboard_mode == 1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d104      	bne.n	8001498 <Keyboard_Updater+0x1a4>
    {
        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, sizeof(hid_buffer));
 800148e:	2208      	movs	r2, #8
 8001490:	4905      	ldr	r1, [pc, #20]	@ (80014a8 <Keyboard_Updater+0x1b4>)
 8001492:	4806      	ldr	r0, [pc, #24]	@ (80014ac <Keyboard_Updater+0x1b8>)
 8001494:	f00a ff22 	bl	800c2dc <USBD_HID_SendReport>
    }

    keyboard_update_flag = 0; // 清除更新标志位
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <Keyboard_Updater+0x1bc>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000420 	.word	0x20000420
 80014ac:	2000130c 	.word	0x2000130c
 80014b0:	2000041c 	.word	0x2000041c

080014b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 这里是1000hz的定时器中断
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6 && !keyboard_update_flag) // TIM6用于扫描&更新键盘状态
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10a      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x28>
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        keyboard_update_flag = 1;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
        Keyboard_Updater(&keyboard_settings, &keyboard_state);
 80014d4:	490d      	ldr	r1, [pc, #52]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014d6:	480e      	ldr	r0, [pc, #56]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80014d8:	f7ff ff0c 	bl	80012f4 <Keyboard_Updater>
    }

    if (htim->Instance == TIM6)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10a      	bne.n	80014fc <HAL_TIM_PeriodElapsedCallback+0x48>
    {
        msg_counter++;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	1c54      	adds	r4, r2, #1
 80014ee:	f143 0500 	adc.w	r5, r3, #0
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80014f4:	e9c3 4500 	strd	r4, r5, [r3]
        CPS_Counter(); // 计算CPS
 80014f8:	f000 f9bc 	bl	8001874 <CPS_Counter>
    }
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bdb0      	pop	{r4, r5, r7, pc}
 8001504:	40001000 	.word	0x40001000
 8001508:	2000041c 	.word	0x2000041c
 800150c:	200003d8 	.word	0x200003d8
 8001510:	200003b0 	.word	0x200003b0
 8001514:	20000c40 	.word	0x20000c40

08001518 <Keyboard_Settings_Read>:


#pragma region EEPROM Simulation

void Keyboard_Settings_Read(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
    uint32_t* p_settings_in_flash = (uint32_t*)KEYBOARD_SETTINGS_FLASH_START_ADDRESS;
 800151e:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <Keyboard_Settings_Read+0xa8>)
 8001520:	60fb      	str	r3, [r7, #12]

    // 计算Flash中存储的数据的CRC值，并与数据自身存储的CRC值进行比较
    uint32_t crc_check = HAL_CRC_Calculate(&hcrc, p_settings_in_flash, BYTES_TO_WORDS(sizeof(keyboard_settings_t)) - 1);
 8001522:	2209      	movs	r2, #9
 8001524:	68f9      	ldr	r1, [r7, #12]
 8001526:	4827      	ldr	r0, [pc, #156]	@ (80015c4 <Keyboard_Settings_Read+0xac>)
 8001528:	f002 fbe2 	bl	8003cf0 <HAL_CRC_Calculate>
 800152c:	60b8      	str	r0, [r7, #8]

    // 从Flash中读取CRC值
    uint32_t stored_crc = *(p_settings_in_flash + BYTES_TO_WORDS(sizeof(keyboard_settings_t)) - 1);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	607b      	str	r3, [r7, #4]

    // 比较CRC值
    if (crc_check == stored_crc)
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d10c      	bne.n	8001556 <Keyboard_Settings_Read+0x3e>
    {
        memcpy(&keyboard_settings, (void*)KEYBOARD_SETTINGS_FLASH_START_ADDRESS, sizeof(keyboard_settings_t));
 800153c:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <Keyboard_Settings_Read+0xa8>)
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001550:	e884 0003 	stmia.w	r4, {r0, r1}
        keyboard_settings._4trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
        keyboard_settings._4release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度

        // Keyboard_Settings_Save(); // Debug时候可以关闭
    }
}
 8001554:	e030      	b.n	80015b8 <Keyboard_Settings_Read+0xa0>
        keyboard_settings.keyboard_mode = 1; // 默认模式
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
        keyboard_settings.rgb_style = 1; // 默认RGB风格
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 800155e:	2201      	movs	r2, #1
 8001560:	705a      	strb	r2, [r3, #1]
        keyboard_settings.enable_quick_trigger = 0; // 默认不开启快速触发
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 8001564:	2200      	movs	r2, #0
 8001566:	709a      	strb	r2, [r3, #2]
        keyboard_settings._1trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 800156a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800156e:	809a      	strh	r2, [r3, #4]
        keyboard_settings._1trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度阈值
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 8001572:	2264      	movs	r2, #100	@ 0x64
 8001574:	80da      	strh	r2, [r3, #6]
        keyboard_settings._1release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 8001578:	2232      	movs	r2, #50	@ 0x32
 800157a:	811a      	strh	r2, [r3, #8]
        keyboard_settings._2trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 800157e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001582:	815a      	strh	r2, [r3, #10]
        keyboard_settings._2trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 8001586:	2264      	movs	r2, #100	@ 0x64
 8001588:	819a      	strh	r2, [r3, #12]
        keyboard_settings._2release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 800158c:	2232      	movs	r2, #50	@ 0x32
 800158e:	81da      	strh	r2, [r3, #14]
        keyboard_settings._3trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 8001592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001596:	821a      	strh	r2, [r3, #16]
        keyboard_settings._3trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 800159a:	2264      	movs	r2, #100	@ 0x64
 800159c:	825a      	strh	r2, [r3, #18]
        keyboard_settings._3release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 80015a0:	2232      	movs	r2, #50	@ 0x32
 80015a2:	829a      	strh	r2, [r3, #20]
        keyboard_settings._4trigger_position_threshold = DEFAULT_TRIGGER_POSITION_THRESHOLD;
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 80015a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015aa:	82da      	strh	r2, [r3, #22]
        keyboard_settings._4trigger_speed_threshold = DEFAULT_TRIGGER_SPEED_THRESHOLD; // 默认触发速度
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 80015ae:	2264      	movs	r2, #100	@ 0x64
 80015b0:	831a      	strh	r2, [r3, #24]
        keyboard_settings._4release_speed_threshold = DEFAULT_RELEASE_SPEED_THRESHOLD; // 默认释放速度
 80015b2:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <Keyboard_Settings_Read+0xb0>)
 80015b4:	2232      	movs	r2, #50	@ 0x32
 80015b6:	835a      	strh	r2, [r3, #26]
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bdb0      	pop	{r4, r5, r7, pc}
 80015c0:	0801f800 	.word	0x0801f800
 80015c4:	20000338 	.word	0x20000338
 80015c8:	200003b0 	.word	0x200003b0

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d0:	f000 fe07 	bl	80021e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f834 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f7ff fb06 	bl	8000be8 <MX_GPIO_Init>
  MX_DMA_Init();
 80015dc:	f7ff faca 	bl	8000b74 <MX_DMA_Init>
  MX_ADC2_Init();
 80015e0:	f7ff f838 	bl	8000654 <MX_ADC2_Init>
  MX_I2C1_Init();
 80015e4:	f7ff fb68 	bl	8000cb8 <MX_I2C1_Init>
  MX_USB_Device_Init();
 80015e8:	f00b ffcc 	bl	800d584 <MX_USB_Device_Init>
  MX_ADC1_Init();
 80015ec:	f7fe ffaa 	bl	8000544 <MX_ADC1_Init>
  MX_TIM3_Init();
 80015f0:	f000 fbde 	bl	8001db0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80015f4:	f000 fd28 	bl	8002048 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80015f8:	f7ff fa7a 	bl	8000af0 <MX_CRC_Init>
  MX_TIM6_Init();
 80015fc:	f000 fc4e 	bl	8001e9c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 8001600:	f7ff fc16 	bl	8000e30 <Keyboard_Init>
  HAL_Delay(100);
 8001604:	2064      	movs	r0, #100	@ 0x64
 8001606:	f000 fe5d 	bl	80022c4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (keyboard_settings.rgb_style == 0)
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <main+0x70>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <main+0x4c>
    {
      RGB_Clear();
 8001612:	f000 f9e1 	bl	80019d8 <RGB_Clear>
 8001616:	e7f8      	b.n	800160a <main+0x3e>
    }
    else if (keyboard_settings.rgb_style == 1)
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <main+0x70>)
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <main+0x60>
    {
      RGB_RainbowCycle();
 8001620:	f000 fade 	bl	8001be0 <RGB_RainbowCycle>
      HAL_Delay(100);
 8001624:	2064      	movs	r0, #100	@ 0x64
 8001626:	f000 fe4d 	bl	80022c4 <HAL_Delay>
 800162a:	e7ee      	b.n	800160a <main+0x3e>
    }
    else if (keyboard_settings.rgb_style == 2)
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <main+0x70>)
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d1ea      	bne.n	800160a <main+0x3e>
      //   uint8_t red = rand() % 256;
      //   uint8_t green = rand() % 256;
      //   uint8_t blue = rand() % 256;
      //   RGB_SetColor(3, red, green, blue);
      // }
      RGB_Update();
 8001634:	f000 f9e8 	bl	8001a08 <RGB_Update>
    if (keyboard_settings.rgb_style == 0)
 8001638:	e7e7      	b.n	800160a <main+0x3e>
 800163a:	bf00      	nop
 800163c:	200003b0 	.word	0x200003b0

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b094      	sub	sp, #80	@ 0x50
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	2238      	movs	r2, #56	@ 0x38
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f00c fb78 	bl	800dd44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001662:	2000      	movs	r0, #0
 8001664:	f005 faf0 	bl	8006c48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001668:	2321      	movs	r3, #33	@ 0x21
 800166a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800166c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001670:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001672:	2301      	movs	r3, #1
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167a:	2303      	movs	r3, #3
 800167c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800167e:	2302      	movs	r3, #2
 8001680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001682:	2355      	movs	r3, #85	@ 0x55
 8001684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001686:	2302      	movs	r3, #2
 8001688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4618      	mov	r0, r3
 8001698:	f005 fb8a 	bl	8006db0 <HAL_RCC_OscConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016a2:	f000 f818 	bl	80016d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
 80016a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2303      	movs	r3, #3
 80016ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2104      	movs	r1, #4
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 fe88 	bl	80073d4 <HAL_RCC_ClockConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016ca:	f000 f804 	bl	80016d6 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3750      	adds	r7, #80	@ 0x50
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016da:	b672      	cpsid	i
}
 80016dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016de:	bf00      	nop
 80016e0:	e7fd      	b.n	80016de <Error_Handler+0x8>
	...

080016e4 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80016ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ee:	2100      	movs	r1, #0
 80016f0:	4811      	ldr	r0, [pc, #68]	@ (8001738 <OLED_InitBuffer+0x54>)
 80016f2:	f00c fb27 	bl	800dd44 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 80016f6:	f240 4201 	movw	r2, #1025	@ 0x401
 80016fa:	2100      	movs	r1, #0
 80016fc:	480f      	ldr	r0, [pc, #60]	@ (800173c <OLED_InitBuffer+0x58>)
 80016fe:	f00c fb21 	bl	800dd44 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <OLED_InitBuffer+0x58>)
 8001704:	2240      	movs	r2, #64	@ 0x40
 8001706:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001708:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <OLED_InitBuffer+0x5c>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <OLED_InitBuffer+0x60>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	e006      	b.n	8001728 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <OLED_InitBuffer+0x64>)
 800171e:	2101      	movs	r1, #1
 8001720:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3301      	adds	r3, #1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b07      	cmp	r3, #7
 800172c:	d9f5      	bls.n	800171a <OLED_InitBuffer+0x36>
    }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000434 	.word	0x20000434
 800173c:	20000834 	.word	0x20000834
 8001740:	20000429 	.word	0x20000429
 8001744:	2000042a 	.word	0x2000042a
 8001748:	2000042c 	.word	0x2000042c

0800174c <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001752:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001756:	2100      	movs	r1, #0
 8001758:	480a      	ldr	r0, [pc, #40]	@ (8001784 <OLED_ClearBuffer+0x38>)
 800175a:	f00c faf3 	bl	800dd44 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e006      	b.n	8001772 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <OLED_ClearBuffer+0x3c>)
 8001768:	2101      	movs	r1, #1
 800176a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	3301      	adds	r3, #1
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b07      	cmp	r3, #7
 8001776:	d9f5      	bls.n	8001764 <OLED_ClearBuffer+0x18>
    }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000434 	.word	0x20000434
 8001788:	2000042c 	.word	0x2000042c

0800178c <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af02      	add	r7, sp, #8
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001796:	2300      	movs	r3, #0
 8001798:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800179e:	f107 020c 	add.w	r2, r7, #12
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2302      	movs	r3, #2
 80017aa:	2178      	movs	r1, #120	@ 0x78
 80017ac:	4803      	ldr	r0, [pc, #12]	@ (80017bc <OLED_SendCommand+0x30>)
 80017ae:	f003 f96b 	bl	8004a88 <HAL_I2C_Master_Transmit>
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000035c 	.word	0x2000035c

080017c0 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 80017c4:	2064      	movs	r0, #100	@ 0x64
 80017c6:	f000 fd7d 	bl	80022c4 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 80017ca:	20ae      	movs	r0, #174	@ 0xae
 80017cc:	f7ff ffde 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 80017d0:	20d5      	movs	r0, #213	@ 0xd5
 80017d2:	f7ff ffdb 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 80017d6:	2080      	movs	r0, #128	@ 0x80
 80017d8:	f7ff ffd8 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 80017dc:	20a8      	movs	r0, #168	@ 0xa8
 80017de:	f7ff ffd5 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 80017e2:	203f      	movs	r0, #63	@ 0x3f
 80017e4:	f7ff ffd2 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 80017e8:	20d3      	movs	r0, #211	@ 0xd3
 80017ea:	f7ff ffcf 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff ffcc 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 80017f4:	2040      	movs	r0, #64	@ 0x40
 80017f6:	f7ff ffc9 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 80017fa:	208d      	movs	r0, #141	@ 0x8d
 80017fc:	f7ff ffc6 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001800:	2014      	movs	r0, #20
 8001802:	f7ff ffc3 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001806:	2020      	movs	r0, #32
 8001808:	f7ff ffc0 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff ffbd 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001812:	20a1      	movs	r0, #161	@ 0xa1
 8001814:	f7ff ffba 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001818:	20c8      	movs	r0, #200	@ 0xc8
 800181a:	f7ff ffb7 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 800181e:	20da      	movs	r0, #218	@ 0xda
 8001820:	f7ff ffb4 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001824:	2012      	movs	r0, #18
 8001826:	f7ff ffb1 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 800182a:	2081      	movs	r0, #129	@ 0x81
 800182c:	f7ff ffae 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8001830:	20cf      	movs	r0, #207	@ 0xcf
 8001832:	f7ff ffab 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8001836:	20d9      	movs	r0, #217	@ 0xd9
 8001838:	f7ff ffa8 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 800183c:	20f1      	movs	r0, #241	@ 0xf1
 800183e:	f7ff ffa5 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8001842:	20db      	movs	r0, #219	@ 0xdb
 8001844:	f7ff ffa2 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8001848:	2030      	movs	r0, #48	@ 0x30
 800184a:	f7ff ff9f 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 800184e:	20a4      	movs	r0, #164	@ 0xa4
 8001850:	f7ff ff9c 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8001854:	20a6      	movs	r0, #166	@ 0xa6
 8001856:	f7ff ff99 	bl	800178c <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 800185a:	202e      	movs	r0, #46	@ 0x2e
 800185c:	f7ff ff96 	bl	800178c <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8001860:	f7ff ff40 	bl	80016e4 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8001864:	f7ff ff72 	bl	800174c <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8001868:	20af      	movs	r0, #175	@ 0xaf
 800186a:	f7ff ff8f 	bl	800178c <OLED_SendCommand>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <CPS_Counter>:
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新全局动画管理器
    OLED_SmartUpdate(); // 使用智能更新模式
}

void CPS_Counter(void)
{
 8001874:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
    static uint64_t last_counter = 0;

    if (msg_counter - last_counter >= 100) // 每100ms计算一次CPS
 800187c:	4c1e      	ldr	r4, [pc, #120]	@ (80018f8 <CPS_Counter+0x84>)
 800187e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8001882:	4c1e      	ldr	r4, [pc, #120]	@ (80018fc <CPS_Counter+0x88>)
 8001884:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001888:	ebba 0004 	subs.w	r0, sl, r4
 800188c:	eb6b 0105 	sbc.w	r1, fp, r5
 8001890:	2864      	cmp	r0, #100	@ 0x64
 8001892:	f171 0100 	sbcs.w	r1, r1, #0
 8001896:	d328      	bcc.n	80018ea <CPS_Counter+0x76>
    {
        cps = (msg_counter - last_counter) * 10;
 8001898:	4917      	ldr	r1, [pc, #92]	@ (80018f8 <CPS_Counter+0x84>)
 800189a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800189e:	4917      	ldr	r1, [pc, #92]	@ (80018fc <CPS_Counter+0x88>)
 80018a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018a4:	ebb4 0800 	subs.w	r8, r4, r0
 80018a8:	eb65 0901 	sbc.w	r9, r5, r1
 80018ac:	4640      	mov	r0, r8
 80018ae:	4649      	mov	r1, r9
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	f04f 0500 	mov.w	r5, #0
 80018b8:	008d      	lsls	r5, r1, #2
 80018ba:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 80018be:	0084      	lsls	r4, r0, #2
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	eb10 0208 	adds.w	r2, r0, r8
 80018c8:	eb41 0309 	adc.w	r3, r1, r9
 80018cc:	1891      	adds	r1, r2, r2
 80018ce:	6039      	str	r1, [r7, #0]
 80018d0:	415b      	adcs	r3, r3
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018d8:	4909      	ldr	r1, [pc, #36]	@ (8001900 <CPS_Counter+0x8c>)
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
        last_counter = msg_counter;
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <CPS_Counter+0x84>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	4905      	ldr	r1, [pc, #20]	@ (80018fc <CPS_Counter+0x88>)
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
    }
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000c40 	.word	0x20000c40
 80018fc:	20000c48 	.word	0x20000c48
 8001900:	20000c38 	.word	0x20000c38

08001904 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 800190e:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <OLED_EnableDiffMode+0x30>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	7013      	strb	r3, [r2, #0]
    if (enable)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 800191a:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <OLED_EnableDiffMode+0x34>)
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <OLED_EnableDiffMode+0x38>)
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001926:	461a      	mov	r2, r3
 8001928:	f00c fa38 	bl	800dd9c <memcpy>
    }
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20001050 	.word	0x20001050
 8001938:	20000c50 	.word	0x20000c50
 800193c:	20000434 	.word	0x20000434

08001940 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800194a:	4a04      	ldr	r2, [pc, #16]	@ (800195c <OLED_EnableFastUpdate+0x1c>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	7013      	strb	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000000 	.word	0x20000000

08001960 <RGB_Init>:
#define PWM_BUFFER_LEN (NUM_LEDS * 24 + RESET_PULSE_LEN) // GRB order, both need 24 bits
static uint8_t led_colors[NUM_LEDS][3];
static uint16_t pwm_buffer[PWM_BUFFER_LEN];

void RGB_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    RGB_Clear();
 8001964:	f000 f838 	bl	80019d8 <RGB_Clear>
    RGB_Update();
 8001968:	f000 f84e 	bl	8001a08 <RGB_Update>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <RGB_SetColor>:

// RGB范围是0-255
// led_index: 0-3
void RGB_SetColor(uint8_t led_index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001970:	b490      	push	{r4, r7}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	4603      	mov	r3, r0
 8001984:	71bb      	strb	r3, [r7, #6]
 8001986:	460b      	mov	r3, r1
 8001988:	717b      	strb	r3, [r7, #5]
 800198a:	4613      	mov	r3, r2
 800198c:	713b      	strb	r3, [r7, #4]
    if (led_index < NUM_LEDS)
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d819      	bhi.n	80019c8 <RGB_SetColor+0x58>
    {
        led_colors[led_index][0] = red;
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	490f      	ldr	r1, [pc, #60]	@ (80019d4 <RGB_SetColor+0x64>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	440b      	add	r3, r1
 80019a0:	79ba      	ldrb	r2, [r7, #6]
 80019a2:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][1] = green;
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	490b      	ldr	r1, [pc, #44]	@ (80019d4 <RGB_SetColor+0x64>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	3301      	adds	r3, #1
 80019b2:	797a      	ldrb	r2, [r7, #5]
 80019b4:	701a      	strb	r2, [r3, #0]
        led_colors[led_index][2] = blue;
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	4906      	ldr	r1, [pc, #24]	@ (80019d4 <RGB_SetColor+0x64>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	3302      	adds	r3, #2
 80019c4:	793a      	ldrb	r2, [r7, #4]
 80019c6:	701a      	strb	r2, [r3, #0]
    }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc90      	pop	{r4, r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20001054 	.word	0x20001054

080019d8 <RGB_Clear>:

void RGB_Clear(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++)
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	e009      	b.n	80019f8 <RGB_Clear+0x20>
    {
        RGB_SetColor(i, 0, 0, 0);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	b2d8      	uxtb	r0, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	f7ff ffbf 	bl	8001970 <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3301      	adds	r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	ddf2      	ble.n	80019e4 <RGB_Clear+0xc>
    }
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <RGB_Update>:

//! setColor之后请直接调用这个来更新LED颜色
void RGB_Update(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	e067      	b.n	8001ae8 <RGB_Update+0xe0>
    {
        // Green
        for (int j = 7; j >= 0; j--)
 8001a18:	2307      	movs	r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e01b      	b.n	8001a56 <RGB_Update+0x4e>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][1] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001a1e:	4941      	ldr	r1, [pc, #260]	@ (8001b24 <RGB_Update+0x11c>)
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	fa42 f303 	asr.w	r3, r2, r3
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <RGB_Update+0x3a>
 8001a3e:	2188      	movs	r1, #136	@ 0x88
 8001a40:	e000      	b.n	8001a44 <RGB_Update+0x3c>
 8001a42:	2144      	movs	r1, #68	@ 0x44
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	617a      	str	r2, [r7, #20]
 8001a4a:	4a37      	ldr	r2, [pc, #220]	@ (8001b28 <RGB_Update+0x120>)
 8001a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	dae0      	bge.n	8001a1e <RGB_Update+0x16>
        }
        // Red
        for (int j = 7; j >= 0; j--)
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	e01a      	b.n	8001a98 <RGB_Update+0x90>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][0] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001a62:	4930      	ldr	r1, [pc, #192]	@ (8001b24 <RGB_Update+0x11c>)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	fa42 f303 	asr.w	r3, r2, r3
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <RGB_Update+0x7c>
 8001a80:	2188      	movs	r1, #136	@ 0x88
 8001a82:	e000      	b.n	8001a86 <RGB_Update+0x7e>
 8001a84:	2144      	movs	r1, #68	@ 0x44
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	617a      	str	r2, [r7, #20]
 8001a8c:	4a26      	ldr	r2, [pc, #152]	@ (8001b28 <RGB_Update+0x120>)
 8001a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dae1      	bge.n	8001a62 <RGB_Update+0x5a>
        }
        // Blue
        for (int j = 7; j >= 0; j--)
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e01b      	b.n	8001adc <RGB_Update+0xd4>
        {
            pwm_buffer[buffer_index++] = ((led_colors[i][2] >> j) & 1) ? WS2812_HIGH_BIT : WS2812_LOW_BIT;
 8001aa4:	491f      	ldr	r1, [pc, #124]	@ (8001b24 <RGB_Update+0x11c>)
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fa42 f303 	asr.w	r3, r2, r3
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <RGB_Update+0xc0>
 8001ac4:	2188      	movs	r1, #136	@ 0x88
 8001ac6:	e000      	b.n	8001aca <RGB_Update+0xc2>
 8001ac8:	2144      	movs	r1, #68	@ 0x44
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	617a      	str	r2, [r7, #20]
 8001ad0:	4a15      	ldr	r2, [pc, #84]	@ (8001b28 <RGB_Update+0x120>)
 8001ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 7; j >= 0; j--)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dae0      	bge.n	8001aa4 <RGB_Update+0x9c>
    for (int i = 0; i < NUM_LEDS; i++) //? GBR的神奇写法
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	dd94      	ble.n	8001a18 <RGB_Update+0x10>
        }
    }

    // Reset pulse
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	e009      	b.n	8001b08 <RGB_Update+0x100>
    {
        pwm_buffer[buffer_index++] = 0;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	617a      	str	r2, [r7, #20]
 8001afa:	4a0b      	ldr	r2, [pc, #44]	@ (8001b28 <RGB_Update+0x120>)
 8001afc:	2100      	movs	r1, #0
 8001afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b29      	cmp	r3, #41	@ 0x29
 8001b0c:	ddf2      	ble.n	8001af4 <RGB_Update+0xec>
    }

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwm_buffer, PWM_BUFFER_LEN);
 8001b0e:	238a      	movs	r3, #138	@ 0x8a
 8001b10:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <RGB_Update+0x120>)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <RGB_Update+0x124>)
 8001b16:	f006 f921 	bl	8007d5c <HAL_TIM_PWM_Start_DMA>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20001054 	.word	0x20001054
 8001b28:	20001060 	.word	0x20001060
 8001b2c:	20001178 	.word	0x20001178

08001b30 <Hue_To_RGB>:

// --- Helper function for rainbow effect ---
// Converts a hue value (0-255) to an RGB color.
static void Hue_To_RGB(uint8_t hue, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
    if (hue < 85)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b54      	cmp	r3, #84	@ 0x54
 8001b44:	d814      	bhi.n	8001b70 <Hue_To_RGB+0x40>
    { // Red -> Green
        *r = (85 - hue) * 3;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	0052      	lsls	r2, r2, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	701a      	strb	r2, [r3, #0]
        *g = hue * 3;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	0052      	lsls	r2, r2, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
        hue -= 170;
        *r = hue * 3;
        *g = 0;
        *b = (85 - hue) * 3;
    }
}
 8001b6e:	e031      	b.n	8001bd4 <Hue_To_RGB+0xa4>
    else if (hue < 170)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2ba9      	cmp	r3, #169	@ 0xa9
 8001b74:	d817      	bhi.n	8001ba6 <Hue_To_RGB+0x76>
        hue -= 85;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	3b55      	subs	r3, #85	@ 0x55
 8001b7a:	73fb      	strb	r3, [r7, #15]
        *r = 0;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
        *g = (85 - hue) * 3;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	0052      	lsls	r2, r2, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	701a      	strb	r2, [r3, #0]
        *b = hue * 3;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	701a      	strb	r2, [r3, #0]
}
 8001ba4:	e016      	b.n	8001bd4 <Hue_To_RGB+0xa4>
        hue -= 170;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	3356      	adds	r3, #86	@ 0x56
 8001baa:	73fb      	strb	r3, [r7, #15]
        *r = hue * 3;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	0052      	lsls	r2, r2, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
        *b = (85 - hue) * 3;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	f1c3 0355 	rsb	r3, r3, #85	@ 0x55
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	0052      	lsls	r2, r2, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	701a      	strb	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <RGB_RainbowCycle>:

static uint16_t rainbow_hue = 0;

void RGB_RainbowCycle(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
    uint8_t r, g, b;
    for (int i = 0; i < NUM_LEDS; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e018      	b.n	8001c1e <RGB_RainbowCycle+0x3e>
    {
        // Calculate the hue for each LED, offset by its position to create the rainbow.
        uint8_t hue = (rainbow_hue + (i * 256 / NUM_LEDS)) & 0xFF;
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <RGB_RainbowCycle+0x6c>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	019b      	lsls	r3, r3, #6
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	70fb      	strb	r3, [r7, #3]
        Hue_To_RGB(hue, &r, &g, &b);
 8001bfe:	463b      	mov	r3, r7
 8001c00:	1c7a      	adds	r2, r7, #1
 8001c02:	1cb9      	adds	r1, r7, #2
 8001c04:	78f8      	ldrb	r0, [r7, #3]
 8001c06:	f7ff ff93 	bl	8001b30 <Hue_To_RGB>
        RGB_SetColor(i, r, g, b);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	b2d8      	uxtb	r0, r3
 8001c0e:	78b9      	ldrb	r1, [r7, #2]
 8001c10:	787a      	ldrb	r2, [r7, #1]
 8001c12:	783b      	ldrb	r3, [r7, #0]
 8001c14:	f7ff feac 	bl	8001970 <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	dde3      	ble.n	8001bec <RGB_RainbowCycle+0xc>
    }
    RGB_Update();
 8001c24:	f7ff fef0 	bl	8001a08 <RGB_Update>

    // Increment the hue for the next cycle to make the rainbow move.
    rainbow_hue++;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <RGB_RainbowCycle+0x6c>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <RGB_RainbowCycle+0x6c>)
 8001c32:	801a      	strh	r2, [r3, #0]
    if (rainbow_hue >= 256)
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <RGB_RainbowCycle+0x6c>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	2bff      	cmp	r3, #255	@ 0xff
 8001c3a:	d902      	bls.n	8001c42 <RGB_RainbowCycle+0x62>
    {
        rainbow_hue = 0;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <RGB_RainbowCycle+0x6c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	801a      	strh	r2, [r3, #0]
    }
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20001174 	.word	0x20001174

08001c50 <HAL_TIM_PWM_PulseFinishedCallback>:

// 自动回调函数停止DMA
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d103      	bne.n	8001c6a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8001c62:	2100      	movs	r1, #0
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f006 fa91 	bl	800818c <HAL_TIM_PWM_Stop_DMA>
    }
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c82:	4a10      	ldr	r2, [pc, #64]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f000 fb2a 	bl	8002308 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001cb4:	f000 fb3c 	bl	8002330 <HAL_SYSCFG_DisableVREFBUF>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cb8:	f005 f86a 	bl	8006d90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <NMI_Handler+0x4>

08001cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <MemManage_Handler+0x4>

08001ce0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <UsageFault_Handler+0x4>

08001cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1e:	f000 fab3 	bl	8002288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <DMA1_Channel1_IRQHandler+0x10>)
 8001d2e:	f002 fb0d 	bl	800434c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000025c 	.word	0x2000025c

08001d3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <DMA1_Channel2_IRQHandler+0x10>)
 8001d42:	f002 fb03 	bl	800434c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200002bc 	.word	0x200002bc

08001d50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <DMA1_Channel3_IRQHandler+0x10>)
 8001d56:	f002 faf9 	bl	800434c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20001210 	.word	0x20001210

08001d64 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <USB_LP_IRQHandler+0x10>)
 8001d6a:	f003 fb67 	bl	800543c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200017dc 	.word	0x200017dc

08001d78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <TIM6_DAC_IRQHandler+0x10>)
 8001d7e:	f006 fafd 	bl	800837c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200011c4 	.word	0x200011c4

08001d8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	@ 0x38
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001de4:	4a2c      	ldr	r2, [pc, #176]	@ (8001e98 <MX_TIM3_Init+0xe8>)
 8001de6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001df6:	22d4      	movs	r2, #212	@ 0xd4
 8001df8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfa:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e00:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e06:	4823      	ldr	r0, [pc, #140]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001e08:	f005 fef0 	bl	8007bec <HAL_TIM_Base_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e12:	f7ff fc60 	bl	80016d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e20:	4619      	mov	r1, r3
 8001e22:	481c      	ldr	r0, [pc, #112]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001e24:	f006 fd0e 	bl	8008844 <HAL_TIM_ConfigClockSource>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e2e:	f7ff fc52 	bl	80016d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e32:	4818      	ldr	r0, [pc, #96]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001e34:	f005 ff31 	bl	8007c9a <HAL_TIM_PWM_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e3e:	f7ff fc4a 	bl	80016d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4810      	ldr	r0, [pc, #64]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001e52:	f007 fb49 	bl	80094e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e5c:	f7ff fc3b 	bl	80016d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e60:	2360      	movs	r3, #96	@ 0x60
 8001e62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e70:	463b      	mov	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	4619      	mov	r1, r3
 8001e76:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001e78:	f006 fbd0 	bl	800861c <HAL_TIM_PWM_ConfigChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e82:	f7ff fc28 	bl	80016d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e86:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <MX_TIM3_Init+0xe4>)
 8001e88:	f000 f8a6 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 8001e8c:	bf00      	nop
 8001e8e:	3738      	adds	r7, #56	@ 0x38
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20001178 	.word	0x20001178
 8001e98:	40000400 	.word	0x40000400

08001e9c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_TIM6_Init+0x64>)
 8001eae:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <MX_TIM6_Init+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_TIM6_Init+0x64>)
 8001eb4:	22a9      	movs	r2, #169	@ 0xa9
 8001eb6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <MX_TIM6_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <MX_TIM6_Init+0x64>)
 8001ec0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ec4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_TIM6_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <MX_TIM6_Init+0x64>)
 8001ece:	f005 fe8d 	bl	8007bec <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ed8:	f7ff fbfd 	bl	80016d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_TIM6_Init+0x64>)
 8001eea:	f007 fafd 	bl	80094e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ef4:	f7ff fbef 	bl	80016d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200011c4 	.word	0x200011c4
 8001f04:	40001000 	.word	0x40001000

08001f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc4 <HAL_TIM_Base_MspInit+0xbc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d137      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xc0>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xc0>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f26:	4b28      	ldr	r3, [pc, #160]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xc0>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel3;
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f34:	4a26      	ldr	r2, [pc, #152]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc8>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001f38:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f3a:	223d      	movs	r2, #61	@ 0x3d
 8001f3c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f3e:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f40:	2210      	movs	r2, #16
 8001f42:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f4c:	2280      	movs	r2, #128	@ 0x80
 8001f4e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f56:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f5e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f66:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001f6c:	4817      	ldr	r0, [pc, #92]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f6e:	f002 f863 	bl	8004038 <HAL_DMA_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001f78:	f7ff fbad 	bl	80016d6 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <HAL_TIM_Base_MspInit+0xc4>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f88:	e018      	b.n	8001fbc <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM6)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d113      	bne.n	8001fbc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xc0>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xc0>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <HAL_TIM_Base_MspInit+0xc0>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2036      	movs	r0, #54	@ 0x36
 8001fb2:	f001 fe04 	bl	8003bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb6:	2036      	movs	r0, #54	@ 0x36
 8001fb8:	f001 fe1b 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	20001210 	.word	0x20001210
 8001fd0:	40020030 	.word	0x40020030
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	@ (800203c <HAL_TIM_MspPostInit+0x64>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11b      	bne.n	8002032 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_TIM_MspPostInit+0x68>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	4a10      	ldr	r2, [pc, #64]	@ (8002040 <HAL_TIM_MspPostInit+0x68>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_TIM_MspPostInit+0x68>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RGB_PWM_Pin;
 8002012:	2310      	movs	r3, #16
 8002014:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002022:	2302      	movs	r3, #2
 8002024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_PWM_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	@ (8002044 <HAL_TIM_MspPostInit+0x6c>)
 800202e:	f002 fadd 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40000400 	.word	0x40000400
 8002040:	40021000 	.word	0x40021000
 8002044:	48000400 	.word	0x48000400

08002048 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800204c:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 800204e:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <MX_USART2_UART_Init+0x94>)
 8002050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002052:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 8002054:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002066:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 8002086:	2200      	movs	r2, #0
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002090:	4811      	ldr	r0, [pc, #68]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 8002092:	f007 faf1 	bl	8009678 <HAL_UART_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800209c:	f7ff fb1b 	bl	80016d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a0:	2100      	movs	r1, #0
 80020a2:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 80020a4:	f008 f85c 	bl	800a160 <HAL_UARTEx_SetTxFifoThreshold>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020ae:	f7ff fb12 	bl	80016d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b2:	2100      	movs	r1, #0
 80020b4:	4808      	ldr	r0, [pc, #32]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 80020b6:	f008 f891 	bl	800a1dc <HAL_UARTEx_SetRxFifoThreshold>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020c0:	f7ff fb09 	bl	80016d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020c4:	4804      	ldr	r0, [pc, #16]	@ (80020d8 <MX_USART2_UART_Init+0x90>)
 80020c6:	f008 f812 	bl	800a0ee <HAL_UARTEx_DisableFifoMode>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020d0:	f7ff fb01 	bl	80016d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20001270 	.word	0x20001270
 80020dc:	40004400 	.word	0x40004400

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b09a      	sub	sp, #104	@ 0x68
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	2244      	movs	r2, #68	@ 0x44
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f00b fe1f 	bl	800dd44 <memset>
  if(uartHandle->Instance==USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <HAL_UART_MspInit+0xa8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d136      	bne.n	800217e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002110:	2302      	movs	r3, #2
 8002112:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002114:	2300      	movs	r3, #0
 8002116:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	4618      	mov	r0, r3
 800211e:	f005 fb75 	bl	800780c <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002128:	f7ff fad5 	bl	80016d6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212c:	4b17      	ldr	r3, [pc, #92]	@ (800218c <HAL_UART_MspInit+0xac>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	4a16      	ldr	r2, [pc, #88]	@ (800218c <HAL_UART_MspInit+0xac>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002136:	6593      	str	r3, [r2, #88]	@ 0x58
 8002138:	4b14      	ldr	r3, [pc, #80]	@ (800218c <HAL_UART_MspInit+0xac>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_UART_MspInit+0xac>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	4a10      	ldr	r2, [pc, #64]	@ (800218c <HAL_UART_MspInit+0xac>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <HAL_UART_MspInit+0xac>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800215c:	230c      	movs	r3, #12
 800215e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216c:	2307      	movs	r3, #7
 800216e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800217a:	f002 fa37 	bl	80045ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800217e:	bf00      	nop
 8002180:	3768      	adds	r7, #104	@ 0x68
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40004400 	.word	0x40004400
 800218c:	40021000 	.word	0x40021000

08002190 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002190:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002192:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002194:	f7ff fdfa 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <LoopForever+0x6>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <LoopForever+0xe>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	@ (80021dc <LoopForever+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80021be:	f00b fdc9 	bl	800dd54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021c2:	f7ff fa03 	bl	80015cc <main>

080021c6 <LoopForever>:

LoopForever:
    b LoopForever
 80021c6:	e7fe      	b.n	80021c6 <LoopForever>
  ldr   r0, =_estack
 80021c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80021d4:	0800de78 	.word	0x0800de78
  ldr r2, =_sbss
 80021d8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80021dc:	20001acc 	.word	0x20001acc

080021e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC1_2_IRQHandler>

080021e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f001 fcdb 	bl	8003ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021f2:	200f      	movs	r0, #15
 80021f4:	f000 f80e 	bl	8002214 <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	e001      	b.n	8002208 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002204:	f7ff fd38 	bl	8001c78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002208:	79fb      	ldrb	r3, [r7, #7]

}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002220:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_InitTick+0x68>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d022      	beq.n	800226e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002228:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_InitTick+0x6c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b13      	ldr	r3, [pc, #76]	@ (800227c <HAL_InitTick+0x68>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002234:	fbb1 f3f3 	udiv	r3, r1, r3
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	4618      	mov	r0, r3
 800223e:	f001 fce6 	bl	8003c0e <HAL_SYSTICK_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10f      	bne.n	8002268 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	d809      	bhi.n	8002262 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224e:	2200      	movs	r2, #0
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	f04f 30ff 	mov.w	r0, #4294967295
 8002256:	f001 fcb2 	bl	8003bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225a:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_InitTick+0x70>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e007      	b.n	8002272 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e004      	b.n	8002272 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e001      	b.n	8002272 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000000c 	.word	0x2000000c
 8002280:	20000004 	.word	0x20000004
 8002284:	20000008 	.word	0x20000008

08002288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_IncTick+0x1c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_IncTick+0x20>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4413      	add	r3, r2
 8002296:	4a03      	ldr	r2, [pc, #12]	@ (80022a4 <HAL_IncTick+0x1c>)
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	20001304 	.word	0x20001304
 80022a8:	2000000c 	.word	0x2000000c

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20001304 	.word	0x20001304

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff ffee 	bl	80022ac <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d004      	beq.n	80022e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_Delay+0x40>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e8:	bf00      	nop
 80022ea:	f7ff ffdf 	bl	80022ac <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d8f7      	bhi.n	80022ea <HAL_Delay+0x26>
  {
  }
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000000c 	.word	0x2000000c

08002308 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 0202 	bic.w	r2, r3, #2
 8002318:	4904      	ldr	r1, [pc, #16]	@ (800232c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40010030 	.word	0x40010030

08002330 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a04      	ldr	r2, [pc, #16]	@ (800234c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010030 	.word	0x40010030

08002350 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3360      	adds	r3, #96	@ 0x60
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <LL_ADC_SetOffset+0x44>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	03fff000 	.word	0x03fff000

08002400 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3360      	adds	r3, #96	@ 0x60
 800240e:	461a      	mov	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3360      	adds	r3, #96	@ 0x60
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002462:	b480      	push	{r7}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3360      	adds	r3, #96	@ 0x60
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	431a      	orrs	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3360      	adds	r3, #96	@ 0x60
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	615a      	str	r2, [r3, #20]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800251a:	b480      	push	{r7}
 800251c:	b087      	sub	sp, #28
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3330      	adds	r3, #48	@ 0x30
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	4413      	add	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	211f      	movs	r1, #31
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	401a      	ands	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	f003 011f 	and.w	r1, r3, #31
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	431a      	orrs	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002566:	bf00      	nop
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002572:	b480      	push	{r7}
 8002574:	b087      	sub	sp, #28
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3314      	adds	r3, #20
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	0e5b      	lsrs	r3, r3, #25
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	4413      	add	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	0d1b      	lsrs	r3, r3, #20
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2107      	movs	r1, #7
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	0d1b      	lsrs	r3, r3, #20
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0318 	and.w	r3, r3, #24
 80025ea:	4908      	ldr	r1, [pc, #32]	@ (800260c <LL_ADC_SetChannelSingleDiff+0x44>)
 80025ec:	40d9      	lsrs	r1, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	400b      	ands	r3, r1
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	0007ffff 	.word	0x0007ffff

08002610 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 031f 	and.w	r3, r3, #31
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800263c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6093      	str	r3, [r2, #8]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002664:	d101      	bne.n	800266a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002688:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800268c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026b4:	d101      	bne.n	80026ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002700:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002704:	f043 0202 	orr.w	r2, r3, #2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <LL_ADC_IsEnabled+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <LL_ADC_IsEnabled+0x1a>
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d101      	bne.n	8002756 <LL_ADC_IsDisableOngoing+0x18>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <LL_ADC_IsDisableOngoing+0x1a>
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002774:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d101      	bne.n	80027a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d101      	bne.n	80027ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b089      	sub	sp, #36	@ 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e167      	b.n	8002ac2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fd ff9d 	bl	8000740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff19 	bl	8002650 <LL_ADC_IsDeepPowerDownEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff feff 	bl	800262c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff34 	bl	80026a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d115      	bne.n	800286a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff18 	bl	8002678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002848:	4ba0      	ldr	r3, [pc, #640]	@ (8002acc <HAL_ADC_Init+0x2f4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	4aa0      	ldr	r2, [pc, #640]	@ (8002ad0 <HAL_ADC_Init+0x2f8>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800285c:	e002      	b.n	8002864 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3b01      	subs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f9      	bne.n	800285e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff16 	bl	80026a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff76 	bl	800278c <LL_ADC_REG_IsConversionOngoing>
 80028a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 8100 	bne.w	8002ab0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80fc 	bne.w	8002ab0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028c0:	f043 0202 	orr.w	r2, r3, #2
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff23 	bl	8002718 <LL_ADC_IsEnabled>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d111      	bne.n	80028fc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028dc:	f7ff ff1c 	bl	8002718 <LL_ADC_IsEnabled>
 80028e0:	4604      	mov	r4, r0
 80028e2:	487c      	ldr	r0, [pc, #496]	@ (8002ad4 <HAL_ADC_Init+0x2fc>)
 80028e4:	f7ff ff18 	bl	8002718 <LL_ADC_IsEnabled>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4323      	orrs	r3, r4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4878      	ldr	r0, [pc, #480]	@ (8002ad8 <HAL_ADC_Init+0x300>)
 80028f8:	f7ff fd2a 	bl	8002350 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7f5b      	ldrb	r3, [r3, #29]
 8002900:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002906:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800290c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002912:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800291a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002926:	2b01      	cmp	r3, #1
 8002928:	d106      	bne.n	8002938 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	045b      	lsls	r3, r3, #17
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b60      	ldr	r3, [pc, #384]	@ (8002adc <HAL_ADC_Init+0x304>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	430b      	orrs	r3, r1
 8002966:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff15 	bl	80027b2 <LL_ADC_INJ_IsConversionOngoing>
 8002988:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d16d      	bne.n	8002a6c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d16a      	bne.n	8002a6c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800299a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029b2:	f023 0302 	bic.w	r3, r3, #2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	69b9      	ldr	r1, [r7, #24]
 80029bc:	430b      	orrs	r3, r1
 80029be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6911      	ldr	r1, [r2, #16]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029f6:	e013      	b.n	8002a20 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a1c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d118      	bne.n	8002a5c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a40:	4311      	orrs	r1, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	e007      	b.n	8002a6c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10c      	bne.n	8002a8e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f023 010f 	bic.w	r1, r3, #15
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a8c:	e007      	b.n	8002a9e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 020f 	bic.w	r2, r2, #15
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aae:	e007      	b.n	8002ac0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	f043 0210 	orr.w	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	@ 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	053e2d63 	.word	0x053e2d63
 8002ad4:	50000100 	.word	0x50000100
 8002ad8:	50000300 	.word	0x50000300
 8002adc:	fff04007 	.word	0xfff04007

08002ae0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aec:	4851      	ldr	r0, [pc, #324]	@ (8002c34 <HAL_ADC_Start_DMA+0x154>)
 8002aee:	f7ff fd8f 	bl	8002610 <LL_ADC_GetMultimode>
 8002af2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe47 	bl	800278c <LL_ADC_REG_IsConversionOngoing>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 808f 	bne.w	8002c24 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_Start_DMA+0x34>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e08a      	b.n	8002c2a <HAL_ADC_Start_DMA+0x14a>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d002      	beq.n	8002b2e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	d173      	bne.n	8002c16 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fc98 	bl	8003464 <ADC_Enable>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d166      	bne.n	8002c0c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a38      	ldr	r2, [pc, #224]	@ (8002c38 <HAL_ADC_Start_DMA+0x158>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d002      	beq.n	8002b62 <HAL_ADC_Start_DMA+0x82>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e001      	b.n	8002b66 <HAL_ADC_Start_DMA+0x86>
 8002b62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d002      	beq.n	8002b74 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b90:	f023 0206 	bic.w	r2, r3, #6
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b98:	e002      	b.n	8002ba0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	4a25      	ldr	r2, [pc, #148]	@ (8002c3c <HAL_ADC_Start_DMA+0x15c>)
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	4a24      	ldr	r2, [pc, #144]	@ (8002c40 <HAL_ADC_Start_DMA+0x160>)
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb4:	4a23      	ldr	r2, [pc, #140]	@ (8002c44 <HAL_ADC_Start_DMA+0x164>)
 8002bb6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	221c      	movs	r2, #28
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0210 	orr.w	r2, r2, #16
 8002bd6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3340      	adds	r3, #64	@ 0x40
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f001 fac6 	bl	8004188 <HAL_DMA_Start_IT>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fdad 	bl	8002764 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c0a:	e00d      	b.n	8002c28 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002c14:	e008      	b.n	8002c28 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c22:	e001      	b.n	8002c28 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	50000300 	.word	0x50000300
 8002c38:	50000100 	.word	0x50000100
 8002c3c:	0800362f 	.word	0x0800362f
 8002c40:	08003707 	.word	0x08003707
 8002c44:	08003723 	.word	0x08003723

08002c48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0b6      	sub	sp, #216	@ 0xd8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x22>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e3c8      	b.n	8003438 <HAL_ADC_ConfigChannel+0x7b4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fd6a 	bl	800278c <LL_ADC_REG_IsConversionOngoing>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 83ad 	bne.w	800341a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f7ff fc24 	bl	800251a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fd58 	bl	800278c <LL_ADC_REG_IsConversionOngoing>
 8002cdc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fd64 	bl	80027b2 <LL_ADC_INJ_IsConversionOngoing>
 8002cea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 81d9 	bne.w	80030aa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 81d4 	bne.w	80030aa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d0a:	d10f      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7ff fc2b 	bl	8002572 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fbd2 	bl	80024ce <LL_ADC_SetSamplingTimeCommonConfig>
 8002d2a:	e00e      	b.n	8002d4a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f7ff fc1a 	bl	8002572 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fbc2 	bl	80024ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d022      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6919      	ldr	r1, [r3, #16]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d7c:	f7ff fb1c 	bl	80023b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6919      	ldr	r1, [r3, #16]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f7ff fb68 	bl	8002462 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x124>
 8002da2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002da6:	e000      	b.n	8002daa <HAL_ADC_ConfigChannel+0x126>
 8002da8:	2300      	movs	r3, #0
 8002daa:	461a      	mov	r2, r3
 8002dac:	f7ff fb74 	bl	8002498 <LL_ADC_SetOffsetSaturation>
 8002db0:	e17b      	b.n	80030aa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fb21 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x15a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fb16 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	e01e      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x198>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fb0b 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e004      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002e10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x1b0>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	e018      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1e2>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e004      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fada 	bl	800242c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fabe 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x220>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fab3 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	f003 021f 	and.w	r2, r3, #31
 8002ea2:	e01e      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x25e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff faa8 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002eca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e004      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x276>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0e9b      	lsrs	r3, r3, #26
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	e018      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x2a8>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e004      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d106      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fa77 	bl	800242c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fa5b 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x2e6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fa50 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	e01e      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x324>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fa45 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e004      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x33c>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	e016      	b.n	8002fee <HAL_ADC_ConfigChannel+0x36a>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e004      	b.n	8002fee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d106      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fa16 	bl	800242c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2103      	movs	r1, #3
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f9fa 	bl	8002400 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x3a8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2103      	movs	r1, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f9ef 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	e017      	b.n	800305c <HAL_ADC_ConfigChannel+0x3d8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2103      	movs	r1, #3
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f9e4 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003044:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003046:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e003      	b.n	800305a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x3f0>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	e011      	b.n	8003098 <HAL_ADC_ConfigChannel+0x414>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003084:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e003      	b.n	8003098 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2103      	movs	r1, #3
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f9c1 	bl	800242c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fb32 	bl	8002718 <LL_ADC_IsEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 8140 	bne.w	800333c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f7ff fa7d 	bl	80025c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4a8f      	ldr	r2, [pc, #572]	@ (8003310 <HAL_ADC_ConfigChannel+0x68c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	f040 8131 	bne.w	800333c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x47e>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	0e9b      	lsrs	r3, r3, #26
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	bf94      	ite	ls
 80030fa:	2301      	movls	r3, #1
 80030fc:	2300      	movhi	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e019      	b.n	8003136 <HAL_ADC_ConfigChannel+0x4b2>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003112:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800311e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2b09      	cmp	r3, #9
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003136:	2b00      	cmp	r3, #0
 8003138:	d079      	beq.n	800322e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x4d2>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	3301      	adds	r3, #1
 800314e:	069b      	lsls	r3, r3, #26
 8003150:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003154:	e015      	b.n	8003182 <HAL_ADC_ConfigChannel+0x4fe>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003166:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e003      	b.n	800317a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x51e>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	3301      	adds	r3, #1
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	e017      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x54e>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80031b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80031b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80031be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	ea42 0103 	orr.w	r1, r2, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x574>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	051b      	lsls	r3, r3, #20
 80031f6:	e018      	b.n	800322a <HAL_ADC_ConfigChannel+0x5a6>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800320a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f003 021f 	and.w	r2, r3, #31
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322a:	430b      	orrs	r3, r1
 800322c:	e081      	b.n	8003332 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_ADC_ConfigChannel+0x5c6>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	3301      	adds	r3, #1
 8003242:	069b      	lsls	r3, r3, #26
 8003244:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003248:	e015      	b.n	8003276 <HAL_ADC_ConfigChannel+0x5f2>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e003      	b.n	800326e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3301      	adds	r3, #1
 8003270:	069b      	lsls	r3, r3, #26
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x612>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	e017      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x642>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	61fb      	str	r3, [r7, #28]
  return result;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e003      	b.n	80032ba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x66e>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	f003 021f 	and.w	r2, r3, #31
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	3b1e      	subs	r3, #30
 80032ea:	051b      	lsls	r3, r3, #20
 80032ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	e01e      	b.n	8003330 <HAL_ADC_ConfigChannel+0x6ac>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	613b      	str	r3, [r7, #16]
  return result;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e006      	b.n	800331c <HAL_ADC_ConfigChannel+0x698>
 800330e:	bf00      	nop
 8003310:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	f003 021f 	and.w	r2, r3, #31
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	3b1e      	subs	r3, #30
 800332a:	051b      	lsls	r3, r3, #20
 800332c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003330:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003336:	4619      	mov	r1, r3
 8003338:	f7ff f91b 	bl	8002572 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b3f      	ldr	r3, [pc, #252]	@ (8003440 <HAL_ADC_ConfigChannel+0x7bc>)
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d071      	beq.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003348:	483e      	ldr	r0, [pc, #248]	@ (8003444 <HAL_ADC_ConfigChannel+0x7c0>)
 800334a:	f7ff f827 	bl	800239c <LL_ADC_GetCommonPathInternalCh>
 800334e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3c      	ldr	r2, [pc, #240]	@ (8003448 <HAL_ADC_ConfigChannel+0x7c4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x6e2>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3a      	ldr	r2, [pc, #232]	@ (800344c <HAL_ADC_ConfigChannel+0x7c8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d127      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800336a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d121      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800337a:	d157      	bne.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800337c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003380:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003384:	4619      	mov	r1, r3
 8003386:	482f      	ldr	r0, [pc, #188]	@ (8003444 <HAL_ADC_ConfigChannel+0x7c0>)
 8003388:	f7fe fff5 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800338c:	4b30      	ldr	r3, [pc, #192]	@ (8003450 <HAL_ADC_ConfigChannel+0x7cc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	4a30      	ldr	r2, [pc, #192]	@ (8003454 <HAL_ADC_ConfigChannel+0x7d0>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033a6:	e002      	b.n	80033ae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b4:	e03a      	b.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a27      	ldr	r2, [pc, #156]	@ (8003458 <HAL_ADC_ConfigChannel+0x7d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d113      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a22      	ldr	r2, [pc, #136]	@ (800345c <HAL_ADC_ConfigChannel+0x7d8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02a      	beq.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033de:	4619      	mov	r1, r3
 80033e0:	4818      	ldr	r0, [pc, #96]	@ (8003444 <HAL_ADC_ConfigChannel+0x7c0>)
 80033e2:	f7fe ffc8 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033e6:	e021      	b.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_ADC_ConfigChannel+0x7dc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d11c      	bne.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a16      	ldr	r2, [pc, #88]	@ (800345c <HAL_ADC_ConfigChannel+0x7d8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d011      	beq.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800340c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003410:	4619      	mov	r1, r3
 8003412:	480c      	ldr	r0, [pc, #48]	@ (8003444 <HAL_ADC_ConfigChannel+0x7c0>)
 8003414:	f7fe ffaf 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
 8003418:	e008      	b.n	800342c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003434:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003438:	4618      	mov	r0, r3
 800343a:	37d8      	adds	r7, #216	@ 0xd8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	80080000 	.word	0x80080000
 8003444:	50000300 	.word	0x50000300
 8003448:	c3210000 	.word	0xc3210000
 800344c:	90c00010 	.word	0x90c00010
 8003450:	20000004 	.word	0x20000004
 8003454:	053e2d63 	.word	0x053e2d63
 8003458:	c7520000 	.word	0xc7520000
 800345c:	50000100 	.word	0x50000100
 8003460:	cb840000 	.word	0xcb840000

08003464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f94f 	bl	8002718 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d169      	bne.n	8003554 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4b36      	ldr	r3, [pc, #216]	@ (8003560 <ADC_Enable+0xfc>)
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e055      	b.n	8003556 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f90a 	bl	80026c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034b4:	482b      	ldr	r0, [pc, #172]	@ (8003564 <ADC_Enable+0x100>)
 80034b6:	f7fe ff71 	bl	800239c <LL_ADC_GetCommonPathInternalCh>
 80034ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c4:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <ADC_Enable+0x104>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	4a28      	ldr	r2, [pc, #160]	@ (800356c <ADC_Enable+0x108>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034de:	e002      	b.n	80034e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f9      	bne.n	80034e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034ec:	f7fe fede 	bl	80022ac <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f2:	e028      	b.n	8003546 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f90d 	bl	8002718 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f8dd 	bl	80026c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800350e:	f7fe fecd 	bl	80022ac <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d914      	bls.n	8003546 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d00d      	beq.n	8003546 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d1cf      	bne.n	80034f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	8000003f 	.word	0x8000003f
 8003564:	50000300 	.word	0x50000300
 8003568:	20000004 	.word	0x20000004
 800356c:	053e2d63 	.word	0x053e2d63

08003570 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f8de 	bl	800273e <LL_ADC_IsDisableOngoing>
 8003582:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff f8c5 	bl	8002718 <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d047      	beq.n	8003624 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d144      	bne.n	8003624 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 030d 	and.w	r3, r3, #13
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10c      	bne.n	80035c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f89f 	bl	80026f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2203      	movs	r2, #3
 80035b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035ba:	f7fe fe77 	bl	80022ac <HAL_GetTick>
 80035be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035c0:	e029      	b.n	8003616 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c6:	f043 0210 	orr.w	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e023      	b.n	8003626 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035de:	f7fe fe65 	bl	80022ac <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d914      	bls.n	8003616 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e007      	b.n	8003626 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1dc      	bne.n	80035de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003640:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003644:	2b00      	cmp	r3, #0
 8003646:	d14b      	bne.n	80036e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d021      	beq.n	80036a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe ff44 	bl	80024f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d032      	beq.n	80036d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d12b      	bne.n	80036d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11f      	bne.n	80036d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	f043 0201 	orr.w	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036a4:	e018      	b.n	80036d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d111      	bne.n	80036d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff fab5 	bl	8002c48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036de:	e00e      	b.n	80036fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff fabf 	bl	8002c70 <HAL_ADC_ErrorCallback>
}
 80036f2:	e004      	b.n	80036fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff faa1 	bl	8002c5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fa91 	bl	8002c70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <LL_ADC_IsEnabled>:
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <LL_ADC_IsEnabled+0x18>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <LL_ADC_IsEnabled+0x1a>
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_ADC_StartCalibration>:
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800378e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003798:	4313      	orrs	r3, r2
 800379a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_IsCalibrationOnGoing>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037c2:	d101      	bne.n	80037c8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d101      	bne.n	80037ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_ADCEx_Calibration_Start+0x1c>
 8003814:	2302      	movs	r3, #2
 8003816:	e04d      	b.n	80038b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fea5 	bl	8003570 <ADC_Disable>
 8003826:	4603      	mov	r3, r0
 8003828:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d136      	bne.n	800389e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003838:	f023 0302 	bic.w	r3, r3, #2
 800383c:	f043 0202 	orr.w	r2, r3, #2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff ff96 	bl	800377c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003850:	e014      	b.n	800387c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3301      	adds	r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4a18      	ldr	r2, [pc, #96]	@ (80038bc <HAL_ADCEx_Calibration_Start+0xc0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d90d      	bls.n	800387c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003864:	f023 0312 	bic.w	r3, r3, #18
 8003868:	f043 0210 	orr.w	r2, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e01b      	b.n	80038b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff94 	bl	80037ae <LL_ADC_IsCalibrationOnGoing>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e2      	bne.n	8003852 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	f023 0303 	bic.w	r3, r3, #3
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800389c:	e005      	b.n	80038aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	0004de01 	.word	0x0004de01

080038c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b0a1      	sub	sp, #132	@ 0x84
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e08b      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038e6:	2300      	movs	r3, #0
 80038e8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ea:	2300      	movs	r3, #0
 80038ec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f6:	d102      	bne.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038f8:	4b41      	ldr	r3, [pc, #260]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	e001      	b.n	8003902 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e06a      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ff57 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 8003928:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff51 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d14c      	bne.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800393a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800393c:	2b00      	cmp	r3, #0
 800393e:	d149      	bne.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003940:	4b30      	ldr	r3, [pc, #192]	@ (8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003942:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d028      	beq.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800394c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800395e:	035b      	lsls	r3, r3, #13
 8003960:	430b      	orrs	r3, r1
 8003962:	431a      	orrs	r2, r3
 8003964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003966:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003968:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800396c:	f7ff fef3 	bl	8003756 <LL_ADC_IsEnabled>
 8003970:	4604      	mov	r4, r0
 8003972:	4823      	ldr	r0, [pc, #140]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003974:	f7ff feef 	bl	8003756 <LL_ADC_IsEnabled>
 8003978:	4603      	mov	r3, r0
 800397a:	4323      	orrs	r3, r4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d133      	bne.n	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003988:	f023 030f 	bic.w	r3, r3, #15
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	6811      	ldr	r1, [r2, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	6892      	ldr	r2, [r2, #8]
 8003994:	430a      	orrs	r2, r1
 8003996:	431a      	orrs	r2, r3
 8003998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800399a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800399c:	e024      	b.n	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800399e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039aa:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039ae:	f7ff fed2 	bl	8003756 <LL_ADC_IsEnabled>
 80039b2:	4604      	mov	r4, r0
 80039b4:	4812      	ldr	r0, [pc, #72]	@ (8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039b6:	f7ff fece 	bl	8003756 <LL_ADC_IsEnabled>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4323      	orrs	r3, r4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d112      	bne.n	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039ca:	f023 030f 	bic.w	r3, r3, #15
 80039ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80039d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039d2:	e009      	b.n	80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80039e6:	e000      	b.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3784      	adds	r7, #132	@ 0x84
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	50000100 	.word	0x50000100
 8003a04:	50000300 	.word	0x50000300

08003a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <__NVIC_SetPriorityGrouping+0x44>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a24:	4013      	ands	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a3a:	4a04      	ldr	r2, [pc, #16]	@ (8003a4c <__NVIC_SetPriorityGrouping+0x44>)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	60d3      	str	r3, [r2, #12]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <__NVIC_GetPriorityGrouping+0x18>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	f003 0307 	and.w	r3, r3, #7
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	db0b      	blt.n	8003a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	f003 021f 	and.w	r2, r3, #31
 8003a84:	4907      	ldr	r1, [pc, #28]	@ (8003aa4 <__NVIC_EnableIRQ+0x38>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000e100 	.word	0xe000e100

08003aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	db0a      	blt.n	8003ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	490c      	ldr	r1, [pc, #48]	@ (8003af4 <__NVIC_SetPriority+0x4c>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	440b      	add	r3, r1
 8003acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad0:	e00a      	b.n	8003ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4908      	ldr	r1, [pc, #32]	@ (8003af8 <__NVIC_SetPriority+0x50>)
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	3b04      	subs	r3, #4
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	761a      	strb	r2, [r3, #24]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000e100 	.word	0xe000e100
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	@ 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f1c3 0307 	rsb	r3, r3, #7
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	bf28      	it	cs
 8003b1a:	2304      	movcs	r3, #4
 8003b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3304      	adds	r3, #4
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d902      	bls.n	8003b2c <NVIC_EncodePriority+0x30>
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3b03      	subs	r3, #3
 8003b2a:	e000      	b.n	8003b2e <NVIC_EncodePriority+0x32>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	401a      	ands	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b44:	f04f 31ff 	mov.w	r1, #4294967295
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	43d9      	mvns	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b54:	4313      	orrs	r3, r2
         );
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3724      	adds	r7, #36	@ 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b74:	d301      	bcc.n	8003b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00f      	b.n	8003b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba4 <SysTick_Config+0x40>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b82:	210f      	movs	r1, #15
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	f7ff ff8e 	bl	8003aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <SysTick_Config+0x40>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b92:	4b04      	ldr	r3, [pc, #16]	@ (8003ba4 <SysTick_Config+0x40>)
 8003b94:	2207      	movs	r2, #7
 8003b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	e000e010 	.word	0xe000e010

08003ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff29 	bl	8003a08 <__NVIC_SetPriorityGrouping>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bcc:	f7ff ff40 	bl	8003a50 <__NVIC_GetPriorityGrouping>
 8003bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f7ff ff90 	bl	8003afc <NVIC_EncodePriority>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff5f 	bl	8003aa8 <__NVIC_SetPriority>
}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff33 	bl	8003a6c <__NVIC_EnableIRQ>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ffa4 	bl	8003b64 <SysTick_Config>
 8003c1c:	4603      	mov	r3, r0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e054      	b.n	8003ce4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7f5b      	ldrb	r3, [r3, #29]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fc ff72 	bl	8000b34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	791b      	ldrb	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a22      	ldr	r2, [pc, #136]	@ (8003cec <HAL_CRC_Init+0xc4>)
 8003c64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0218 	bic.w	r2, r2, #24
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	e00c      	b.n	8003c92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6899      	ldr	r1, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f94a 	bl	8003f1c <HAL_CRCEx_Polynomial_Set>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e028      	b.n	8003ce4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	795b      	ldrb	r3, [r3, #5]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca2:	611a      	str	r2, [r3, #16]
 8003ca4:	e004      	b.n	8003cb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6912      	ldr	r2, [r2, #16]
 8003cae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	04c11db7 	.word	0x04c11db7

08003cf0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2202      	movs	r2, #2
 8003d04:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d006      	beq.n	8003d2c <HAL_CRC_Calculate+0x3c>
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d829      	bhi.n	8003d76 <HAL_CRC_Calculate+0x86>
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d019      	beq.n	8003d5a <HAL_CRC_Calculate+0x6a>
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d01e      	beq.n	8003d68 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003d2a:	e024      	b.n	8003d76 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e00a      	b.n	8003d48 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	441a      	add	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d3f0      	bcc.n	8003d32 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	613b      	str	r3, [r7, #16]
      break;
 8003d58:	e00e      	b.n	8003d78 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f812 	bl	8003d88 <CRC_Handle_8>
 8003d64:	6138      	str	r0, [r7, #16]
      break;
 8003d66:	e007      	b.n	8003d78 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f89b 	bl	8003ea8 <CRC_Handle_16>
 8003d72:	6138      	str	r0, [r7, #16]
      break;
 8003d74:	e000      	b.n	8003d78 <HAL_CRC_Calculate+0x88>
      break;
 8003d76:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003d7e:	693b      	ldr	r3, [r7, #16]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	@ 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	e023      	b.n	8003de2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	4413      	add	r3, r2
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3301      	adds	r3, #1
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	440b      	add	r3, r1
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003db4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	3302      	adds	r3, #2
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	440b      	add	r3, r1
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003dc4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	3303      	adds	r3, #3
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	440b      	add	r3, r1
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003dd8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d3d6      	bcc.n	8003d9a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04f      	beq.n	8003e96 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4413      	add	r3, r2
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d117      	bne.n	8003e4a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	b21a      	sxth	r2, r3
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	3301      	adds	r3, #1
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	440b      	add	r3, r1
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b21b      	sxth	r3, r3
 8003e3c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	8b7a      	ldrh	r2, [r7, #26]
 8003e48:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d120      	bne.n	8003e96 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	b21a      	sxth	r2, r3
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3301      	adds	r3, #1
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	440b      	add	r3, r1
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b21b      	sxth	r3, r3
 8003e76:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	8b7a      	ldrh	r2, [r7, #26]
 8003e82:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3724      	adds	r7, #36	@ 0x24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e013      	b.n	8003ee2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	041a      	lsls	r2, r3, #16
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	440b      	add	r3, r1
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d3e6      	bcc.n	8003eba <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	4413      	add	r3, r2
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f2c:	231f      	movs	r3, #31
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
 8003f3e:	e063      	b.n	8004008 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f40:	bf00      	nop
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	613a      	str	r2, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <HAL_CRCEx_Polynomial_Set+0x44>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b18      	cmp	r3, #24
 8003f64:	d846      	bhi.n	8003ff4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003f66:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003ffb 	.word	0x08003ffb
 8003f70:	08003ff5 	.word	0x08003ff5
 8003f74:	08003ff5 	.word	0x08003ff5
 8003f78:	08003ff5 	.word	0x08003ff5
 8003f7c:	08003ff5 	.word	0x08003ff5
 8003f80:	08003ff5 	.word	0x08003ff5
 8003f84:	08003ff5 	.word	0x08003ff5
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	08003fe9 	.word	0x08003fe9
 8003f90:	08003ff5 	.word	0x08003ff5
 8003f94:	08003ff5 	.word	0x08003ff5
 8003f98:	08003ff5 	.word	0x08003ff5
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003fdd 	.word	0x08003fdd
 8003fb0:	08003ff5 	.word	0x08003ff5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	08003fd1 	.word	0x08003fd1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d913      	bls.n	8003ffe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003fda:	e010      	b.n	8003ffe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b07      	cmp	r3, #7
 8003fe0:	d90f      	bls.n	8004002 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003fe6:	e00c      	b.n	8004002 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	d90b      	bls.n	8004006 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ff2:	e008      	b.n	8004006 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
        break;
 8003ff8:	e006      	b.n	8004008 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004006:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 0118 	bic.w	r1, r3, #24
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e08d      	b.n	8004166 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	4b47      	ldr	r3, [pc, #284]	@ (8004170 <HAL_DMA_Init+0x138>)
 8004052:	429a      	cmp	r2, r3
 8004054:	d80f      	bhi.n	8004076 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	4b45      	ldr	r3, [pc, #276]	@ (8004174 <HAL_DMA_Init+0x13c>)
 800405e:	4413      	add	r3, r2
 8004060:	4a45      	ldr	r2, [pc, #276]	@ (8004178 <HAL_DMA_Init+0x140>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	009a      	lsls	r2, r3, #2
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a42      	ldr	r2, [pc, #264]	@ (800417c <HAL_DMA_Init+0x144>)
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40
 8004074:	e00e      	b.n	8004094 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	4b40      	ldr	r3, [pc, #256]	@ (8004180 <HAL_DMA_Init+0x148>)
 800407e:	4413      	add	r3, r2
 8004080:	4a3d      	ldr	r2, [pc, #244]	@ (8004178 <HAL_DMA_Init+0x140>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a3c      	ldr	r2, [pc, #240]	@ (8004184 <HAL_DMA_Init+0x14c>)
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fa1e 	bl	8004528 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f4:	d102      	bne.n	80040fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004110:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d010      	beq.n	800413c <HAL_DMA_Init+0x104>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b04      	cmp	r3, #4
 8004120:	d80c      	bhi.n	800413c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa3e 	bl	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	e008      	b.n	800414e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40020407 	.word	0x40020407
 8004174:	bffdfff8 	.word	0xbffdfff8
 8004178:	cccccccd 	.word	0xcccccccd
 800417c:	40020000 	.word	0x40020000
 8004180:	bffdfbf8 	.word	0xbffdfbf8
 8004184:	40020400 	.word	0x40020400

08004188 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_DMA_Start_IT+0x20>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e066      	b.n	8004276 <HAL_DMA_Start_IT+0xee>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d155      	bne.n	8004268 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f962 	bl	80044aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 020e 	orr.w	r2, r2, #14
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e00f      	b.n	8004220 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 020a 	orr.w	r2, r2, #10
 800421e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800423c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004254:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e005      	b.n	8004274 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004270:	2302      	movs	r3, #2
 8004272:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d00d      	beq.n	80042b2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2204      	movs	r2, #4
 800429a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	e047      	b.n	8004342 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 020e 	bic.w	r2, r2, #14
 80042c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f003 021f 	and.w	r2, r3, #31
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f202 	lsl.w	r2, r1, r2
 80042f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004312:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004316:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004320:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
    }
  }
  return status;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2204      	movs	r2, #4
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d026      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x7a>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d021      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d107      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2104      	movs	r1, #4
 80043ae:	fa01 f202 	lsl.w	r2, r1, r2
 80043b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d071      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043c4:	e06c      	b.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2202      	movs	r2, #2
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d02e      	beq.n	8004438 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d029      	beq.n	8004438 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 020a 	bic.w	r2, r2, #10
 8004400:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f003 021f 	and.w	r2, r3, #31
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	2102      	movs	r1, #2
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d038      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004436:	e033      	b.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2208      	movs	r2, #8
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02a      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d025      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 020e 	bic.w	r2, r2, #14
 8004464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f003 021f 	and.w	r2, r3, #31
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	2101      	movs	r1, #1
 8004474:	fa01 f202 	lsl.w	r2, r1, r2
 8004478:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
}
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044c0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044d2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	f003 021f 	and.w	r2, r3, #31
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d108      	bne.n	800450a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004508:	e007      	b.n	800451a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	4b16      	ldr	r3, [pc, #88]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004538:	429a      	cmp	r2, r3
 800453a:	d802      	bhi.n	8004542 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800453c:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e001      	b.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004544:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3b08      	subs	r3, #8
 8004552:	4a12      	ldr	r2, [pc, #72]	@ (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	461a      	mov	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a0b      	ldr	r2, [pc, #44]	@ (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004572:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2201      	movs	r2, #1
 800457c:	409a      	lsls	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40020407 	.word	0x40020407
 8004594:	40020800 	.word	0x40020800
 8004598:	40020820 	.word	0x40020820
 800459c:	cccccccd 	.word	0xcccccccd
 80045a0:	40020880 	.word	0x40020880

080045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a08      	ldr	r2, [pc, #32]	@ (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2201      	movs	r2, #1
 80045d2:	409a      	lsls	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	1000823f 	.word	0x1000823f
 80045e8:	40020940 	.word	0x40020940

080045ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045fa:	e15a      	b.n	80048b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 814c 	beq.w	80048ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d005      	beq.n	800462c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004628:	2b02      	cmp	r3, #2
 800462a:	d130      	bne.n	800468e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2203      	movs	r2, #3
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004662:	2201      	movs	r2, #1
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0201 	and.w	r2, r3, #1
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d017      	beq.n	80046ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d123      	bne.n	800471e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	08da      	lsrs	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3208      	adds	r2, #8
 80046de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	220f      	movs	r2, #15
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	08da      	lsrs	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3208      	adds	r2, #8
 8004718:	6939      	ldr	r1, [r7, #16]
 800471a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	2203      	movs	r2, #3
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 0203 	and.w	r2, r3, #3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80a6 	beq.w	80048ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004760:	4b5b      	ldr	r3, [pc, #364]	@ (80048d0 <HAL_GPIO_Init+0x2e4>)
 8004762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004764:	4a5a      	ldr	r2, [pc, #360]	@ (80048d0 <HAL_GPIO_Init+0x2e4>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6613      	str	r3, [r2, #96]	@ 0x60
 800476c:	4b58      	ldr	r3, [pc, #352]	@ (80048d0 <HAL_GPIO_Init+0x2e4>)
 800476e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004778:	4a56      	ldr	r2, [pc, #344]	@ (80048d4 <HAL_GPIO_Init+0x2e8>)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	3302      	adds	r3, #2
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	220f      	movs	r2, #15
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047a2:	d01f      	beq.n	80047e4 <HAL_GPIO_Init+0x1f8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a4c      	ldr	r2, [pc, #304]	@ (80048d8 <HAL_GPIO_Init+0x2ec>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d019      	beq.n	80047e0 <HAL_GPIO_Init+0x1f4>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a4b      	ldr	r2, [pc, #300]	@ (80048dc <HAL_GPIO_Init+0x2f0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_GPIO_Init+0x1f0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a4a      	ldr	r2, [pc, #296]	@ (80048e0 <HAL_GPIO_Init+0x2f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00d      	beq.n	80047d8 <HAL_GPIO_Init+0x1ec>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a49      	ldr	r2, [pc, #292]	@ (80048e4 <HAL_GPIO_Init+0x2f8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <HAL_GPIO_Init+0x1e8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a48      	ldr	r2, [pc, #288]	@ (80048e8 <HAL_GPIO_Init+0x2fc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_GPIO_Init+0x1e4>
 80047cc:	2305      	movs	r3, #5
 80047ce:	e00a      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047d0:	2306      	movs	r3, #6
 80047d2:	e008      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047d4:	2304      	movs	r3, #4
 80047d6:	e006      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047d8:	2303      	movs	r3, #3
 80047da:	e004      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047dc:	2302      	movs	r3, #2
 80047de:	e002      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047e4:	2300      	movs	r3, #0
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	f002 0203 	and.w	r2, r2, #3
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	4093      	lsls	r3, r2
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f6:	4937      	ldr	r1, [pc, #220]	@ (80048d4 <HAL_GPIO_Init+0x2e8>)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3302      	adds	r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004804:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	43db      	mvns	r3, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004828:	4a30      	ldr	r2, [pc, #192]	@ (80048ec <HAL_GPIO_Init+0x300>)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800482e:	4b2f      	ldr	r3, [pc, #188]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43db      	mvns	r3, r3
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004852:	4a26      	ldr	r2, [pc, #152]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004858:	4b24      	ldr	r3, [pc, #144]	@ (80048ec <HAL_GPIO_Init+0x300>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800487c:	4a1b      	ldr	r2, [pc, #108]	@ (80048ec <HAL_GPIO_Init+0x300>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004882:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	43db      	mvns	r3, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048a6:	4a11      	ldr	r2, [pc, #68]	@ (80048ec <HAL_GPIO_Init+0x300>)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3301      	adds	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f ae9d 	bne.w	80045fc <HAL_GPIO_Init+0x10>
  }
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40010000 	.word	0x40010000
 80048d8:	48000400 	.word	0x48000400
 80048dc:	48000800 	.word	0x48000800
 80048e0:	48000c00 	.word	0x48000c00
 80048e4:	48001000 	.word	0x48001000
 80048e8:	48001400 	.word	0x48001400
 80048ec:	40010400 	.word	0x40010400

080048f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
 800490c:	e001      	b.n	8004912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004912:	7bfb      	ldrb	r3, [r7, #15]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
 800492c:	4613      	mov	r3, r2
 800492e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004930:	787b      	ldrb	r3, [r7, #1]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800493c:	e002      	b.n	8004944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e08d      	b.n	8004a7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc f9e2 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	@ 0x24
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	e006      	b.n	80049d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80049d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d108      	bne.n	80049f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	e007      	b.n	8004a02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69d9      	ldr	r1, [r3, #28]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	461a      	mov	r2, r3
 8004a94:	460b      	mov	r3, r1
 8004a96:	817b      	strh	r3, [r7, #10]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	f040 80fd 	bne.w	8004ca4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2C_Master_Transmit+0x30>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0f6      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x21e>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ac0:	f7fd fbf4 	bl	80022ac <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2319      	movs	r3, #25
 8004acc:	2201      	movs	r2, #1
 8004ace:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f914 	bl	8004d00 <I2C_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0e1      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2221      	movs	r2, #33	@ 0x21
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2210      	movs	r2, #16
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	893a      	ldrh	r2, [r7, #8]
 8004b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2bff      	cmp	r3, #255	@ 0xff
 8004b12:	d906      	bls.n	8004b22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	22ff      	movs	r2, #255	@ 0xff
 8004b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e007      	b.n	8004b32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004b2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d024      	beq.n	8004b84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	8979      	ldrh	r1, [r7, #10]
 8004b76:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb0 <HAL_I2C_Master_Transmit+0x228>)
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fa83 	bl	8005088 <I2C_TransferConfig>
 8004b82:	e066      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	8979      	ldrh	r1, [r7, #10]
 8004b8c:	4b48      	ldr	r3, [pc, #288]	@ (8004cb0 <HAL_I2C_Master_Transmit+0x228>)
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fa78 	bl	8005088 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004b98:	e05b      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	6a39      	ldr	r1, [r7, #32]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f907 	bl	8004db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e07b      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d034      	beq.n	8004c52 <HAL_I2C_Master_Transmit+0x1ca>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d130      	bne.n	8004c52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2180      	movs	r1, #128	@ 0x80
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f880 	bl	8004d00 <I2C_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e04d      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2bff      	cmp	r3, #255	@ 0xff
 8004c12:	d90e      	bls.n	8004c32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	22ff      	movs	r2, #255	@ 0xff
 8004c18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	8979      	ldrh	r1, [r7, #10]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa2c 	bl	8005088 <I2C_TransferConfig>
 8004c30:	e00f      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	8979      	ldrh	r1, [r7, #10]
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fa1b 	bl	8005088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d19e      	bne.n	8004b9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	6a39      	ldr	r1, [r7, #32]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f8ed 	bl	8004e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e01a      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2220      	movs	r2, #32
 8004c76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <HAL_I2C_Master_Transmit+0x22c>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	80002000 	.word	0x80002000
 8004cb4:	fe00e800 	.word	0xfe00e800

08004cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d103      	bne.n	8004cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d007      	beq.n	8004cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	619a      	str	r2, [r3, #24]
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d10:	e03b      	b.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f8d6 	bl	8004ec8 <I2C_IsErrorOccurred>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e041      	b.n	8004daa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d02d      	beq.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fd fabd 	bl	80022ac <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d122      	bne.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d113      	bne.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e00f      	b.n	8004daa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	bf0c      	ite	eq
 8004d9a:	2301      	moveq	r3, #1
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d0b4      	beq.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dbe:	e033      	b.n	8004e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f87f 	bl	8004ec8 <I2C_IsErrorOccurred>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e031      	b.n	8004e38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d025      	beq.n	8004e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ddc:	f7fd fa66 	bl	80022ac <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d302      	bcc.n	8004df2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11a      	bne.n	8004e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d013      	beq.n	8004e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e007      	b.n	8004e38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d1c4      	bne.n	8004dc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e4c:	e02f      	b.n	8004eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f838 	bl	8004ec8 <I2C_IsErrorOccurred>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e02d      	b.n	8004ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e62:	f7fd fa23 	bl	80022ac <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11a      	bne.n	8004eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d013      	beq.n	8004eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e007      	b.n	8004ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d1c8      	bne.n	8004e4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d068      	beq.n	8004fc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004efc:	e049      	b.n	8004f92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d045      	beq.n	8004f92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f06:	f7fd f9d1 	bl	80022ac <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d302      	bcc.n	8004f1c <I2C_IsErrorOccurred+0x54>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d13a      	bne.n	8004f92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f3e:	d121      	bne.n	8004f84 <I2C_IsErrorOccurred+0xbc>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f46:	d01d      	beq.n	8004f84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d01a      	beq.n	8004f84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f5e:	f7fd f9a5 	bl	80022ac <HAL_GetTick>
 8004f62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f64:	e00e      	b.n	8004f84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f66:	f7fd f9a1 	bl	80022ac <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b19      	cmp	r3, #25
 8004f72:	d907      	bls.n	8004f84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f043 0320 	orr.w	r3, r3, #32
 8004f7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004f82:	e006      	b.n	8004f92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d1e9      	bne.n	8004f66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d003      	beq.n	8004fa8 <I2C_IsErrorOccurred+0xe0>
 8004fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0aa      	beq.n	8004efe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f043 0304 	orr.w	r3, r3, #4
 8004fbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	f043 0308 	orr.w	r3, r3, #8
 8005000:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800500a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800502c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01c      	beq.n	8005076 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff fe3b 	bl	8004cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b0d      	ldr	r3, [pc, #52]	@ (8005084 <I2C_IsErrorOccurred+0x1bc>)
 800504e:	400b      	ands	r3, r1
 8005050:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	431a      	orrs	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800507a:	4618      	mov	r0, r3
 800507c:	3728      	adds	r7, #40	@ 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	fe00e800 	.word	0xfe00e800

08005088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	4613      	mov	r3, r2
 8005098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050a0:	7a7b      	ldrb	r3, [r7, #9]
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	0d5b      	lsrs	r3, r3, #21
 80050c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80050c6:	4b08      	ldr	r3, [pc, #32]	@ (80050e8 <I2C_TransferConfig+0x60>)
 80050c8:	430b      	orrs	r3, r1
 80050ca:	43db      	mvns	r3, r3
 80050cc:	ea02 0103 	and.w	r1, r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	03ff63ff 	.word	0x03ff63ff

080050ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d138      	bne.n	8005174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800510c:	2302      	movs	r3, #2
 800510e:	e032      	b.n	8005176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2224      	movs	r2, #36	@ 0x24
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800513e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6819      	ldr	r1, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b20      	cmp	r3, #32
 8005196:	d139      	bne.n	800520c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e033      	b.n	800520e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2224      	movs	r2, #36	@ 0x24
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005224:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005228:	4a0a      	ldr	r2, [pc, #40]	@ (8005254 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005230:	4b08      	ldr	r3, [pc, #32]	@ (8005254 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	4905      	ldr	r1, [pc, #20]	@ (8005258 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40021000 	.word	0x40021000
 8005258:	40010000 	.word	0x40010000

0800525c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e0c0      	b.n	80053f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f008 fab4 	bl	800d7f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2203      	movs	r2, #3
 800528c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f005 f844 	bl	800a322 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
 800529e:	e03e      	b.n	800531e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	440b      	add	r3, r1
 80052ae:	3311      	adds	r3, #17
 80052b0:	2201      	movs	r2, #1
 80052b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3310      	adds	r3, #16
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052c8:	7bfa      	ldrb	r2, [r7, #15]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	440b      	add	r3, r1
 80052d6:	3313      	adds	r3, #19
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	3320      	adds	r3, #32
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	3324      	adds	r3, #36	@ 0x24
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	440b      	add	r3, r1
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	3301      	adds	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	791b      	ldrb	r3, [r3, #4]
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	429a      	cmp	r2, r3
 8005326:	d3bb      	bcc.n	80052a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
 800532c:	e044      	b.n	80053b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005356:	7bfa      	ldrb	r2, [r7, #15]
 8005358:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800535a:	7bfa      	ldrb	r2, [r7, #15]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	440b      	add	r3, r1
 8005368:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	3301      	adds	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	791b      	ldrb	r3, [r3, #4]
 80053bc:	7bfa      	ldrb	r2, [r7, #15]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3b5      	bcc.n	800532e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80053ce:	f004 ffc3 	bl	800a358 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7a9b      	ldrb	r3, [r3, #10]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d102      	bne.n	80053ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 fbf6 	bl	8006bda <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_PCD_Start+0x16>
 800540a:	2302      	movs	r3, #2
 800540c:	e012      	b.n	8005434 <HAL_PCD_Start+0x3c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f004 ff6a 	bl	800a2f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f006 fd47 	bl	800beb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f006 fd4c 	bl	800bee6 <USB_ReadInterrupts>
 800544e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 faee 	bl	8005a3c <PCD_EP_ISR_Handler>

    return;
 8005460:	e110      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547e:	b292      	uxth	r2, r2
 8005480:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f008 fa44 	bl	800d912 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800548a:	2100      	movs	r1, #0
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8fc 	bl	800568a <HAL_PCD_SetAddress>

    return;
 8005492:	e0f7      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054b0:	b292      	uxth	r2, r2
 80054b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80054b6:	e0e5      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054d4:	b292      	uxth	r2, r2
 80054d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80054da:	e0d3      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d034      	beq.n	8005550 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0204 	bic.w	r2, r2, #4
 80054f8:	b292      	uxth	r2, r2
 80054fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0208 	bic.w	r2, r2, #8
 8005510:	b292      	uxth	r2, r2
 8005512:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005528:	2100      	movs	r1, #0
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 fb7f 	bl	8006c2e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f008 fa27 	bl	800d984 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800553e:	b29a      	uxth	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005548:	b292      	uxth	r2, r2
 800554a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800554e:	e099      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005556:	2b00      	cmp	r3, #0
 8005558:	d027      	beq.n	80055aa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005562:	b29a      	uxth	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0208 	orr.w	r2, r2, #8
 800556c:	b292      	uxth	r2, r2
 800556e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005584:	b292      	uxth	r2, r2
 8005586:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005592:	b29a      	uxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0204 	orr.w	r2, r2, #4
 800559c:	b292      	uxth	r2, r2
 800559e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f008 f9d4 	bl	800d950 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80055a8:	e06c      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d040      	beq.n	8005636 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055bc:	b29a      	uxth	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055c6:	b292      	uxth	r2, r2
 80055c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d12b      	bne.n	800562e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055de:	b29a      	uxth	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0204 	orr.w	r2, r2, #4
 80055e8:	b292      	uxth	r2, r2
 80055ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0208 	orr.w	r2, r2, #8
 8005600:	b292      	uxth	r2, r2
 8005602:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005616:	b29b      	uxth	r3, r3
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005624:	2101      	movs	r1, #1
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fb01 	bl	8006c2e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800562c:	e02a      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f008 f98e 	bl	800d950 <HAL_PCD_SuspendCallback>
    return;
 8005634:	e026      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00f      	beq.n	8005660 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005648:	b29a      	uxth	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005652:	b292      	uxth	r2, r2
 8005654:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f008 f94c 	bl	800d8f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800565e:	e011      	b.n	8005684 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800567c:	b292      	uxth	r2, r2
 800567e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005682:	bf00      	nop
  }
}
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_PCD_SetAddress+0x1a>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e012      	b.n	80056ca <HAL_PCD_SetAddress+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f006 fbe8 	bl	800be90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	461a      	mov	r2, r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	70fb      	strb	r3, [r7, #3]
 80056e4:	460b      	mov	r3, r1
 80056e6:	803b      	strh	r3, [r7, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da0e      	bge.n	8005716 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	f003 0207 	and.w	r2, r3, #7
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	3310      	adds	r3, #16
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	705a      	strb	r2, [r3, #1]
 8005714:	e00e      	b.n	8005734 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	f003 0207 	and.w	r2, r3, #7
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	4413      	add	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	b2da      	uxtb	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005740:	883b      	ldrh	r3, [r7, #0]
 8005742:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	78ba      	ldrb	r2, [r7, #2]
 800574e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005750:	78bb      	ldrb	r3, [r7, #2]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d102      	bne.n	800575c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_PCD_EP_Open+0x98>
 8005766:	2302      	movs	r3, #2
 8005768:	e00e      	b.n	8005788 <HAL_PCD_EP_Open+0xb6>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	4618      	mov	r0, r3
 800577a:	f004 fe0b 	bl	800a394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005786:	7afb      	ldrb	r3, [r7, #11]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800579c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	da0e      	bge.n	80057c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	f003 0207 	and.w	r2, r3, #7
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	3310      	adds	r3, #16
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	705a      	strb	r2, [r3, #1]
 80057c0:	e00e      	b.n	80057e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	f003 0207 	and.w	r2, r3, #7
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_PCD_EP_Close+0x6a>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e00e      	b.n	8005818 <HAL_PCD_EP_Close+0x88>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	4618      	mov	r0, r3
 800580a:	f005 faab 	bl	800ad64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	460b      	mov	r3, r1
 800582e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005830:	7afb      	ldrb	r3, [r7, #11]
 8005832:	f003 0207 	and.w	r2, r3, #7
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005860:	7afb      	ldrb	r3, [r7, #11]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	b2da      	uxtb	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	4618      	mov	r0, r3
 8005874:	f005 fc63 	bl	800b13e <USB_EPStartXfer>

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	460b      	mov	r3, r1
 8005890:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	f003 0207 	and.w	r2, r3, #7
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	3310      	adds	r3, #16
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2201      	movs	r2, #1
 80058cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ce:	7afb      	ldrb	r3, [r7, #11]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f005 fc2c 	bl	800b13e <USB_EPStartXfer>

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	7912      	ldrb	r2, [r2, #4]
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e03e      	b.n	800598c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800590e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005912:	2b00      	cmp	r3, #0
 8005914:	da0e      	bge.n	8005934 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	f003 0207 	and.w	r2, r3, #7
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	3310      	adds	r3, #16
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	705a      	strb	r2, [r3, #1]
 8005932:	e00c      	b.n	800594e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_PCD_EP_SetStall+0x7e>
 800596a:	2302      	movs	r3, #2
 800596c:	e00e      	b.n	800598c <HAL_PCD_EP_SetStall+0x9c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68f9      	ldr	r1, [r7, #12]
 800597c:	4618      	mov	r0, r3
 800597e:	f006 f98d 	bl	800bc9c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	7912      	ldrb	r2, [r2, #4]
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e040      	b.n	8005a34 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da0e      	bge.n	80059d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	f003 0207 	and.w	r2, r3, #7
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	3310      	adds	r3, #16
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	705a      	strb	r2, [r3, #1]
 80059d6:	e00e      	b.n	80059f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	f003 0207 	and.w	r2, r3, #7
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_PCD_EP_ClrStall+0x82>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e00e      	b.n	8005a34 <HAL_PCD_EP_ClrStall+0xa0>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f006 f98a 	bl	800bd3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b092      	sub	sp, #72	@ 0x48
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a44:	e333      	b.n	80060ae <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a4e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005a50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005a5c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 8108 	bne.w	8005c76 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d14c      	bne.n	8005b0a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a80:	813b      	strh	r3, [r7, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	893b      	ldrh	r3, [r7, #8]
 8005a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3310      	adds	r3, #16
 8005a98:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	441a      	add	r2, r3
 8005acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ace:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f007 fef5 	bl	800d8c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7b1b      	ldrb	r3, [r3, #12]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 82e5 	beq.w	80060ae <PCD_EP_ISR_Handler+0x672>
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f040 82e0 	bne.w	80060ae <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	7b1b      	ldrb	r3, [r3, #12]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	731a      	strb	r2, [r3, #12]
 8005b08:	e2d1      	b.n	80060ae <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b10:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005b1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d032      	beq.n	8005b8a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f006 fa14 	bl	800bf8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b70:	4013      	ands	r3, r2
 8005b72:	817b      	strh	r3, [r7, #10]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	897a      	ldrh	r2, [r7, #10]
 8005b7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b7e:	b292      	uxth	r2, r2
 8005b80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f007 fe70 	bl	800d868 <HAL_PCD_SetupStageCallback>
 8005b88:	e291      	b.n	80060ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b8a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f280 828d 	bge.w	80060ae <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	81fb      	strh	r3, [r7, #14]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	89fa      	ldrh	r2, [r7, #14]
 8005baa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d019      	beq.n	8005c16 <PCD_EP_ISR_Handler+0x1da>
 8005be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d015      	beq.n	8005c16 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf0:	6959      	ldr	r1, [r3, #20]
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f006 f9c6 	bl	800bf8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	441a      	add	r2, r3
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f007 fe3b 	bl	800d88c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005c1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 8242 	bne.w	80060ae <PCD_EP_ISR_Handler+0x672>
 8005c2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c2c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c34:	f000 823b 	beq.w	80060ae <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c48:	81bb      	strh	r3, [r7, #12]
 8005c4a:	89bb      	ldrh	r3, [r7, #12]
 8005c4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c50:	81bb      	strh	r3, [r7, #12]
 8005c52:	89bb      	ldrh	r3, [r7, #12]
 8005c54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c58:	81bb      	strh	r3, [r7, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	89bb      	ldrh	r3, [r7, #12]
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]
 8005c74:	e21b      	b.n	80060ae <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f280 80f1 	bge.w	8005e74 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ca8:	4013      	ands	r3, r2
 8005caa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005cbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cc0:	b292      	uxth	r2, r2
 8005cc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005cc4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cdc:	7b1b      	ldrb	r3, [r3, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d123      	bne.n	8005d2a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005d0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 808b 	beq.w	8005e2a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d1a:	6959      	ldr	r1, [r3, #20]
 8005d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d1e:	88da      	ldrh	r2, [r3, #6]
 8005d20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d24:	f006 f932 	bl	800bf8c <USB_ReadPMA>
 8005d28:	e07f      	b.n	8005e2a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2c:	78db      	ldrb	r3, [r3, #3]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d109      	bne.n	8005d46 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d34:	461a      	mov	r2, r3
 8005d36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9c6 	bl	80060ca <HAL_PCD_EP_DB_Receive>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005d44:	e071      	b.n	8005e2a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d022      	beq.n	8005de6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4413      	add	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005dc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d02c      	beq.n	8005e2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd6:	6959      	ldr	r1, [r3, #20]
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dda:	891a      	ldrh	r2, [r3, #8]
 8005ddc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005de0:	f006 f8d4 	bl	800bf8c <USB_ReadPMA>
 8005de4:	e021      	b.n	8005e2a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005e0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e1c:	6959      	ldr	r1, [r3, #20]
 8005e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e20:	895a      	ldrh	r2, [r3, #10]
 8005e22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e26:	f006 f8b1 	bl	800bf8c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e32:	441a      	add	r2, r3
 8005e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3a:	695a      	ldr	r2, [r3, #20]
 8005e3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e40:	441a      	add	r2, r3
 8005e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e44:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <PCD_EP_ISR_Handler+0x41e>
 8005e4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d206      	bcs.n	8005e68 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f007 fd13 	bl	800d88c <HAL_PCD_DataOutStageCallback>
 8005e66:	e005      	b.n	8005e74 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f005 f965 	bl	800b13e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8117 	beq.w	80060ae <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e80:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	4413      	add	r3, r2
 8005e92:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ece:	78db      	ldrb	r3, [r3, #3]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 80a1 	bne.w	8006018 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed8:	2200      	movs	r2, #0
 8005eda:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ede:	7b1b      	ldrb	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8092 	beq.w	800600a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ee6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d046      	beq.n	8005f7e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d126      	bne.n	8005f46 <PCD_EP_ISR_Handler+0x50a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	00da      	lsls	r2, r3, #3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e061      	b.n	800600a <PCD_EP_ISR_Handler+0x5ce>
 8005f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d15d      	bne.n	800600a <PCD_EP_ISR_Handler+0x5ce>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	00da      	lsls	r2, r3, #3
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e045      	b.n	800600a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d126      	bne.n	8005fda <PCD_EP_ISR_Handler+0x59e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	4413      	add	r3, r2
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	00da      	lsls	r2, r3, #3
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	e017      	b.n	800600a <PCD_EP_ISR_Handler+0x5ce>
 8005fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d113      	bne.n	800600a <PCD_EP_ISR_Handler+0x5ce>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	4413      	add	r3, r2
 8005ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	00da      	lsls	r2, r3, #3
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	2200      	movs	r2, #0
 8006008:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800600a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f007 fc56 	bl	800d8c2 <HAL_PCD_DataInStageCallback>
 8006016:	e04a      	b.n	80060ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006018:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800601a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d13f      	bne.n	80060a2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	4413      	add	r3, r2
 800603c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006046:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800604e:	429a      	cmp	r2, r3
 8006050:	d906      	bls.n	8006060 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006058:	1ad2      	subs	r2, r2, r3
 800605a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800605c:	619a      	str	r2, [r3, #24]
 800605e:	e002      	b.n	8006066 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006062:	2200      	movs	r2, #0
 8006064:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800606e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f007 fc24 	bl	800d8c2 <HAL_PCD_DataInStageCallback>
 800607a:	e018      	b.n	80060ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800607c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006082:	441a      	add	r2, r3
 8006084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006086:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800608e:	441a      	add	r2, r3
 8006090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006092:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800609a:	4618      	mov	r0, r3
 800609c:	f005 f84f 	bl	800b13e <USB_EPStartXfer>
 80060a0:	e005      	b.n	80060ae <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80060a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060a4:	461a      	mov	r2, r3
 80060a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f917 	bl	80062dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	b21b      	sxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f6ff acc3 	blt.w	8005a46 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3748      	adds	r7, #72	@ 0x48
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b088      	sub	sp, #32
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d07c      	beq.n	80061dc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	4413      	add	r3, r2
 80060fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006106:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	8b7b      	ldrh	r3, [r7, #26]
 800610e:	429a      	cmp	r2, r3
 8006110:	d306      	bcc.n	8006120 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	8b7b      	ldrh	r3, [r7, #26]
 8006118:	1ad2      	subs	r2, r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	619a      	str	r2, [r3, #24]
 800611e:	e002      	b.n	8006126 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d123      	bne.n	8006176 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006148:	833b      	strh	r3, [r7, #24]
 800614a:	8b3b      	ldrh	r3, [r7, #24]
 800614c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006150:	833b      	strh	r3, [r7, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	8b3b      	ldrh	r3, [r7, #24]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01f      	beq.n	80061c0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	82fb      	strh	r3, [r7, #22]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	8afb      	ldrh	r3, [r7, #22]
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80061c0:	8b7b      	ldrh	r3, [r7, #26]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8085 	beq.w	80062d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6959      	ldr	r1, [r3, #20]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	891a      	ldrh	r2, [r3, #8]
 80061d4:	8b7b      	ldrh	r3, [r7, #26]
 80061d6:	f005 fed9 	bl	800bf8c <USB_ReadPMA>
 80061da:	e07a      	b.n	80062d2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4413      	add	r3, r2
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006200:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	8b7b      	ldrh	r3, [r7, #26]
 8006208:	429a      	cmp	r2, r3
 800620a:	d306      	bcc.n	800621a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	8b7b      	ldrh	r3, [r7, #26]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	619a      	str	r2, [r3, #24]
 8006218:	e002      	b.n	8006220 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d123      	bne.n	8006270 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	83fb      	strh	r3, [r7, #30]
 8006244:	8bfb      	ldrh	r3, [r7, #30]
 8006246:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800624a:	83fb      	strh	r3, [r7, #30]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8bfb      	ldrh	r3, [r7, #30]
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11f      	bne.n	80062ba <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006294:	83bb      	strh	r3, [r7, #28]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	8bbb      	ldrh	r3, [r7, #28]
 80062a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80062ba:	8b7b      	ldrh	r3, [r7, #26]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6959      	ldr	r1, [r3, #20]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	895a      	ldrh	r2, [r3, #10]
 80062cc:	8b7b      	ldrh	r3, [r7, #26]
 80062ce:	f005 fe5d 	bl	800bf8c <USB_ReadPMA>
    }
  }

  return count;
 80062d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b0a6      	sub	sp, #152	@ 0x98
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 81f7 	beq.w	80066e4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4413      	add	r3, r2
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	4413      	add	r3, r2
 8006310:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800631a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006326:	429a      	cmp	r2, r3
 8006328:	d907      	bls.n	800633a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	619a      	str	r2, [r3, #24]
 8006338:	e002      	b.n	8006340 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2200      	movs	r2, #0
 800633e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 80e1 	bne.w	800650c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d126      	bne.n	80063a0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	633b      	str	r3, [r7, #48]	@ 0x30
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	4413      	add	r3, r2
 8006368:	633b      	str	r3, [r7, #48]	@ 0x30
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	00da      	lsls	r2, r3, #3
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	4413      	add	r3, r2
 8006374:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800637a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006384:	b29a      	uxth	r2, r3
 8006386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006398:	b29a      	uxth	r2, r3
 800639a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	e01a      	b.n	80063d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d116      	bne.n	80063d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	4413      	add	r3, r2
 80063be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	00da      	lsls	r2, r3, #3
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	4413      	add	r3, r2
 80063ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d2:	2200      	movs	r2, #0
 80063d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d126      	bne.n	8006432 <HAL_PCD_EP_DB_Transmit+0x156>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	4413      	add	r3, r2
 80063fa:	623b      	str	r3, [r7, #32]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	00da      	lsls	r2, r3, #3
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	4413      	add	r3, r2
 8006406:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006416:	b29a      	uxth	r2, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642a:	b29a      	uxth	r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	801a      	strh	r2, [r3, #0]
 8006430:	e017      	b.n	8006462 <HAL_PCD_EP_DB_Transmit+0x186>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d113      	bne.n	8006462 <HAL_PCD_EP_DB_Transmit+0x186>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	4413      	add	r3, r2
 800644a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	00da      	lsls	r2, r3, #3
 8006452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006454:	4413      	add	r3, r2
 8006456:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	2200      	movs	r2, #0
 8006460:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	78db      	ldrb	r3, [r3, #3]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d123      	bne.n	80064b2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006484:	837b      	strh	r3, [r7, #26]
 8006486:	8b7b      	ldrh	r3, [r7, #26]
 8006488:	f083 0320 	eor.w	r3, r3, #32
 800648c:	837b      	strh	r3, [r7, #26]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	8b7b      	ldrh	r3, [r7, #26]
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f007 fa02 	bl	800d8c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01f      	beq.n	8006508 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e2:	833b      	strh	r3, [r7, #24]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	8b3b      	ldrh	r3, [r7, #24]
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e31f      	b.n	8006b4c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d021      	beq.n	800655a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800652c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006530:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800654e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006556:	b29b      	uxth	r3, r3
 8006558:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006560:	2b01      	cmp	r3, #1
 8006562:	f040 82ca 	bne.w	8006afa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	695a      	ldr	r2, [r3, #20]
 800656a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800656e:	441a      	add	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800657c:	441a      	add	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	429a      	cmp	r2, r3
 800658c:	d309      	bcc.n	80065a2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800659a:	1ad2      	subs	r2, r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	621a      	str	r2, [r3, #32]
 80065a0:	e015      	b.n	80065ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80065aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80065b8:	e009      	b.n	80065ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d15f      	bne.n	8006696 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	643b      	str	r3, [r7, #64]	@ 0x40
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ea:	4413      	add	r3, r2
 80065ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	00da      	lsls	r2, r3, #3
 80065f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f6:	4413      	add	r3, r2
 80065f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006608:	b29a      	uxth	r2, r3
 800660a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <HAL_PCD_EP_DB_Transmit+0x34e>
 8006614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006622:	b29a      	uxth	r2, r3
 8006624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	e051      	b.n	80066ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800662a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800662c:	2b3e      	cmp	r3, #62	@ 0x3e
 800662e:	d816      	bhi.n	800665e <HAL_PCD_EP_DB_Transmit+0x382>
 8006630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	653b      	str	r3, [r7, #80]	@ 0x50
 8006636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006642:	3301      	adds	r3, #1
 8006644:	653b      	str	r3, [r7, #80]	@ 0x50
 8006646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29a      	uxth	r2, r3
 800664c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	029b      	lsls	r3, r3, #10
 8006652:	b29b      	uxth	r3, r3
 8006654:	4313      	orrs	r3, r2
 8006656:	b29a      	uxth	r2, r3
 8006658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e037      	b.n	80066ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800665e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	653b      	str	r3, [r7, #80]	@ 0x50
 8006664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <HAL_PCD_EP_DB_Transmit+0x398>
 800666e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006670:	3b01      	subs	r3, #1
 8006672:	653b      	str	r3, [r7, #80]	@ 0x50
 8006674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29a      	uxth	r2, r3
 800667a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800667c:	b29b      	uxth	r3, r3
 800667e:	029b      	lsls	r3, r3, #10
 8006680:	b29b      	uxth	r3, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668e:	b29a      	uxth	r2, r3
 8006690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	e01b      	b.n	80066ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d117      	bne.n	80066ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b2:	4413      	add	r3, r2
 80066b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	00da      	lsls	r2, r3, #3
 80066bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066be:	4413      	add	r3, r2
 80066c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6959      	ldr	r1, [r3, #20]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	891a      	ldrh	r2, [r3, #8]
 80066da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f005 fc12 	bl	800bf06 <USB_WritePMA>
 80066e2:	e20a      	b.n	8006afa <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006708:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006714:	429a      	cmp	r2, r3
 8006716:	d307      	bcc.n	8006728 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006720:	1ad2      	subs	r2, r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	619a      	str	r2, [r3, #24]
 8006726:	e002      	b.n	800672e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2200      	movs	r2, #0
 800672c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 80f6 	bne.w	8006924 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d126      	bne.n	800678e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	677b      	str	r3, [r7, #116]	@ 0x74
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006754:	4413      	add	r3, r2
 8006756:	677b      	str	r3, [r7, #116]	@ 0x74
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	00da      	lsls	r2, r3, #3
 800675e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006760:	4413      	add	r3, r2
 8006762:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006766:	673b      	str	r3, [r7, #112]	@ 0x70
 8006768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006772:	b29a      	uxth	r2, r3
 8006774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006786:	b29a      	uxth	r2, r3
 8006788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	e01a      	b.n	80067c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d116      	bne.n	80067c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067aa:	4413      	add	r3, r2
 80067ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	00da      	lsls	r2, r3, #3
 80067b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067b6:	4413      	add	r3, r2
 80067b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067c0:	2200      	movs	r2, #0
 80067c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d12f      	bne.n	8006834 <HAL_PCD_EP_DB_Transmit+0x558>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ec:	4413      	add	r3, r2
 80067ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	00da      	lsls	r2, r3, #3
 80067f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067fc:	4413      	add	r3, r2
 80067fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006806:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006812:	b29a      	uxth	r2, r3
 8006814:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682a:	b29a      	uxth	r2, r3
 800682c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	e01c      	b.n	800686e <HAL_PCD_EP_DB_Transmit+0x592>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d118      	bne.n	800686e <HAL_PCD_EP_DB_Transmit+0x592>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006844:	b29b      	uxth	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800684c:	4413      	add	r3, r2
 800684e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	00da      	lsls	r2, r3, #3
 8006858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800685c:	4413      	add	r3, r2
 800685e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006862:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006866:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800686a:	2200      	movs	r2, #0
 800686c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	78db      	ldrb	r3, [r3, #3]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d127      	bne.n	80068c6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800688c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006890:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006894:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006898:	f083 0320 	eor.w	r3, r3, #32
 800689c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80068b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	4619      	mov	r1, r3
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f006 fff8 	bl	800d8c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d121      	bne.n	8006920 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800690c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006914:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800691c:	b29b      	uxth	r3, r3
 800691e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e113      	b.n	8006b4c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d121      	bne.n	8006972 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006948:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800695e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800696a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006978:	2b01      	cmp	r3, #1
 800697a:	f040 80be 	bne.w	8006afa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006986:	441a      	add	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006994:	441a      	add	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	6a1a      	ldr	r2, [r3, #32]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d309      	bcc.n	80069ba <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	621a      	str	r2, [r3, #32]
 80069b8:	e015      	b.n	80069e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d107      	bne.n	80069d2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80069c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80069d0:	e009      	b.n	80069e6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2200      	movs	r2, #0
 80069dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d15f      	bne.n	8006ab4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a08:	4413      	add	r3, r2
 8006a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	00da      	lsls	r2, r3, #3
 8006a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2a:	801a      	strh	r2, [r3, #0]
 8006a2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <HAL_PCD_EP_DB_Transmit+0x76c>
 8006a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a44:	801a      	strh	r2, [r3, #0]
 8006a46:	e04e      	b.n	8006ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006a48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a4c:	d816      	bhi.n	8006a7c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_PCD_EP_DB_Transmit+0x788>
 8006a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a60:	3301      	adds	r3, #1
 8006a62:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	029b      	lsls	r3, r3, #10
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a78:	801a      	strh	r2, [r3, #0]
 8006a7a:	e034      	b.n	8006ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	029b      	lsls	r3, r3, #10
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	e018      	b.n	8006ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d114      	bne.n	8006ae6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aca:	4413      	add	r3, r2
 8006acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	00da      	lsls	r2, r3, #3
 8006ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6959      	ldr	r1, [r3, #20]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	895a      	ldrh	r2, [r3, #10]
 8006af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f005 fa06 	bl	800bf06 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b14:	82fb      	strh	r3, [r7, #22]
 8006b16:	8afb      	ldrh	r3, [r7, #22]
 8006b18:	f083 0310 	eor.w	r3, r3, #16
 8006b1c:	82fb      	strh	r3, [r7, #22]
 8006b1e:	8afb      	ldrh	r3, [r7, #22]
 8006b20:	f083 0320 	eor.w	r3, r3, #32
 8006b24:	82fb      	strh	r3, [r7, #22]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	441a      	add	r2, r3
 8006b34:	8afb      	ldrh	r3, [r7, #22]
 8006b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3798      	adds	r7, #152	@ 0x98
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	607b      	str	r3, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	817b      	strh	r3, [r7, #10]
 8006b62:	4613      	mov	r3, r2
 8006b64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b72:	897b      	ldrh	r3, [r7, #10]
 8006b74:	f003 0207 	and.w	r2, r3, #7
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	3310      	adds	r3, #16
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e009      	b.n	8006b9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b8a:	897a      	ldrh	r2, [r7, #10]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b9e:	893b      	ldrh	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	80da      	strh	r2, [r3, #6]
 8006bb2:	e00b      	b.n	8006bcc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f043 0302 	orr.w	r3, r3, #2
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d141      	bne.n	8006cda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c56:	4b4b      	ldr	r3, [pc, #300]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c62:	d131      	bne.n	8006cc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c64:	4b47      	ldr	r3, [pc, #284]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6a:	4a46      	ldr	r2, [pc, #280]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c74:	4b43      	ldr	r3, [pc, #268]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c7c:	4a41      	ldr	r2, [pc, #260]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c84:	4b40      	ldr	r3, [pc, #256]	@ (8006d88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2232      	movs	r2, #50	@ 0x32
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
 8006c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c90:	fba2 2303 	umull	r2, r3, r2, r3
 8006c94:	0c9b      	lsrs	r3, r3, #18
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c9a:	e002      	b.n	8006ca2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ca2:	4b38      	ldr	r3, [pc, #224]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cae:	d102      	bne.n	8006cb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f2      	bne.n	8006c9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cb6:	4b33      	ldr	r3, [pc, #204]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc2:	d158      	bne.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e057      	b.n	8006d78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cce:	4a2d      	ldr	r2, [pc, #180]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006cd8:	e04d      	b.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce0:	d141      	bne.n	8006d66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ce2:	4b28      	ldr	r3, [pc, #160]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cee:	d131      	bne.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cf0:	4b24      	ldr	r3, [pc, #144]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf6:	4a23      	ldr	r2, [pc, #140]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d00:	4b20      	ldr	r3, [pc, #128]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d08:	4a1e      	ldr	r2, [pc, #120]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d10:	4b1d      	ldr	r3, [pc, #116]	@ (8006d88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2232      	movs	r2, #50	@ 0x32
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d20:	0c9b      	lsrs	r3, r3, #18
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d26:	e002      	b.n	8006d2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d2e:	4b15      	ldr	r3, [pc, #84]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d3a:	d102      	bne.n	8006d42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f2      	bne.n	8006d28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d42:	4b10      	ldr	r3, [pc, #64]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d4e:	d112      	bne.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e011      	b.n	8006d78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d54:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d64:	e007      	b.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d66:	4b07      	ldr	r3, [pc, #28]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d6e:	4a05      	ldr	r2, [pc, #20]	@ (8006d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40007000 	.word	0x40007000
 8006d88:	20000004 	.word	0x20000004
 8006d8c:	431bde83 	.word	0x431bde83

08006d90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d9e:	6093      	str	r3, [r2, #8]
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40007000 	.word	0x40007000

08006db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e2fe      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d075      	beq.n	8006eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dce:	4b97      	ldr	r3, [pc, #604]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 030c 	and.w	r3, r3, #12
 8006dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dd8:	4b94      	ldr	r3, [pc, #592]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b0c      	cmp	r3, #12
 8006de6:	d102      	bne.n	8006dee <HAL_RCC_OscConfig+0x3e>
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d002      	beq.n	8006df4 <HAL_RCC_OscConfig+0x44>
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d10b      	bne.n	8006e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df4:	4b8d      	ldr	r3, [pc, #564]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05b      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x108>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d157      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e2d9      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e14:	d106      	bne.n	8006e24 <HAL_RCC_OscConfig+0x74>
 8006e16:	4b85      	ldr	r3, [pc, #532]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a84      	ldr	r2, [pc, #528]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	e01d      	b.n	8006e60 <HAL_RCC_OscConfig+0xb0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x98>
 8006e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a7e      	ldr	r2, [pc, #504]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	4b7c      	ldr	r3, [pc, #496]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a7b      	ldr	r2, [pc, #492]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	e00b      	b.n	8006e60 <HAL_RCC_OscConfig+0xb0>
 8006e48:	4b78      	ldr	r3, [pc, #480]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a77      	ldr	r2, [pc, #476]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	4b75      	ldr	r3, [pc, #468]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a74      	ldr	r2, [pc, #464]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d013      	beq.n	8006e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fb fa20 	bl	80022ac <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e70:	f7fb fa1c 	bl	80022ac <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b64      	cmp	r3, #100	@ 0x64
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e29e      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e82:	4b6a      	ldr	r3, [pc, #424]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f0      	beq.n	8006e70 <HAL_RCC_OscConfig+0xc0>
 8006e8e:	e014      	b.n	8006eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fb fa0c 	bl	80022ac <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e98:	f7fb fa08 	bl	80022ac <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b64      	cmp	r3, #100	@ 0x64
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e28a      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eaa:	4b60      	ldr	r3, [pc, #384]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0xe8>
 8006eb6:	e000      	b.n	8006eba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d075      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ec6:	4b59      	ldr	r3, [pc, #356]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 030c 	and.w	r3, r3, #12
 8006ece:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ed0:	4b56      	ldr	r3, [pc, #344]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b0c      	cmp	r3, #12
 8006ede:	d102      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x136>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d002      	beq.n	8006eec <HAL_RCC_OscConfig+0x13c>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d11f      	bne.n	8006f2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eec:	4b4f      	ldr	r3, [pc, #316]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_RCC_OscConfig+0x154>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e25d      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f04:	4b49      	ldr	r3, [pc, #292]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	061b      	lsls	r3, r3, #24
 8006f12:	4946      	ldr	r1, [pc, #280]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f18:	4b45      	ldr	r3, [pc, #276]	@ (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fb f979 	bl	8002214 <HAL_InitTick>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d043      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e249      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d023      	beq.n	8006f7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f34:	4b3d      	ldr	r3, [pc, #244]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3c      	ldr	r2, [pc, #240]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fb f9b4 	bl	80022ac <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f48:	f7fb f9b0 	bl	80022ac <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e232      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f5a:	4b34      	ldr	r3, [pc, #208]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f66:	4b31      	ldr	r3, [pc, #196]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	492d      	ldr	r1, [pc, #180]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	604b      	str	r3, [r1, #4]
 8006f7a:	e01a      	b.n	8006fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2a      	ldr	r2, [pc, #168]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006f82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fb f990 	bl	80022ac <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f90:	f7fb f98c 	bl	80022ac <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e20e      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fa2:	4b22      	ldr	r3, [pc, #136]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f0      	bne.n	8006f90 <HAL_RCC_OscConfig+0x1e0>
 8006fae:	e000      	b.n	8006fb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d041      	beq.n	8007042 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01c      	beq.n	8007000 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fc6:	4b19      	ldr	r3, [pc, #100]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fcc:	4a17      	ldr	r2, [pc, #92]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd6:	f7fb f969 	bl	80022ac <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fde:	f7fb f965 	bl	80022ac <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e1e7      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8006ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0ef      	beq.n	8006fde <HAL_RCC_OscConfig+0x22e>
 8006ffe:	e020      	b.n	8007042 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8007002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007006:	4a09      	ldr	r2, [pc, #36]	@ (800702c <HAL_RCC_OscConfig+0x27c>)
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007010:	f7fb f94c 	bl	80022ac <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007016:	e00d      	b.n	8007034 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007018:	f7fb f948 	bl	80022ac <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d906      	bls.n	8007034 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e1ca      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000
 8007030:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007034:	4b8c      	ldr	r3, [pc, #560]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1ea      	bne.n	8007018 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80a6 	beq.w	800719c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007050:	2300      	movs	r3, #0
 8007052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007054:	4b84      	ldr	r3, [pc, #528]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_RCC_OscConfig+0x2b4>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <HAL_RCC_OscConfig+0x2b6>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800706a:	4b7f      	ldr	r3, [pc, #508]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800706e:	4a7e      	ldr	r2, [pc, #504]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007074:	6593      	str	r3, [r2, #88]	@ 0x58
 8007076:	4b7c      	ldr	r3, [pc, #496]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007082:	2301      	movs	r3, #1
 8007084:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007086:	4b79      	ldr	r3, [pc, #484]	@ (800726c <HAL_RCC_OscConfig+0x4bc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708e:	2b00      	cmp	r3, #0
 8007090:	d118      	bne.n	80070c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007092:	4b76      	ldr	r3, [pc, #472]	@ (800726c <HAL_RCC_OscConfig+0x4bc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a75      	ldr	r2, [pc, #468]	@ (800726c <HAL_RCC_OscConfig+0x4bc>)
 8007098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800709c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800709e:	f7fb f905 	bl	80022ac <HAL_GetTick>
 80070a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070a4:	e008      	b.n	80070b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070a6:	f7fb f901 	bl	80022ac <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e183      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070b8:	4b6c      	ldr	r3, [pc, #432]	@ (800726c <HAL_RCC_OscConfig+0x4bc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0f0      	beq.n	80070a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d108      	bne.n	80070de <HAL_RCC_OscConfig+0x32e>
 80070cc:	4b66      	ldr	r3, [pc, #408]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d2:	4a65      	ldr	r2, [pc, #404]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80070dc:	e024      	b.n	8007128 <HAL_RCC_OscConfig+0x378>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b05      	cmp	r3, #5
 80070e4:	d110      	bne.n	8007108 <HAL_RCC_OscConfig+0x358>
 80070e6:	4b60      	ldr	r3, [pc, #384]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80070ee:	f043 0304 	orr.w	r3, r3, #4
 80070f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80070f6:	4b5c      	ldr	r3, [pc, #368]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070fc:	4a5a      	ldr	r2, [pc, #360]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007106:	e00f      	b.n	8007128 <HAL_RCC_OscConfig+0x378>
 8007108:	4b57      	ldr	r3, [pc, #348]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710e:	4a56      	ldr	r2, [pc, #344]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007118:	4b53      	ldr	r3, [pc, #332]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800711e:	4a52      	ldr	r2, [pc, #328]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d016      	beq.n	800715e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007130:	f7fb f8bc 	bl	80022ac <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007136:	e00a      	b.n	800714e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007138:	f7fb f8b8 	bl	80022ac <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e138      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800714e:	4b46      	ldr	r3, [pc, #280]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0ed      	beq.n	8007138 <HAL_RCC_OscConfig+0x388>
 800715c:	e015      	b.n	800718a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715e:	f7fb f8a5 	bl	80022ac <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007164:	e00a      	b.n	800717c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007166:	f7fb f8a1 	bl	80022ac <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e121      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800717c:	4b3a      	ldr	r3, [pc, #232]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1ed      	bne.n	8007166 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800718a:	7ffb      	ldrb	r3, [r7, #31]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d105      	bne.n	800719c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007190:	4b35      	ldr	r3, [pc, #212]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007194:	4a34      	ldr	r2, [pc, #208]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800719a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d03c      	beq.n	8007222 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01c      	beq.n	80071ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80071b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c0:	f7fb f874 	bl	80022ac <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071c8:	f7fb f870 	bl	80022ac <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e0f2      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071da:	4b23      	ldr	r3, [pc, #140]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80071dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ef      	beq.n	80071c8 <HAL_RCC_OscConfig+0x418>
 80071e8:	e01b      	b.n	8007222 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80071ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f7fb f857 	bl	80022ac <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007200:	e008      	b.n	8007214 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007202:	f7fb f853 	bl	80022ac <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e0d5      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007214:	4b14      	ldr	r3, [pc, #80]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1ef      	bne.n	8007202 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80c9 	beq.w	80073be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800722c:	4b0e      	ldr	r3, [pc, #56]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 030c 	and.w	r3, r3, #12
 8007234:	2b0c      	cmp	r3, #12
 8007236:	f000 8083 	beq.w	8007340 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d15e      	bne.n	8007300 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007242:	4b09      	ldr	r3, [pc, #36]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a08      	ldr	r2, [pc, #32]	@ (8007268 <HAL_RCC_OscConfig+0x4b8>)
 8007248:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800724c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724e:	f7fb f82d 	bl	80022ac <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007254:	e00c      	b.n	8007270 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007256:	f7fb f829 	bl	80022ac <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d905      	bls.n	8007270 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e0ab      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
 8007268:	40021000 	.word	0x40021000
 800726c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007270:	4b55      	ldr	r3, [pc, #340]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1ec      	bne.n	8007256 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800727c:	4b52      	ldr	r3, [pc, #328]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	4b52      	ldr	r3, [pc, #328]	@ (80073cc <HAL_RCC_OscConfig+0x61c>)
 8007282:	4013      	ands	r3, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6a11      	ldr	r1, [r2, #32]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800728c:	3a01      	subs	r2, #1
 800728e:	0112      	lsls	r2, r2, #4
 8007290:	4311      	orrs	r1, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007296:	0212      	lsls	r2, r2, #8
 8007298:	4311      	orrs	r1, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800729e:	0852      	lsrs	r2, r2, #1
 80072a0:	3a01      	subs	r2, #1
 80072a2:	0552      	lsls	r2, r2, #21
 80072a4:	4311      	orrs	r1, r2
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072aa:	0852      	lsrs	r2, r2, #1
 80072ac:	3a01      	subs	r2, #1
 80072ae:	0652      	lsls	r2, r2, #25
 80072b0:	4311      	orrs	r1, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072b6:	06d2      	lsls	r2, r2, #27
 80072b8:	430a      	orrs	r2, r1
 80072ba:	4943      	ldr	r1, [pc, #268]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072c0:	4b41      	ldr	r3, [pc, #260]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a40      	ldr	r2, [pc, #256]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 80072c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072cc:	4b3e      	ldr	r3, [pc, #248]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4a3d      	ldr	r2, [pc, #244]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 80072d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fa ffe8 	bl	80022ac <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e0:	f7fa ffe4 	bl	80022ac <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e066      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072f2:	4b35      	ldr	r3, [pc, #212]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0f0      	beq.n	80072e0 <HAL_RCC_OscConfig+0x530>
 80072fe:	e05e      	b.n	80073be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007300:	4b31      	ldr	r3, [pc, #196]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a30      	ldr	r2, [pc, #192]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 8007306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800730a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730c:	f7fa ffce 	bl	80022ac <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007314:	f7fa ffca 	bl	80022ac <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e04c      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007326:	4b28      	ldr	r3, [pc, #160]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007332:	4b25      	ldr	r3, [pc, #148]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	4924      	ldr	r1, [pc, #144]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 8007338:	4b25      	ldr	r3, [pc, #148]	@ (80073d0 <HAL_RCC_OscConfig+0x620>)
 800733a:	4013      	ands	r3, r2
 800733c:	60cb      	str	r3, [r1, #12]
 800733e:	e03e      	b.n	80073be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e039      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800734c:	4b1e      	ldr	r3, [pc, #120]	@ (80073c8 <HAL_RCC_OscConfig+0x618>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f003 0203 	and.w	r2, r3, #3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	429a      	cmp	r2, r3
 800735e:	d12c      	bne.n	80073ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736a:	3b01      	subs	r3, #1
 800736c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800736e:	429a      	cmp	r2, r3
 8007370:	d123      	bne.n	80073ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800737e:	429a      	cmp	r2, r3
 8007380:	d11b      	bne.n	80073ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800738e:	429a      	cmp	r2, r3
 8007390:	d113      	bne.n	80073ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	3b01      	subs	r3, #1
 80073a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d109      	bne.n	80073ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	3b01      	subs	r3, #1
 80073b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d001      	beq.n	80073be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40021000 	.word	0x40021000
 80073cc:	019f800c 	.word	0x019f800c
 80073d0:	feeefffc 	.word	0xfeeefffc

080073d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e11e      	b.n	800762a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073ec:	4b91      	ldr	r3, [pc, #580]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d910      	bls.n	800741c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073fa:	4b8e      	ldr	r3, [pc, #568]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f023 020f 	bic.w	r2, r3, #15
 8007402:	498c      	ldr	r1, [pc, #560]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	4313      	orrs	r3, r2
 8007408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800740a:	4b8a      	ldr	r3, [pc, #552]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d001      	beq.n	800741c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e106      	b.n	800762a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d073      	beq.n	8007510 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d129      	bne.n	8007484 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007430:	4b81      	ldr	r3, [pc, #516]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0f4      	b.n	800762a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007440:	f000 f99e 	bl	8007780 <RCC_GetSysClockFreqFromPLLSource>
 8007444:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	4a7c      	ldr	r2, [pc, #496]	@ (800763c <HAL_RCC_ClockConfig+0x268>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d93f      	bls.n	80074ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800744e:	4b7a      	ldr	r3, [pc, #488]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d009      	beq.n	800746e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007462:	2b00      	cmp	r3, #0
 8007464:	d033      	beq.n	80074ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800746a:	2b00      	cmp	r3, #0
 800746c:	d12f      	bne.n	80074ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800746e:	4b72      	ldr	r3, [pc, #456]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007476:	4a70      	ldr	r2, [pc, #448]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800747e:	2380      	movs	r3, #128	@ 0x80
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e024      	b.n	80074ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d107      	bne.n	800749c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800748c:	4b6a      	ldr	r3, [pc, #424]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d109      	bne.n	80074ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0c6      	b.n	800762a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800749c:	4b66      	ldr	r3, [pc, #408]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0be      	b.n	800762a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80074ac:	f000 f8ce 	bl	800764c <HAL_RCC_GetSysClockFreq>
 80074b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	4a61      	ldr	r2, [pc, #388]	@ (800763c <HAL_RCC_ClockConfig+0x268>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d909      	bls.n	80074ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074ba:	4b5f      	ldr	r3, [pc, #380]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074c2:	4a5d      	ldr	r2, [pc, #372]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80074c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80074ca:	2380      	movs	r3, #128	@ 0x80
 80074cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f023 0203 	bic.w	r2, r3, #3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4957      	ldr	r1, [pc, #348]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e0:	f7fa fee4 	bl	80022ac <HAL_GetTick>
 80074e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e6:	e00a      	b.n	80074fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e8:	f7fa fee0 	bl	80022ac <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e095      	b.n	800762a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fe:	4b4e      	ldr	r3, [pc, #312]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 020c 	and.w	r2, r3, #12
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	429a      	cmp	r2, r3
 800750e:	d1eb      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d023      	beq.n	8007564 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007528:	4b43      	ldr	r3, [pc, #268]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	4a42      	ldr	r2, [pc, #264]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 800752e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007532:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007540:	4b3d      	ldr	r3, [pc, #244]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007548:	4a3b      	ldr	r2, [pc, #236]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 800754a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800754e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007550:	4b39      	ldr	r3, [pc, #228]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	4936      	ldr	r1, [pc, #216]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
 8007562:	e008      	b.n	8007576 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	d105      	bne.n	8007576 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800756a:	4b33      	ldr	r3, [pc, #204]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	4a32      	ldr	r2, [pc, #200]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007570:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007574:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007576:	4b2f      	ldr	r3, [pc, #188]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d21d      	bcs.n	80075c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007584:	4b2b      	ldr	r3, [pc, #172]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f023 020f 	bic.w	r2, r3, #15
 800758c:	4929      	ldr	r1, [pc, #164]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	4313      	orrs	r3, r2
 8007592:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007594:	f7fa fe8a 	bl	80022ac <HAL_GetTick>
 8007598:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800759a:	e00a      	b.n	80075b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800759c:	f7fa fe86 	bl	80022ac <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e03b      	b.n	800762a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	4b20      	ldr	r3, [pc, #128]	@ (8007634 <HAL_RCC_ClockConfig+0x260>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d1ed      	bne.n	800759c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	4917      	ldr	r1, [pc, #92]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ea:	4b13      	ldr	r3, [pc, #76]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	490f      	ldr	r1, [pc, #60]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075fe:	f000 f825 	bl	800764c <HAL_RCC_GetSysClockFreq>
 8007602:	4602      	mov	r2, r0
 8007604:	4b0c      	ldr	r3, [pc, #48]	@ (8007638 <HAL_RCC_ClockConfig+0x264>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	091b      	lsrs	r3, r3, #4
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	490c      	ldr	r1, [pc, #48]	@ (8007640 <HAL_RCC_ClockConfig+0x26c>)
 8007610:	5ccb      	ldrb	r3, [r1, r3]
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	fa22 f303 	lsr.w	r3, r2, r3
 800761a:	4a0a      	ldr	r2, [pc, #40]	@ (8007644 <HAL_RCC_ClockConfig+0x270>)
 800761c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800761e:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <HAL_RCC_ClockConfig+0x274>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4618      	mov	r0, r3
 8007624:	f7fa fdf6 	bl	8002214 <HAL_InitTick>
 8007628:	4603      	mov	r3, r0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	40022000 	.word	0x40022000
 8007638:	40021000 	.word	0x40021000
 800763c:	04c4b400 	.word	0x04c4b400
 8007640:	0800de28 	.word	0x0800de28
 8007644:	20000004 	.word	0x20000004
 8007648:	20000008 	.word	0x20000008

0800764c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007652:	4b2c      	ldr	r3, [pc, #176]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 030c 	and.w	r3, r3, #12
 800765a:	2b04      	cmp	r3, #4
 800765c:	d102      	bne.n	8007664 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800765e:	4b2a      	ldr	r3, [pc, #168]	@ (8007708 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	e047      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007664:	4b27      	ldr	r3, [pc, #156]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 030c 	and.w	r3, r3, #12
 800766c:	2b08      	cmp	r3, #8
 800766e:	d102      	bne.n	8007676 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007670:	4b26      	ldr	r3, [pc, #152]	@ (800770c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	e03e      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007676:	4b23      	ldr	r3, [pc, #140]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 030c 	and.w	r3, r3, #12
 800767e:	2b0c      	cmp	r3, #12
 8007680:	d136      	bne.n	80076f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007682:	4b20      	ldr	r3, [pc, #128]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800768c:	4b1d      	ldr	r3, [pc, #116]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	3301      	adds	r3, #1
 8007698:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d10c      	bne.n	80076ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076a0:	4a1a      	ldr	r2, [pc, #104]	@ (800770c <HAL_RCC_GetSysClockFreq+0xc0>)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a8:	4a16      	ldr	r2, [pc, #88]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076aa:	68d2      	ldr	r2, [r2, #12]
 80076ac:	0a12      	lsrs	r2, r2, #8
 80076ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076b2:	fb02 f303 	mul.w	r3, r2, r3
 80076b6:	617b      	str	r3, [r7, #20]
      break;
 80076b8:	e00c      	b.n	80076d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076ba:	4a13      	ldr	r2, [pc, #76]	@ (8007708 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c2:	4a10      	ldr	r2, [pc, #64]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076c4:	68d2      	ldr	r2, [r2, #12]
 80076c6:	0a12      	lsrs	r2, r2, #8
 80076c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	617b      	str	r3, [r7, #20]
      break;
 80076d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	0e5b      	lsrs	r3, r3, #25
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	3301      	adds	r3, #1
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	e001      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80076f4:	693b      	ldr	r3, [r7, #16]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40021000 	.word	0x40021000
 8007708:	00f42400 	.word	0x00f42400
 800770c:	007a1200 	.word	0x007a1200

08007710 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007714:	4b03      	ldr	r3, [pc, #12]	@ (8007724 <HAL_RCC_GetHCLKFreq+0x14>)
 8007716:	681b      	ldr	r3, [r3, #0]
}
 8007718:	4618      	mov	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000004 	.word	0x20000004

08007728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800772c:	f7ff fff0 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8007730:	4602      	mov	r2, r0
 8007732:	4b06      	ldr	r3, [pc, #24]	@ (800774c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	0a1b      	lsrs	r3, r3, #8
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	4904      	ldr	r1, [pc, #16]	@ (8007750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800773e:	5ccb      	ldrb	r3, [r1, r3]
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007748:	4618      	mov	r0, r3
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40021000 	.word	0x40021000
 8007750:	0800de38 	.word	0x0800de38

08007754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007758:	f7ff ffda 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 800775c:	4602      	mov	r2, r0
 800775e:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	0adb      	lsrs	r3, r3, #11
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4904      	ldr	r1, [pc, #16]	@ (800777c <HAL_RCC_GetPCLK2Freq+0x28>)
 800776a:	5ccb      	ldrb	r3, [r1, r3]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007774:	4618      	mov	r0, r3
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40021000 	.word	0x40021000
 800777c:	0800de38 	.word	0x0800de38

08007780 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007786:	4b1e      	ldr	r3, [pc, #120]	@ (8007800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f003 0303 	and.w	r3, r3, #3
 800778e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007790:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	091b      	lsrs	r3, r3, #4
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	3301      	adds	r3, #1
 800779c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d10c      	bne.n	80077be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077a4:	4a17      	ldr	r2, [pc, #92]	@ (8007804 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ac:	4a14      	ldr	r2, [pc, #80]	@ (8007800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077ae:	68d2      	ldr	r2, [r2, #12]
 80077b0:	0a12      	lsrs	r2, r2, #8
 80077b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	617b      	str	r3, [r7, #20]
    break;
 80077bc:	e00c      	b.n	80077d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077be:	4a12      	ldr	r2, [pc, #72]	@ (8007808 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077c8:	68d2      	ldr	r2, [r2, #12]
 80077ca:	0a12      	lsrs	r2, r2, #8
 80077cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]
    break;
 80077d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077d8:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	0e5b      	lsrs	r3, r3, #25
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	3301      	adds	r3, #1
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80077f2:	687b      	ldr	r3, [r7, #4]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	40021000 	.word	0x40021000
 8007804:	007a1200 	.word	0x007a1200
 8007808:	00f42400 	.word	0x00f42400

0800780c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007814:	2300      	movs	r3, #0
 8007816:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007818:	2300      	movs	r3, #0
 800781a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8098 	beq.w	800795a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800782a:	2300      	movs	r3, #0
 800782c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800782e:	4b43      	ldr	r3, [pc, #268]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10d      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800783a:	4b40      	ldr	r3, [pc, #256]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800783c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800783e:	4a3f      	ldr	r2, [pc, #252]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007844:	6593      	str	r3, [r2, #88]	@ 0x58
 8007846:	4b3d      	ldr	r3, [pc, #244]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007852:	2301      	movs	r3, #1
 8007854:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007856:	4b3a      	ldr	r3, [pc, #232]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a39      	ldr	r2, [pc, #228]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800785c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007862:	f7fa fd23 	bl	80022ac <HAL_GetTick>
 8007866:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007868:	e009      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800786a:	f7fa fd1f 	bl	80022ac <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d902      	bls.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	74fb      	strb	r3, [r7, #19]
        break;
 800787c:	e005      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800787e:	4b30      	ldr	r3, [pc, #192]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0ef      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800788a:	7cfb      	ldrb	r3, [r7, #19]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d159      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007890:	4b2a      	ldr	r3, [pc, #168]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01e      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d019      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078ac:	4b23      	ldr	r3, [pc, #140]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078b8:	4b20      	ldr	r3, [pc, #128]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078be:	4a1f      	ldr	r2, [pc, #124]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078c8:	4b1c      	ldr	r3, [pc, #112]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ce:	4a1b      	ldr	r2, [pc, #108]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078d8:	4a18      	ldr	r2, [pc, #96]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ea:	f7fa fcdf 	bl	80022ac <HAL_GetTick>
 80078ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078f0:	e00b      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f2:	f7fa fcdb 	bl	80022ac <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007900:	4293      	cmp	r3, r2
 8007902:	d902      	bls.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	74fb      	strb	r3, [r7, #19]
            break;
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800790a:	4b0c      	ldr	r3, [pc, #48]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800790c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0ec      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007918:	7cfb      	ldrb	r3, [r7, #19]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800791e:	4b07      	ldr	r3, [pc, #28]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792c:	4903      	ldr	r1, [pc, #12]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800792e:	4313      	orrs	r3, r2
 8007930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007934:	e008      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007936:	7cfb      	ldrb	r3, [r7, #19]
 8007938:	74bb      	strb	r3, [r7, #18]
 800793a:	e005      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800793c:	40021000 	.word	0x40021000
 8007940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	7cfb      	ldrb	r3, [r7, #19]
 8007946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007948:	7c7b      	ldrb	r3, [r7, #17]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d105      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800794e:	4ba6      	ldr	r3, [pc, #664]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007952:	4aa5      	ldr	r2, [pc, #660]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007958:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007966:	4ba0      	ldr	r3, [pc, #640]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796c:	f023 0203 	bic.w	r2, r3, #3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	499c      	ldr	r1, [pc, #624]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007988:	4b97      	ldr	r3, [pc, #604]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800798a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800798e:	f023 020c 	bic.w	r2, r3, #12
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	4994      	ldr	r1, [pc, #592]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079aa:	4b8f      	ldr	r3, [pc, #572]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	498b      	ldr	r1, [pc, #556]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079cc:	4b86      	ldr	r3, [pc, #536]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	4983      	ldr	r1, [pc, #524]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079ee:	4b7e      	ldr	r3, [pc, #504]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	497a      	ldr	r1, [pc, #488]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a10:	4b75      	ldr	r3, [pc, #468]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	4972      	ldr	r1, [pc, #456]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a32:	4b6d      	ldr	r3, [pc, #436]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	4969      	ldr	r1, [pc, #420]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a54:	4b64      	ldr	r3, [pc, #400]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	4961      	ldr	r1, [pc, #388]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a76:	4b5c      	ldr	r3, [pc, #368]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	4958      	ldr	r1, [pc, #352]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d015      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a98:	4b53      	ldr	r3, [pc, #332]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa6:	4950      	ldr	r1, [pc, #320]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ab6:	d105      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	4a4a      	ldr	r2, [pc, #296]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ac2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d015      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ad0:	4b45      	ldr	r3, [pc, #276]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ade:	4942      	ldr	r1, [pc, #264]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aee:	d105      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007af0:	4b3d      	ldr	r3, [pc, #244]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	4a3c      	ldr	r2, [pc, #240]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007afa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d015      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b08:	4b37      	ldr	r3, [pc, #220]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	4934      	ldr	r1, [pc, #208]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b26:	d105      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b28:	4b2f      	ldr	r3, [pc, #188]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d015      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b40:	4b29      	ldr	r3, [pc, #164]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4e:	4926      	ldr	r1, [pc, #152]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b5e:	d105      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b60:	4b21      	ldr	r3, [pc, #132]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	4a20      	ldr	r2, [pc, #128]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d015      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b86:	4918      	ldr	r1, [pc, #96]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b96:	d105      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b98:	4b13      	ldr	r3, [pc, #76]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	4a12      	ldr	r2, [pc, #72]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ba2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d015      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bbe:	490a      	ldr	r1, [pc, #40]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bce:	d105      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bd0:	4b05      	ldr	r3, [pc, #20]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	4a04      	ldr	r2, [pc, #16]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007bdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40021000 	.word	0x40021000

08007bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e049      	b.n	8007c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fa f978 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f001 f808 	bl	8008c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e049      	b.n	8007d40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f841 	bl	8007d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f000 ffb1 	bl	8008c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	bf0c      	ite	eq
 8007d80:	2301      	moveq	r3, #1
 8007d82:	2300      	movne	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	e03c      	b.n	8007e02 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d109      	bne.n	8007da2 <HAL_TIM_PWM_Start_DMA+0x46>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	bf0c      	ite	eq
 8007d9a:	2301      	moveq	r3, #1
 8007d9c:	2300      	movne	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	e02f      	b.n	8007e02 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d109      	bne.n	8007dbc <HAL_TIM_PWM_Start_DMA+0x60>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	e022      	b.n	8007e02 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b0c      	cmp	r3, #12
 8007dc0:	d109      	bne.n	8007dd6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	bf0c      	ite	eq
 8007dce:	2301      	moveq	r3, #1
 8007dd0:	2300      	movne	r3, #0
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	e015      	b.n	8007e02 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b10      	cmp	r3, #16
 8007dda:	d109      	bne.n	8007df0 <HAL_TIM_PWM_Start_DMA+0x94>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	e008      	b.n	8007e02 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007e06:	2302      	movs	r3, #2
 8007e08:	e1a6      	b.n	8008158 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2301      	moveq	r3, #1
 8007e1e:	2300      	movne	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	e03c      	b.n	8007e9e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d109      	bne.n	8007e3e <HAL_TIM_PWM_Start_DMA+0xe2>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	bf0c      	ite	eq
 8007e36:	2301      	moveq	r3, #1
 8007e38:	2300      	movne	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	e02f      	b.n	8007e9e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d109      	bne.n	8007e58 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	bf0c      	ite	eq
 8007e50:	2301      	moveq	r3, #1
 8007e52:	2300      	movne	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e022      	b.n	8007e9e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b0c      	cmp	r3, #12
 8007e5c:	d109      	bne.n	8007e72 <HAL_TIM_PWM_Start_DMA+0x116>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	bf0c      	ite	eq
 8007e6a:	2301      	moveq	r3, #1
 8007e6c:	2300      	movne	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	e015      	b.n	8007e9e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d109      	bne.n	8007e8c <HAL_TIM_PWM_Start_DMA+0x130>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	e008      	b.n	8007e9e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	bf0c      	ite	eq
 8007e98:	2301      	moveq	r3, #1
 8007e9a:	2300      	movne	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d034      	beq.n	8007f0c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_TIM_PWM_Start_DMA+0x152>
 8007ea8:	887b      	ldrh	r3, [r7, #2]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e152      	b.n	8008158 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_PWM_Start_DMA+0x166>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ec0:	e026      	b.n	8007f10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIM_PWM_Start_DMA+0x176>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ed0:	e01e      	b.n	8007f10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_PWM_Start_DMA+0x186>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ee0:	e016      	b.n	8007f10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b0c      	cmp	r3, #12
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIM_PWM_Start_DMA+0x196>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ef0:	e00e      	b.n	8007f10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f00:	e006      	b.n	8007f10 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f0a:	e001      	b.n	8007f10 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e123      	b.n	8008158 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b0c      	cmp	r3, #12
 8007f14:	f200 80ae 	bhi.w	8008074 <HAL_TIM_PWM_Start_DMA+0x318>
 8007f18:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f55 	.word	0x08007f55
 8007f24:	08008075 	.word	0x08008075
 8007f28:	08008075 	.word	0x08008075
 8007f2c:	08008075 	.word	0x08008075
 8007f30:	08007f9d 	.word	0x08007f9d
 8007f34:	08008075 	.word	0x08008075
 8007f38:	08008075 	.word	0x08008075
 8007f3c:	08008075 	.word	0x08008075
 8007f40:	08007fe5 	.word	0x08007fe5
 8007f44:	08008075 	.word	0x08008075
 8007f48:	08008075 	.word	0x08008075
 8007f4c:	08008075 	.word	0x08008075
 8007f50:	0800802d 	.word	0x0800802d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	4a81      	ldr	r2, [pc, #516]	@ (8008160 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	4a80      	ldr	r2, [pc, #512]	@ (8008164 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007f62:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	4a7f      	ldr	r2, [pc, #508]	@ (8008168 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007f6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3334      	adds	r3, #52	@ 0x34
 8007f78:	461a      	mov	r2, r3
 8007f7a:	887b      	ldrh	r3, [r7, #2]
 8007f7c:	f7fc f904 	bl	8004188 <HAL_DMA_Start_IT>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e0e6      	b.n	8008158 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f98:	60da      	str	r2, [r3, #12]
      break;
 8007f9a:	e06e      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	4a6f      	ldr	r2, [pc, #444]	@ (8008160 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8008164 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007faa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	4a6d      	ldr	r2, [pc, #436]	@ (8008168 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007fb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3338      	adds	r3, #56	@ 0x38
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	f7fc f8e0 	bl	8004188 <HAL_DMA_Start_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e0c2      	b.n	8008158 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fe0:	60da      	str	r2, [r3, #12]
      break;
 8007fe2:	e04a      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8008160 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007fea:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	4a5c      	ldr	r2, [pc, #368]	@ (8008164 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007ff2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	4a5b      	ldr	r2, [pc, #364]	@ (8008168 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007ffa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	333c      	adds	r3, #60	@ 0x3c
 8008008:	461a      	mov	r2, r3
 800800a:	887b      	ldrh	r3, [r7, #2]
 800800c:	f7fc f8bc 	bl	8004188 <HAL_DMA_Start_IT>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e09e      	b.n	8008158 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008028:	60da      	str	r2, [r3, #12]
      break;
 800802a:	e026      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008030:	4a4b      	ldr	r2, [pc, #300]	@ (8008160 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008032:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008038:	4a4a      	ldr	r2, [pc, #296]	@ (8008164 <HAL_TIM_PWM_Start_DMA+0x408>)
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008040:	4a49      	ldr	r2, [pc, #292]	@ (8008168 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008042:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3340      	adds	r3, #64	@ 0x40
 8008050:	461a      	mov	r2, r3
 8008052:	887b      	ldrh	r3, [r7, #2]
 8008054:	f7fc f898 	bl	8004188 <HAL_DMA_Start_IT>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e07a      	b.n	8008158 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008070:	60da      	str	r2, [r3, #12]
      break;
 8008072:	e002      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
      break;
 8008078:	bf00      	nop
  }

  if (status == HAL_OK)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d16a      	bne.n	8008156 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2201      	movs	r2, #1
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	4618      	mov	r0, r3
 800808a:	f001 fa07 	bl	800949c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a36      	ldr	r2, [pc, #216]	@ (800816c <HAL_TIM_PWM_Start_DMA+0x410>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d013      	beq.n	80080c0 <HAL_TIM_PWM_Start_DMA+0x364>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a34      	ldr	r2, [pc, #208]	@ (8008170 <HAL_TIM_PWM_Start_DMA+0x414>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00e      	beq.n	80080c0 <HAL_TIM_PWM_Start_DMA+0x364>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a33      	ldr	r2, [pc, #204]	@ (8008174 <HAL_TIM_PWM_Start_DMA+0x418>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d009      	beq.n	80080c0 <HAL_TIM_PWM_Start_DMA+0x364>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a31      	ldr	r2, [pc, #196]	@ (8008178 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d004      	beq.n	80080c0 <HAL_TIM_PWM_Start_DMA+0x364>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a30      	ldr	r2, [pc, #192]	@ (800817c <HAL_TIM_PWM_Start_DMA+0x420>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d101      	bne.n	80080c4 <HAL_TIM_PWM_Start_DMA+0x368>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e000      	b.n	80080c6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80080c4:	2300      	movs	r3, #0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a23      	ldr	r2, [pc, #140]	@ (800816c <HAL_TIM_PWM_Start_DMA+0x410>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d018      	beq.n	8008116 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ec:	d013      	beq.n	8008116 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a23      	ldr	r2, [pc, #140]	@ (8008180 <HAL_TIM_PWM_Start_DMA+0x424>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00e      	beq.n	8008116 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a21      	ldr	r2, [pc, #132]	@ (8008184 <HAL_TIM_PWM_Start_DMA+0x428>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d009      	beq.n	8008116 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1a      	ldr	r2, [pc, #104]	@ (8008170 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d004      	beq.n	8008116 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a18      	ldr	r2, [pc, #96]	@ (8008174 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d115      	bne.n	8008142 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800811e:	4013      	ands	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b06      	cmp	r3, #6
 8008126:	d015      	beq.n	8008154 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800812e:	d011      	beq.n	8008154 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008140:	e008      	b.n	8008154 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0201 	orr.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e000      	b.n	8008156 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008154:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008156:	7dfb      	ldrb	r3, [r7, #23]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	08008b2f 	.word	0x08008b2f
 8008164:	08008bd7 	.word	0x08008bd7
 8008168:	08008a9d 	.word	0x08008a9d
 800816c:	40012c00 	.word	0x40012c00
 8008170:	40013400 	.word	0x40013400
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800
 8008180:	40000400 	.word	0x40000400
 8008184:	40000800 	.word	0x40000800
 8008188:	00010007 	.word	0x00010007

0800818c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b0c      	cmp	r3, #12
 800819e:	d855      	bhi.n	800824c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80081a0:	a201      	add	r2, pc, #4	@ (adr r2, 80081a8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081dd 	.word	0x080081dd
 80081ac:	0800824d 	.word	0x0800824d
 80081b0:	0800824d 	.word	0x0800824d
 80081b4:	0800824d 	.word	0x0800824d
 80081b8:	080081f9 	.word	0x080081f9
 80081bc:	0800824d 	.word	0x0800824d
 80081c0:	0800824d 	.word	0x0800824d
 80081c4:	0800824d 	.word	0x0800824d
 80081c8:	08008215 	.word	0x08008215
 80081cc:	0800824d 	.word	0x0800824d
 80081d0:	0800824d 	.word	0x0800824d
 80081d4:	0800824d 	.word	0x0800824d
 80081d8:	08008231 	.word	0x08008231
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80081ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fc f844 	bl	800427e <HAL_DMA_Abort_IT>
      break;
 80081f6:	e02c      	b.n	8008252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008206:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820c:	4618      	mov	r0, r3
 800820e:	f7fc f836 	bl	800427e <HAL_DMA_Abort_IT>
      break;
 8008212:	e01e      	b.n	8008252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008222:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	4618      	mov	r0, r3
 800822a:	f7fc f828 	bl	800427e <HAL_DMA_Abort_IT>
      break;
 800822e:	e010      	b.n	8008252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800823e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008244:	4618      	mov	r0, r3
 8008246:	f7fc f81a 	bl	800427e <HAL_DMA_Abort_IT>
      break;
 800824a:	e002      	b.n	8008252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
      break;
 8008250:	bf00      	nop
  }

  if (status == HAL_OK)
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	2b00      	cmp	r3, #0
 8008256:	f040 8081 	bne.w	800835c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2200      	movs	r2, #0
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	4618      	mov	r0, r3
 8008264:	f001 f91a 	bl	800949c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a3e      	ldr	r2, [pc, #248]	@ (8008368 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d013      	beq.n	800829a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a3d      	ldr	r2, [pc, #244]	@ (800836c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00e      	beq.n	800829a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a3b      	ldr	r2, [pc, #236]	@ (8008370 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d009      	beq.n	800829a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a3a      	ldr	r2, [pc, #232]	@ (8008374 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d004      	beq.n	800829a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a38      	ldr	r2, [pc, #224]	@ (8008378 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d101      	bne.n	800829e <HAL_TIM_PWM_Stop_DMA+0x112>
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <HAL_TIM_PWM_Stop_DMA+0x114>
 800829e:	2300      	movs	r3, #0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d017      	beq.n	80082d4 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6a1a      	ldr	r2, [r3, #32]
 80082aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80082ae:	4013      	ands	r3, r2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10f      	bne.n	80082d4 <HAL_TIM_PWM_Stop_DMA+0x148>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6a1a      	ldr	r2, [r3, #32]
 80082ba:	f244 4344 	movw	r3, #17476	@ 0x4444
 80082be:	4013      	ands	r3, r2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d107      	bne.n	80082d4 <HAL_TIM_PWM_Stop_DMA+0x148>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a1a      	ldr	r2, [r3, #32]
 80082da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80082de:	4013      	ands	r3, r2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10f      	bne.n	8008304 <HAL_TIM_PWM_Stop_DMA+0x178>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6a1a      	ldr	r2, [r3, #32]
 80082ea:	f244 4344 	movw	r3, #17476	@ 0x4444
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d107      	bne.n	8008304 <HAL_TIM_PWM_Stop_DMA+0x178>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0201 	bic.w	r2, r2, #1
 8008302:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d104      	bne.n	8008314 <HAL_TIM_PWM_Stop_DMA+0x188>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008312:	e023      	b.n	800835c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b04      	cmp	r3, #4
 8008318:	d104      	bne.n	8008324 <HAL_TIM_PWM_Stop_DMA+0x198>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008322:	e01b      	b.n	800835c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b08      	cmp	r3, #8
 8008328:	d104      	bne.n	8008334 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008332:	e013      	b.n	800835c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b0c      	cmp	r3, #12
 8008338:	d104      	bne.n	8008344 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008342:	e00b      	b.n	800835c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b10      	cmp	r3, #16
 8008348:	d104      	bne.n	8008354 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008352:	e003      	b.n	800835c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40013400 	.word	0x40013400
 8008370:	40014000 	.word	0x40014000
 8008374:	40014400 	.word	0x40014400
 8008378:	40014800 	.word	0x40014800

0800837c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d020      	beq.n	80083e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01b      	beq.n	80083e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0202 	mvn.w	r2, #2
 80083b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fb40 	bl	8008a4c <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fb32 	bl	8008a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7f9 fc3b 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d020      	beq.n	800842c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01b      	beq.n	800842c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0204 	mvn.w	r2, #4
 80083fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2202      	movs	r2, #2
 8008402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb1a 	bl	8008a4c <HAL_TIM_IC_CaptureCallback>
 8008418:	e005      	b.n	8008426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fb0c 	bl	8008a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7f9 fc15 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 0308 	and.w	r3, r3, #8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d020      	beq.n	8008478 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f003 0308 	and.w	r3, r3, #8
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01b      	beq.n	8008478 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0208 	mvn.w	r2, #8
 8008448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2204      	movs	r2, #4
 800844e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 faf4 	bl	8008a4c <HAL_TIM_IC_CaptureCallback>
 8008464:	e005      	b.n	8008472 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fae6 	bl	8008a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7f9 fbef 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b00      	cmp	r3, #0
 8008480:	d020      	beq.n	80084c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01b      	beq.n	80084c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0210 	mvn.w	r2, #16
 8008494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2208      	movs	r2, #8
 800849a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 face 	bl	8008a4c <HAL_TIM_IC_CaptureCallback>
 80084b0:	e005      	b.n	80084be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fac0 	bl	8008a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7f9 fbc9 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00c      	beq.n	80084e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f06f 0201 	mvn.w	r2, #1
 80084e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7f8 ffe6 	bl	80014b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d104      	bne.n	80084fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00c      	beq.n	8008516 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800850e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 f875 	bl	8009600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00c      	beq.n	800853a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f86d 	bl	8009614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00c      	beq.n	800855e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fa8b 	bl	8008a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00c      	beq.n	8008582 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d007      	beq.n	8008582 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f06f 0220 	mvn.w	r2, #32
 800857a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 f835 	bl	80095ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00c      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800859e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f841 	bl	8009628 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00c      	beq.n	80085ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80085c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f839 	bl	800963c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80085e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f831 	bl	8009650 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800860a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f829 	bl	8009664 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008636:	2302      	movs	r3, #2
 8008638:	e0ff      	b.n	800883a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b14      	cmp	r3, #20
 8008646:	f200 80f0 	bhi.w	800882a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800864a:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	080086a5 	.word	0x080086a5
 8008654:	0800882b 	.word	0x0800882b
 8008658:	0800882b 	.word	0x0800882b
 800865c:	0800882b 	.word	0x0800882b
 8008660:	080086e5 	.word	0x080086e5
 8008664:	0800882b 	.word	0x0800882b
 8008668:	0800882b 	.word	0x0800882b
 800866c:	0800882b 	.word	0x0800882b
 8008670:	08008727 	.word	0x08008727
 8008674:	0800882b 	.word	0x0800882b
 8008678:	0800882b 	.word	0x0800882b
 800867c:	0800882b 	.word	0x0800882b
 8008680:	08008767 	.word	0x08008767
 8008684:	0800882b 	.word	0x0800882b
 8008688:	0800882b 	.word	0x0800882b
 800868c:	0800882b 	.word	0x0800882b
 8008690:	080087a9 	.word	0x080087a9
 8008694:	0800882b 	.word	0x0800882b
 8008698:	0800882b 	.word	0x0800882b
 800869c:	0800882b 	.word	0x0800882b
 80086a0:	080087e9 	.word	0x080087e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fb64 	bl	8008d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f042 0208 	orr.w	r2, r2, #8
 80086be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0204 	bic.w	r2, r2, #4
 80086ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6999      	ldr	r1, [r3, #24]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	691a      	ldr	r2, [r3, #16]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	619a      	str	r2, [r3, #24]
      break;
 80086e2:	e0a5      	b.n	8008830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fbd4 	bl	8008e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800870e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6999      	ldr	r1, [r3, #24]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	021a      	lsls	r2, r3, #8
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	619a      	str	r2, [r3, #24]
      break;
 8008724:	e084      	b.n	8008830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 fc3d 	bl	8008fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f042 0208 	orr.w	r2, r2, #8
 8008740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 0204 	bic.w	r2, r2, #4
 8008750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69d9      	ldr	r1, [r3, #28]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	691a      	ldr	r2, [r3, #16]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	61da      	str	r2, [r3, #28]
      break;
 8008764:	e064      	b.n	8008830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fca5 	bl	80090bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69da      	ldr	r2, [r3, #28]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69da      	ldr	r2, [r3, #28]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69d9      	ldr	r1, [r3, #28]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	021a      	lsls	r2, r3, #8
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	61da      	str	r2, [r3, #28]
      break;
 80087a6:	e043      	b.n	8008830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fd0e 	bl	80091d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0208 	orr.w	r2, r2, #8
 80087c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0204 	bic.w	r2, r2, #4
 80087d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80087e6:	e023      	b.n	8008830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fd52 	bl	8009298 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008802:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008812:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	021a      	lsls	r2, r3, #8
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008828:	e002      	b.n	8008830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
      break;
 800882e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop

08008844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d101      	bne.n	8008860 <HAL_TIM_ConfigClockSource+0x1c>
 800885c:	2302      	movs	r3, #2
 800885e:	e0de      	b.n	8008a1e <HAL_TIM_ConfigClockSource+0x1da>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800887e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800888a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a63      	ldr	r2, [pc, #396]	@ (8008a28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800889a:	4293      	cmp	r3, r2
 800889c:	f000 80a9 	beq.w	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80088a0:	4a61      	ldr	r2, [pc, #388]	@ (8008a28 <HAL_TIM_ConfigClockSource+0x1e4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	f200 80ae 	bhi.w	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80088a8:	4a60      	ldr	r2, [pc, #384]	@ (8008a2c <HAL_TIM_ConfigClockSource+0x1e8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	f000 80a1 	beq.w	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80088b0:	4a5e      	ldr	r2, [pc, #376]	@ (8008a2c <HAL_TIM_ConfigClockSource+0x1e8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	f200 80a6 	bhi.w	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80088b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008a30 <HAL_TIM_ConfigClockSource+0x1ec>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	f000 8099 	beq.w	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80088c0:	4a5b      	ldr	r2, [pc, #364]	@ (8008a30 <HAL_TIM_ConfigClockSource+0x1ec>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	f200 809e 	bhi.w	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80088c8:	4a5a      	ldr	r2, [pc, #360]	@ (8008a34 <HAL_TIM_ConfigClockSource+0x1f0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	f000 8091 	beq.w	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80088d0:	4a58      	ldr	r2, [pc, #352]	@ (8008a34 <HAL_TIM_ConfigClockSource+0x1f0>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	f200 8096 	bhi.w	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80088d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80088dc:	f000 8089 	beq.w	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80088e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80088e4:	f200 808e 	bhi.w	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80088e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ec:	d03e      	beq.n	800896c <HAL_TIM_ConfigClockSource+0x128>
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f2:	f200 8087 	bhi.w	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 80088f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088fa:	f000 8086 	beq.w	8008a0a <HAL_TIM_ConfigClockSource+0x1c6>
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008902:	d87f      	bhi.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8008904:	2b70      	cmp	r3, #112	@ 0x70
 8008906:	d01a      	beq.n	800893e <HAL_TIM_ConfigClockSource+0xfa>
 8008908:	2b70      	cmp	r3, #112	@ 0x70
 800890a:	d87b      	bhi.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 800890c:	2b60      	cmp	r3, #96	@ 0x60
 800890e:	d050      	beq.n	80089b2 <HAL_TIM_ConfigClockSource+0x16e>
 8008910:	2b60      	cmp	r3, #96	@ 0x60
 8008912:	d877      	bhi.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8008914:	2b50      	cmp	r3, #80	@ 0x50
 8008916:	d03c      	beq.n	8008992 <HAL_TIM_ConfigClockSource+0x14e>
 8008918:	2b50      	cmp	r3, #80	@ 0x50
 800891a:	d873      	bhi.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 800891c:	2b40      	cmp	r3, #64	@ 0x40
 800891e:	d058      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x18e>
 8008920:	2b40      	cmp	r3, #64	@ 0x40
 8008922:	d86f      	bhi.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8008924:	2b30      	cmp	r3, #48	@ 0x30
 8008926:	d064      	beq.n	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008928:	2b30      	cmp	r3, #48	@ 0x30
 800892a:	d86b      	bhi.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 800892c:	2b20      	cmp	r3, #32
 800892e:	d060      	beq.n	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008930:	2b20      	cmp	r3, #32
 8008932:	d867      	bhi.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d05c      	beq.n	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008938:	2b10      	cmp	r3, #16
 800893a:	d05a      	beq.n	80089f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800893c:	e062      	b.n	8008a04 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800894e:	f000 fd85 	bl	800945c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	609a      	str	r2, [r3, #8]
      break;
 800896a:	e04f      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800897c:	f000 fd6e 	bl	800945c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800898e:	609a      	str	r2, [r3, #8]
      break;
 8008990:	e03c      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800899e:	461a      	mov	r2, r3
 80089a0:	f000 fce0 	bl	8009364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2150      	movs	r1, #80	@ 0x50
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fd39 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 80089b0:	e02c      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089be:	461a      	mov	r2, r3
 80089c0:	f000 fcff 	bl	80093c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2160      	movs	r1, #96	@ 0x60
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fd29 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 80089d0:	e01c      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089de:	461a      	mov	r2, r3
 80089e0:	f000 fcc0 	bl	8009364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2140      	movs	r1, #64	@ 0x40
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 fd19 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 80089f0:	e00c      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f000 fd10 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 8008a02:	e003      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	73fb      	strb	r3, [r7, #15]
      break;
 8008a08:	e000      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	00100070 	.word	0x00100070
 8008a2c:	00100040 	.word	0x00100040
 8008a30:	00100030 	.word	0x00100030
 8008a34:	00100020 	.word	0x00100020

08008a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d107      	bne.n	8008ac4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ac2:	e02a      	b.n	8008b1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d107      	bne.n	8008ade <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008adc:	e01d      	b.n	8008b1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d107      	bne.n	8008af8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2204      	movs	r2, #4
 8008aec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008af6:	e010      	b.n	8008b1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d107      	bne.n	8008b12 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2208      	movs	r2, #8
 8008b06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b10:	e003      	b.n	8008b1a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7ff ffb4 	bl	8008a88 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	771a      	strb	r2, [r3, #28]
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d10b      	bne.n	8008b5e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d136      	bne.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b5c:	e031      	b.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d10b      	bne.n	8008b80 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d125      	bne.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b7e:	e020      	b.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d10b      	bne.n	8008ba2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d114      	bne.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ba0:	e00f      	b.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d10a      	bne.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2208      	movs	r2, #8
 8008bb0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d103      	bne.n	8008bc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f7f9 f844 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	771a      	strb	r2, [r3, #28]
}
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d103      	bne.n	8008bf6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	771a      	strb	r2, [r3, #28]
 8008bf4:	e019      	b.n	8008c2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d103      	bne.n	8008c08 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2202      	movs	r2, #2
 8008c04:	771a      	strb	r2, [r3, #28]
 8008c06:	e010      	b.n	8008c2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d103      	bne.n	8008c1a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2204      	movs	r2, #4
 8008c16:	771a      	strb	r2, [r3, #28]
 8008c18:	e007      	b.n	8008c2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d102      	bne.n	8008c2a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2208      	movs	r2, #8
 8008c28:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7ff ff18 	bl	8008a60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	771a      	strb	r2, [r3, #28]
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a42      	ldr	r2, [pc, #264]	@ (8008d5c <TIM_Base_SetConfig+0x11c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00f      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5e:	d00b      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a3f      	ldr	r2, [pc, #252]	@ (8008d60 <TIM_Base_SetConfig+0x120>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d007      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8008d64 <TIM_Base_SetConfig+0x124>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d003      	beq.n	8008c78 <TIM_Base_SetConfig+0x38>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a3d      	ldr	r2, [pc, #244]	@ (8008d68 <TIM_Base_SetConfig+0x128>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d108      	bne.n	8008c8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a33      	ldr	r2, [pc, #204]	@ (8008d5c <TIM_Base_SetConfig+0x11c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d01b      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c98:	d017      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a30      	ldr	r2, [pc, #192]	@ (8008d60 <TIM_Base_SetConfig+0x120>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d013      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8008d64 <TIM_Base_SetConfig+0x124>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00f      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a2e      	ldr	r2, [pc, #184]	@ (8008d68 <TIM_Base_SetConfig+0x128>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00b      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8008d6c <TIM_Base_SetConfig+0x12c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d007      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8008d70 <TIM_Base_SetConfig+0x130>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d003      	beq.n	8008cca <TIM_Base_SetConfig+0x8a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8008d74 <TIM_Base_SetConfig+0x134>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d108      	bne.n	8008cdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a16      	ldr	r2, [pc, #88]	@ (8008d5c <TIM_Base_SetConfig+0x11c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00f      	beq.n	8008d28 <TIM_Base_SetConfig+0xe8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a17      	ldr	r2, [pc, #92]	@ (8008d68 <TIM_Base_SetConfig+0x128>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00b      	beq.n	8008d28 <TIM_Base_SetConfig+0xe8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a16      	ldr	r2, [pc, #88]	@ (8008d6c <TIM_Base_SetConfig+0x12c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d007      	beq.n	8008d28 <TIM_Base_SetConfig+0xe8>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	@ (8008d70 <TIM_Base_SetConfig+0x130>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d003      	beq.n	8008d28 <TIM_Base_SetConfig+0xe8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a14      	ldr	r2, [pc, #80]	@ (8008d74 <TIM_Base_SetConfig+0x134>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d103      	bne.n	8008d30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	691a      	ldr	r2, [r3, #16]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d105      	bne.n	8008d4e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f023 0201 	bic.w	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	611a      	str	r2, [r3, #16]
  }
}
 8008d4e:	bf00      	nop
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40012c00 	.word	0x40012c00
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40013400 	.word	0x40013400
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40014400 	.word	0x40014400
 8008d74:	40014800 	.word	0x40014800

08008d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	f023 0201 	bic.w	r2, r3, #1
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 0302 	bic.w	r3, r3, #2
 8008dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8008e84 <TIM_OC1_SetConfig+0x10c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00f      	beq.n	8008df8 <TIM_OC1_SetConfig+0x80>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a2b      	ldr	r2, [pc, #172]	@ (8008e88 <TIM_OC1_SetConfig+0x110>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00b      	beq.n	8008df8 <TIM_OC1_SetConfig+0x80>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e8c <TIM_OC1_SetConfig+0x114>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d007      	beq.n	8008df8 <TIM_OC1_SetConfig+0x80>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a29      	ldr	r2, [pc, #164]	@ (8008e90 <TIM_OC1_SetConfig+0x118>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d003      	beq.n	8008df8 <TIM_OC1_SetConfig+0x80>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a28      	ldr	r2, [pc, #160]	@ (8008e94 <TIM_OC1_SetConfig+0x11c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d10c      	bne.n	8008e12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f023 0308 	bic.w	r3, r3, #8
 8008dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f023 0304 	bic.w	r3, r3, #4
 8008e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1b      	ldr	r2, [pc, #108]	@ (8008e84 <TIM_OC1_SetConfig+0x10c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00f      	beq.n	8008e3a <TIM_OC1_SetConfig+0xc2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008e88 <TIM_OC1_SetConfig+0x110>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00b      	beq.n	8008e3a <TIM_OC1_SetConfig+0xc2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a19      	ldr	r2, [pc, #100]	@ (8008e8c <TIM_OC1_SetConfig+0x114>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d007      	beq.n	8008e3a <TIM_OC1_SetConfig+0xc2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a18      	ldr	r2, [pc, #96]	@ (8008e90 <TIM_OC1_SetConfig+0x118>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d003      	beq.n	8008e3a <TIM_OC1_SetConfig+0xc2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a17      	ldr	r2, [pc, #92]	@ (8008e94 <TIM_OC1_SetConfig+0x11c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d111      	bne.n	8008e5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	621a      	str	r2, [r3, #32]
}
 8008e78:	bf00      	nop
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	40012c00 	.word	0x40012c00
 8008e88:	40013400 	.word	0x40013400
 8008e8c:	40014000 	.word	0x40014000
 8008e90:	40014400 	.word	0x40014400
 8008e94:	40014800 	.word	0x40014800

08008e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	f023 0210 	bic.w	r2, r3, #16
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	021b      	lsls	r3, r3, #8
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f023 0320 	bic.w	r3, r3, #32
 8008ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a28      	ldr	r2, [pc, #160]	@ (8008f98 <TIM_OC2_SetConfig+0x100>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d003      	beq.n	8008f04 <TIM_OC2_SetConfig+0x6c>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a27      	ldr	r2, [pc, #156]	@ (8008f9c <TIM_OC2_SetConfig+0x104>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d10d      	bne.n	8008f20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a1d      	ldr	r2, [pc, #116]	@ (8008f98 <TIM_OC2_SetConfig+0x100>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d00f      	beq.n	8008f48 <TIM_OC2_SetConfig+0xb0>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008f9c <TIM_OC2_SetConfig+0x104>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00b      	beq.n	8008f48 <TIM_OC2_SetConfig+0xb0>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1b      	ldr	r2, [pc, #108]	@ (8008fa0 <TIM_OC2_SetConfig+0x108>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d007      	beq.n	8008f48 <TIM_OC2_SetConfig+0xb0>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fa4 <TIM_OC2_SetConfig+0x10c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d003      	beq.n	8008f48 <TIM_OC2_SetConfig+0xb0>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a19      	ldr	r2, [pc, #100]	@ (8008fa8 <TIM_OC2_SetConfig+0x110>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d113      	bne.n	8008f70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	621a      	str	r2, [r3, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40012c00 	.word	0x40012c00
 8008f9c:	40013400 	.word	0x40013400
 8008fa0:	40014000 	.word	0x40014000
 8008fa4:	40014400 	.word	0x40014400
 8008fa8:	40014800 	.word	0x40014800

08008fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a27      	ldr	r2, [pc, #156]	@ (80090a8 <TIM_OC3_SetConfig+0xfc>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d003      	beq.n	8009016 <TIM_OC3_SetConfig+0x6a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a26      	ldr	r2, [pc, #152]	@ (80090ac <TIM_OC3_SetConfig+0x100>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d10d      	bne.n	8009032 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800901c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a1c      	ldr	r2, [pc, #112]	@ (80090a8 <TIM_OC3_SetConfig+0xfc>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00f      	beq.n	800905a <TIM_OC3_SetConfig+0xae>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1b      	ldr	r2, [pc, #108]	@ (80090ac <TIM_OC3_SetConfig+0x100>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00b      	beq.n	800905a <TIM_OC3_SetConfig+0xae>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a1a      	ldr	r2, [pc, #104]	@ (80090b0 <TIM_OC3_SetConfig+0x104>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d007      	beq.n	800905a <TIM_OC3_SetConfig+0xae>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a19      	ldr	r2, [pc, #100]	@ (80090b4 <TIM_OC3_SetConfig+0x108>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_OC3_SetConfig+0xae>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a18      	ldr	r2, [pc, #96]	@ (80090b8 <TIM_OC3_SetConfig+0x10c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d113      	bne.n	8009082 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	4313      	orrs	r3, r2
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	621a      	str	r2, [r3, #32]
}
 800909c:	bf00      	nop
 800909e:	371c      	adds	r7, #28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	40012c00 	.word	0x40012c00
 80090ac:	40013400 	.word	0x40013400
 80090b0:	40014000 	.word	0x40014000
 80090b4:	40014400 	.word	0x40014400
 80090b8:	40014800 	.word	0x40014800

080090bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800910a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	031b      	lsls	r3, r3, #12
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a28      	ldr	r2, [pc, #160]	@ (80091bc <TIM_OC4_SetConfig+0x100>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <TIM_OC4_SetConfig+0x6c>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a27      	ldr	r2, [pc, #156]	@ (80091c0 <TIM_OC4_SetConfig+0x104>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d10d      	bne.n	8009144 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800912e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	031b      	lsls	r3, r3, #12
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	4313      	orrs	r3, r2
 800913a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009142:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a1d      	ldr	r2, [pc, #116]	@ (80091bc <TIM_OC4_SetConfig+0x100>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00f      	beq.n	800916c <TIM_OC4_SetConfig+0xb0>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a1c      	ldr	r2, [pc, #112]	@ (80091c0 <TIM_OC4_SetConfig+0x104>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00b      	beq.n	800916c <TIM_OC4_SetConfig+0xb0>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a1b      	ldr	r2, [pc, #108]	@ (80091c4 <TIM_OC4_SetConfig+0x108>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d007      	beq.n	800916c <TIM_OC4_SetConfig+0xb0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a1a      	ldr	r2, [pc, #104]	@ (80091c8 <TIM_OC4_SetConfig+0x10c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d003      	beq.n	800916c <TIM_OC4_SetConfig+0xb0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a19      	ldr	r2, [pc, #100]	@ (80091cc <TIM_OC4_SetConfig+0x110>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d113      	bne.n	8009194 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009172:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800917a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	019b      	lsls	r3, r3, #6
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	019b      	lsls	r3, r3, #6
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4313      	orrs	r3, r2
 8009192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40013400 	.word	0x40013400
 80091c4:	40014000 	.word	0x40014000
 80091c8:	40014400 	.word	0x40014400
 80091cc:	40014800 	.word	0x40014800

080091d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	4313      	orrs	r3, r2
 8009220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a17      	ldr	r2, [pc, #92]	@ (8009284 <TIM_OC5_SetConfig+0xb4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d00f      	beq.n	800924a <TIM_OC5_SetConfig+0x7a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a16      	ldr	r2, [pc, #88]	@ (8009288 <TIM_OC5_SetConfig+0xb8>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00b      	beq.n	800924a <TIM_OC5_SetConfig+0x7a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a15      	ldr	r2, [pc, #84]	@ (800928c <TIM_OC5_SetConfig+0xbc>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d007      	beq.n	800924a <TIM_OC5_SetConfig+0x7a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a14      	ldr	r2, [pc, #80]	@ (8009290 <TIM_OC5_SetConfig+0xc0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d003      	beq.n	800924a <TIM_OC5_SetConfig+0x7a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a13      	ldr	r2, [pc, #76]	@ (8009294 <TIM_OC5_SetConfig+0xc4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d109      	bne.n	800925e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	621a      	str	r2, [r3, #32]
}
 8009278:	bf00      	nop
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	40012c00 	.word	0x40012c00
 8009288:	40013400 	.word	0x40013400
 800928c:	40014000 	.word	0x40014000
 8009290:	40014400 	.word	0x40014400
 8009294:	40014800 	.word	0x40014800

08009298 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	051b      	lsls	r3, r3, #20
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a18      	ldr	r2, [pc, #96]	@ (8009350 <TIM_OC6_SetConfig+0xb8>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00f      	beq.n	8009314 <TIM_OC6_SetConfig+0x7c>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a17      	ldr	r2, [pc, #92]	@ (8009354 <TIM_OC6_SetConfig+0xbc>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00b      	beq.n	8009314 <TIM_OC6_SetConfig+0x7c>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a16      	ldr	r2, [pc, #88]	@ (8009358 <TIM_OC6_SetConfig+0xc0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d007      	beq.n	8009314 <TIM_OC6_SetConfig+0x7c>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a15      	ldr	r2, [pc, #84]	@ (800935c <TIM_OC6_SetConfig+0xc4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_OC6_SetConfig+0x7c>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a14      	ldr	r2, [pc, #80]	@ (8009360 <TIM_OC6_SetConfig+0xc8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d109      	bne.n	8009328 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800931a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	029b      	lsls	r3, r3, #10
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	621a      	str	r2, [r3, #32]
}
 8009342:	bf00      	nop
 8009344:	371c      	adds	r7, #28
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	40012c00 	.word	0x40012c00
 8009354:	40013400 	.word	0x40013400
 8009358:	40014000 	.word	0x40014000
 800935c:	40014400 	.word	0x40014400
 8009360:	40014800 	.word	0x40014800

08009364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f023 0201 	bic.w	r2, r3, #1
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800938e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	4313      	orrs	r3, r2
 8009398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f023 030a 	bic.w	r3, r3, #10
 80093a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	621a      	str	r2, [r3, #32]
}
 80093b6:	bf00      	nop
 80093b8:	371c      	adds	r7, #28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b087      	sub	sp, #28
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	f023 0210 	bic.w	r2, r3, #16
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	031b      	lsls	r3, r3, #12
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	4313      	orrs	r3, r2
 8009408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	621a      	str	r2, [r3, #32]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4313      	orrs	r3, r2
 8009444:	f043 0307 	orr.w	r3, r3, #7
 8009448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	609a      	str	r2, [r3, #8]
}
 8009450:	bf00      	nop
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	021a      	lsls	r2, r3, #8
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	431a      	orrs	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4313      	orrs	r3, r2
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	4313      	orrs	r3, r2
 8009488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	609a      	str	r2, [r3, #8]
}
 8009490:	bf00      	nop
 8009492:	371c      	adds	r7, #28
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f003 031f 	and.w	r3, r3, #31
 80094ae:	2201      	movs	r2, #1
 80094b0:	fa02 f303 	lsl.w	r3, r2, r3
 80094b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a1a      	ldr	r2, [r3, #32]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	43db      	mvns	r3, r3
 80094be:	401a      	ands	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6a1a      	ldr	r2, [r3, #32]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f003 031f 	and.w	r3, r3, #31
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	431a      	orrs	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	621a      	str	r2, [r3, #32]
}
 80094da:	bf00      	nop
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
	...

080094e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e065      	b.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a2c      	ldr	r2, [pc, #176]	@ (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d004      	beq.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a2b      	ldr	r2, [pc, #172]	@ (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d108      	bne.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800953a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800954c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1b      	ldr	r2, [pc, #108]	@ (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d018      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009576:	d013      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a18      	ldr	r2, [pc, #96]	@ (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00e      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a17      	ldr	r2, [pc, #92]	@ (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d009      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a12      	ldr	r2, [pc, #72]	@ (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d004      	beq.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a13      	ldr	r2, [pc, #76]	@ (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10c      	bne.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	40012c00 	.word	0x40012c00
 80095dc:	40013400 	.word	0x40013400
 80095e0:	40000400 	.word	0x40000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	40014000 	.word	0x40014000

080095ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e042      	b.n	8009710 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009690:	2b00      	cmp	r3, #0
 8009692:	d106      	bne.n	80096a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7f8 fd1f 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	@ 0x24
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d002      	beq.n	80096c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 faf4 	bl	8009cb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f825 	bl	8009718 <UART_SetConfig>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d101      	bne.n	80096d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e01b      	b.n	8009710 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f042 0201 	orr.w	r2, r2, #1
 8009706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fb73 	bl	8009df4 <UART_CheckIdleState>
 800970e:	4603      	mov	r3, r0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800971c:	b08c      	sub	sp, #48	@ 0x30
 800971e:	af00      	add	r7, sp, #0
 8009720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	431a      	orrs	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	431a      	orrs	r2, r3
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	4313      	orrs	r3, r2
 800973e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4bab      	ldr	r3, [pc, #684]	@ (80099f4 <UART_SetConfig+0x2dc>)
 8009748:	4013      	ands	r3, r2
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009750:	430b      	orrs	r3, r1
 8009752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4aa0      	ldr	r2, [pc, #640]	@ (80099f8 <UART_SetConfig+0x2e0>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d004      	beq.n	8009784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009780:	4313      	orrs	r3, r2
 8009782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800978e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009798:	430b      	orrs	r3, r1
 800979a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a2:	f023 010f 	bic.w	r1, r3, #15
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a91      	ldr	r2, [pc, #580]	@ (80099fc <UART_SetConfig+0x2e4>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d125      	bne.n	8009808 <UART_SetConfig+0xf0>
 80097bc:	4b90      	ldr	r3, [pc, #576]	@ (8009a00 <UART_SetConfig+0x2e8>)
 80097be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d81a      	bhi.n	8009800 <UART_SetConfig+0xe8>
 80097ca:	a201      	add	r2, pc, #4	@ (adr r2, 80097d0 <UART_SetConfig+0xb8>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	080097e1 	.word	0x080097e1
 80097d4:	080097f1 	.word	0x080097f1
 80097d8:	080097e9 	.word	0x080097e9
 80097dc:	080097f9 	.word	0x080097f9
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097e6:	e0d6      	b.n	8009996 <UART_SetConfig+0x27e>
 80097e8:	2302      	movs	r3, #2
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ee:	e0d2      	b.n	8009996 <UART_SetConfig+0x27e>
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f6:	e0ce      	b.n	8009996 <UART_SetConfig+0x27e>
 80097f8:	2308      	movs	r3, #8
 80097fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097fe:	e0ca      	b.n	8009996 <UART_SetConfig+0x27e>
 8009800:	2310      	movs	r3, #16
 8009802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009806:	e0c6      	b.n	8009996 <UART_SetConfig+0x27e>
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a7d      	ldr	r2, [pc, #500]	@ (8009a04 <UART_SetConfig+0x2ec>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d138      	bne.n	8009884 <UART_SetConfig+0x16c>
 8009812:	4b7b      	ldr	r3, [pc, #492]	@ (8009a00 <UART_SetConfig+0x2e8>)
 8009814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009818:	f003 030c 	and.w	r3, r3, #12
 800981c:	2b0c      	cmp	r3, #12
 800981e:	d82d      	bhi.n	800987c <UART_SetConfig+0x164>
 8009820:	a201      	add	r2, pc, #4	@ (adr r2, 8009828 <UART_SetConfig+0x110>)
 8009822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009826:	bf00      	nop
 8009828:	0800985d 	.word	0x0800985d
 800982c:	0800987d 	.word	0x0800987d
 8009830:	0800987d 	.word	0x0800987d
 8009834:	0800987d 	.word	0x0800987d
 8009838:	0800986d 	.word	0x0800986d
 800983c:	0800987d 	.word	0x0800987d
 8009840:	0800987d 	.word	0x0800987d
 8009844:	0800987d 	.word	0x0800987d
 8009848:	08009865 	.word	0x08009865
 800984c:	0800987d 	.word	0x0800987d
 8009850:	0800987d 	.word	0x0800987d
 8009854:	0800987d 	.word	0x0800987d
 8009858:	08009875 	.word	0x08009875
 800985c:	2300      	movs	r3, #0
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009862:	e098      	b.n	8009996 <UART_SetConfig+0x27e>
 8009864:	2302      	movs	r3, #2
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986a:	e094      	b.n	8009996 <UART_SetConfig+0x27e>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009872:	e090      	b.n	8009996 <UART_SetConfig+0x27e>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987a:	e08c      	b.n	8009996 <UART_SetConfig+0x27e>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009882:	e088      	b.n	8009996 <UART_SetConfig+0x27e>
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a5f      	ldr	r2, [pc, #380]	@ (8009a08 <UART_SetConfig+0x2f0>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d125      	bne.n	80098da <UART_SetConfig+0x1c2>
 800988e:	4b5c      	ldr	r3, [pc, #368]	@ (8009a00 <UART_SetConfig+0x2e8>)
 8009890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009894:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009898:	2b30      	cmp	r3, #48	@ 0x30
 800989a:	d016      	beq.n	80098ca <UART_SetConfig+0x1b2>
 800989c:	2b30      	cmp	r3, #48	@ 0x30
 800989e:	d818      	bhi.n	80098d2 <UART_SetConfig+0x1ba>
 80098a0:	2b20      	cmp	r3, #32
 80098a2:	d00a      	beq.n	80098ba <UART_SetConfig+0x1a2>
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	d814      	bhi.n	80098d2 <UART_SetConfig+0x1ba>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <UART_SetConfig+0x19a>
 80098ac:	2b10      	cmp	r3, #16
 80098ae:	d008      	beq.n	80098c2 <UART_SetConfig+0x1aa>
 80098b0:	e00f      	b.n	80098d2 <UART_SetConfig+0x1ba>
 80098b2:	2300      	movs	r3, #0
 80098b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098b8:	e06d      	b.n	8009996 <UART_SetConfig+0x27e>
 80098ba:	2302      	movs	r3, #2
 80098bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c0:	e069      	b.n	8009996 <UART_SetConfig+0x27e>
 80098c2:	2304      	movs	r3, #4
 80098c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c8:	e065      	b.n	8009996 <UART_SetConfig+0x27e>
 80098ca:	2308      	movs	r3, #8
 80098cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d0:	e061      	b.n	8009996 <UART_SetConfig+0x27e>
 80098d2:	2310      	movs	r3, #16
 80098d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d8:	e05d      	b.n	8009996 <UART_SetConfig+0x27e>
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a4b      	ldr	r2, [pc, #300]	@ (8009a0c <UART_SetConfig+0x2f4>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d125      	bne.n	8009930 <UART_SetConfig+0x218>
 80098e4:	4b46      	ldr	r3, [pc, #280]	@ (8009a00 <UART_SetConfig+0x2e8>)
 80098e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80098ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80098f0:	d016      	beq.n	8009920 <UART_SetConfig+0x208>
 80098f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80098f4:	d818      	bhi.n	8009928 <UART_SetConfig+0x210>
 80098f6:	2b80      	cmp	r3, #128	@ 0x80
 80098f8:	d00a      	beq.n	8009910 <UART_SetConfig+0x1f8>
 80098fa:	2b80      	cmp	r3, #128	@ 0x80
 80098fc:	d814      	bhi.n	8009928 <UART_SetConfig+0x210>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <UART_SetConfig+0x1f0>
 8009902:	2b40      	cmp	r3, #64	@ 0x40
 8009904:	d008      	beq.n	8009918 <UART_SetConfig+0x200>
 8009906:	e00f      	b.n	8009928 <UART_SetConfig+0x210>
 8009908:	2300      	movs	r3, #0
 800990a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800990e:	e042      	b.n	8009996 <UART_SetConfig+0x27e>
 8009910:	2302      	movs	r3, #2
 8009912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009916:	e03e      	b.n	8009996 <UART_SetConfig+0x27e>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800991e:	e03a      	b.n	8009996 <UART_SetConfig+0x27e>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009926:	e036      	b.n	8009996 <UART_SetConfig+0x27e>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992e:	e032      	b.n	8009996 <UART_SetConfig+0x27e>
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a30      	ldr	r2, [pc, #192]	@ (80099f8 <UART_SetConfig+0x2e0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d12a      	bne.n	8009990 <UART_SetConfig+0x278>
 800993a:	4b31      	ldr	r3, [pc, #196]	@ (8009a00 <UART_SetConfig+0x2e8>)
 800993c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009940:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009944:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009948:	d01a      	beq.n	8009980 <UART_SetConfig+0x268>
 800994a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800994e:	d81b      	bhi.n	8009988 <UART_SetConfig+0x270>
 8009950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009954:	d00c      	beq.n	8009970 <UART_SetConfig+0x258>
 8009956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800995a:	d815      	bhi.n	8009988 <UART_SetConfig+0x270>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <UART_SetConfig+0x250>
 8009960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009964:	d008      	beq.n	8009978 <UART_SetConfig+0x260>
 8009966:	e00f      	b.n	8009988 <UART_SetConfig+0x270>
 8009968:	2300      	movs	r3, #0
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996e:	e012      	b.n	8009996 <UART_SetConfig+0x27e>
 8009970:	2302      	movs	r3, #2
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009976:	e00e      	b.n	8009996 <UART_SetConfig+0x27e>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800997e:	e00a      	b.n	8009996 <UART_SetConfig+0x27e>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009986:	e006      	b.n	8009996 <UART_SetConfig+0x27e>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800998e:	e002      	b.n	8009996 <UART_SetConfig+0x27e>
 8009990:	2310      	movs	r3, #16
 8009992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a17      	ldr	r2, [pc, #92]	@ (80099f8 <UART_SetConfig+0x2e0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	f040 80a8 	bne.w	8009af2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	d834      	bhi.n	8009a14 <UART_SetConfig+0x2fc>
 80099aa:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <UART_SetConfig+0x298>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099d5 	.word	0x080099d5
 80099b4:	08009a15 	.word	0x08009a15
 80099b8:	080099dd 	.word	0x080099dd
 80099bc:	08009a15 	.word	0x08009a15
 80099c0:	080099e3 	.word	0x080099e3
 80099c4:	08009a15 	.word	0x08009a15
 80099c8:	08009a15 	.word	0x08009a15
 80099cc:	08009a15 	.word	0x08009a15
 80099d0:	080099eb 	.word	0x080099eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d4:	f7fd fea8 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 80099d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099da:	e021      	b.n	8009a20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009a10 <UART_SetConfig+0x2f8>)
 80099de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099e0:	e01e      	b.n	8009a20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099e2:	f7fd fe33 	bl	800764c <HAL_RCC_GetSysClockFreq>
 80099e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099e8:	e01a      	b.n	8009a20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099f0:	e016      	b.n	8009a20 <UART_SetConfig+0x308>
 80099f2:	bf00      	nop
 80099f4:	cfff69f3 	.word	0xcfff69f3
 80099f8:	40008000 	.word	0x40008000
 80099fc:	40013800 	.word	0x40013800
 8009a00:	40021000 	.word	0x40021000
 8009a04:	40004400 	.word	0x40004400
 8009a08:	40004800 	.word	0x40004800
 8009a0c:	40004c00 	.word	0x40004c00
 8009a10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 812a 	beq.w	8009c7c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2c:	4a9e      	ldr	r2, [pc, #632]	@ (8009ca8 <UART_SetConfig+0x590>)
 8009a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a32:	461a      	mov	r2, r3
 8009a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a3a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	4413      	add	r3, r2
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d305      	bcc.n	8009a58 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a52:	69ba      	ldr	r2, [r7, #24]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d903      	bls.n	8009a60 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a5e:	e10d      	b.n	8009c7c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	2200      	movs	r2, #0
 8009a64:	60bb      	str	r3, [r7, #8]
 8009a66:	60fa      	str	r2, [r7, #12]
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6c:	4a8e      	ldr	r2, [pc, #568]	@ (8009ca8 <UART_SetConfig+0x590>)
 8009a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	2200      	movs	r2, #0
 8009a76:	603b      	str	r3, [r7, #0]
 8009a78:	607a      	str	r2, [r7, #4]
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a82:	f7f6 fbc9 	bl	8000218 <__aeabi_uldivmod>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	f04f 0200 	mov.w	r2, #0
 8009a92:	f04f 0300 	mov.w	r3, #0
 8009a96:	020b      	lsls	r3, r1, #8
 8009a98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a9c:	0202      	lsls	r2, r0, #8
 8009a9e:	6979      	ldr	r1, [r7, #20]
 8009aa0:	6849      	ldr	r1, [r1, #4]
 8009aa2:	0849      	lsrs	r1, r1, #1
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	eb12 0804 	adds.w	r8, r2, r4
 8009aae:	eb43 0905 	adc.w	r9, r3, r5
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	469a      	mov	sl, r3
 8009aba:	4693      	mov	fp, r2
 8009abc:	4652      	mov	r2, sl
 8009abe:	465b      	mov	r3, fp
 8009ac0:	4640      	mov	r0, r8
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	f7f6 fba8 	bl	8000218 <__aeabi_uldivmod>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4613      	mov	r3, r2
 8009ace:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ad6:	d308      	bcc.n	8009aea <UART_SetConfig+0x3d2>
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ade:	d204      	bcs.n	8009aea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6a3a      	ldr	r2, [r7, #32]
 8009ae6:	60da      	str	r2, [r3, #12]
 8009ae8:	e0c8      	b.n	8009c7c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009af0:	e0c4      	b.n	8009c7c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009afa:	d167      	bne.n	8009bcc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009afc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b00:	2b08      	cmp	r3, #8
 8009b02:	d828      	bhi.n	8009b56 <UART_SetConfig+0x43e>
 8009b04:	a201      	add	r2, pc, #4	@ (adr r2, 8009b0c <UART_SetConfig+0x3f4>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b39 	.word	0x08009b39
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	08009b57 	.word	0x08009b57
 8009b1c:	08009b47 	.word	0x08009b47
 8009b20:	08009b57 	.word	0x08009b57
 8009b24:	08009b57 	.word	0x08009b57
 8009b28:	08009b57 	.word	0x08009b57
 8009b2c:	08009b4f 	.word	0x08009b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b30:	f7fd fdfa 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8009b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b36:	e014      	b.n	8009b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b38:	f7fd fe0c 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 8009b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b3e:	e010      	b.n	8009b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b40:	4b5a      	ldr	r3, [pc, #360]	@ (8009cac <UART_SetConfig+0x594>)
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b44:	e00d      	b.n	8009b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b46:	f7fd fd81 	bl	800764c <HAL_RCC_GetSysClockFreq>
 8009b4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b4c:	e009      	b.n	8009b62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b54:	e005      	b.n	8009b62 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 8089 	beq.w	8009c7c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6e:	4a4e      	ldr	r2, [pc, #312]	@ (8009ca8 <UART_SetConfig+0x590>)
 8009b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b74:	461a      	mov	r2, r3
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b7c:	005a      	lsls	r2, r3, #1
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	085b      	lsrs	r3, r3, #1
 8009b84:	441a      	add	r2, r3
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2b0f      	cmp	r3, #15
 8009b94:	d916      	bls.n	8009bc4 <UART_SetConfig+0x4ac>
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b9c:	d212      	bcs.n	8009bc4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f023 030f 	bic.w	r3, r3, #15
 8009ba6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	085b      	lsrs	r3, r3, #1
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	8bfb      	ldrh	r3, [r7, #30]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	8bfa      	ldrh	r2, [r7, #30]
 8009bc0:	60da      	str	r2, [r3, #12]
 8009bc2:	e05b      	b.n	8009c7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bca:	e057      	b.n	8009c7c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d828      	bhi.n	8009c26 <UART_SetConfig+0x50e>
 8009bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bdc <UART_SetConfig+0x4c4>)
 8009bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bda:	bf00      	nop
 8009bdc:	08009c01 	.word	0x08009c01
 8009be0:	08009c09 	.word	0x08009c09
 8009be4:	08009c11 	.word	0x08009c11
 8009be8:	08009c27 	.word	0x08009c27
 8009bec:	08009c17 	.word	0x08009c17
 8009bf0:	08009c27 	.word	0x08009c27
 8009bf4:	08009c27 	.word	0x08009c27
 8009bf8:	08009c27 	.word	0x08009c27
 8009bfc:	08009c1f 	.word	0x08009c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c00:	f7fd fd92 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8009c04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c06:	e014      	b.n	8009c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c08:	f7fd fda4 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 8009c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c0e:	e010      	b.n	8009c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c10:	4b26      	ldr	r3, [pc, #152]	@ (8009cac <UART_SetConfig+0x594>)
 8009c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c14:	e00d      	b.n	8009c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c16:	f7fd fd19 	bl	800764c <HAL_RCC_GetSysClockFreq>
 8009c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c1c:	e009      	b.n	8009c32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c24:	e005      	b.n	8009c32 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c30:	bf00      	nop
    }

    if (pclk != 0U)
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d021      	beq.n	8009c7c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ca8 <UART_SetConfig+0x590>)
 8009c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c42:	461a      	mov	r2, r3
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	085b      	lsrs	r3, r3, #1
 8009c50:	441a      	add	r2, r3
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	2b0f      	cmp	r3, #15
 8009c60:	d909      	bls.n	8009c76 <UART_SetConfig+0x55e>
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c68:	d205      	bcs.n	8009c76 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60da      	str	r2, [r3, #12]
 8009c74:	e002      	b.n	8009c7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2200      	movs	r2, #0
 8009c96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009c98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3730      	adds	r7, #48	@ 0x30
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ca6:	bf00      	nop
 8009ca8:	0800de40 	.word	0x0800de40
 8009cac:	00f42400 	.word	0x00f42400

08009cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbc:	f003 0308 	and.w	r3, r3, #8
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00a      	beq.n	8009cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00a      	beq.n	8009d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d44:	f003 0310 	and.w	r3, r3, #16
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00a      	beq.n	8009d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d66:	f003 0320 	and.w	r3, r3, #32
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01a      	beq.n	8009dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dae:	d10a      	bne.n	8009dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	605a      	str	r2, [r3, #4]
  }
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b098      	sub	sp, #96	@ 0x60
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e04:	f7f8 fa52 	bl	80022ac <HAL_GetTick>
 8009e08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0308 	and.w	r3, r3, #8
 8009e14:	2b08      	cmp	r3, #8
 8009e16:	d12f      	bne.n	8009e78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e20:	2200      	movs	r2, #0
 8009e22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f88e 	bl	8009f48 <UART_WaitOnFlagUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d022      	beq.n	8009e78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e6      	bne.n	8009e32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e063      	b.n	8009f40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d149      	bne.n	8009f1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f857 	bl	8009f48 <UART_WaitOnFlagUntilTimeout>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d03c      	beq.n	8009f1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	623b      	str	r3, [r7, #32]
   return(result);
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e6      	bne.n	8009ea0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3308      	adds	r3, #8
 8009ef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ef2:	61fa      	str	r2, [r7, #28]
 8009ef4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	69b9      	ldr	r1, [r7, #24]
 8009ef8:	69fa      	ldr	r2, [r7, #28]
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	617b      	str	r3, [r7, #20]
   return(result);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e5      	bne.n	8009ed2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2220      	movs	r2, #32
 8009f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e012      	b.n	8009f40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3758      	adds	r7, #88	@ 0x58
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	4613      	mov	r3, r2
 8009f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f58:	e04f      	b.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d04b      	beq.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f62:	f7f8 f9a3 	bl	80022ac <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d302      	bcc.n	8009f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e04e      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d037      	beq.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b80      	cmp	r3, #128	@ 0x80
 8009f8e:	d034      	beq.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b40      	cmp	r3, #64	@ 0x40
 8009f94:	d031      	beq.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	f003 0308 	and.w	r3, r3, #8
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d110      	bne.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2208      	movs	r2, #8
 8009faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 f838 	bl	800a022 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e029      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fd4:	d111      	bne.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 f81e 	bl	800a022 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	e00f      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	4013      	ands	r3, r2
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	429a      	cmp	r2, r3
 800a008:	bf0c      	ite	eq
 800a00a:	2301      	moveq	r3, #1
 800a00c:	2300      	movne	r3, #0
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	429a      	cmp	r2, r3
 800a016:	d0a0      	beq.n	8009f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a022:	b480      	push	{r7}
 800a024:	b095      	sub	sp, #84	@ 0x54
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a03e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a048:	643b      	str	r3, [r7, #64]	@ 0x40
 800a04a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a04e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e6      	bne.n	800a02a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3308      	adds	r3, #8
 800a062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a072:	f023 0301 	bic.w	r3, r3, #1
 800a076:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3308      	adds	r3, #8
 800a07e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a080:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a082:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e3      	bne.n	800a05c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d118      	bne.n	800a0ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f023 0310 	bic.w	r3, r3, #16
 800a0b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ba:	61bb      	str	r3, [r7, #24]
 800a0bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	6979      	ldr	r1, [r7, #20]
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e6      	bne.n	800a09c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a0e2:	bf00      	nop
 800a0e4:	3754      	adds	r7, #84	@ 0x54
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b085      	sub	sp, #20
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d101      	bne.n	800a104 <HAL_UARTEx_DisableFifoMode+0x16>
 800a100:	2302      	movs	r3, #2
 800a102:	e027      	b.n	800a154 <HAL_UARTEx_DisableFifoMode+0x66>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2224      	movs	r2, #36	@ 0x24
 800a110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0201 	bic.w	r2, r2, #1
 800a12a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a132:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a174:	2302      	movs	r3, #2
 800a176:	e02d      	b.n	800a1d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2224      	movs	r2, #36	@ 0x24
 800a184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 0201 	bic.w	r2, r2, #1
 800a19e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f84f 	bl	800a258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d101      	bne.n	800a1f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e02d      	b.n	800a250 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2224      	movs	r2, #36	@ 0x24
 800a200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0201 	bic.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f811 	bl	800a258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2220      	movs	r2, #32
 800a242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a264:	2b00      	cmp	r3, #0
 800a266:	d108      	bne.n	800a27a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a278:	e031      	b.n	800a2de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a27a:	2308      	movs	r3, #8
 800a27c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a27e:	2308      	movs	r3, #8
 800a280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	0e5b      	lsrs	r3, r3, #25
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	f003 0307 	and.w	r3, r3, #7
 800a290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	0f5b      	lsrs	r3, r3, #29
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 0307 	and.w	r3, r3, #7
 800a2a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	7b3a      	ldrb	r2, [r7, #12]
 800a2a6:	4911      	ldr	r1, [pc, #68]	@ (800a2ec <UARTEx_SetNbDataToProcess+0x94>)
 800a2a8:	5c8a      	ldrb	r2, [r1, r2]
 800a2aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2ae:	7b3a      	ldrb	r2, [r7, #12]
 800a2b0:	490f      	ldr	r1, [pc, #60]	@ (800a2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a2b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	7b7a      	ldrb	r2, [r7, #13]
 800a2c4:	4909      	ldr	r1, [pc, #36]	@ (800a2ec <UARTEx_SetNbDataToProcess+0x94>)
 800a2c6:	5c8a      	ldrb	r2, [r1, r2]
 800a2c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2cc:	7b7a      	ldrb	r2, [r7, #13]
 800a2ce:	4908      	ldr	r1, [pc, #32]	@ (800a2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a2d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	0800de58 	.word	0x0800de58
 800a2f0:	0800de60 	.word	0x0800de60

0800a2f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a304:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a308:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a322:	b480      	push	{r7}
 800a324:	b085      	sub	sp, #20
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a32a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a32e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	43db      	mvns	r3, r3
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4013      	ands	r3, r2
 800a342:	b29a      	uxth	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	1d3b      	adds	r3, r7, #4
 800a362:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2201      	movs	r2, #1
 800a36a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a394:	b480      	push	{r7}
 800a396:	b0a7      	sub	sp, #156	@ 0x9c
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a3b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	78db      	ldrb	r3, [r3, #3]
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d81f      	bhi.n	800a406 <USB_ActivateEndpoint+0x72>
 800a3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3cc <USB_ActivateEndpoint+0x38>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a3dd 	.word	0x0800a3dd
 800a3d0:	0800a3f9 	.word	0x0800a3f9
 800a3d4:	0800a40f 	.word	0x0800a40f
 800a3d8:	0800a3eb 	.word	0x0800a3eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a3dc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a3e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a3e4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800a3e8:	e012      	b.n	800a410 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a3ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a3ee:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a3f2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800a3f6:	e00b      	b.n	800a410 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a3f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a3fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a400:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800a404:	e004      	b.n	800a410 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800a40c:	e000      	b.n	800a410 <USB_ActivateEndpoint+0x7c>
      break;
 800a40e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	441a      	add	r2, r3
 800a41a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a41e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a42e:	b29b      	uxth	r3, r3
 800a430:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	b21b      	sxth	r3, r3
 800a442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a44a:	b21a      	sxth	r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b21b      	sxth	r3, r3
 800a452:	4313      	orrs	r3, r2
 800a454:	b21b      	sxth	r3, r3
 800a456:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	441a      	add	r2, r3
 800a464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a46c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a478:	b29b      	uxth	r3, r3
 800a47a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	7b1b      	ldrb	r3, [r3, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f040 8180 	bne.w	800a786 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 8084 	beq.w	800a598 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	61bb      	str	r3, [r7, #24]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	461a      	mov	r2, r3
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	61bb      	str	r3, [r7, #24]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	00da      	lsls	r2, r3, #3
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4b2:	617b      	str	r3, [r7, #20]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	88db      	ldrh	r3, [r3, #6]
 800a4b8:	085b      	lsrs	r3, r3, #1
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	827b      	strh	r3, [r7, #18]
 800a4d2:	8a7b      	ldrh	r3, [r7, #18]
 800a4d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d01b      	beq.n	800a514 <USB_ActivateEndpoint+0x180>
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f2:	823b      	strh	r3, [r7, #16]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	441a      	add	r2, r3
 800a4fe:	8a3b      	ldrh	r3, [r7, #16]
 800a500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a50c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a510:	b29b      	uxth	r3, r3
 800a512:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	78db      	ldrb	r3, [r3, #3]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d020      	beq.n	800a55e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a52e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a532:	81bb      	strh	r3, [r7, #12]
 800a534:	89bb      	ldrh	r3, [r7, #12]
 800a536:	f083 0320 	eor.w	r3, r3, #32
 800a53a:	81bb      	strh	r3, [r7, #12]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	441a      	add	r2, r3
 800a546:	89bb      	ldrh	r3, [r7, #12]
 800a548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a54c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a558:	b29b      	uxth	r3, r3
 800a55a:	8013      	strh	r3, [r2, #0]
 800a55c:	e3f9      	b.n	800ad52 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a574:	81fb      	strh	r3, [r7, #14]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	441a      	add	r2, r3
 800a580:	89fb      	ldrh	r3, [r7, #14]
 800a582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a58a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a592:	b29b      	uxth	r3, r3
 800a594:	8013      	strh	r3, [r2, #0]
 800a596:	e3dc      	b.n	800ad52 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	4413      	add	r3, r2
 800a5aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	00da      	lsls	r2, r3, #3
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	88db      	ldrh	r3, [r3, #6]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5dc:	4413      	add	r3, r2
 800a5de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	00da      	lsls	r2, r3, #3
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fe:	801a      	strh	r2, [r3, #0]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <USB_ActivateEndpoint+0x28a>
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a616:	b29a      	uxth	r2, r3
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	801a      	strh	r2, [r3, #0]
 800a61c:	e041      	b.n	800a6a2 <USB_ActivateEndpoint+0x30e>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	2b3e      	cmp	r3, #62	@ 0x3e
 800a624:	d81c      	bhi.n	800a660 <USB_ActivateEndpoint+0x2cc>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	085b      	lsrs	r3, r3, #1
 800a62c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d004      	beq.n	800a646 <USB_ActivateEndpoint+0x2b2>
 800a63c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a640:	3301      	adds	r3, #1
 800a642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a650:	b29b      	uxth	r3, r3
 800a652:	029b      	lsls	r3, r3, #10
 800a654:	b29b      	uxth	r3, r3
 800a656:	4313      	orrs	r3, r2
 800a658:	b29a      	uxth	r2, r3
 800a65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65c:	801a      	strh	r2, [r3, #0]
 800a65e:	e020      	b.n	800a6a2 <USB_ActivateEndpoint+0x30e>
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	095b      	lsrs	r3, r3, #5
 800a666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f003 031f 	and.w	r3, r3, #31
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <USB_ActivateEndpoint+0x2ec>
 800a676:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a67a:	3b01      	subs	r3, #1
 800a67c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	b29a      	uxth	r2, r3
 800a686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	029b      	lsls	r3, r3, #10
 800a68e:	b29b      	uxth	r3, r3
 800a690:	4313      	orrs	r3, r2
 800a692:	b29b      	uxth	r3, r3
 800a694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a6b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a6b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01b      	beq.n	800a6f2 <USB_ActivateEndpoint+0x35e>
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6d0:	843b      	strh	r3, [r7, #32]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	441a      	add	r2, r3
 800a6dc:	8c3b      	ldrh	r3, [r7, #32]
 800a6de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d124      	bne.n	800a744 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	b29b      	uxth	r3, r3
 800a708:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a70c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a710:	83bb      	strh	r3, [r7, #28]
 800a712:	8bbb      	ldrh	r3, [r7, #28]
 800a714:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a718:	83bb      	strh	r3, [r7, #28]
 800a71a:	8bbb      	ldrh	r3, [r7, #28]
 800a71c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a720:	83bb      	strh	r3, [r7, #28]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	441a      	add	r2, r3
 800a72c:	8bbb      	ldrh	r3, [r7, #28]
 800a72e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a73e:	b29b      	uxth	r3, r3
 800a740:	8013      	strh	r3, [r2, #0]
 800a742:	e306      	b.n	800ad52 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a75a:	83fb      	strh	r3, [r7, #30]
 800a75c:	8bfb      	ldrh	r3, [r7, #30]
 800a75e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a762:	83fb      	strh	r3, [r7, #30]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	441a      	add	r2, r3
 800a76e:	8bfb      	ldrh	r3, [r7, #30]
 800a770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a780:	b29b      	uxth	r3, r3
 800a782:	8013      	strh	r3, [r2, #0]
 800a784:	e2e5      	b.n	800ad52 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	78db      	ldrb	r3, [r3, #3]
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d11e      	bne.n	800a7cc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7a4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	441a      	add	r2, r3
 800a7b2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800a7b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7be:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	8013      	strh	r3, [r2, #0]
 800a7ca:	e01d      	b.n	800a808 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a7de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7e2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	441a      	add	r2, r3
 800a7f0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a7f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a804:	b29b      	uxth	r3, r3
 800a806:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a812:	b29b      	uxth	r3, r3
 800a814:	461a      	mov	r2, r3
 800a816:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a818:	4413      	add	r3, r2
 800a81a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	00da      	lsls	r2, r3, #3
 800a822:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a824:	4413      	add	r3, r2
 800a826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a82a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	891b      	ldrh	r3, [r3, #8]
 800a830:	085b      	lsrs	r3, r3, #1
 800a832:	b29b      	uxth	r3, r3
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	b29a      	uxth	r2, r3
 800a838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a83a:	801a      	strh	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a846:	b29b      	uxth	r3, r3
 800a848:	461a      	mov	r2, r3
 800a84a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a84c:	4413      	add	r3, r2
 800a84e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	00da      	lsls	r2, r3, #3
 800a856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a858:	4413      	add	r3, r2
 800a85a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a85e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	895b      	ldrh	r3, [r3, #10]
 800a864:	085b      	lsrs	r3, r3, #1
 800a866:	b29b      	uxth	r3, r3
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a86e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	785b      	ldrb	r3, [r3, #1]
 800a874:	2b00      	cmp	r3, #0
 800a876:	f040 81af 	bne.w	800abd8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800a88a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a88e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01d      	beq.n	800a8d2 <USB_ActivateEndpoint+0x53e>
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	441a      	add	r2, r3
 800a8ba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800a8be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a8ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800a8e2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800a8e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d01d      	beq.n	800a92a <USB_ActivateEndpoint+0x596>
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a904:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	441a      	add	r2, r3
 800a912:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800a916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a91a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a91e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a926:	b29b      	uxth	r3, r3
 800a928:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	785b      	ldrb	r3, [r3, #1]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d16b      	bne.n	800aa0a <USB_ActivateEndpoint+0x676>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	461a      	mov	r2, r3
 800a940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a942:	4413      	add	r3, r2
 800a944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	00da      	lsls	r2, r3, #3
 800a94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a94e:	4413      	add	r3, r2
 800a950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a954:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a960:	b29a      	uxth	r2, r3
 800a962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a964:	801a      	strh	r2, [r3, #0]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <USB_ActivateEndpoint+0x5f0>
 800a96e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	b29b      	uxth	r3, r3
 800a974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a980:	801a      	strh	r2, [r3, #0]
 800a982:	e05d      	b.n	800aa40 <USB_ActivateEndpoint+0x6ac>
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	2b3e      	cmp	r3, #62	@ 0x3e
 800a98a:	d81c      	bhi.n	800a9c6 <USB_ActivateEndpoint+0x632>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	085b      	lsrs	r3, r3, #1
 800a992:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <USB_ActivateEndpoint+0x618>
 800a9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a9ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	029b      	lsls	r3, r3, #10
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9c2:	801a      	strh	r2, [r3, #0]
 800a9c4:	e03c      	b.n	800aa40 <USB_ActivateEndpoint+0x6ac>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	095b      	lsrs	r3, r3, #5
 800a9cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	f003 031f 	and.w	r3, r3, #31
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d104      	bne.n	800a9e6 <USB_ActivateEndpoint+0x652>
 800a9dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a9e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	029b      	lsls	r3, r3, #10
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa06:	801a      	strh	r2, [r3, #0]
 800aa08:	e01a      	b.n	800aa40 <USB_ActivateEndpoint+0x6ac>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d116      	bne.n	800aa40 <USB_ActivateEndpoint+0x6ac>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	461a      	mov	r2, r3
 800aa20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa22:	4413      	add	r3, r2
 800aa24:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	00da      	lsls	r2, r3, #3
 800aa2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa2e:	4413      	add	r3, r2
 800aa30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa34:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d16b      	bne.n	800ab24 <USB_ActivateEndpoint+0x790>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5c:	4413      	add	r3, r2
 800aa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	00da      	lsls	r2, r3, #3
 800aa66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa68:	4413      	add	r3, r2
 800aa6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7e:	801a      	strh	r2, [r3, #0]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <USB_ActivateEndpoint+0x70a>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9a:	801a      	strh	r2, [r3, #0]
 800aa9c:	e05b      	b.n	800ab56 <USB_ActivateEndpoint+0x7c2>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	2b3e      	cmp	r3, #62	@ 0x3e
 800aaa4:	d81c      	bhi.n	800aae0 <USB_ActivateEndpoint+0x74c>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	085b      	lsrs	r3, r3, #1
 800aaac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <USB_ActivateEndpoint+0x732>
 800aabc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aac0:	3301      	adds	r3, #1
 800aac2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	029b      	lsls	r3, r3, #10
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4313      	orrs	r3, r2
 800aad8:	b29a      	uxth	r2, r3
 800aada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	e03a      	b.n	800ab56 <USB_ActivateEndpoint+0x7c2>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	095b      	lsrs	r3, r3, #5
 800aae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 031f 	and.w	r3, r3, #31
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d104      	bne.n	800ab00 <USB_ActivateEndpoint+0x76c>
 800aaf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aafa:	3b01      	subs	r3, #1
 800aafc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	881b      	ldrh	r3, [r3, #0]
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	029b      	lsls	r3, r3, #10
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	4313      	orrs	r3, r2
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	801a      	strh	r2, [r3, #0]
 800ab22:	e018      	b.n	800ab56 <USB_ActivateEndpoint+0x7c2>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d114      	bne.n	800ab56 <USB_ActivateEndpoint+0x7c2>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab38:	4413      	add	r3, r2
 800ab3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	00da      	lsls	r2, r3, #3
 800ab42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab44:	4413      	add	r3, r2
 800ab46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab54:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ab6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab74:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ab76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	441a      	add	r2, r3
 800ab88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abb4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	441a      	add	r2, r3
 800abc0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800abc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	8013      	strh	r3, [r2, #0]
 800abd6:	e0bc      	b.n	800ad52 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800abe8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800abec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01d      	beq.n	800ac30 <USB_ActivateEndpoint+0x89c>
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac0a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	441a      	add	r2, r3
 800ac18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ac1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800ac40:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800ac44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d01d      	beq.n	800ac88 <USB_ActivateEndpoint+0x8f4>
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac62:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	441a      	add	r2, r3
 800ac70:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800ac74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	78db      	ldrb	r3, [r3, #3]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d024      	beq.n	800acda <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aca6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800acaa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800acae:	f083 0320 	eor.w	r3, r3, #32
 800acb2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	441a      	add	r2, r3
 800acc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800acc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800accc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	8013      	strh	r3, [r2, #0]
 800acd8:	e01d      	b.n	800ad16 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acf0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	441a      	add	r2, r3
 800acfe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ad02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad2c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	441a      	add	r2, r3
 800ad3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ad3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ad52:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	379c      	adds	r7, #156	@ 0x9c
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop

0800ad64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b08d      	sub	sp, #52	@ 0x34
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	7b1b      	ldrb	r3, [r3, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 808e 	bne.w	800ae94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	785b      	ldrb	r3, [r3, #1]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d044      	beq.n	800ae0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	81bb      	strh	r3, [r7, #12]
 800ad8e:	89bb      	ldrh	r3, [r7, #12]
 800ad90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d01b      	beq.n	800add0 <USB_DeactivateEndpoint+0x6c>
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adae:	817b      	strh	r3, [r7, #10]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	441a      	add	r2, r3
 800adba:	897b      	ldrh	r3, [r7, #10]
 800adbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800adcc:	b29b      	uxth	r3, r3
 800adce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29b      	uxth	r3, r3
 800adde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ade2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ade6:	813b      	strh	r3, [r7, #8]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	441a      	add	r2, r3
 800adf2:	893b      	ldrh	r3, [r7, #8]
 800adf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	8013      	strh	r3, [r2, #0]
 800ae08:	e192      	b.n	800b130 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	827b      	strh	r3, [r7, #18]
 800ae18:	8a7b      	ldrh	r3, [r7, #18]
 800ae1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d01b      	beq.n	800ae5a <USB_DeactivateEndpoint+0xf6>
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae38:	823b      	strh	r3, [r7, #16]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	441a      	add	r2, r3
 800ae44:	8a3b      	ldrh	r3, [r7, #16]
 800ae46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae70:	81fb      	strh	r3, [r7, #14]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	441a      	add	r2, r3
 800ae7c:	89fb      	ldrh	r3, [r7, #14]
 800ae7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	8013      	strh	r3, [r2, #0]
 800ae92:	e14d      	b.n	800b130 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	785b      	ldrb	r3, [r3, #1]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f040 80a5 	bne.w	800afe8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	843b      	strh	r3, [r7, #32]
 800aeac:	8c3b      	ldrh	r3, [r7, #32]
 800aeae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d01b      	beq.n	800aeee <USB_DeactivateEndpoint+0x18a>
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aecc:	83fb      	strh	r3, [r7, #30]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	441a      	add	r2, r3
 800aed8:	8bfb      	ldrh	r3, [r7, #30]
 800aeda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	83bb      	strh	r3, [r7, #28]
 800aefc:	8bbb      	ldrh	r3, [r7, #28]
 800aefe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af02:	2b00      	cmp	r3, #0
 800af04:	d01b      	beq.n	800af3e <USB_DeactivateEndpoint+0x1da>
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	b29b      	uxth	r3, r3
 800af14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af1c:	837b      	strh	r3, [r7, #26]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	441a      	add	r2, r3
 800af28:	8b7b      	ldrh	r3, [r7, #26]
 800af2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af54:	833b      	strh	r3, [r7, #24]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	441a      	add	r2, r3
 800af60:	8b3b      	ldrh	r3, [r7, #24]
 800af62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af72:	b29b      	uxth	r3, r3
 800af74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	b29b      	uxth	r3, r3
 800af84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af8c:	82fb      	strh	r3, [r7, #22]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	441a      	add	r2, r3
 800af98:	8afb      	ldrh	r3, [r7, #22]
 800af9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afaa:	b29b      	uxth	r3, r3
 800afac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	b29b      	uxth	r3, r3
 800afbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afc4:	82bb      	strh	r3, [r7, #20]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	441a      	add	r2, r3
 800afd0:	8abb      	ldrh	r3, [r7, #20]
 800afd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	8013      	strh	r3, [r2, #0]
 800afe6:	e0a3      	b.n	800b130 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800aff6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01b      	beq.n	800b038 <USB_DeactivateEndpoint+0x2d4>
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b016:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	441a      	add	r2, r3
 800b022:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b02c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b034:	b29b      	uxth	r3, r3
 800b036:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b046:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01b      	beq.n	800b088 <USB_DeactivateEndpoint+0x324>
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b066:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	441a      	add	r2, r3
 800b072:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b07c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b080:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b084:	b29b      	uxth	r3, r3
 800b086:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	b29b      	uxth	r3, r3
 800b096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b09a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b09e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	441a      	add	r2, r3
 800b0aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b0ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	441a      	add	r2, r3
 800b0e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b0e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	b29b      	uxth	r3, r3
 800b106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b10a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b10e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	441a      	add	r2, r3
 800b11a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b11c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b120:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3734      	adds	r7, #52	@ 0x34
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b0ac      	sub	sp, #176	@ 0xb0
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	f040 84ca 	bne.w	800bae6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	699a      	ldr	r2, [r3, #24]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d904      	bls.n	800b168 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b166:	e003      	b.n	800b170 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	7b1b      	ldrb	r3, [r3, #12]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d122      	bne.n	800b1be <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	6959      	ldr	r1, [r3, #20]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	88da      	ldrh	r2, [r3, #6]
 800b180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b184:	b29b      	uxth	r3, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 febd 	bl	800bf06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	613b      	str	r3, [r7, #16]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b196:	b29b      	uxth	r3, r3
 800b198:	461a      	mov	r2, r3
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	4413      	add	r3, r2
 800b19e:	613b      	str	r3, [r7, #16]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	00da      	lsls	r2, r3, #3
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	801a      	strh	r2, [r3, #0]
 800b1ba:	f000 bc6f 	b.w	800ba9c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	78db      	ldrb	r3, [r3, #3]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	f040 831e 	bne.w	800b804 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	6a1a      	ldr	r2, [r3, #32]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	f240 82cf 	bls.w	800b774 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	441a      	add	r2, r3
 800b1fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b1fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b206:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b20e:	b29b      	uxth	r3, r3
 800b210:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6a1a      	ldr	r2, [r3, #32]
 800b216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b21a:	1ad2      	subs	r2, r2, r3
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 814f 	beq.w	800b4d6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	785b      	ldrb	r3, [r3, #1]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d16b      	bne.n	800b31c <USB_EPStartXfer+0x1de>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b24e:	b29b      	uxth	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b254:	4413      	add	r3, r2
 800b256:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	00da      	lsls	r2, r3, #3
 800b25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b260:	4413      	add	r3, r2
 800b262:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b266:	627b      	str	r3, [r7, #36]	@ 0x24
 800b268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b272:	b29a      	uxth	r2, r3
 800b274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b276:	801a      	strh	r2, [r3, #0]
 800b278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10a      	bne.n	800b296 <USB_EPStartXfer+0x158>
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	b29b      	uxth	r3, r3
 800b286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b28a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b28e:	b29a      	uxth	r2, r3
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	801a      	strh	r2, [r3, #0]
 800b294:	e05b      	b.n	800b34e <USB_EPStartXfer+0x210>
 800b296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b29a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b29c:	d81c      	bhi.n	800b2d8 <USB_EPStartXfer+0x19a>
 800b29e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2a2:	085b      	lsrs	r3, r3, #1
 800b2a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d004      	beq.n	800b2be <USB_EPStartXfer+0x180>
 800b2b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	029b      	lsls	r3, r3, #10
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	801a      	strh	r2, [r3, #0]
 800b2d6:	e03a      	b.n	800b34e <USB_EPStartXfer+0x210>
 800b2d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2dc:	095b      	lsrs	r3, r3, #5
 800b2de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2e6:	f003 031f 	and.w	r3, r3, #31
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d104      	bne.n	800b2f8 <USB_EPStartXfer+0x1ba>
 800b2ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b302:	b29b      	uxth	r3, r3
 800b304:	029b      	lsls	r3, r3, #10
 800b306:	b29b      	uxth	r3, r3
 800b308:	4313      	orrs	r3, r2
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b314:	b29a      	uxth	r2, r3
 800b316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b318:	801a      	strh	r2, [r3, #0]
 800b31a:	e018      	b.n	800b34e <USB_EPStartXfer+0x210>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	785b      	ldrb	r3, [r3, #1]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d114      	bne.n	800b34e <USB_EPStartXfer+0x210>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	461a      	mov	r2, r3
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	4413      	add	r3, r2
 800b332:	633b      	str	r3, [r7, #48]	@ 0x30
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	00da      	lsls	r2, r3, #3
 800b33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33c:	4413      	add	r3, r2
 800b33e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b348:	b29a      	uxth	r2, r3
 800b34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	895b      	ldrh	r3, [r3, #10]
 800b352:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	6959      	ldr	r1, [r3, #20]
 800b35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b35e:	b29b      	uxth	r3, r3
 800b360:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fdce 	bl	800bf06 <USB_WritePMA>
            ep->xfer_buff += len;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	695a      	ldr	r2, [r3, #20]
 800b36e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b372:	441a      	add	r2, r3
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	6a1a      	ldr	r2, [r3, #32]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	d907      	bls.n	800b394 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	6a1a      	ldr	r2, [r3, #32]
 800b388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b38c:	1ad2      	subs	r2, r2, r3
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	621a      	str	r2, [r3, #32]
 800b392:	e006      	b.n	800b3a2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	785b      	ldrb	r3, [r3, #1]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d16b      	bne.n	800b482 <USB_EPStartXfer+0x344>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	61bb      	str	r3, [r7, #24]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	00da      	lsls	r2, r3, #3
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3cc:	617b      	str	r3, [r7, #20]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	801a      	strh	r2, [r3, #0]
 800b3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10a      	bne.n	800b3fc <USB_EPStartXfer+0x2be>
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	e05d      	b.n	800b4b8 <USB_EPStartXfer+0x37a>
 800b3fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b400:	2b3e      	cmp	r3, #62	@ 0x3e
 800b402:	d81c      	bhi.n	800b43e <USB_EPStartXfer+0x300>
 800b404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b408:	085b      	lsrs	r3, r3, #1
 800b40a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b40e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d004      	beq.n	800b424 <USB_EPStartXfer+0x2e6>
 800b41a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b41e:	3301      	adds	r3, #1
 800b420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	b29a      	uxth	r2, r3
 800b42a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b42e:	b29b      	uxth	r3, r3
 800b430:	029b      	lsls	r3, r3, #10
 800b432:	b29b      	uxth	r3, r3
 800b434:	4313      	orrs	r3, r2
 800b436:	b29a      	uxth	r2, r3
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	801a      	strh	r2, [r3, #0]
 800b43c:	e03c      	b.n	800b4b8 <USB_EPStartXfer+0x37a>
 800b43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b442:	095b      	lsrs	r3, r3, #5
 800b444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b44c:	f003 031f 	and.w	r3, r3, #31
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <USB_EPStartXfer+0x320>
 800b454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b458:	3b01      	subs	r3, #1
 800b45a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	b29a      	uxth	r2, r3
 800b464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b468:	b29b      	uxth	r3, r3
 800b46a:	029b      	lsls	r3, r3, #10
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	4313      	orrs	r3, r2
 800b470:	b29b      	uxth	r3, r3
 800b472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	801a      	strh	r2, [r3, #0]
 800b480:	e01a      	b.n	800b4b8 <USB_EPStartXfer+0x37a>
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d116      	bne.n	800b4b8 <USB_EPStartXfer+0x37a>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	623b      	str	r3, [r7, #32]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b494:	b29b      	uxth	r3, r3
 800b496:	461a      	mov	r2, r3
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	4413      	add	r3, r2
 800b49c:	623b      	str	r3, [r7, #32]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	00da      	lsls	r2, r3, #3
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b4ac:	61fb      	str	r3, [r7, #28]
 800b4ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	891b      	ldrh	r3, [r3, #8]
 800b4bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	6959      	ldr	r1, [r3, #20]
 800b4c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fd19 	bl	800bf06 <USB_WritePMA>
 800b4d4:	e2e2      	b.n	800ba9c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	785b      	ldrb	r3, [r3, #1]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d16b      	bne.n	800b5b6 <USB_EPStartXfer+0x478>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ee:	4413      	add	r3, r2
 800b4f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	00da      	lsls	r2, r3, #3
 800b4f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4fa:	4413      	add	r3, r2
 800b4fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b500:	647b      	str	r3, [r7, #68]	@ 0x44
 800b502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	b29b      	uxth	r3, r3
 800b508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b510:	801a      	strh	r2, [r3, #0]
 800b512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10a      	bne.n	800b530 <USB_EPStartXfer+0x3f2>
 800b51a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	b29b      	uxth	r3, r3
 800b520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b528:	b29a      	uxth	r2, r3
 800b52a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b52c:	801a      	strh	r2, [r3, #0]
 800b52e:	e05d      	b.n	800b5ec <USB_EPStartXfer+0x4ae>
 800b530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b534:	2b3e      	cmp	r3, #62	@ 0x3e
 800b536:	d81c      	bhi.n	800b572 <USB_EPStartXfer+0x434>
 800b538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b53c:	085b      	lsrs	r3, r3, #1
 800b53e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <USB_EPStartXfer+0x41a>
 800b54e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b552:	3301      	adds	r3, #1
 800b554:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b55a:	881b      	ldrh	r3, [r3, #0]
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b562:	b29b      	uxth	r3, r3
 800b564:	029b      	lsls	r3, r3, #10
 800b566:	b29b      	uxth	r3, r3
 800b568:	4313      	orrs	r3, r2
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b56e:	801a      	strh	r2, [r3, #0]
 800b570:	e03c      	b.n	800b5ec <USB_EPStartXfer+0x4ae>
 800b572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b576:	095b      	lsrs	r3, r3, #5
 800b578:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b580:	f003 031f 	and.w	r3, r3, #31
 800b584:	2b00      	cmp	r3, #0
 800b586:	d104      	bne.n	800b592 <USB_EPStartXfer+0x454>
 800b588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b58c:	3b01      	subs	r3, #1
 800b58e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	b29a      	uxth	r2, r3
 800b598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	029b      	lsls	r3, r3, #10
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5b2:	801a      	strh	r2, [r3, #0]
 800b5b4:	e01a      	b.n	800b5ec <USB_EPStartXfer+0x4ae>
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	785b      	ldrb	r3, [r3, #1]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d116      	bne.n	800b5ec <USB_EPStartXfer+0x4ae>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ce:	4413      	add	r3, r2
 800b5d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	00da      	lsls	r2, r3, #3
 800b5d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5da:	4413      	add	r3, r2
 800b5dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	891b      	ldrh	r3, [r3, #8]
 800b5f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	6959      	ldr	r1, [r3, #20]
 800b5f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fc7f 	bl	800bf06 <USB_WritePMA>
            ep->xfer_buff += len;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	695a      	ldr	r2, [r3, #20]
 800b60c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b610:	441a      	add	r2, r3
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	6a1a      	ldr	r2, [r3, #32]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d907      	bls.n	800b632 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	6a1a      	ldr	r2, [r3, #32]
 800b626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	621a      	str	r2, [r3, #32]
 800b630:	e006      	b.n	800b640 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2200      	movs	r2, #0
 800b63e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	643b      	str	r3, [r7, #64]	@ 0x40
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d16b      	bne.n	800b724 <USB_EPStartXfer+0x5e6>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b656:	b29b      	uxth	r3, r3
 800b658:	461a      	mov	r2, r3
 800b65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65c:	4413      	add	r3, r2
 800b65e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	00da      	lsls	r2, r3, #3
 800b666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b668:	4413      	add	r3, r2
 800b66a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b66e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	b29b      	uxth	r3, r3
 800b676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b67e:	801a      	strh	r2, [r3, #0]
 800b680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10a      	bne.n	800b69e <USB_EPStartXfer+0x560>
 800b688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b696:	b29a      	uxth	r2, r3
 800b698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b69a:	801a      	strh	r2, [r3, #0]
 800b69c:	e05b      	b.n	800b756 <USB_EPStartXfer+0x618>
 800b69e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6a4:	d81c      	bhi.n	800b6e0 <USB_EPStartXfer+0x5a2>
 800b6a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6aa:	085b      	lsrs	r3, r3, #1
 800b6ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <USB_EPStartXfer+0x588>
 800b6bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	029b      	lsls	r3, r3, #10
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6dc:	801a      	strh	r2, [r3, #0]
 800b6de:	e03a      	b.n	800b756 <USB_EPStartXfer+0x618>
 800b6e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6e4:	095b      	lsrs	r3, r3, #5
 800b6e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6ee:	f003 031f 	and.w	r3, r3, #31
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d104      	bne.n	800b700 <USB_EPStartXfer+0x5c2>
 800b6f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b702:	881b      	ldrh	r3, [r3, #0]
 800b704:	b29a      	uxth	r2, r3
 800b706:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	029b      	lsls	r3, r3, #10
 800b70e:	b29b      	uxth	r3, r3
 800b710:	4313      	orrs	r3, r2
 800b712:	b29b      	uxth	r3, r3
 800b714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b720:	801a      	strh	r2, [r3, #0]
 800b722:	e018      	b.n	800b756 <USB_EPStartXfer+0x618>
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	785b      	ldrb	r3, [r3, #1]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d114      	bne.n	800b756 <USB_EPStartXfer+0x618>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b732:	b29b      	uxth	r3, r3
 800b734:	461a      	mov	r2, r3
 800b736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b738:	4413      	add	r3, r2
 800b73a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	00da      	lsls	r2, r3, #3
 800b742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b744:	4413      	add	r3, r2
 800b746:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b74c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b750:	b29a      	uxth	r2, r3
 800b752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b754:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	895b      	ldrh	r3, [r3, #10]
 800b75a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	6959      	ldr	r1, [r3, #20]
 800b762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b766:	b29b      	uxth	r3, r3
 800b768:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fbca 	bl	800bf06 <USB_WritePMA>
 800b772:	e193      	b.n	800ba9c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	881b      	ldrh	r3, [r3, #0]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b78e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b792:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	441a      	add	r2, r3
 800b7a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b7a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7c8:	4413      	add	r3, r2
 800b7ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	00da      	lsls	r2, r3, #3
 800b7d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	891b      	ldrh	r3, [r3, #8]
 800b7ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	6959      	ldr	r1, [r3, #20]
 800b7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fb82 	bl	800bf06 <USB_WritePMA>
 800b802:	e14b      	b.n	800ba9c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	6a1a      	ldr	r2, [r3, #32]
 800b808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b80c:	1ad2      	subs	r2, r2, r3
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 809a 	beq.w	800b95e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	785b      	ldrb	r3, [r3, #1]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d16b      	bne.n	800b90e <USB_EPStartXfer+0x7d0>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b840:	b29b      	uxth	r3, r3
 800b842:	461a      	mov	r2, r3
 800b844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b846:	4413      	add	r3, r2
 800b848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	00da      	lsls	r2, r3, #3
 800b850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b852:	4413      	add	r3, r2
 800b854:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b858:	667b      	str	r3, [r7, #100]	@ 0x64
 800b85a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b85c:	881b      	ldrh	r3, [r3, #0]
 800b85e:	b29b      	uxth	r3, r3
 800b860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b864:	b29a      	uxth	r2, r3
 800b866:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b868:	801a      	strh	r2, [r3, #0]
 800b86a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <USB_EPStartXfer+0x74a>
 800b872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b874:	881b      	ldrh	r3, [r3, #0]
 800b876:	b29b      	uxth	r3, r3
 800b878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b87c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b880:	b29a      	uxth	r2, r3
 800b882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b884:	801a      	strh	r2, [r3, #0]
 800b886:	e05b      	b.n	800b940 <USB_EPStartXfer+0x802>
 800b888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b88c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b88e:	d81c      	bhi.n	800b8ca <USB_EPStartXfer+0x78c>
 800b890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b894:	085b      	lsrs	r3, r3, #1
 800b896:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b89a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <USB_EPStartXfer+0x772>
 800b8a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	029b      	lsls	r3, r3, #10
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8c6:	801a      	strh	r2, [r3, #0]
 800b8c8:	e03a      	b.n	800b940 <USB_EPStartXfer+0x802>
 800b8ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8ce:	095b      	lsrs	r3, r3, #5
 800b8d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8d8:	f003 031f 	and.w	r3, r3, #31
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d104      	bne.n	800b8ea <USB_EPStartXfer+0x7ac>
 800b8e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	029b      	lsls	r3, r3, #10
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b906:	b29a      	uxth	r2, r3
 800b908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b90a:	801a      	strh	r2, [r3, #0]
 800b90c:	e018      	b.n	800b940 <USB_EPStartXfer+0x802>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	785b      	ldrb	r3, [r3, #1]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d114      	bne.n	800b940 <USB_EPStartXfer+0x802>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	461a      	mov	r2, r3
 800b920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b922:	4413      	add	r3, r2
 800b924:	673b      	str	r3, [r7, #112]	@ 0x70
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	00da      	lsls	r2, r3, #3
 800b92c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b92e:	4413      	add	r3, r2
 800b930:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b934:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b93e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	895b      	ldrh	r3, [r3, #10]
 800b944:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	6959      	ldr	r1, [r3, #20]
 800b94c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b950:	b29b      	uxth	r3, r3
 800b952:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fad5 	bl	800bf06 <USB_WritePMA>
 800b95c:	e09e      	b.n	800ba9c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	785b      	ldrb	r3, [r3, #1]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d16b      	bne.n	800ba3e <USB_EPStartXfer+0x900>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b970:	b29b      	uxth	r3, r3
 800b972:	461a      	mov	r2, r3
 800b974:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b976:	4413      	add	r3, r2
 800b978:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	00da      	lsls	r2, r3, #3
 800b980:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b982:	4413      	add	r3, r2
 800b984:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b98a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b98c:	881b      	ldrh	r3, [r3, #0]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b994:	b29a      	uxth	r2, r3
 800b996:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b998:	801a      	strh	r2, [r3, #0]
 800b99a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10a      	bne.n	800b9b8 <USB_EPStartXfer+0x87a>
 800b9a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9b4:	801a      	strh	r2, [r3, #0]
 800b9b6:	e063      	b.n	800ba80 <USB_EPStartXfer+0x942>
 800b9b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9be:	d81c      	bhi.n	800b9fa <USB_EPStartXfer+0x8bc>
 800b9c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9c4:	085b      	lsrs	r3, r3, #1
 800b9c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d004      	beq.n	800b9e0 <USB_EPStartXfer+0x8a2>
 800b9d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	029b      	lsls	r3, r3, #10
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9f6:	801a      	strh	r2, [r3, #0]
 800b9f8:	e042      	b.n	800ba80 <USB_EPStartXfer+0x942>
 800b9fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9fe:	095b      	lsrs	r3, r3, #5
 800ba00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ba04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba08:	f003 031f 	and.w	r3, r3, #31
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d104      	bne.n	800ba1a <USB_EPStartXfer+0x8dc>
 800ba10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba14:	3b01      	subs	r3, #1
 800ba16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ba1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	029b      	lsls	r3, r3, #10
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba3a:	801a      	strh	r2, [r3, #0]
 800ba3c:	e020      	b.n	800ba80 <USB_EPStartXfer+0x942>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	785b      	ldrb	r3, [r3, #1]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d11c      	bne.n	800ba80 <USB_EPStartXfer+0x942>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	461a      	mov	r2, r3
 800ba56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	00da      	lsls	r2, r3, #3
 800ba66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	891b      	ldrh	r3, [r3, #8]
 800ba84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	6959      	ldr	r1, [r3, #20]
 800ba8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fa35 	bl	800bf06 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bab2:	817b      	strh	r3, [r7, #10]
 800bab4:	897b      	ldrh	r3, [r7, #10]
 800bab6:	f083 0310 	eor.w	r3, r3, #16
 800baba:	817b      	strh	r3, [r7, #10]
 800babc:	897b      	ldrh	r3, [r7, #10]
 800babe:	f083 0320 	eor.w	r3, r3, #32
 800bac2:	817b      	strh	r3, [r7, #10]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	441a      	add	r2, r3
 800bace:	897b      	ldrh	r3, [r7, #10]
 800bad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800badc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	8013      	strh	r3, [r2, #0]
 800bae4:	e0d5      	b.n	800bc92 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	7b1b      	ldrb	r3, [r3, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d156      	bne.n	800bb9c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d122      	bne.n	800bb3c <USB_EPStartXfer+0x9fe>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	78db      	ldrb	r3, [r3, #3]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d11e      	bne.n	800bb3c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb14:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	441a      	add	r2, r3
 800bb22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800bb26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb2e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bb32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	8013      	strh	r3, [r2, #0]
 800bb3a:	e01d      	b.n	800bb78 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bb4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb52:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	441a      	add	r2, r3
 800bb60:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800bb64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	699a      	ldr	r2, [r3, #24]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d907      	bls.n	800bb94 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	699a      	ldr	r2, [r3, #24]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	1ad2      	subs	r2, r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	619a      	str	r2, [r3, #24]
 800bb92:	e054      	b.n	800bc3e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2200      	movs	r2, #0
 800bb98:	619a      	str	r2, [r3, #24]
 800bb9a:	e050      	b.n	800bc3e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	78db      	ldrb	r3, [r3, #3]
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d142      	bne.n	800bc2a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d048      	beq.n	800bc3e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bbbc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bbc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d005      	beq.n	800bbd4 <USB_EPStartXfer+0xa96>
 800bbc8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10b      	bne.n	800bbec <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bbd4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bbd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d12e      	bne.n	800bc3e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bbe0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bbe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d128      	bne.n	800bc3e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	881b      	ldrh	r3, [r3, #0]
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc02:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	441a      	add	r2, r3
 800bc10:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800bc14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	8013      	strh	r3, [r2, #0]
 800bc28:	e009      	b.n	800bc3e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	78db      	ldrb	r3, [r3, #3]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d103      	bne.n	800bc3a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2200      	movs	r2, #0
 800bc36:	619a      	str	r2, [r3, #24]
 800bc38:	e001      	b.n	800bc3e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e02a      	b.n	800bc94 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bc58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bc5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bc60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bc64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bc68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bc6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	441a      	add	r2, r3
 800bc7a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bc7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	37b0      	adds	r7, #176	@ 0xb0
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	785b      	ldrb	r3, [r3, #1]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d020      	beq.n	800bcf0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcc4:	81bb      	strh	r3, [r7, #12]
 800bcc6:	89bb      	ldrh	r3, [r7, #12]
 800bcc8:	f083 0310 	eor.w	r3, r3, #16
 800bccc:	81bb      	strh	r3, [r7, #12]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	441a      	add	r2, r3
 800bcd8:	89bb      	ldrh	r3, [r7, #12]
 800bcda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	8013      	strh	r3, [r2, #0]
 800bcee:	e01f      	b.n	800bd30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd06:	81fb      	strh	r3, [r7, #14]
 800bd08:	89fb      	ldrh	r3, [r7, #14]
 800bd0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bd0e:	81fb      	strh	r3, [r7, #14]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	441a      	add	r2, r3
 800bd1a:	89fb      	ldrh	r3, [r7, #14]
 800bd1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b087      	sub	sp, #28
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	785b      	ldrb	r3, [r3, #1]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d04c      	beq.n	800bdea <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	823b      	strh	r3, [r7, #16]
 800bd5e:	8a3b      	ldrh	r3, [r7, #16]
 800bd60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d01b      	beq.n	800bda0 <USB_EPClearStall+0x62>
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7e:	81fb      	strh	r3, [r7, #14]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	441a      	add	r2, r3
 800bd8a:	89fb      	ldrh	r3, [r7, #14]
 800bd8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	78db      	ldrb	r3, [r3, #3]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d06c      	beq.n	800be82 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdbe:	81bb      	strh	r3, [r7, #12]
 800bdc0:	89bb      	ldrh	r3, [r7, #12]
 800bdc2:	f083 0320 	eor.w	r3, r3, #32
 800bdc6:	81bb      	strh	r3, [r7, #12]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	441a      	add	r2, r3
 800bdd2:	89bb      	ldrh	r3, [r7, #12]
 800bdd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bde0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	8013      	strh	r3, [r2, #0]
 800bde8:	e04b      	b.n	800be82 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	82fb      	strh	r3, [r7, #22]
 800bdf8:	8afb      	ldrh	r3, [r7, #22]
 800bdfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01b      	beq.n	800be3a <USB_EPClearStall+0xfc>
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	b29b      	uxth	r3, r3
 800be10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be18:	82bb      	strh	r3, [r7, #20]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	441a      	add	r2, r3
 800be24:	8abb      	ldrh	r3, [r7, #20]
 800be26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be36:	b29b      	uxth	r3, r3
 800be38:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	b29b      	uxth	r3, r3
 800be48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be50:	827b      	strh	r3, [r7, #18]
 800be52:	8a7b      	ldrh	r3, [r7, #18]
 800be54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800be58:	827b      	strh	r3, [r7, #18]
 800be5a:	8a7b      	ldrh	r3, [r7, #18]
 800be5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800be60:	827b      	strh	r3, [r7, #18]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	441a      	add	r2, r3
 800be6c:	8a7b      	ldrh	r3, [r7, #18]
 800be6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be7e:	b29b      	uxth	r3, r3
 800be80:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	371c      	adds	r7, #28
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d103      	bne.n	800beaa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2280      	movs	r2, #128	@ 0x80
 800bea6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800becc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bee6:	b480      	push	{r7}
 800bee8:	b085      	sub	sp, #20
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b08b      	sub	sp, #44	@ 0x2c
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	4611      	mov	r1, r2
 800bf12:	461a      	mov	r2, r3
 800bf14:	460b      	mov	r3, r1
 800bf16:	80fb      	strh	r3, [r7, #6]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf1c:	88bb      	ldrh	r3, [r7, #4]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	085b      	lsrs	r3, r3, #1
 800bf22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf2c:	88fa      	ldrh	r2, [r7, #6]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	4413      	add	r3, r2
 800bf32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bf36:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3c:	e01c      	b.n	800bf78 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	3301      	adds	r3, #1
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	b21b      	sxth	r3, r3
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	b21a      	sxth	r2, r3
 800bf50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	b21b      	sxth	r3, r3
 800bf58:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	8a7a      	ldrh	r2, [r7, #18]
 800bf5e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	3302      	adds	r3, #2
 800bf64:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf74:	3b01      	subs	r3, #1
 800bf76:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1df      	bne.n	800bf3e <USB_WritePMA+0x38>
  }
}
 800bf7e:	bf00      	nop
 800bf80:	bf00      	nop
 800bf82:	372c      	adds	r7, #44	@ 0x2c
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b08b      	sub	sp, #44	@ 0x2c
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	4611      	mov	r1, r2
 800bf98:	461a      	mov	r2, r3
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	80fb      	strh	r3, [r7, #6]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bfa2:	88bb      	ldrh	r3, [r7, #4]
 800bfa4:	085b      	lsrs	r3, r3, #1
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfbc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfc2:	e018      	b.n	800bff6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	3302      	adds	r3, #2
 800bfd0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	0a1b      	lsrs	r3, r3, #8
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	3301      	adds	r3, #1
 800bfee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff2:	3b01      	subs	r3, #1
 800bff4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e3      	bne.n	800bfc4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bffc:	88bb      	ldrh	r3, [r7, #4]
 800bffe:	f003 0301 	and.w	r3, r3, #1
 800c002:	b29b      	uxth	r3, r3
 800c004:	2b00      	cmp	r3, #0
 800c006:	d007      	beq.n	800c018 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	b2da      	uxtb	r2, r3
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	701a      	strb	r2, [r3, #0]
  }
}
 800c018:	bf00      	nop
 800c01a:	372c      	adds	r7, #44	@ 0x2c
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <USBD_HID_Init>:
	0x29, 0x65, // USAGE_MAXIMUM (Keyboard Application)

	0x81, 0x00, // INPUT (Data,Ary,Abs)

	0xc0,       // END_COLLECTION

 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
};

/**
  * @}
  */
 800c030:	2010      	movs	r0, #16
 800c032:	f001 fe3d 	bl	800dcb0 <USBD_static_malloc>
 800c036:	60f8      	str	r0, [r7, #12]

/** @defgroup USBD_HID_Private_Functions
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d105      	bne.n	800c04a <USBD_HID_Init+0x26>
  * @{
  */
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

 800c046:	2302      	movs	r3, #2
 800c048:	e01b      	b.n	800c082 <USBD_HID_Init+0x5e>
/**
  * @brief  USBD_HID_Init
  *         Initialize the HID interface
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7c1b      	ldrb	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d103      	bne.n	800c062 <USBD_HID_Init+0x3e>
  * @retval status
  */
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2207      	movs	r2, #7
 800c05e:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800c060:	e002      	b.n	800c068 <USBD_HID_Init+0x44>
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  UNUSED(cfgidx);

 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	875a      	strh	r2, [r3, #58]	@ 0x3a
  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));

 800c068:	2304      	movs	r3, #4
 800c06a:	2203      	movs	r2, #3
 800c06c:	2181      	movs	r1, #129	@ 0x81
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f001 fd0d 	bl	800da8e <USBD_LL_OpenEP>
  if (hhid == NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	871a      	strh	r2, [r3, #56]	@ 0x38
  {
    pdev->pClassData = NULL;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	731a      	strb	r2, [r3, #12]
    return (uint8_t)USBD_EMEM;
  }
 800c080:	2300      	movs	r3, #0

 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <USBD_HID_DeInit>:
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
  }
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800c096:	2181      	movs	r1, #129	@ 0x81
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 fd1e 	bl	800dada <USBD_LL_CloseEP>

 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	871a      	strh	r2, [r3, #56]	@ 0x38
  hhid->state = HID_IDLE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	875a      	strh	r2, [r3, #58]	@ 0x3a

  return (uint8_t)USBD_OK;
}
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d009      	beq.n	800c0c8 <USBD_HID_DeInit+0x3e>

/**
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f001 fe06 	bl	800dccc <USBD_static_free>
  * @brief  USBD_HID_DeInit
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  *         DeInitialize the HID layer
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
 800c0c8:	2300      	movs	r3, #0
  * @retval status
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <USBD_HID_Setup>:

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;

 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  /* Free allocated memory */
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c0e4:	60fb      	str	r3, [r7, #12]
  if (pdev->pClassData != NULL)
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	75fb      	strb	r3, [r7, #23]
  {
    (void)USBD_free(pdev->pClassData);
    pdev->pClassData = NULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	817b      	strh	r3, [r7, #10]
  }

 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <USBD_HID_Setup+0x24>
  return (uint8_t)USBD_OK;
}
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	e0e8      	b.n	800c2ca <USBD_HID_Setup+0x1f6>

/**
  * @brief  USBD_HID_Setup
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c100:	2b00      	cmp	r3, #0
 800c102:	d046      	beq.n	800c192 <USBD_HID_Setup+0xbe>
 800c104:	2b20      	cmp	r3, #32
 800c106:	f040 80d8 	bne.w	800c2ba <USBD_HID_Setup+0x1e6>
  *         Handle the HID specific requests
  * @param  pdev: instance
  * @param  req: usb requests
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	785b      	ldrb	r3, [r3, #1]
 800c10e:	3b02      	subs	r3, #2
 800c110:	2b09      	cmp	r3, #9
 800c112:	d836      	bhi.n	800c182 <USBD_HID_Setup+0xae>
 800c114:	a201      	add	r2, pc, #4	@ (adr r2, 800c11c <USBD_HID_Setup+0x48>)
 800c116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11a:	bf00      	nop
 800c11c:	0800c173 	.word	0x0800c173
 800c120:	0800c153 	.word	0x0800c153
 800c124:	0800c183 	.word	0x0800c183
 800c128:	0800c183 	.word	0x0800c183
 800c12c:	0800c183 	.word	0x0800c183
 800c130:	0800c183 	.word	0x0800c183
 800c134:	0800c183 	.word	0x0800c183
 800c138:	0800c183 	.word	0x0800c183
 800c13c:	0800c161 	.word	0x0800c161
 800c140:	0800c145 	.word	0x0800c145
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	885b      	ldrh	r3, [r3, #2]
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	461a      	mov	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	601a      	str	r2, [r3, #0]
{
 800c150:	e01e      	b.n	800c190 <USBD_HID_Setup+0xbc>
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
  USBD_StatusTypeDef ret = USBD_OK;
  uint16_t len;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2201      	movs	r2, #1
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 f9b0 	bl	800d4be <USBD_CtlSendData>
  uint8_t *pbuf;
 800c15e:	e017      	b.n	800c190 <USBD_HID_Setup+0xbc>
  uint16_t status_info = 0U;

  if (hhid == NULL)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	885b      	ldrh	r3, [r3, #2]
 800c164:	0a1b      	lsrs	r3, r3, #8
 800c166:	b29b      	uxth	r3, r3
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	461a      	mov	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	605a      	str	r2, [r3, #4]
  {
 800c170:	e00e      	b.n	800c190 <USBD_HID_Setup+0xbc>
    return (uint8_t)USBD_FAIL;
  }

 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3304      	adds	r3, #4
 800c176:	2201      	movs	r2, #1
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 f99f 	bl	800d4be <USBD_CtlSendData>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c180:	e006      	b.n	800c190 <USBD_HID_Setup+0xbc>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 f929 	bl	800d3dc <USBD_CtlError>
      {
 800c18a:	2303      	movs	r3, #3
 800c18c:	75fb      	strb	r3, [r7, #23]
        case HID_REQ_SET_PROTOCOL:
 800c18e:	bf00      	nop
          hhid->Protocol = (uint8_t)(req->wValue);
          break;
 800c190:	e09a      	b.n	800c2c8 <USBD_HID_Setup+0x1f4>

        case HID_REQ_GET_PROTOCOL:
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	2b0b      	cmp	r3, #11
 800c198:	f200 8086 	bhi.w	800c2a8 <USBD_HID_Setup+0x1d4>
 800c19c:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a4 <USBD_HID_Setup+0xd0>)
 800c19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a2:	bf00      	nop
 800c1a4:	0800c1d5 	.word	0x0800c1d5
 800c1a8:	0800c2b7 	.word	0x0800c2b7
 800c1ac:	0800c2a9 	.word	0x0800c2a9
 800c1b0:	0800c2a9 	.word	0x0800c2a9
 800c1b4:	0800c2a9 	.word	0x0800c2a9
 800c1b8:	0800c2a9 	.word	0x0800c2a9
 800c1bc:	0800c1ff 	.word	0x0800c1ff
 800c1c0:	0800c2a9 	.word	0x0800c2a9
 800c1c4:	0800c2a9 	.word	0x0800c2a9
 800c1c8:	0800c2a9 	.word	0x0800c2a9
 800c1cc:	0800c257 	.word	0x0800c257
 800c1d0:	0800c281 	.word	0x0800c281
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
          break;

 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	d107      	bne.n	800c1f0 <USBD_HID_Setup+0x11c>
        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c1e0:	f107 030a 	add.w	r3, r7, #10
 800c1e4:	2202      	movs	r2, #2
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 f968 	bl	800d4be <USBD_CtlSendData>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
          break;

        default:
 800c1ee:	e063      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f001 f8f2 	bl	800d3dc <USBD_CtlError>
          break;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	75fb      	strb	r3, [r7, #23]
        default:
 800c1fc:	e05c      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
          USBD_CtlError(pdev, req);
          ret = USBD_FAIL;
          break;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	0a1b      	lsrs	r3, r3, #8
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b22      	cmp	r3, #34	@ 0x22
 800c208:	d108      	bne.n	800c21c <USBD_HID_Setup+0x148>
      }
      break;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	88db      	ldrh	r3, [r3, #6]
 800c20e:	2b4a      	cmp	r3, #74	@ 0x4a
 800c210:	bf28      	it	cs
 800c212:	234a      	movcs	r3, #74	@ 0x4a
 800c214:	82bb      	strh	r3, [r7, #20]
    case USB_REQ_TYPE_STANDARD:
 800c216:	4b2f      	ldr	r3, [pc, #188]	@ (800c2d4 <USBD_HID_Setup+0x200>)
 800c218:	613b      	str	r3, [r7, #16]
 800c21a:	e015      	b.n	800c248 <USBD_HID_Setup+0x174>
      switch (req->bRequest)
      {
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	885b      	ldrh	r3, [r3, #2]
 800c220:	0a1b      	lsrs	r3, r3, #8
 800c222:	b29b      	uxth	r3, r3
 800c224:	2b21      	cmp	r3, #33	@ 0x21
 800c226:	d108      	bne.n	800c23a <USBD_HID_Setup+0x166>
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c228:	4b2b      	ldr	r3, [pc, #172]	@ (800c2d8 <USBD_HID_Setup+0x204>)
 800c22a:	613b      	str	r3, [r7, #16]
          {
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	88db      	ldrh	r3, [r3, #6]
 800c230:	2b09      	cmp	r3, #9
 800c232:	bf28      	it	cs
 800c234:	2309      	movcs	r3, #9
 800c236:	82bb      	strh	r3, [r7, #20]
 800c238:	e006      	b.n	800c248 <USBD_HID_Setup+0x174>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
          }
          else
          {
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 f8cd 	bl	800d3dc <USBD_CtlError>
            USBD_CtlError(pdev, req);
 800c242:	2303      	movs	r3, #3
 800c244:	75fb      	strb	r3, [r7, #23]
            ret = USBD_FAIL;
 800c246:	e037      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
          }
          break;
 800c248:	8abb      	ldrh	r3, [r7, #20]
 800c24a:	461a      	mov	r2, r3
 800c24c:	6939      	ldr	r1, [r7, #16]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f001 f935 	bl	800d4be <USBD_CtlSendData>

 800c254:	e030      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
          {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d107      	bne.n	800c272 <USBD_HID_Setup+0x19e>
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3308      	adds	r3, #8
 800c266:	2201      	movs	r2, #1
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f001 f927 	bl	800d4be <USBD_CtlSendData>
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
          {
            pbuf = USBD_HID_Desc;
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
          }
          else
 800c270:	e022      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
            pbuf = USBD_HID_Desc;
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f001 f8b1 	bl	800d3dc <USBD_CtlError>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800c27a:	2303      	movs	r3, #3
 800c27c:	75fb      	strb	r3, [r7, #23]
          else
 800c27e:	e01b      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d106      	bne.n	800c29a <USBD_HID_Setup+0x1c6>
            break;
          }
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	885b      	ldrh	r3, [r3, #2]
 800c290:	b2db      	uxtb	r3, r3
 800c292:	461a      	mov	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	609a      	str	r2, [r3, #8]
          break;

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c298:	e00e      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
        case USB_REQ_GET_INTERFACE :
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 f89d 	bl	800d3dc <USBD_CtlError>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	75fb      	strb	r3, [r7, #23]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c2a6:	e007      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
          }
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f001 f896 	bl	800d3dc <USBD_CtlError>
          break;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	75fb      	strb	r3, [r7, #23]

 800c2b4:	e000      	b.n	800c2b8 <USBD_HID_Setup+0x1e4>
          {
 800c2b6:	bf00      	nop
        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b8:	e006      	b.n	800c2c8 <USBD_HID_Setup+0x1f4>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
          }
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 f88d 	bl	800d3dc <USBD_CtlError>
          else
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	75fb      	strb	r3, [r7, #23]
          {
 800c2c6:	bf00      	nop
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
          break;
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	200000cc 	.word	0x200000cc
 800c2d8:	200000b4 	.word	0x200000b4

0800c2dc <USBD_HID_SendReport>:
        default:
          USBD_CtlError(pdev, req);
          ret = USBD_FAIL;
          break;
      }
      break;
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	80fb      	strh	r3, [r7, #6]

 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c2f0:	617b      	str	r3, [r7, #20]
    default:
      USBD_CtlError(pdev, req);
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <USBD_HID_SendReport+0x20>
      ret = USBD_FAIL;
      break;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e013      	b.n	800c324 <USBD_HID_SendReport+0x48>
  }

  return (uint8_t)ret;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b03      	cmp	r3, #3
 800c306:	d10c      	bne.n	800c322 <USBD_HID_SendReport+0x46>
}

 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	7b1b      	ldrb	r3, [r3, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d108      	bne.n	800c322 <USBD_HID_SendReport+0x46>
/**
  * @brief  USBD_HID_SendReport
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	2201      	movs	r2, #1
 800c314:	731a      	strb	r2, [r3, #12]
  *         Send HID Report
 800c316:	88fb      	ldrh	r3, [r7, #6]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	2181      	movs	r1, #129	@ 0x81
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f001 fc84 	bl	800dc2a <USBD_LL_Transmit>
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
 800c322:	2300      	movs	r3, #0
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
 800c324:	4618      	mov	r0, r3
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_HID_GetFSCfgDesc>:
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
  }
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  else   /* LOW and FULL-speed endpoints */
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2222      	movs	r2, #34	@ 0x22
 800c338:	801a      	strh	r2, [r3, #0]
  {
    /* Sets the data transfer polling interval for low and full
 800c33a:	4b03      	ldr	r3, [pc, #12]	@ (800c348 <USBD_HID_GetFSCfgDesc+0x1c>)
    speed transfers */
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	20000048 	.word	0x20000048

0800c34c <USBD_HID_GetHSCfgDesc>:
}

/**
  * @brief  USBD_HID_GetCfgFSDesc
  *         return FS configuration descriptor
  * @param  speed : current device speed
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  * @param  length : pointer data length
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2222      	movs	r2, #34	@ 0x22
 800c358:	801a      	strh	r2, [r3, #0]
  * @retval pointer to descriptor buffer
  */
 800c35a:	4b03      	ldr	r3, [pc, #12]	@ (800c368 <USBD_HID_GetHSCfgDesc+0x1c>)
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	2000006c 	.word	0x2000006c

0800c36c <USBD_HID_GetOtherSpeedCfgDesc>:
}

/**
  * @brief  USBD_HID_GetCfgHSDesc
  *         return HS configuration descriptor
  * @param  speed : current device speed
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  * @param  length : pointer data length
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2222      	movs	r2, #34	@ 0x22
 800c378:	801a      	strh	r2, [r3, #0]
  * @retval pointer to descriptor buffer
  */
 800c37a:	4b03      	ldr	r3, [pc, #12]	@ (800c388 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
 800c37c:	4618      	mov	r0, r3
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	20000090 	.word	0x20000090

0800c38c <USBD_HID_DataIn>:
}

/**
  * @brief  USBD_HID_GetOtherSpeedCfgDesc
  *         return other speed configuration descriptor
  * @param  speed : current device speed
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	70fb      	strb	r3, [r7, #3]
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c39e:	2200      	movs	r2, #0
 800c3a0:	731a      	strb	r2, [r3, #12]
{
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800c3a2:	2300      	movs	r3, #0

 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <USBD_HID_GetDeviceQualifierDesc>:
  * @brief  USBD_HID_DataIn
  *         handle data IN Stage
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	220a      	movs	r2, #10
 800c3bc:	801a      	strh	r2, [r3, #0]
{
  UNUSED(epnum);
 800c3be:	4b03      	ldr	r3, [pc, #12]	@ (800c3cc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
  /* Ensure that the FIFO is empty before a new transfer, this condition could
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	200000c0 	.word	0x200000c0

0800c3d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e01f      	b.n	800c428 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	79fa      	ldrb	r2, [r7, #7]
 800c41a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f001 facd 	bl	800d9bc <USBD_LL_Init>
 800c422:	4603      	mov	r3, r0
 800c424:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c43a:	2300      	movs	r3, #0
 800c43c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c444:	2303      	movs	r3, #3
 800c446:	e016      	b.n	800c476 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00b      	beq.n	800c474 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c464:	f107 020e 	add.w	r2, r7, #14
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	4602      	mov	r2, r0
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 fae6 	bl	800da58 <USBD_LL_Start>
 800c48c:	4603      	mov	r3, r0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c496:	b480      	push	{r7}
 800c498:	b083      	sub	sp, #12
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d009      	beq.n	800c4da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	78fa      	ldrb	r2, [r7, #3]
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	4798      	blx	r3
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d007      	beq.n	800c50a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	78fa      	ldrb	r2, [r7, #3]
 800c504:	4611      	mov	r1, r2
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	4798      	blx	r3
  }

  return USBD_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	4618      	mov	r0, r3
 800c528:	f000 ff1e 	bl	800d368 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c53a:	461a      	mov	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c548:	f003 031f 	and.w	r3, r3, #31
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d01a      	beq.n	800c586 <USBD_LL_SetupStage+0x72>
 800c550:	2b02      	cmp	r3, #2
 800c552:	d822      	bhi.n	800c59a <USBD_LL_SetupStage+0x86>
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <USBD_LL_SetupStage+0x4a>
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d00a      	beq.n	800c572 <USBD_LL_SetupStage+0x5e>
 800c55c:	e01d      	b.n	800c59a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f9f0 	bl	800c94c <USBD_StdDevReq>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]
      break;
 800c570:	e020      	b.n	800c5b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa54 	bl	800ca28 <USBD_StdItfReq>
 800c580:	4603      	mov	r3, r0
 800c582:	73fb      	strb	r3, [r7, #15]
      break;
 800c584:	e016      	b.n	800c5b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c58c:	4619      	mov	r1, r3
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fa93 	bl	800caba <USBD_StdEPReq>
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
      break;
 800c598:	e00c      	b.n	800c5b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c5a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f001 fab5 	bl	800db18 <USBD_LL_StallEP>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5b2:	bf00      	nop
  }

  return ret;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b086      	sub	sp, #24
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	60f8      	str	r0, [r7, #12]
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	607a      	str	r2, [r7, #4]
 800c5ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5cc:	7afb      	ldrb	r3, [r7, #11]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d138      	bne.n	800c644 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c5d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d14a      	bne.n	800c67a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	689a      	ldr	r2, [r3, #8]
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d913      	bls.n	800c618 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	689a      	ldr	r2, [r3, #8]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	1ad2      	subs	r2, r2, r3
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	68da      	ldr	r2, [r3, #12]
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	4293      	cmp	r3, r2
 800c608:	bf28      	it	cs
 800c60a:	4613      	movcs	r3, r2
 800c60c:	461a      	mov	r2, r3
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 ff80 	bl	800d516 <USBD_CtlContinueRx>
 800c616:	e030      	b.n	800c67a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b03      	cmp	r3, #3
 800c622:	d10b      	bne.n	800c63c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d005      	beq.n	800c63c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 ff7b 	bl	800d538 <USBD_CtlSendStatus>
 800c642:	e01a      	b.n	800c67a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d114      	bne.n	800c67a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c656:	699b      	ldr	r3, [r3, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00e      	beq.n	800c67a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	7afa      	ldrb	r2, [r7, #11]
 800c666:	4611      	mov	r1, r2
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	4798      	blx	r3
 800c66c:	4603      	mov	r3, r0
 800c66e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c676:	7dfb      	ldrb	r3, [r7, #23]
 800c678:	e000      	b.n	800c67c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	460b      	mov	r3, r1
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c692:	7afb      	ldrb	r3, [r7, #11]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d16b      	bne.n	800c770 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	3314      	adds	r3, #20
 800c69c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d156      	bne.n	800c756 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	689a      	ldr	r2, [r3, #8]
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d914      	bls.n	800c6de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	689a      	ldr	r2, [r3, #8]
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	1ad2      	subs	r2, r2, r3
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f000 ff12 	bl	800d4f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f001 fac8 	bl	800dc6c <USBD_LL_PrepareReceive>
 800c6dc:	e03b      	b.n	800c756 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	68da      	ldr	r2, [r3, #12]
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d11c      	bne.n	800c724 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d316      	bcc.n	800c724 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	685a      	ldr	r2, [r3, #4]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c700:	429a      	cmp	r2, r3
 800c702:	d20f      	bcs.n	800c724 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c704:	2200      	movs	r2, #0
 800c706:	2100      	movs	r1, #0
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f000 fef3 	bl	800d4f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2200      	movs	r2, #0
 800c712:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c716:	2300      	movs	r3, #0
 800c718:	2200      	movs	r2, #0
 800c71a:	2100      	movs	r1, #0
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f001 faa5 	bl	800dc6c <USBD_LL_PrepareReceive>
 800c722:	e018      	b.n	800c756 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	d10b      	bne.n	800c748 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d005      	beq.n	800c748 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c748:	2180      	movs	r1, #128	@ 0x80
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	f001 f9e4 	bl	800db18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f000 ff04 	bl	800d55e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d122      	bne.n	800c7a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7ff fe98 	bl	800c496 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c76e:	e01a      	b.n	800c7a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d114      	bne.n	800c7a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c782:	695b      	ldr	r3, [r3, #20]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00e      	beq.n	800c7a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	7afa      	ldrb	r2, [r7, #11]
 800c792:	4611      	mov	r1, r2
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	4798      	blx	r3
 800c798:	4603      	mov	r3, r0
 800c79a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c79c:	7dfb      	ldrb	r3, [r7, #23]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
 800c7a4:	e000      	b.n	800c7a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e02f      	b.n	800c844 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00f      	beq.n	800c80e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d009      	beq.n	800c80e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6852      	ldr	r2, [r2, #4]
 800c806:	b2d2      	uxtb	r2, r2
 800c808:	4611      	mov	r1, r2
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c80e:	2340      	movs	r3, #64	@ 0x40
 800c810:	2200      	movs	r2, #0
 800c812:	2100      	movs	r1, #0
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f001 f93a 	bl	800da8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2240      	movs	r2, #64	@ 0x40
 800c826:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c82a:	2340      	movs	r3, #64	@ 0x40
 800c82c:	2200      	movs	r2, #0
 800c82e:	2180      	movs	r1, #128	@ 0x80
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f001 f92c 	bl	800da8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2240      	movs	r2, #64	@ 0x40
 800c840:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	78fa      	ldrb	r2, [r7, #3]
 800c85c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2204      	movs	r2, #4
 800c886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b04      	cmp	r3, #4
 800c8aa:	d106      	bne.n	800c8ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e012      	b.n	800c904 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	d10b      	bne.n	800c902 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d005      	beq.n	800c902 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8fc:	69db      	ldr	r3, [r3, #28]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b087      	sub	sp, #28
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	3301      	adds	r3, #1
 800c922:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c92a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	b21a      	sxth	r2, r3
 800c932:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c936:	4313      	orrs	r3, r2
 800c938:	b21b      	sxth	r3, r3
 800c93a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c93c:	89fb      	ldrh	r3, [r7, #14]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	371c      	adds	r7, #28
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
	...

0800c94c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c962:	2b40      	cmp	r3, #64	@ 0x40
 800c964:	d005      	beq.n	800c972 <USBD_StdDevReq+0x26>
 800c966:	2b40      	cmp	r3, #64	@ 0x40
 800c968:	d853      	bhi.n	800ca12 <USBD_StdDevReq+0xc6>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00b      	beq.n	800c986 <USBD_StdDevReq+0x3a>
 800c96e:	2b20      	cmp	r3, #32
 800c970:	d14f      	bne.n	800ca12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	4798      	blx	r3
 800c980:	4603      	mov	r3, r0
 800c982:	73fb      	strb	r3, [r7, #15]
      break;
 800c984:	e04a      	b.n	800ca1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	785b      	ldrb	r3, [r3, #1]
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	d83b      	bhi.n	800ca06 <USBD_StdDevReq+0xba>
 800c98e:	a201      	add	r2, pc, #4	@ (adr r2, 800c994 <USBD_StdDevReq+0x48>)
 800c990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c994:	0800c9e9 	.word	0x0800c9e9
 800c998:	0800c9fd 	.word	0x0800c9fd
 800c99c:	0800ca07 	.word	0x0800ca07
 800c9a0:	0800c9f3 	.word	0x0800c9f3
 800c9a4:	0800ca07 	.word	0x0800ca07
 800c9a8:	0800c9c7 	.word	0x0800c9c7
 800c9ac:	0800c9bd 	.word	0x0800c9bd
 800c9b0:	0800ca07 	.word	0x0800ca07
 800c9b4:	0800c9df 	.word	0x0800c9df
 800c9b8:	0800c9d1 	.word	0x0800c9d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f9de 	bl	800cd80 <USBD_GetDescriptor>
          break;
 800c9c4:	e024      	b.n	800ca10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c9c6:	6839      	ldr	r1, [r7, #0]
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fb43 	bl	800d054 <USBD_SetAddress>
          break;
 800c9ce:	e01f      	b.n	800ca10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fb82 	bl	800d0dc <USBD_SetConfig>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73fb      	strb	r3, [r7, #15]
          break;
 800c9dc:	e018      	b.n	800ca10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c9de:	6839      	ldr	r1, [r7, #0]
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fc21 	bl	800d228 <USBD_GetConfig>
          break;
 800c9e6:	e013      	b.n	800ca10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fc52 	bl	800d294 <USBD_GetStatus>
          break;
 800c9f0:	e00e      	b.n	800ca10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fc81 	bl	800d2fc <USBD_SetFeature>
          break;
 800c9fa:	e009      	b.n	800ca10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fc90 	bl	800d324 <USBD_ClrFeature>
          break;
 800ca04:	e004      	b.n	800ca10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fce7 	bl	800d3dc <USBD_CtlError>
          break;
 800ca0e:	bf00      	nop
      }
      break;
 800ca10:	e004      	b.n	800ca1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fce1 	bl	800d3dc <USBD_CtlError>
      break;
 800ca1a:	bf00      	nop
  }

  return ret;
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop

0800ca28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca3e:	2b40      	cmp	r3, #64	@ 0x40
 800ca40:	d005      	beq.n	800ca4e <USBD_StdItfReq+0x26>
 800ca42:	2b40      	cmp	r3, #64	@ 0x40
 800ca44:	d82f      	bhi.n	800caa6 <USBD_StdItfReq+0x7e>
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <USBD_StdItfReq+0x26>
 800ca4a:	2b20      	cmp	r3, #32
 800ca4c:	d12b      	bne.n	800caa6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	3b01      	subs	r3, #1
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d81d      	bhi.n	800ca98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	889b      	ldrh	r3, [r3, #4]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d813      	bhi.n	800ca8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
 800ca74:	4603      	mov	r3, r0
 800ca76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	88db      	ldrh	r3, [r3, #6]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d110      	bne.n	800caa2 <USBD_StdItfReq+0x7a>
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10d      	bne.n	800caa2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fd56 	bl	800d538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca8c:	e009      	b.n	800caa2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fca3 	bl	800d3dc <USBD_CtlError>
          break;
 800ca96:	e004      	b.n	800caa2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fc9e 	bl	800d3dc <USBD_CtlError>
          break;
 800caa0:	e000      	b.n	800caa4 <USBD_StdItfReq+0x7c>
          break;
 800caa2:	bf00      	nop
      }
      break;
 800caa4:	e004      	b.n	800cab0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fc97 	bl	800d3dc <USBD_CtlError>
      break;
 800caae:	bf00      	nop
  }

  return ret;
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	889b      	ldrh	r3, [r3, #4]
 800cacc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cad6:	2b40      	cmp	r3, #64	@ 0x40
 800cad8:	d007      	beq.n	800caea <USBD_StdEPReq+0x30>
 800cada:	2b40      	cmp	r3, #64	@ 0x40
 800cadc:	f200 8145 	bhi.w	800cd6a <USBD_StdEPReq+0x2b0>
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00c      	beq.n	800cafe <USBD_StdEPReq+0x44>
 800cae4:	2b20      	cmp	r3, #32
 800cae6:	f040 8140 	bne.w	800cd6a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	4798      	blx	r3
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]
      break;
 800cafc:	e13a      	b.n	800cd74 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	785b      	ldrb	r3, [r3, #1]
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d007      	beq.n	800cb16 <USBD_StdEPReq+0x5c>
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	f300 8129 	bgt.w	800cd5e <USBD_StdEPReq+0x2a4>
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d07f      	beq.n	800cc10 <USBD_StdEPReq+0x156>
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d03c      	beq.n	800cb8e <USBD_StdEPReq+0xd4>
 800cb14:	e123      	b.n	800cd5e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d002      	beq.n	800cb28 <USBD_StdEPReq+0x6e>
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d016      	beq.n	800cb54 <USBD_StdEPReq+0x9a>
 800cb26:	e02c      	b.n	800cb82 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00d      	beq.n	800cb4a <USBD_StdEPReq+0x90>
 800cb2e:	7bbb      	ldrb	r3, [r7, #14]
 800cb30:	2b80      	cmp	r3, #128	@ 0x80
 800cb32:	d00a      	beq.n	800cb4a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 ffed 	bl	800db18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb3e:	2180      	movs	r1, #128	@ 0x80
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 ffe9 	bl	800db18 <USBD_LL_StallEP>
 800cb46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb48:	e020      	b.n	800cb8c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fc45 	bl	800d3dc <USBD_CtlError>
              break;
 800cb52:	e01b      	b.n	800cb8c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	885b      	ldrh	r3, [r3, #2]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10e      	bne.n	800cb7a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00b      	beq.n	800cb7a <USBD_StdEPReq+0xc0>
 800cb62:	7bbb      	ldrb	r3, [r7, #14]
 800cb64:	2b80      	cmp	r3, #128	@ 0x80
 800cb66:	d008      	beq.n	800cb7a <USBD_StdEPReq+0xc0>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	88db      	ldrh	r3, [r3, #6]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d104      	bne.n	800cb7a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb70:	7bbb      	ldrb	r3, [r7, #14]
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 ffcf 	bl	800db18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fcdc 	bl	800d538 <USBD_CtlSendStatus>

              break;
 800cb80:	e004      	b.n	800cb8c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cb82:	6839      	ldr	r1, [r7, #0]
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fc29 	bl	800d3dc <USBD_CtlError>
              break;
 800cb8a:	bf00      	nop
          }
          break;
 800cb8c:	e0ec      	b.n	800cd68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d002      	beq.n	800cba0 <USBD_StdEPReq+0xe6>
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d016      	beq.n	800cbcc <USBD_StdEPReq+0x112>
 800cb9e:	e030      	b.n	800cc02 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cba0:	7bbb      	ldrb	r3, [r7, #14]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00d      	beq.n	800cbc2 <USBD_StdEPReq+0x108>
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	2b80      	cmp	r3, #128	@ 0x80
 800cbaa:	d00a      	beq.n	800cbc2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 ffb1 	bl	800db18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbb6:	2180      	movs	r1, #128	@ 0x80
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 ffad 	bl	800db18 <USBD_LL_StallEP>
 800cbbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbc0:	e025      	b.n	800cc0e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fc09 	bl	800d3dc <USBD_CtlError>
              break;
 800cbca:	e020      	b.n	800cc0e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	885b      	ldrh	r3, [r3, #2]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d11b      	bne.n	800cc0c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d004      	beq.n	800cbe8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cbde:	7bbb      	ldrb	r3, [r7, #14]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 ffb7 	bl	800db56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fca5 	bl	800d538 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	4798      	blx	r3
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cc00:	e004      	b.n	800cc0c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cc02:	6839      	ldr	r1, [r7, #0]
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fbe9 	bl	800d3dc <USBD_CtlError>
              break;
 800cc0a:	e000      	b.n	800cc0e <USBD_StdEPReq+0x154>
              break;
 800cc0c:	bf00      	nop
          }
          break;
 800cc0e:	e0ab      	b.n	800cd68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d002      	beq.n	800cc22 <USBD_StdEPReq+0x168>
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	d032      	beq.n	800cc86 <USBD_StdEPReq+0x1cc>
 800cc20:	e097      	b.n	800cd52 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <USBD_StdEPReq+0x17e>
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	2b80      	cmp	r3, #128	@ 0x80
 800cc2c:	d004      	beq.n	800cc38 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fbd3 	bl	800d3dc <USBD_CtlError>
                break;
 800cc36:	e091      	b.n	800cd5c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da0b      	bge.n	800cc58 <USBD_StdEPReq+0x19e>
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	3310      	adds	r3, #16
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	4413      	add	r3, r2
 800cc54:	3304      	adds	r3, #4
 800cc56:	e00b      	b.n	800cc70 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc5e:	4613      	mov	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	3304      	adds	r3, #4
 800cc70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fc1d 	bl	800d4be <USBD_CtlSendData>
              break;
 800cc84:	e06a      	b.n	800cd5c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	da11      	bge.n	800ccb2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc8e:	7bbb      	ldrb	r3, [r7, #14]
 800cc90:	f003 020f 	and.w	r2, r3, #15
 800cc94:	6879      	ldr	r1, [r7, #4]
 800cc96:	4613      	mov	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	440b      	add	r3, r1
 800cca0:	3324      	adds	r3, #36	@ 0x24
 800cca2:	881b      	ldrh	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d117      	bne.n	800ccd8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fb96 	bl	800d3dc <USBD_CtlError>
                  break;
 800ccb0:	e054      	b.n	800cd5c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	f003 020f 	and.w	r2, r3, #15
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	440b      	add	r3, r1
 800ccc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d104      	bne.n	800ccd8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ccce:	6839      	ldr	r1, [r7, #0]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fb83 	bl	800d3dc <USBD_CtlError>
                  break;
 800ccd6:	e041      	b.n	800cd5c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	da0b      	bge.n	800ccf8 <USBD_StdEPReq+0x23e>
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	3310      	adds	r3, #16
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	e00b      	b.n	800cd10 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
 800ccfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccfe:	4613      	mov	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	3304      	adds	r3, #4
 800cd10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <USBD_StdEPReq+0x264>
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	2b80      	cmp	r3, #128	@ 0x80
 800cd1c:	d103      	bne.n	800cd26 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2200      	movs	r2, #0
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	e00e      	b.n	800cd44 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd26:	7bbb      	ldrb	r3, [r7, #14]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 ff32 	bl	800db94 <USBD_LL_IsStallEP>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d003      	beq.n	800cd3e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	601a      	str	r2, [r3, #0]
 800cd3c:	e002      	b.n	800cd44 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	2200      	movs	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	2202      	movs	r2, #2
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fbb7 	bl	800d4be <USBD_CtlSendData>
              break;
 800cd50:	e004      	b.n	800cd5c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fb41 	bl	800d3dc <USBD_CtlError>
              break;
 800cd5a:	bf00      	nop
          }
          break;
 800cd5c:	e004      	b.n	800cd68 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fb3b 	bl	800d3dc <USBD_CtlError>
          break;
 800cd66:	bf00      	nop
      }
      break;
 800cd68:	e004      	b.n	800cd74 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 fb35 	bl	800d3dc <USBD_CtlError>
      break;
 800cd72:	bf00      	nop
  }

  return ret;
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
	...

0800cd80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd92:	2300      	movs	r3, #0
 800cd94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	885b      	ldrh	r3, [r3, #2]
 800cd9a:	0a1b      	lsrs	r3, r3, #8
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	2b06      	cmp	r3, #6
 800cda2:	f200 8128 	bhi.w	800cff6 <USBD_GetDescriptor+0x276>
 800cda6:	a201      	add	r2, pc, #4	@ (adr r2, 800cdac <USBD_GetDescriptor+0x2c>)
 800cda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdac:	0800cdc9 	.word	0x0800cdc9
 800cdb0:	0800cde1 	.word	0x0800cde1
 800cdb4:	0800ce21 	.word	0x0800ce21
 800cdb8:	0800cff7 	.word	0x0800cff7
 800cdbc:	0800cff7 	.word	0x0800cff7
 800cdc0:	0800cf97 	.word	0x0800cf97
 800cdc4:	0800cfc3 	.word	0x0800cfc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	7c12      	ldrb	r2, [r2, #16]
 800cdd4:	f107 0108 	add.w	r1, r7, #8
 800cdd8:	4610      	mov	r0, r2
 800cdda:	4798      	blx	r3
 800cddc:	60f8      	str	r0, [r7, #12]
      break;
 800cdde:	e112      	b.n	800d006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	7c1b      	ldrb	r3, [r3, #16]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10d      	bne.n	800ce04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf0:	f107 0208 	add.w	r2, r7, #8
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	4798      	blx	r3
 800cdf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	2202      	movs	r2, #2
 800ce00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce02:	e100      	b.n	800d006 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce0c:	f107 0208 	add.w	r2, r7, #8
 800ce10:	4610      	mov	r0, r2
 800ce12:	4798      	blx	r3
 800ce14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	701a      	strb	r2, [r3, #0]
      break;
 800ce1e:	e0f2      	b.n	800d006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	885b      	ldrh	r3, [r3, #2]
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b05      	cmp	r3, #5
 800ce28:	f200 80ac 	bhi.w	800cf84 <USBD_GetDescriptor+0x204>
 800ce2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce34 <USBD_GetDescriptor+0xb4>)
 800ce2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce32:	bf00      	nop
 800ce34:	0800ce4d 	.word	0x0800ce4d
 800ce38:	0800ce81 	.word	0x0800ce81
 800ce3c:	0800ceb5 	.word	0x0800ceb5
 800ce40:	0800cee9 	.word	0x0800cee9
 800ce44:	0800cf1d 	.word	0x0800cf1d
 800ce48:	0800cf51 	.word	0x0800cf51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00b      	beq.n	800ce70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	7c12      	ldrb	r2, [r2, #16]
 800ce64:	f107 0108 	add.w	r1, r7, #8
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4798      	blx	r3
 800ce6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce6e:	e091      	b.n	800cf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fab2 	bl	800d3dc <USBD_CtlError>
            err++;
 800ce78:	7afb      	ldrb	r3, [r7, #11]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce7e:	e089      	b.n	800cf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00b      	beq.n	800cea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	7c12      	ldrb	r2, [r2, #16]
 800ce98:	f107 0108 	add.w	r1, r7, #8
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	4798      	blx	r3
 800cea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cea2:	e077      	b.n	800cf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fa98 	bl	800d3dc <USBD_CtlError>
            err++;
 800ceac:	7afb      	ldrb	r3, [r7, #11]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ceb2:	e06f      	b.n	800cf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00b      	beq.n	800ced8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	7c12      	ldrb	r2, [r2, #16]
 800cecc:	f107 0108 	add.w	r1, r7, #8
 800ced0:	4610      	mov	r0, r2
 800ced2:	4798      	blx	r3
 800ced4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ced6:	e05d      	b.n	800cf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fa7e 	bl	800d3dc <USBD_CtlError>
            err++;
 800cee0:	7afb      	ldrb	r3, [r7, #11]
 800cee2:	3301      	adds	r3, #1
 800cee4:	72fb      	strb	r3, [r7, #11]
          break;
 800cee6:	e055      	b.n	800cf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00b      	beq.n	800cf0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	7c12      	ldrb	r2, [r2, #16]
 800cf00:	f107 0108 	add.w	r1, r7, #8
 800cf04:	4610      	mov	r0, r2
 800cf06:	4798      	blx	r3
 800cf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf0a:	e043      	b.n	800cf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fa64 	bl	800d3dc <USBD_CtlError>
            err++;
 800cf14:	7afb      	ldrb	r3, [r7, #11]
 800cf16:	3301      	adds	r3, #1
 800cf18:	72fb      	strb	r3, [r7, #11]
          break;
 800cf1a:	e03b      	b.n	800cf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00b      	beq.n	800cf40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	7c12      	ldrb	r2, [r2, #16]
 800cf34:	f107 0108 	add.w	r1, r7, #8
 800cf38:	4610      	mov	r0, r2
 800cf3a:	4798      	blx	r3
 800cf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf3e:	e029      	b.n	800cf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fa4a 	bl	800d3dc <USBD_CtlError>
            err++;
 800cf48:	7afb      	ldrb	r3, [r7, #11]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf4e:	e021      	b.n	800cf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00b      	beq.n	800cf74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf62:	699b      	ldr	r3, [r3, #24]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	7c12      	ldrb	r2, [r2, #16]
 800cf68:	f107 0108 	add.w	r1, r7, #8
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	4798      	blx	r3
 800cf70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf72:	e00f      	b.n	800cf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa30 	bl	800d3dc <USBD_CtlError>
            err++;
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	72fb      	strb	r3, [r7, #11]
          break;
 800cf82:	e007      	b.n	800cf94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fa28 	bl	800d3dc <USBD_CtlError>
          err++;
 800cf8c:	7afb      	ldrb	r3, [r7, #11]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cf92:	bf00      	nop
      }
      break;
 800cf94:	e037      	b.n	800d006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	7c1b      	ldrb	r3, [r3, #16]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d109      	bne.n	800cfb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfa6:	f107 0208 	add.w	r2, r7, #8
 800cfaa:	4610      	mov	r0, r2
 800cfac:	4798      	blx	r3
 800cfae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfb0:	e029      	b.n	800d006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fa11 	bl	800d3dc <USBD_CtlError>
        err++;
 800cfba:	7afb      	ldrb	r3, [r7, #11]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800cfc0:	e021      	b.n	800d006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	7c1b      	ldrb	r3, [r3, #16]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10d      	bne.n	800cfe6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfd2:	f107 0208 	add.w	r2, r7, #8
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	4798      	blx	r3
 800cfda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfe4:	e00f      	b.n	800d006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f9f7 	bl	800d3dc <USBD_CtlError>
        err++;
 800cfee:	7afb      	ldrb	r3, [r7, #11]
 800cff0:	3301      	adds	r3, #1
 800cff2:	72fb      	strb	r3, [r7, #11]
      break;
 800cff4:	e007      	b.n	800d006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f9ef 	bl	800d3dc <USBD_CtlError>
      err++;
 800cffe:	7afb      	ldrb	r3, [r7, #11]
 800d000:	3301      	adds	r3, #1
 800d002:	72fb      	strb	r3, [r7, #11]
      break;
 800d004:	bf00      	nop
  }

  if (err != 0U)
 800d006:	7afb      	ldrb	r3, [r7, #11]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d11e      	bne.n	800d04a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	88db      	ldrh	r3, [r3, #6]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d016      	beq.n	800d042 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d014:	893b      	ldrh	r3, [r7, #8]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00e      	beq.n	800d038 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	88da      	ldrh	r2, [r3, #6]
 800d01e:	893b      	ldrh	r3, [r7, #8]
 800d020:	4293      	cmp	r3, r2
 800d022:	bf28      	it	cs
 800d024:	4613      	movcs	r3, r2
 800d026:	b29b      	uxth	r3, r3
 800d028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d02a:	893b      	ldrh	r3, [r7, #8]
 800d02c:	461a      	mov	r2, r3
 800d02e:	68f9      	ldr	r1, [r7, #12]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fa44 	bl	800d4be <USBD_CtlSendData>
 800d036:	e009      	b.n	800d04c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f9ce 	bl	800d3dc <USBD_CtlError>
 800d040:	e004      	b.n	800d04c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fa78 	bl	800d538 <USBD_CtlSendStatus>
 800d048:	e000      	b.n	800d04c <USBD_GetDescriptor+0x2cc>
    return;
 800d04a:	bf00      	nop
  }
}
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop

0800d054 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	889b      	ldrh	r3, [r3, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d131      	bne.n	800d0ca <USBD_SetAddress+0x76>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	88db      	ldrh	r3, [r3, #6]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d12d      	bne.n	800d0ca <USBD_SetAddress+0x76>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	885b      	ldrh	r3, [r3, #2]
 800d072:	2b7f      	cmp	r3, #127	@ 0x7f
 800d074:	d829      	bhi.n	800d0ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	885b      	ldrh	r3, [r3, #2]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d104      	bne.n	800d098 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 f9a3 	bl	800d3dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d096:	e01d      	b.n	800d0d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7bfa      	ldrb	r2, [r7, #15]
 800d09c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 fda1 	bl	800dbec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fa44 	bl	800d538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d004      	beq.n	800d0c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0be:	e009      	b.n	800d0d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c8:	e004      	b.n	800d0d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f985 	bl	800d3dc <USBD_CtlError>
  }
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	885b      	ldrh	r3, [r3, #2]
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	4b4c      	ldr	r3, [pc, #304]	@ (800d224 <USBD_SetConfig+0x148>)
 800d0f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0f4:	4b4b      	ldr	r3, [pc, #300]	@ (800d224 <USBD_SetConfig+0x148>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d905      	bls.n	800d108 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f96c 	bl	800d3dc <USBD_CtlError>
    return USBD_FAIL;
 800d104:	2303      	movs	r3, #3
 800d106:	e088      	b.n	800d21a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	2b02      	cmp	r3, #2
 800d112:	d002      	beq.n	800d11a <USBD_SetConfig+0x3e>
 800d114:	2b03      	cmp	r3, #3
 800d116:	d025      	beq.n	800d164 <USBD_SetConfig+0x88>
 800d118:	e071      	b.n	800d1fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d11a:	4b42      	ldr	r3, [pc, #264]	@ (800d224 <USBD_SetConfig+0x148>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d01c      	beq.n	800d15c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d122:	4b40      	ldr	r3, [pc, #256]	@ (800d224 <USBD_SetConfig+0x148>)
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d12c:	4b3d      	ldr	r3, [pc, #244]	@ (800d224 <USBD_SetConfig+0x148>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	4619      	mov	r1, r3
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff f9ba 	bl	800c4ac <USBD_SetClassConfig>
 800d138:	4603      	mov	r3, r0
 800d13a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d004      	beq.n	800d14c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f949 	bl	800d3dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d14a:	e065      	b.n	800d218 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f9f3 	bl	800d538 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2203      	movs	r2, #3
 800d156:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d15a:	e05d      	b.n	800d218 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 f9eb 	bl	800d538 <USBD_CtlSendStatus>
      break;
 800d162:	e059      	b.n	800d218 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d164:	4b2f      	ldr	r3, [pc, #188]	@ (800d224 <USBD_SetConfig+0x148>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d112      	bne.n	800d192 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d174:	4b2b      	ldr	r3, [pc, #172]	@ (800d224 <USBD_SetConfig+0x148>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	461a      	mov	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d17e:	4b29      	ldr	r3, [pc, #164]	@ (800d224 <USBD_SetConfig+0x148>)
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	4619      	mov	r1, r3
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff f9ad 	bl	800c4e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 f9d4 	bl	800d538 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d190:	e042      	b.n	800d218 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d192:	4b24      	ldr	r3, [pc, #144]	@ (800d224 <USBD_SetConfig+0x148>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d02a      	beq.n	800d1f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff f99b 	bl	800c4e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d224 <USBD_SetConfig+0x148>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d224 <USBD_SetConfig+0x148>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff f974 	bl	800c4ac <USBD_SetClassConfig>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00f      	beq.n	800d1ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f903 	bl	800d3dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff f980 	bl	800c4e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2202      	movs	r2, #2
 800d1e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d1ec:	e014      	b.n	800d218 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f9a2 	bl	800d538 <USBD_CtlSendStatus>
      break;
 800d1f4:	e010      	b.n	800d218 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f99e 	bl	800d538 <USBD_CtlSendStatus>
      break;
 800d1fc:	e00c      	b.n	800d218 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f8eb 	bl	800d3dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d206:	4b07      	ldr	r3, [pc, #28]	@ (800d224 <USBD_SetConfig+0x148>)
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	4619      	mov	r1, r3
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7ff f969 	bl	800c4e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d212:	2303      	movs	r3, #3
 800d214:	73fb      	strb	r3, [r7, #15]
      break;
 800d216:	bf00      	nop
  }

  return ret;
 800d218:	7bfb      	ldrb	r3, [r7, #15]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	20001308 	.word	0x20001308

0800d228 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	88db      	ldrh	r3, [r3, #6]
 800d236:	2b01      	cmp	r3, #1
 800d238:	d004      	beq.n	800d244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f8cd 	bl	800d3dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d242:	e023      	b.n	800d28c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	dc02      	bgt.n	800d256 <USBD_GetConfig+0x2e>
 800d250:	2b00      	cmp	r3, #0
 800d252:	dc03      	bgt.n	800d25c <USBD_GetConfig+0x34>
 800d254:	e015      	b.n	800d282 <USBD_GetConfig+0x5a>
 800d256:	2b03      	cmp	r3, #3
 800d258:	d00b      	beq.n	800d272 <USBD_GetConfig+0x4a>
 800d25a:	e012      	b.n	800d282 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3308      	adds	r3, #8
 800d266:	2201      	movs	r2, #1
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f927 	bl	800d4be <USBD_CtlSendData>
        break;
 800d270:	e00c      	b.n	800d28c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3304      	adds	r3, #4
 800d276:	2201      	movs	r2, #1
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f91f 	bl	800d4be <USBD_CtlSendData>
        break;
 800d280:	e004      	b.n	800d28c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f8a9 	bl	800d3dc <USBD_CtlError>
        break;
 800d28a:	bf00      	nop
}
 800d28c:	bf00      	nop
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d81e      	bhi.n	800d2ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	88db      	ldrh	r3, [r3, #6]
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d004      	beq.n	800d2be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f890 	bl	800d3dc <USBD_CtlError>
        break;
 800d2bc:	e01a      	b.n	800d2f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d005      	beq.n	800d2da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	f043 0202 	orr.w	r2, r3, #2
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	330c      	adds	r3, #12
 800d2de:	2202      	movs	r2, #2
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f8eb 	bl	800d4be <USBD_CtlSendData>
      break;
 800d2e8:	e004      	b.n	800d2f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f875 	bl	800d3dc <USBD_CtlError>
      break;
 800d2f2:	bf00      	nop
  }
}
 800d2f4:	bf00      	nop
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	885b      	ldrh	r3, [r3, #2]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d106      	bne.n	800d31c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f90e 	bl	800d538 <USBD_CtlSendStatus>
  }
}
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d334:	b2db      	uxtb	r3, r3
 800d336:	3b01      	subs	r3, #1
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d80b      	bhi.n	800d354 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	885b      	ldrh	r3, [r3, #2]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d10c      	bne.n	800d35e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f8f3 	bl	800d538 <USBD_CtlSendStatus>
      }
      break;
 800d352:	e004      	b.n	800d35e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f840 	bl	800d3dc <USBD_CtlError>
      break;
 800d35c:	e000      	b.n	800d360 <USBD_ClrFeature+0x3c>
      break;
 800d35e:	bf00      	nop
  }
}
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	781a      	ldrb	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3301      	adds	r3, #1
 800d382:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	781a      	ldrb	r2, [r3, #0]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3301      	adds	r3, #1
 800d390:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7ff faba 	bl	800c90c <SWAPBYTE>
 800d398:	4603      	mov	r3, r0
 800d39a:	461a      	mov	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f7ff faad 	bl	800c90c <SWAPBYTE>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f7ff faa0 	bl	800c90c <SWAPBYTE>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	80da      	strh	r2, [r3, #6]
}
 800d3d4:	bf00      	nop
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3e6:	2180      	movs	r1, #128	@ 0x80
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 fb95 	bl	800db18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fb91 	bl	800db18 <USBD_LL_StallEP>
}
 800d3f6:	bf00      	nop
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b086      	sub	sp, #24
 800d402:	af00      	add	r7, sp, #0
 800d404:	60f8      	str	r0, [r7, #12]
 800d406:	60b9      	str	r1, [r7, #8]
 800d408:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d40a:	2300      	movs	r3, #0
 800d40c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d036      	beq.n	800d482 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d418:	6938      	ldr	r0, [r7, #16]
 800d41a:	f000 f836 	bl	800d48a <USBD_GetLen>
 800d41e:	4603      	mov	r3, r0
 800d420:	3301      	adds	r3, #1
 800d422:	b29b      	uxth	r3, r3
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	b29a      	uxth	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
 800d42e:	68ba      	ldr	r2, [r7, #8]
 800d430:	4413      	add	r3, r2
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	7812      	ldrb	r2, [r2, #0]
 800d436:	701a      	strb	r2, [r3, #0]
  idx++;
 800d438:	7dfb      	ldrb	r3, [r7, #23]
 800d43a:	3301      	adds	r3, #1
 800d43c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
 800d440:	68ba      	ldr	r2, [r7, #8]
 800d442:	4413      	add	r3, r2
 800d444:	2203      	movs	r2, #3
 800d446:	701a      	strb	r2, [r3, #0]
  idx++;
 800d448:	7dfb      	ldrb	r3, [r7, #23]
 800d44a:	3301      	adds	r3, #1
 800d44c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d44e:	e013      	b.n	800d478 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	4413      	add	r3, r2
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	7812      	ldrb	r2, [r2, #0]
 800d45a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	3301      	adds	r3, #1
 800d460:	613b      	str	r3, [r7, #16]
    idx++;
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	3301      	adds	r3, #1
 800d466:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	4413      	add	r3, r2
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]
    idx++;
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	3301      	adds	r3, #1
 800d476:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1e7      	bne.n	800d450 <USBD_GetString+0x52>
 800d480:	e000      	b.n	800d484 <USBD_GetString+0x86>
    return;
 800d482:	bf00      	nop
  }
}
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b085      	sub	sp, #20
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d492:	2300      	movs	r3, #0
 800d494:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d49a:	e005      	b.n	800d4a8 <USBD_GetLen+0x1e>
  {
    len++;
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1f5      	bne.n	800d49c <USBD_GetLen+0x12>
  }

  return len;
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3714      	adds	r7, #20
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b084      	sub	sp, #16
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	60f8      	str	r0, [r7, #12]
 800d4c6:	60b9      	str	r1, [r7, #8]
 800d4c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68ba      	ldr	r2, [r7, #8]
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f000 fba0 	bl	800dc2a <USBD_LL_Transmit>

  return USBD_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	2100      	movs	r1, #0
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 fb8f 	bl	800dc2a <USBD_LL_Transmit>

  return USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	60b9      	str	r1, [r7, #8]
 800d520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	2100      	movs	r1, #0
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f000 fb9f 	bl	800dc6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2204      	movs	r2, #4
 800d544:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d548:	2300      	movs	r3, #0
 800d54a:	2200      	movs	r2, #0
 800d54c:	2100      	movs	r1, #0
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fb6b 	bl	800dc2a <USBD_LL_Transmit>

  return USBD_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b082      	sub	sp, #8
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2205      	movs	r2, #5
 800d56a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d56e:	2300      	movs	r3, #0
 800d570:	2200      	movs	r2, #0
 800d572:	2100      	movs	r1, #0
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fb79 	bl	800dc6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800d588:	2200      	movs	r2, #0
 800d58a:	490e      	ldr	r1, [pc, #56]	@ (800d5c4 <MX_USB_Device_Init+0x40>)
 800d58c:	480e      	ldr	r0, [pc, #56]	@ (800d5c8 <MX_USB_Device_Init+0x44>)
 800d58e:	f7fe ff1f 	bl	800c3d0 <USBD_Init>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d598:	f7f4 f89d 	bl	80016d6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800d59c:	490b      	ldr	r1, [pc, #44]	@ (800d5cc <MX_USB_Device_Init+0x48>)
 800d59e:	480a      	ldr	r0, [pc, #40]	@ (800d5c8 <MX_USB_Device_Init+0x44>)
 800d5a0:	f7fe ff46 	bl	800c430 <USBD_RegisterClass>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d001      	beq.n	800d5ae <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d5aa:	f7f4 f894 	bl	80016d6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d5ae:	4806      	ldr	r0, [pc, #24]	@ (800d5c8 <MX_USB_Device_Init+0x44>)
 800d5b0:	f7fe ff65 	bl	800c47e <USBD_Start>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800d5ba:	f7f4 f88c 	bl	80016d6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d5be:	bf00      	nop
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	20000118 	.word	0x20000118
 800d5c8:	2000130c 	.word	0x2000130c
 800d5cc:	20000010 	.word	0x20000010

0800d5d0 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	2212      	movs	r2, #18
 800d5e0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800d5e2:	4b03      	ldr	r3, [pc, #12]	@ (800d5f0 <USBD_HID_DeviceDescriptor+0x20>)
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	20000134 	.word	0x20000134

0800d5f4 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	6039      	str	r1, [r7, #0]
 800d5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2204      	movs	r2, #4
 800d604:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d606:	4b03      	ldr	r3, [pc, #12]	@ (800d614 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	20000148 	.word	0x20000148

0800d618 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	4603      	mov	r3, r0
 800d620:	6039      	str	r1, [r7, #0]
 800d622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d105      	bne.n	800d636 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	4907      	ldr	r1, [pc, #28]	@ (800d64c <USBD_HID_ProductStrDescriptor+0x34>)
 800d62e:	4808      	ldr	r0, [pc, #32]	@ (800d650 <USBD_HID_ProductStrDescriptor+0x38>)
 800d630:	f7ff fee5 	bl	800d3fe <USBD_GetString>
 800d634:	e004      	b.n	800d640 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d636:	683a      	ldr	r2, [r7, #0]
 800d638:	4904      	ldr	r1, [pc, #16]	@ (800d64c <USBD_HID_ProductStrDescriptor+0x34>)
 800d63a:	4805      	ldr	r0, [pc, #20]	@ (800d650 <USBD_HID_ProductStrDescriptor+0x38>)
 800d63c:	f7ff fedf 	bl	800d3fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800d640:	4b02      	ldr	r3, [pc, #8]	@ (800d64c <USBD_HID_ProductStrDescriptor+0x34>)
}
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	200015dc 	.word	0x200015dc
 800d650:	0800dde0 	.word	0x0800dde0

0800d654 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4603      	mov	r3, r0
 800d65c:	6039      	str	r1, [r7, #0]
 800d65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	4904      	ldr	r1, [pc, #16]	@ (800d674 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800d664:	4804      	ldr	r0, [pc, #16]	@ (800d678 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800d666:	f7ff feca 	bl	800d3fe <USBD_GetString>
  return USBD_StrDesc;
 800d66a:	4b02      	ldr	r3, [pc, #8]	@ (800d674 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	200015dc 	.word	0x200015dc
 800d678:	0800ddf8 	.word	0x0800ddf8

0800d67c <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	4603      	mov	r3, r0
 800d684:	6039      	str	r1, [r7, #0]
 800d686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	221a      	movs	r2, #26
 800d68c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d68e:	f000 f843 	bl	800d718 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d692:	4b02      	ldr	r3, [pc, #8]	@ (800d69c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800d694:	4618      	mov	r0, r3
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	2000014c 	.word	0x2000014c

0800d6a0 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	6039      	str	r1, [r7, #0]
 800d6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d105      	bne.n	800d6be <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	4907      	ldr	r1, [pc, #28]	@ (800d6d4 <USBD_HID_ConfigStrDescriptor+0x34>)
 800d6b6:	4808      	ldr	r0, [pc, #32]	@ (800d6d8 <USBD_HID_ConfigStrDescriptor+0x38>)
 800d6b8:	f7ff fea1 	bl	800d3fe <USBD_GetString>
 800d6bc:	e004      	b.n	800d6c8 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	4904      	ldr	r1, [pc, #16]	@ (800d6d4 <USBD_HID_ConfigStrDescriptor+0x34>)
 800d6c2:	4805      	ldr	r0, [pc, #20]	@ (800d6d8 <USBD_HID_ConfigStrDescriptor+0x38>)
 800d6c4:	f7ff fe9b 	bl	800d3fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6c8:	4b02      	ldr	r3, [pc, #8]	@ (800d6d4 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	200015dc 	.word	0x200015dc
 800d6d8:	0800de0c 	.word	0x0800de0c

0800d6dc <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	6039      	str	r1, [r7, #0]
 800d6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6e8:	79fb      	ldrb	r3, [r7, #7]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d105      	bne.n	800d6fa <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	4907      	ldr	r1, [pc, #28]	@ (800d710 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800d6f2:	4808      	ldr	r0, [pc, #32]	@ (800d714 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800d6f4:	f7ff fe83 	bl	800d3fe <USBD_GetString>
 800d6f8:	e004      	b.n	800d704 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d6fa:	683a      	ldr	r2, [r7, #0]
 800d6fc:	4904      	ldr	r1, [pc, #16]	@ (800d710 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800d6fe:	4805      	ldr	r0, [pc, #20]	@ (800d714 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800d700:	f7ff fe7d 	bl	800d3fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800d704:	4b02      	ldr	r3, [pc, #8]	@ (800d710 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800d706:	4618      	mov	r0, r3
 800d708:	3708      	adds	r7, #8
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	200015dc 	.word	0x200015dc
 800d714:	0800de18 	.word	0x0800de18

0800d718 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d71e:	4b0f      	ldr	r3, [pc, #60]	@ (800d75c <Get_SerialNum+0x44>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d724:	4b0e      	ldr	r3, [pc, #56]	@ (800d760 <Get_SerialNum+0x48>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d72a:	4b0e      	ldr	r3, [pc, #56]	@ (800d764 <Get_SerialNum+0x4c>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4413      	add	r3, r2
 800d736:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d009      	beq.n	800d752 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d73e:	2208      	movs	r2, #8
 800d740:	4909      	ldr	r1, [pc, #36]	@ (800d768 <Get_SerialNum+0x50>)
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 f814 	bl	800d770 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d748:	2204      	movs	r2, #4
 800d74a:	4908      	ldr	r1, [pc, #32]	@ (800d76c <Get_SerialNum+0x54>)
 800d74c:	68b8      	ldr	r0, [r7, #8]
 800d74e:	f000 f80f 	bl	800d770 <IntToUnicode>
  }
}
 800d752:	bf00      	nop
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	1fff7590 	.word	0x1fff7590
 800d760:	1fff7594 	.word	0x1fff7594
 800d764:	1fff7598 	.word	0x1fff7598
 800d768:	2000014e 	.word	0x2000014e
 800d76c:	2000015e 	.word	0x2000015e

0800d770 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d770:	b480      	push	{r7}
 800d772:	b087      	sub	sp, #28
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	4613      	mov	r3, r2
 800d77c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d782:	2300      	movs	r3, #0
 800d784:	75fb      	strb	r3, [r7, #23]
 800d786:	e027      	b.n	800d7d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	0f1b      	lsrs	r3, r3, #28
 800d78c:	2b09      	cmp	r3, #9
 800d78e:	d80b      	bhi.n	800d7a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	0f1b      	lsrs	r3, r3, #28
 800d794:	b2da      	uxtb	r2, r3
 800d796:	7dfb      	ldrb	r3, [r7, #23]
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	4619      	mov	r1, r3
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	440b      	add	r3, r1
 800d7a0:	3230      	adds	r2, #48	@ 0x30
 800d7a2:	b2d2      	uxtb	r2, r2
 800d7a4:	701a      	strb	r2, [r3, #0]
 800d7a6:	e00a      	b.n	800d7be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	0f1b      	lsrs	r3, r3, #28
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	440b      	add	r3, r1
 800d7b8:	3237      	adds	r2, #55	@ 0x37
 800d7ba:	b2d2      	uxtb	r2, r2
 800d7bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7c4:	7dfb      	ldrb	r3, [r7, #23]
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7d2:	7dfb      	ldrb	r3, [r7, #23]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	75fb      	strb	r3, [r7, #23]
 800d7d8:	7dfa      	ldrb	r2, [r7, #23]
 800d7da:	79fb      	ldrb	r3, [r7, #7]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d3d3      	bcc.n	800d788 <IntToUnicode+0x18>
  }
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	371c      	adds	r7, #28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
	...

0800d7f0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b094      	sub	sp, #80	@ 0x50
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d7f8:	f107 030c 	add.w	r3, r7, #12
 800d7fc:	2244      	movs	r2, #68	@ 0x44
 800d7fe:	2100      	movs	r1, #0
 800d800:	4618      	mov	r0, r3
 800d802:	f000 fa9f 	bl	800dd44 <memset>
  if(pcdHandle->Instance==USB)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a15      	ldr	r2, [pc, #84]	@ (800d860 <HAL_PCD_MspInit+0x70>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d122      	bne.n	800d856 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d810:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d814:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d816:	2300      	movs	r3, #0
 800d818:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d81a:	f107 030c 	add.w	r3, r7, #12
 800d81e:	4618      	mov	r0, r3
 800d820:	f7f9 fff4 	bl	800780c <HAL_RCCEx_PeriphCLKConfig>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d82a:	f7f3 ff54 	bl	80016d6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d82e:	4b0d      	ldr	r3, [pc, #52]	@ (800d864 <HAL_PCD_MspInit+0x74>)
 800d830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d832:	4a0c      	ldr	r2, [pc, #48]	@ (800d864 <HAL_PCD_MspInit+0x74>)
 800d834:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d838:	6593      	str	r3, [r2, #88]	@ 0x58
 800d83a:	4b0a      	ldr	r3, [pc, #40]	@ (800d864 <HAL_PCD_MspInit+0x74>)
 800d83c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d83e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d842:	60bb      	str	r3, [r7, #8]
 800d844:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d846:	2200      	movs	r2, #0
 800d848:	2100      	movs	r1, #0
 800d84a:	2014      	movs	r0, #20
 800d84c:	f7f6 f9b7 	bl	8003bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d850:	2014      	movs	r0, #20
 800d852:	f7f6 f9ce 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d856:	bf00      	nop
 800d858:	3750      	adds	r7, #80	@ 0x50
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	40005c00 	.word	0x40005c00
 800d864:	40021000 	.word	0x40021000

0800d868 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d87c:	4619      	mov	r1, r3
 800d87e:	4610      	mov	r0, r2
 800d880:	f7fe fe48 	bl	800c514 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d89e:	78fa      	ldrb	r2, [r7, #3]
 800d8a0:	6879      	ldr	r1, [r7, #4]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	4413      	add	r3, r2
 800d8a8:	00db      	lsls	r3, r3, #3
 800d8aa:	440b      	add	r3, r1
 800d8ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	78fb      	ldrb	r3, [r7, #3]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	f7fe fe82 	bl	800c5be <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d8d4:	78fa      	ldrb	r2, [r7, #3]
 800d8d6:	6879      	ldr	r1, [r7, #4]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	00db      	lsls	r3, r3, #3
 800d8e0:	440b      	add	r3, r1
 800d8e2:	3324      	adds	r3, #36	@ 0x24
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	78fb      	ldrb	r3, [r7, #3]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7fe fecb 	bl	800c684 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d8ee:	bf00      	nop
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d904:	4618      	mov	r0, r3
 800d906:	f7fe ffdf 	bl	800c8c8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d90a:	bf00      	nop
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d91a:	2301      	movs	r3, #1
 800d91c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	795b      	ldrb	r3, [r3, #5]
 800d922:	2b02      	cmp	r3, #2
 800d924:	d001      	beq.n	800d92a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d926:	f7f3 fed6 	bl	80016d6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d930:	7bfa      	ldrb	r2, [r7, #15]
 800d932:	4611      	mov	r1, r2
 800d934:	4618      	mov	r0, r3
 800d936:	f7fe ff89 	bl	800c84c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe ff35 	bl	800c7b0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d946:	bf00      	nop
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
	...

0800d950 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe ff84 	bl	800c86c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	7a5b      	ldrb	r3, [r3, #9]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d005      	beq.n	800d978 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d96c:	4b04      	ldr	r3, [pc, #16]	@ (800d980 <HAL_PCD_SuspendCallback+0x30>)
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	4a03      	ldr	r2, [pc, #12]	@ (800d980 <HAL_PCD_SuspendCallback+0x30>)
 800d972:	f043 0306 	orr.w	r3, r3, #6
 800d976:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	e000ed00 	.word	0xe000ed00

0800d984 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	7a5b      	ldrb	r3, [r3, #9]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d007      	beq.n	800d9a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d994:	4b08      	ldr	r3, [pc, #32]	@ (800d9b8 <HAL_PCD_ResumeCallback+0x34>)
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	4a07      	ldr	r2, [pc, #28]	@ (800d9b8 <HAL_PCD_ResumeCallback+0x34>)
 800d99a:	f023 0306 	bic.w	r3, r3, #6
 800d99e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d9a0:	f000 f99e 	bl	800dce0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fe ff74 	bl	800c898 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	e000ed00 	.word	0xe000ed00

0800d9bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d9c4:	4a22      	ldr	r2, [pc, #136]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4a20      	ldr	r2, [pc, #128]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d9d4:	4b1e      	ldr	r3, [pc, #120]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9d6:	4a1f      	ldr	r2, [pc, #124]	@ (800da54 <USBD_LL_Init+0x98>)
 800d9d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d9da:	4b1d      	ldr	r3, [pc, #116]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9dc:	2208      	movs	r2, #8
 800d9de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d9e0:	4b1b      	ldr	r3, [pc, #108]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9e2:	2202      	movs	r2, #2
 800d9e4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9e6:	4b1a      	ldr	r3, [pc, #104]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9e8:	2202      	movs	r2, #2
 800d9ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d9ec:	4b18      	ldr	r3, [pc, #96]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d9f2:	4b17      	ldr	r3, [pc, #92]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d9f8:	4b15      	ldr	r3, [pc, #84]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d9fe:	4b14      	ldr	r3, [pc, #80]	@ (800da50 <USBD_LL_Init+0x94>)
 800da00:	2200      	movs	r2, #0
 800da02:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da04:	4812      	ldr	r0, [pc, #72]	@ (800da50 <USBD_LL_Init+0x94>)
 800da06:	f7f7 fc29 	bl	800525c <HAL_PCD_Init>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800da10:	f7f3 fe61 	bl	80016d6 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800da1a:	2318      	movs	r3, #24
 800da1c:	2200      	movs	r2, #0
 800da1e:	2100      	movs	r1, #0
 800da20:	f7f9 f898 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800da2a:	2358      	movs	r3, #88	@ 0x58
 800da2c:	2200      	movs	r2, #0
 800da2e:	2180      	movs	r1, #128	@ 0x80
 800da30:	f7f9 f890 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800da3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da3e:	2200      	movs	r2, #0
 800da40:	2181      	movs	r1, #129	@ 0x81
 800da42:	f7f9 f887 	bl	8006b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	200017dc 	.word	0x200017dc
 800da54:	40005c00 	.word	0x40005c00

0800da58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da64:	2300      	movs	r3, #0
 800da66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800da6e:	4618      	mov	r0, r3
 800da70:	f7f7 fcc2 	bl	80053f8 <HAL_PCD_Start>
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da78:	7bfb      	ldrb	r3, [r7, #15]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 f936 	bl	800dcec <USBD_Get_USB_Status>
 800da80:	4603      	mov	r3, r0
 800da82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da84:	7bbb      	ldrb	r3, [r7, #14]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b084      	sub	sp, #16
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	4608      	mov	r0, r1
 800da98:	4611      	mov	r1, r2
 800da9a:	461a      	mov	r2, r3
 800da9c:	4603      	mov	r3, r0
 800da9e:	70fb      	strb	r3, [r7, #3]
 800daa0:	460b      	mov	r3, r1
 800daa2:	70bb      	strb	r3, [r7, #2]
 800daa4:	4613      	mov	r3, r2
 800daa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dab6:	78bb      	ldrb	r3, [r7, #2]
 800dab8:	883a      	ldrh	r2, [r7, #0]
 800daba:	78f9      	ldrb	r1, [r7, #3]
 800dabc:	f7f7 fe09 	bl	80056d2 <HAL_PCD_EP_Open>
 800dac0:	4603      	mov	r3, r0
 800dac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 f910 	bl	800dcec <USBD_Get_USB_Status>
 800dacc:	4603      	mov	r3, r0
 800dace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	460b      	mov	r3, r1
 800dae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daea:	2300      	movs	r3, #0
 800daec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800daf4:	78fa      	ldrb	r2, [r7, #3]
 800daf6:	4611      	mov	r1, r2
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7f7 fe49 	bl	8005790 <HAL_PCD_EP_Close>
 800dafe:	4603      	mov	r3, r0
 800db00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	4618      	mov	r0, r3
 800db06:	f000 f8f1 	bl	800dcec <USBD_Get_USB_Status>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db28:	2300      	movs	r3, #0
 800db2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800db32:	78fa      	ldrb	r2, [r7, #3]
 800db34:	4611      	mov	r1, r2
 800db36:	4618      	mov	r0, r3
 800db38:	f7f7 feda 	bl	80058f0 <HAL_PCD_EP_SetStall>
 800db3c:	4603      	mov	r3, r0
 800db3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db40:	7bfb      	ldrb	r3, [r7, #15]
 800db42:	4618      	mov	r0, r3
 800db44:	f000 f8d2 	bl	800dcec <USBD_Get_USB_Status>
 800db48:	4603      	mov	r3, r0
 800db4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b084      	sub	sp, #16
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
 800db5e:	460b      	mov	r3, r1
 800db60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db66:	2300      	movs	r3, #0
 800db68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800db70:	78fa      	ldrb	r2, [r7, #3]
 800db72:	4611      	mov	r1, r2
 800db74:	4618      	mov	r0, r3
 800db76:	f7f7 ff0d 	bl	8005994 <HAL_PCD_EP_ClrStall>
 800db7a:	4603      	mov	r3, r0
 800db7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7e:	7bfb      	ldrb	r3, [r7, #15]
 800db80:	4618      	mov	r0, r3
 800db82:	f000 f8b3 	bl	800dcec <USBD_Get_USB_Status>
 800db86:	4603      	mov	r3, r0
 800db88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	460b      	mov	r3, r1
 800db9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dba6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	da0b      	bge.n	800dbc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbb6:	68f9      	ldr	r1, [r7, #12]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4413      	add	r3, r2
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	440b      	add	r3, r1
 800dbc2:	3312      	adds	r3, #18
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	e00b      	b.n	800dbe0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbce:	68f9      	ldr	r1, [r7, #12]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4413      	add	r3, r2
 800dbd6:	00db      	lsls	r3, r3, #3
 800dbd8:	440b      	add	r3, r1
 800dbda:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800dbde:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dc06:	78fa      	ldrb	r2, [r7, #3]
 800dc08:	4611      	mov	r1, r2
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7f7 fd3d 	bl	800568a <HAL_PCD_SetAddress>
 800dc10:	4603      	mov	r3, r0
 800dc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f000 f868 	bl	800dcec <USBD_Get_USB_Status>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b086      	sub	sp, #24
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	60f8      	str	r0, [r7, #12]
 800dc32:	607a      	str	r2, [r7, #4]
 800dc34:	603b      	str	r3, [r7, #0]
 800dc36:	460b      	mov	r3, r1
 800dc38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dc48:	7af9      	ldrb	r1, [r7, #11]
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	f7f7 fe18 	bl	8005882 <HAL_PCD_EP_Transmit>
 800dc52:	4603      	mov	r3, r0
 800dc54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 f847 	bl	800dcec <USBD_Get_USB_Status>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc62:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3718      	adds	r7, #24
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	607a      	str	r2, [r7, #4]
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dc8a:	7af9      	ldrb	r1, [r7, #11]
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	f7f7 fdc6 	bl	8005820 <HAL_PCD_EP_Receive>
 800dc94:	4603      	mov	r3, r0
 800dc96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 f826 	bl	800dcec <USBD_Get_USB_Status>
 800dca0:	4603      	mov	r3, r0
 800dca2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dca4:	7dbb      	ldrb	r3, [r7, #22]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
	...

0800dcb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dcb8:	4b03      	ldr	r3, [pc, #12]	@ (800dcc8 <USBD_static_malloc+0x18>)
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	370c      	adds	r7, #12
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	20001ab8 	.word	0x20001ab8

0800dccc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]

}
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dce4:	f7f3 fcac 	bl	8001640 <SystemClock_Config>
}
 800dce8:	bf00      	nop
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	2b03      	cmp	r3, #3
 800dcfe:	d817      	bhi.n	800dd30 <USBD_Get_USB_Status+0x44>
 800dd00:	a201      	add	r2, pc, #4	@ (adr r2, 800dd08 <USBD_Get_USB_Status+0x1c>)
 800dd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd06:	bf00      	nop
 800dd08:	0800dd19 	.word	0x0800dd19
 800dd0c:	0800dd1f 	.word	0x0800dd1f
 800dd10:	0800dd25 	.word	0x0800dd25
 800dd14:	0800dd2b 	.word	0x0800dd2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd1c:	e00b      	b.n	800dd36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	73fb      	strb	r3, [r7, #15]
    break;
 800dd22:	e008      	b.n	800dd36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd24:	2301      	movs	r3, #1
 800dd26:	73fb      	strb	r3, [r7, #15]
    break;
 800dd28:	e005      	b.n	800dd36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd2a:	2303      	movs	r3, #3
 800dd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd2e:	e002      	b.n	800dd36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd30:	2303      	movs	r3, #3
 800dd32:	73fb      	strb	r3, [r7, #15]
    break;
 800dd34:	bf00      	nop
  }
  return usb_status;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <memset>:
 800dd44:	4402      	add	r2, r0
 800dd46:	4603      	mov	r3, r0
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d100      	bne.n	800dd4e <memset+0xa>
 800dd4c:	4770      	bx	lr
 800dd4e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd52:	e7f9      	b.n	800dd48 <memset+0x4>

0800dd54 <__libc_init_array>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	4d0d      	ldr	r5, [pc, #52]	@ (800dd8c <__libc_init_array+0x38>)
 800dd58:	4c0d      	ldr	r4, [pc, #52]	@ (800dd90 <__libc_init_array+0x3c>)
 800dd5a:	1b64      	subs	r4, r4, r5
 800dd5c:	10a4      	asrs	r4, r4, #2
 800dd5e:	2600      	movs	r6, #0
 800dd60:	42a6      	cmp	r6, r4
 800dd62:	d109      	bne.n	800dd78 <__libc_init_array+0x24>
 800dd64:	4d0b      	ldr	r5, [pc, #44]	@ (800dd94 <__libc_init_array+0x40>)
 800dd66:	4c0c      	ldr	r4, [pc, #48]	@ (800dd98 <__libc_init_array+0x44>)
 800dd68:	f000 f826 	bl	800ddb8 <_init>
 800dd6c:	1b64      	subs	r4, r4, r5
 800dd6e:	10a4      	asrs	r4, r4, #2
 800dd70:	2600      	movs	r6, #0
 800dd72:	42a6      	cmp	r6, r4
 800dd74:	d105      	bne.n	800dd82 <__libc_init_array+0x2e>
 800dd76:	bd70      	pop	{r4, r5, r6, pc}
 800dd78:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd7c:	4798      	blx	r3
 800dd7e:	3601      	adds	r6, #1
 800dd80:	e7ee      	b.n	800dd60 <__libc_init_array+0xc>
 800dd82:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd86:	4798      	blx	r3
 800dd88:	3601      	adds	r6, #1
 800dd8a:	e7f2      	b.n	800dd72 <__libc_init_array+0x1e>
 800dd8c:	0800de70 	.word	0x0800de70
 800dd90:	0800de70 	.word	0x0800de70
 800dd94:	0800de70 	.word	0x0800de70
 800dd98:	0800de74 	.word	0x0800de74

0800dd9c <memcpy>:
 800dd9c:	440a      	add	r2, r1
 800dd9e:	4291      	cmp	r1, r2
 800dda0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dda4:	d100      	bne.n	800dda8 <memcpy+0xc>
 800dda6:	4770      	bx	lr
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddb2:	4291      	cmp	r1, r2
 800ddb4:	d1f9      	bne.n	800ddaa <memcpy+0xe>
 800ddb6:	bd10      	pop	{r4, pc}

0800ddb8 <_init>:
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddba:	bf00      	nop
 800ddbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddbe:	bc08      	pop	{r3}
 800ddc0:	469e      	mov	lr, r3
 800ddc2:	4770      	bx	lr

0800ddc4 <_fini>:
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	bf00      	nop
 800ddc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddca:	bc08      	pop	{r3}
 800ddcc:	469e      	mov	lr, r3
 800ddce:	4770      	bx	lr
