
STM_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c26c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800c444  0800c444  0000d444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c718  0800c718  0000e168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c718  0800c718  0000d718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c720  0800c720  0000e168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c720  0800c720  0000d720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c724  0800c724  0000d724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800c728  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000168  0800c890  0000e168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800c890  0000e5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025799  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055b5  00000000  00000000  00033931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001847  00000000  00000000  0003ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bec  00000000  00000000  0003c667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000293a5  00000000  00000000  00062253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4390  00000000  00000000  0008b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000831c  00000000  00000000  0016f9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00177ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c42c 	.word	0x0800c42c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800c42c 	.word	0x0800c42c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f00b ff39 	bl	800c3d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000562:	4b39      	ldr	r3, [pc, #228]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000564:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800056a:	4b37      	ldr	r3, [pc, #220]	@ (8000648 <MX_ADC1_Init+0x104>)
 800056c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000570:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000572:	4b35      	ldr	r3, [pc, #212]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b33      	ldr	r3, [pc, #204]	@ (8000648 <MX_ADC1_Init+0x104>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800057e:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000584:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000586:	2201      	movs	r2, #1
 8000588:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b2f      	ldr	r3, [pc, #188]	@ (8000648 <MX_ADC1_Init+0x104>)
 800058c:	2204      	movs	r2, #4
 800058e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000590:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000592:	2200      	movs	r2, #0
 8000594:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000596:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000598:	2201      	movs	r2, #1
 800059a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800059c:	4b2a      	ldr	r3, [pc, #168]	@ (8000648 <MX_ADC1_Init+0x104>)
 800059e:	2202      	movs	r2, #2
 80005a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b6:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005cc:	481e      	ldr	r0, [pc, #120]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ce:	f001 fb6b 	bl	8001ca8 <HAL_ADC_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005d8:	f000 fc1d 	bl	8000e16 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e4:	4619      	mov	r1, r3
 80005e6:	4818      	ldr	r0, [pc, #96]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005e8:	f002 f9e6 	bl	80029b8 <HAL_ADCEx_MultiModeConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005f2:	f000 fc10 	bl	8000e16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_ADC1_Init+0x108>)
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fa:	2306      	movs	r3, #6
 80005fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000602:	237f      	movs	r3, #127	@ 0x7f
 8000604:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000606:	2304      	movs	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000614:	f001 fccc 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800061e:	f000 fbfa 	bl	8000e16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_ADC1_Init+0x10c>)
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000626:	230c      	movs	r3, #12
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000630:	f001 fcbe 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800063a:	f000 fbec 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3730      	adds	r7, #48	@ 0x30
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000184 	.word	0x20000184
 800064c:	04300002 	.word	0x04300002
 8000650:	08600004 	.word	0x08600004

08000654 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f00b feb7 	bl	800c3d4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000668:	4a32      	ldr	r2, [pc, #200]	@ (8000734 <MX_ADC2_Init+0xe0>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800066e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000672:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000688:	2201      	movs	r2, #1
 800068a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800068e:	2204      	movs	r2, #4
 8000690:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000694:	2200      	movs	r2, #0
 8000696:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_ADC2_Init+0xdc>)
 800069a:	2201      	movs	r2, #1
 800069c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800069e:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ce:	4818      	ldr	r0, [pc, #96]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006d0:	f001 faea 	bl	8001ca8 <HAL_ADC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80006da:	f000 fb9c 	bl	8000e16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_ADC2_Init+0xe4>)
 80006e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e2:	2306      	movs	r3, #6
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ea:	237f      	movs	r3, #127	@ 0x7f
 80006ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ee:	2304      	movs	r3, #4
 80006f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_ADC2_Init+0xdc>)
 80006fc:	f001 fc58 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000706:	f000 fb86 	bl	8000e16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_ADC2_Init+0xe8>)
 800070c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070e:	230c      	movs	r3, #12
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <MX_ADC2_Init+0xdc>)
 8000718:	f001 fc4a 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000722:	f000 fb78 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001f0 	.word	0x200001f0
 8000734:	50000100 	.word	0x50000100
 8000738:	0c900008 	.word	0x0c900008
 800073c:	10c00010 	.word	0x10c00010

08000740 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	2244      	movs	r2, #68	@ 0x44
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f00b fe37 	bl	800c3d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800076e:	d16a      	bne.n	8000846 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000774:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000776:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800077a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f005 fe2d 	bl	80063e0 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800078c:	f000 fb43 	bl	8000e16 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000790:	4b66      	ldr	r3, [pc, #408]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a65      	ldr	r2, [pc, #404]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000798:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800079a:	4b64      	ldr	r3, [pc, #400]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d10b      	bne.n	80007ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007a2:	4b63      	ldr	r3, [pc, #396]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a62      	ldr	r2, [pc, #392]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b60      	ldr	r3, [pc, #384]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a5c      	ldr	r2, [pc, #368]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d2:	2303      	movs	r3, #3
 80007d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d6:	2303      	movs	r3, #3
 80007d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e8:	f002 fd0c 	bl	8003204 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007ec:	4b51      	ldr	r3, [pc, #324]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 80007ee:	4a52      	ldr	r2, [pc, #328]	@ (8000938 <HAL_ADC_MspInit+0x1f8>)
 80007f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007f2:	4b50      	ldr	r3, [pc, #320]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 80007f4:	2205      	movs	r2, #5
 80007f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f8:	4b4e      	ldr	r3, [pc, #312]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000804:	4b4b      	ldr	r3, [pc, #300]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080a:	4b4a      	ldr	r3, [pc, #296]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 800080c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000810:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000812:	4b48      	ldr	r3, [pc, #288]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 8000814:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000818:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800081a:	4b46      	ldr	r3, [pc, #280]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 800081c:	2220      	movs	r2, #32
 800081e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000820:	4b44      	ldr	r3, [pc, #272]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 8000822:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000826:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000828:	4842      	ldr	r0, [pc, #264]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 800082a:	f002 fa79 	bl	8002d20 <HAL_DMA_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000834:	f000 faef 	bl	8000e16 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a3e      	ldr	r2, [pc, #248]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 800083c:	655a      	str	r2, [r3, #84]	@ 0x54
 800083e:	4a3d      	ldr	r2, [pc, #244]	@ (8000934 <HAL_ADC_MspInit+0x1f4>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000844:	e06e      	b.n	8000924 <HAL_ADC_MspInit+0x1e4>
  else if(adcHandle->Instance==ADC2)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <HAL_ADC_MspInit+0x1fc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d169      	bne.n	8000924 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000854:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000856:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800085a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	4618      	mov	r0, r3
 8000862:	f005 fdbd 	bl	80063e0 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 800086c:	f000 fad3 	bl	8000e16 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000870:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a2d      	ldr	r2, [pc, #180]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 8000878:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800087a:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <HAL_ADC_MspInit+0x1ec>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d10b      	bne.n	800089a <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000882:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 8000888:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a24      	ldr	r2, [pc, #144]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <HAL_ADC_MspInit+0x1f0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008b2:	23c0      	movs	r3, #192	@ 0xc0
 80008b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b6:	2303      	movs	r3, #3
 80008b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c8:	f002 fc9c 	bl	8003204 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000944 <HAL_ADC_MspInit+0x204>)
 80008d0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008d4:	2224      	movs	r2, #36	@ 0x24
 80008d6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008de:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008e6:	2280      	movs	r2, #128	@ 0x80
 80008e8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008f0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 80008fc:	2220      	movs	r2, #32
 80008fe:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 8000902:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000908:	480d      	ldr	r0, [pc, #52]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 800090a:	f002 fa09 	bl	8002d20 <HAL_DMA_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8000914:	f000 fa7f 	bl	8000e16 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 800091c:	655a      	str	r2, [r3, #84]	@ 0x54
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_ADC_MspInit+0x200>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000924:	bf00      	nop
 8000926:	3770      	adds	r7, #112	@ 0x70
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000031c 	.word	0x2000031c
 8000930:	40021000 	.word	0x40021000
 8000934:	2000025c 	.word	0x2000025c
 8000938:	40020008 	.word	0x40020008
 800093c:	50000100 	.word	0x50000100
 8000940:	200002bc 	.word	0x200002bc
 8000944:	4002001c 	.word	0x4002001c

08000948 <ADC_Init>:
	filter_adc_2[0] = ADC_FILTER_ALPHA * buffer_adc_2[0] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_2[0];
	filter_adc_2[1] = ADC_FILTER_ALPHA * buffer_adc_2[1] + (1.0f - ADC_FILTER_ALPHA) * filter_adc_2[1];
}

void ADC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800094c:	217f      	movs	r1, #127	@ 0x7f
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <ADC_Init+0x18>)
 8000950:	f001 ffd0 	bl	80028f4 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000954:	217f      	movs	r1, #127	@ 0x7f
 8000956:	4803      	ldr	r0, [pc, #12]	@ (8000964 <ADC_Init+0x1c>)
 8000958:	f001 ffcc 	bl	80028f4 <HAL_ADCEx_Calibration_Start>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000184 	.word	0x20000184
 8000964:	200001f0 	.word	0x200001f0

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_DMA_Init+0x70>)
 8000970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000972:	4a19      	ldr	r2, [pc, #100]	@ (80009d8 <MX_DMA_Init+0x70>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6493      	str	r3, [r2, #72]	@ 0x48
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_DMA_Init+0x70>)
 800097c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_DMA_Init+0x70>)
 8000988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800098a:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <MX_DMA_Init+0x70>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6493      	str	r3, [r2, #72]	@ 0x48
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_DMA_Init+0x70>)
 8000994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	200b      	movs	r0, #11
 80009a4:	f002 f987 	bl	8002cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009a8:	200b      	movs	r0, #11
 80009aa:	f002 f99e 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	200c      	movs	r0, #12
 80009b4:	f002 f97f 	bl	8002cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009b8:	200c      	movs	r0, #12
 80009ba:	f002 f996 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	200d      	movs	r0, #13
 80009c4:	f002 f977 	bl	8002cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009c8:	200d      	movs	r0, #13
 80009ca:	f002 f98e 	bl	8002cea <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a2a      	ldr	r2, [pc, #168]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a24      	ldr	r2, [pc, #144]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a58:	4812      	ldr	r0, [pc, #72]	@ (8000aa4 <MX_GPIO_Init+0xc8>)
 8000a5a:	f002 fd6d 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <MX_GPIO_Init+0xc8>)
 8000a78:	f002 fbc4 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mode_Buttom_Pin */
  GPIO_InitStruct.Pin = Mode_Buttom_Pin;
 8000a7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode_Buttom_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_GPIO_Init+0xcc>)
 8000a92:	f002 fbb7 	bl	8003204 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	@ 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000800 	.word	0x48000800
 8000aa8:	48000400 	.word	0x48000400

08000aac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <MX_I2C1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <MX_I2C1_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000ae8:	f002 fd3e 	bl	8003568 <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 f990 	bl	8000e16 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000afa:	f003 f903 	bl	8003d04 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 f987 	bl	8000e16 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_I2C1_Init+0x74>)
 8000b0c:	f003 f945 	bl	8003d9a <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f97e 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000328 	.word	0x20000328
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40621236 	.word	0x40621236

08000b2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09c      	sub	sp, #112	@ 0x70
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	2244      	movs	r2, #68	@ 0x44
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f00b fc41 	bl	800c3d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a2e      	ldr	r2, [pc, #184]	@ (8000c10 <HAL_I2C_MspInit+0xe4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d154      	bne.n	8000c06 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b5c:	2340      	movs	r3, #64	@ 0x40
 8000b5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f005 fc39 	bl	80063e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b74:	f000 f94f 	bl	8000e16 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	4a25      	ldr	r2, [pc, #148]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	4a1f      	ldr	r2, [pc, #124]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 8000ba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f002 fb1c 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8000bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000be6:	4619      	mov	r1, r3
 8000be8:	480b      	ldr	r0, [pc, #44]	@ (8000c18 <HAL_I2C_MspInit+0xec>)
 8000bea:	f002 fb0b 	bl	8003204 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000bf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_I2C_MspInit+0xe8>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3770      	adds	r7, #112	@ 0x70
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40005400 	.word	0x40005400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400

08000c1c <Keyboard_Init>:
// 第1位为保留位0x00
// 第2-6位为普通按键(0x00-0xFF) 这里做的是4key盘的协议
uint8_t hid_buffer[6] = {0};

void Keyboard_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    ADC_Init();
 8000c20:	f7ff fe92 	bl	8000948 <ADC_Init>
    HAL_Delay(100);
 8000c24:	2064      	movs	r0, #100	@ 0x64
 8000c26:	f000 fe21 	bl	800186c <HAL_Delay>
    RGB_Init();
 8000c2a:	f000 fad9 	bl	80011e0 <RGB_Init>
    HAL_Delay(100);
 8000c2e:	2064      	movs	r0, #100	@ 0x64
 8000c30:	f000 fe1c 	bl	800186c <HAL_Delay>
    OLED_Init();
 8000c34:	f000 f964 	bl	8000f00 <OLED_Init>
    // USB已经在main中初始化
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Keyboard_Update>:

void Keyboard_Update(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    // 读取mode按钮
    if (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET)
 8000c40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c44:	4838      	ldr	r0, [pc, #224]	@ (8000d28 <Keyboard_Update+0xec>)
 8000c46:	f002 fc5f 	bl	8003508 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d120      	bne.n	8000c92 <Keyboard_Update+0x56>
    {
        HAL_Delay(50); // 防抖
 8000c50:	2032      	movs	r0, #50	@ 0x32
 8000c52:	f000 fe0b 	bl	800186c <HAL_Delay>
        if (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET)
 8000c56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c5a:	4833      	ldr	r0, [pc, #204]	@ (8000d28 <Keyboard_Update+0xec>)
 8000c5c:	f002 fc54 	bl	8003508 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10c      	bne.n	8000c80 <Keyboard_Update+0x44>
        {
            keyboard_mode++;
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <Keyboard_Update+0xf0>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <Keyboard_Update+0xf0>)
 8000c70:	701a      	strb	r2, [r3, #0]
            if (keyboard_mode > 2)
 8000c72:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <Keyboard_Update+0xf0>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d902      	bls.n	8000c80 <Keyboard_Update+0x44>
            {
                keyboard_mode = 1;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <Keyboard_Update+0xf0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
            }
        }
        while (HAL_GPIO_ReadPin(Mode_Buttom_GPIO_Port, Mode_Buttom_Pin) == GPIO_PIN_RESET);// 等待按键释放
 8000c80:	bf00      	nop
 8000c82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c86:	4828      	ldr	r0, [pc, #160]	@ (8000d28 <Keyboard_Update+0xec>)
 8000c88:	f002 fc3e 	bl	8003508 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f7      	beq.n	8000c82 <Keyboard_Update+0x46>
    }

    if (keyboard_mode == 1)
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <Keyboard_Update+0xf0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d13b      	bne.n	8000d12 <Keyboard_Update+0xd6>
    {
        // 读取按键状态
        hid_buffer[0] = KEYBOARD_BUTTON_NONE; // 特殊按键
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
        hid_buffer[1] = KEYBOARD_BUTTON_NONE; // 保留位
 8000ca0:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	705a      	strb	r2, [r3, #1]

        if (filter_adc_1[0] > KEYBOARD_TRIGGER_THRESHOLD)
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <Keyboard_Update+0xf8>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cae:	d903      	bls.n	8000cb8 <Keyboard_Update+0x7c>
        {
            hid_buffer[2] = KEYBOARD_BUTTON_D;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	709a      	strb	r2, [r3, #2]
 8000cb6:	e002      	b.n	8000cbe <Keyboard_Update+0x82>
        }
        else
        {
            hid_buffer[2] = KEYBOARD_BUTTON_NONE;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	709a      	strb	r2, [r3, #2]
        }

        if (filter_adc_1[1] > KEYBOARD_TRIGGER_THRESHOLD)
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <Keyboard_Update+0xf8>)
 8000cc0:	885b      	ldrh	r3, [r3, #2]
 8000cc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cc6:	d903      	bls.n	8000cd0 <Keyboard_Update+0x94>
        {
            hid_buffer[3] = KEYBOARD_BUTTON_F;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000cca:	2209      	movs	r2, #9
 8000ccc:	70da      	strb	r2, [r3, #3]
 8000cce:	e002      	b.n	8000cd6 <Keyboard_Update+0x9a>
        }
        else
        {
            hid_buffer[3] = KEYBOARD_BUTTON_NONE;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	70da      	strb	r2, [r3, #3]
        }
        
        if (filter_adc_2[0] > KEYBOARD_TRIGGER_THRESHOLD)
 8000cd6:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <Keyboard_Update+0xfc>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cde:	d903      	bls.n	8000ce8 <Keyboard_Update+0xac>
        {
            hid_buffer[4] = KEYBOARD_BUTTON_J;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000ce2:	220d      	movs	r2, #13
 8000ce4:	711a      	strb	r2, [r3, #4]
 8000ce6:	e002      	b.n	8000cee <Keyboard_Update+0xb2>
        }
        else
        {
            hid_buffer[4] = KEYBOARD_BUTTON_NONE;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	711a      	strb	r2, [r3, #4]
        }

        if (filter_adc_2[1] > KEYBOARD_TRIGGER_THRESHOLD)
 8000cee:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <Keyboard_Update+0xfc>)
 8000cf0:	885b      	ldrh	r3, [r3, #2]
 8000cf2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cf6:	d903      	bls.n	8000d00 <Keyboard_Update+0xc4>
        {
            hid_buffer[5] = KEYBOARD_BUTTON_K;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000cfa:	220e      	movs	r2, #14
 8000cfc:	715a      	strb	r2, [r3, #5]
 8000cfe:	e002      	b.n	8000d06 <Keyboard_Update+0xca>
        }
        else
        {
            hid_buffer[5] = KEYBOARD_BUTTON_NONE;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	715a      	strb	r2, [r3, #5]
        }

        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, sizeof(hid_buffer));
 8000d06:	2206      	movs	r2, #6
 8000d08:	4909      	ldr	r1, [pc, #36]	@ (8000d30 <Keyboard_Update+0xf4>)
 8000d0a:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <Keyboard_Update+0x100>)
 8000d0c:	f009 fe2e 	bl	800a96c <USBD_HID_SendReport>
        if (filter_adc_2[1] > KEYBOARD_TRIGGER_THRESHOLD)
        {
            // RIGHT
        }
    }
 8000d10:	e008      	b.n	8000d24 <Keyboard_Update+0xe8>
    else if (keyboard_mode == 2)
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <Keyboard_Update+0xf0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d104      	bne.n	8000d24 <Keyboard_Update+0xe8>
        OLED_DisplayString(0, 0, "Mod Mode:");
 8000d1a:	4a09      	ldr	r2, [pc, #36]	@ (8000d40 <Keyboard_Update+0x104>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fa10 	bl	8001144 <OLED_DisplayString>
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	2000037c 	.word	0x2000037c
 8000d34:	20000320 	.word	0x20000320
 8000d38:	20000324 	.word	0x20000324
 8000d3c:	20000dfc 	.word	0x20000dfc
 8000d40:	0800c444 	.word	0x0800c444

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 fd1f 	bl	800178a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f818 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f7ff fe44 	bl	80009dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d54:	f7ff fe08 	bl	8000968 <MX_DMA_Init>
  MX_ADC2_Init();
 8000d58:	f7ff fc7c 	bl	8000654 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000d5c:	f7ff fea6 	bl	8000aac <MX_I2C1_Init>
  MX_USB_Device_Init();
 8000d60:	f00a ff58 	bl	800bc14 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8000d64:	f7ff fbee 	bl	8000544 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d68:	f000 fc42 	bl	80015f0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d6c:	f000 fb46 	bl	80013fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Keyboard_Init();
 8000d70:	f7ff ff54 	bl	8000c1c <Keyboard_Init>
  HAL_Delay(100);
 8000d74:	2064      	movs	r0, #100	@ 0x64
 8000d76:	f000 fd79 	bl	800186c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Keyboard_Update();
 8000d7a:	f7ff ff5f 	bl	8000c3c <Keyboard_Update>
 8000d7e:	e7fc      	b.n	8000d7a <main+0x36>

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	@ 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	2238      	movs	r2, #56	@ 0x38
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00b fb20 	bl	800c3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f004 fd3a 	bl	800581c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000da8:	2321      	movs	r3, #33	@ 0x21
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000db2:	2301      	movs	r3, #1
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	2302      	movs	r3, #2
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dc2:	2355      	movs	r3, #85	@ 0x55
 8000dc4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 fdd4 	bl	8005984 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000de2:	f000 f818 	bl	8000e16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2303      	movs	r3, #3
 8000dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f005 f8d2 	bl	8005fa8 <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e0a:	f000 f804 	bl	8000e16 <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3750      	adds	r7, #80	@ 0x50
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1a:	b672      	cpsid	i
}
 8000e1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1e:	bf00      	nop
 8000e20:	e7fd      	b.n	8000e1e <Error_Handler+0x8>
	...

08000e24 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <OLED_InitBuffer+0x54>)
 8000e32:	f00b facf 	bl	800c3d4 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000e36:	f240 4201 	movw	r2, #1025	@ 0x401
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <OLED_InitBuffer+0x58>)
 8000e3e:	f00b fac9 	bl	800c3d4 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <OLED_InitBuffer+0x58>)
 8000e44:	2240      	movs	r2, #64	@ 0x40
 8000e46:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <OLED_InitBuffer+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <OLED_InitBuffer+0x60>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	e006      	b.n	8000e68 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <OLED_InitBuffer+0x64>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	3301      	adds	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	d9f5      	bls.n	8000e5a <OLED_InitBuffer+0x36>
    }
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000038c 	.word	0x2000038c
 8000e7c:	2000078c 	.word	0x2000078c
 8000e80:	20000382 	.word	0x20000382
 8000e84:	20000383 	.word	0x20000383
 8000e88:	20000384 	.word	0x20000384

08000e8c <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e96:	2100      	movs	r1, #0
 8000e98:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <OLED_ClearBuffer+0x38>)
 8000e9a:	f00b fa9b 	bl	800c3d4 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	e006      	b.n	8000eb2 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <OLED_ClearBuffer+0x3c>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	d9f5      	bls.n	8000ea4 <OLED_ClearBuffer+0x18>
    }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000038c 	.word	0x2000038c
 8000ec8:	20000384 	.word	0x20000384

08000ecc <OLED_SendCommand>:
        oled_dirty_pages[page] = 1;
    }
}

void OLED_SendCommand(uint8_t command)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000ede:	f107 020c 	add.w	r2, r7, #12
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2302      	movs	r3, #2
 8000eea:	2178      	movs	r1, #120	@ 0x78
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <OLED_SendCommand+0x30>)
 8000eee:	f002 fbd7 	bl	80036a0 <HAL_I2C_Master_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000328 	.word	0x20000328

08000f00 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000f04:	2064      	movs	r0, #100	@ 0x64
 8000f06:	f000 fcb1 	bl	800186c <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000f0a:	20ae      	movs	r0, #174	@ 0xae
 8000f0c:	f7ff ffde 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000f10:	20d5      	movs	r0, #213	@ 0xd5
 8000f12:	f7ff ffdb 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000f16:	2080      	movs	r0, #128	@ 0x80
 8000f18:	f7ff ffd8 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000f1c:	20a8      	movs	r0, #168	@ 0xa8
 8000f1e:	f7ff ffd5 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000f22:	203f      	movs	r0, #63	@ 0x3f
 8000f24:	f7ff ffd2 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000f28:	20d3      	movs	r0, #211	@ 0xd3
 8000f2a:	f7ff ffcf 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff ffcc 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000f34:	2040      	movs	r0, #64	@ 0x40
 8000f36:	f7ff ffc9 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000f3a:	208d      	movs	r0, #141	@ 0x8d
 8000f3c:	f7ff ffc6 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000f40:	2014      	movs	r0, #20
 8000f42:	f7ff ffc3 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000f46:	2020      	movs	r0, #32
 8000f48:	f7ff ffc0 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ffbd 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000f52:	20a1      	movs	r0, #161	@ 0xa1
 8000f54:	f7ff ffba 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000f58:	20c8      	movs	r0, #200	@ 0xc8
 8000f5a:	f7ff ffb7 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000f5e:	20da      	movs	r0, #218	@ 0xda
 8000f60:	f7ff ffb4 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000f64:	2012      	movs	r0, #18
 8000f66:	f7ff ffb1 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000f6a:	2081      	movs	r0, #129	@ 0x81
 8000f6c:	f7ff ffae 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000f70:	20cf      	movs	r0, #207	@ 0xcf
 8000f72:	f7ff ffab 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000f76:	20d9      	movs	r0, #217	@ 0xd9
 8000f78:	f7ff ffa8 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000f7c:	20f1      	movs	r0, #241	@ 0xf1
 8000f7e:	f7ff ffa5 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000f82:	20db      	movs	r0, #219	@ 0xdb
 8000f84:	f7ff ffa2 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000f88:	2030      	movs	r0, #48	@ 0x30
 8000f8a:	f7ff ff9f 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000f8e:	20a4      	movs	r0, #164	@ 0xa4
 8000f90:	f7ff ff9c 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000f94:	20a6      	movs	r0, #166	@ 0xa6
 8000f96:	f7ff ff99 	bl	8000ecc <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000f9a:	202e      	movs	r0, #46	@ 0x2e
 8000f9c:	f7ff ff96 	bl	8000ecc <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000fa0:	f7ff ff40 	bl	8000e24 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000fa4:	f7ff ff72 	bl	8000e8c <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000fa8:	20af      	movs	r0, #175	@ 0xaf
 8000faa:	f7ff ff8f 	bl	8000ecc <OLED_SendCommand>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2b1f      	cmp	r3, #31
 8000fd2:	f240 80a8 	bls.w	8001126 <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	3b20      	subs	r3, #32
 8000fda:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8000fdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db08      	blt.n	8000ff6 <OLED_DisplayChar+0x42>
 8000fe4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da00      	bge.n	8000fee <OLED_DisplayChar+0x3a>
 8000fec:	3307      	adds	r3, #7
 8000fee:	10db      	asrs	r3, r3, #3
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	e000      	b.n	8000ff8 <OLED_DisplayChar+0x44>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8000ffa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ffe:	7efb      	ldrb	r3, [r7, #27]
 8001000:	4413      	add	r3, r2
 8001002:	2b40      	cmp	r3, #64	@ 0x40
 8001004:	dc0a      	bgt.n	800101c <OLED_DisplayChar+0x68>
 8001006:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800100a:	7efb      	ldrb	r3, [r7, #27]
 800100c:	4413      	add	r3, r2
 800100e:	3b01      	subs	r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	da00      	bge.n	8001016 <OLED_DisplayChar+0x62>
 8001014:	3307      	adds	r3, #7
 8001016:	10db      	asrs	r3, r3, #3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	e000      	b.n	800101e <OLED_DisplayChar+0x6a>
 800101c:	2307      	movs	r3, #7
 800101e:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8001020:	7e7b      	ldrb	r3, [r7, #25]
 8001022:	77fb      	strb	r3, [r7, #31]
 8001024:	e006      	b.n	8001034 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8001026:	7ffb      	ldrb	r3, [r7, #31]
 8001028:	4a43      	ldr	r2, [pc, #268]	@ (8001138 <OLED_DisplayChar+0x184>)
 800102a:	2101      	movs	r1, #1
 800102c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800102e:	7ffb      	ldrb	r3, [r7, #31]
 8001030:	3301      	adds	r3, #1
 8001032:	77fb      	strb	r3, [r7, #31]
 8001034:	7ffa      	ldrb	r2, [r7, #31]
 8001036:	7e3b      	ldrb	r3, [r7, #24]
 8001038:	429a      	cmp	r2, r3
 800103a:	d802      	bhi.n	8001042 <OLED_DisplayChar+0x8e>
 800103c:	7ffb      	ldrb	r3, [r7, #31]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9f1      	bls.n	8001026 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001042:	2300      	movs	r3, #0
 8001044:	77bb      	strb	r3, [r7, #30]
 8001046:	e069      	b.n	800111c <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 8001048:	7fbb      	ldrb	r3, [r7, #30]
 800104a:	b29a      	uxth	r2, r3
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	4413      	add	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8001054:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db5b      	blt.n	8001114 <OLED_DisplayChar+0x160>
 800105c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001060:	2b7f      	cmp	r3, #127	@ 0x7f
 8001062:	dc57      	bgt.n	8001114 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8001064:	7ebb      	ldrb	r3, [r7, #26]
 8001066:	7f3a      	ldrb	r2, [r7, #28]
 8001068:	fb03 f202 	mul.w	r2, r3, r2
 800106c:	7fbb      	ldrb	r3, [r7, #30]
 800106e:	4413      	add	r3, r2
 8001070:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8001074:	d259      	bcs.n	800112a <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8001076:	7ebb      	ldrb	r3, [r7, #26]
 8001078:	7f3a      	ldrb	r2, [r7, #28]
 800107a:	fb03 f202 	mul.w	r2, r3, r2
 800107e:	7fbb      	ldrb	r3, [r7, #30]
 8001080:	4413      	add	r3, r2
 8001082:	4a2e      	ldr	r2, [pc, #184]	@ (800113c <OLED_DisplayChar+0x188>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001088:	2300      	movs	r3, #0
 800108a:	777b      	strb	r3, [r7, #29]
 800108c:	e03d      	b.n	800110a <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 800108e:	7f7b      	ldrb	r3, [r7, #29]
 8001090:	b29a      	uxth	r2, r3
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	b29b      	uxth	r3, r3
 8001098:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 800109a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db2f      	blt.n	8001102 <OLED_DisplayChar+0x14e>
 80010a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80010a8:	dc2b      	bgt.n	8001102 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80010aa:	7d7a      	ldrb	r2, [r7, #21]
 80010ac:	7f7b      	ldrb	r3, [r7, #29]
 80010ae:	fa42 f303 	asr.w	r3, r2, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d024      	beq.n	8001104 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80010ba:	8a7b      	ldrh	r3, [r7, #18]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80010c2:	8a7b      	ldrh	r3, [r7, #18]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	01db      	lsls	r3, r3, #7
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	8afb      	ldrh	r3, [r7, #22]
 80010d6:	4413      	add	r3, r2
 80010d8:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 80010da:	89fb      	ldrh	r3, [r7, #14]
 80010dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e0:	d210      	bcs.n	8001104 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	4a16      	ldr	r2, [pc, #88]	@ (8001140 <OLED_DisplayChar+0x18c>)
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	7c3b      	ldrb	r3, [r7, #16]
 80010ec:	2101      	movs	r1, #1
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b25a      	sxtb	r2, r3
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	b2d1      	uxtb	r1, r2
 80010fc:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <OLED_DisplayChar+0x18c>)
 80010fe:	54d1      	strb	r1, [r2, r3]
 8001100:	e000      	b.n	8001104 <OLED_DisplayChar+0x150>
                continue;
 8001102:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001104:	7f7b      	ldrb	r3, [r7, #29]
 8001106:	3301      	adds	r3, #1
 8001108:	777b      	strb	r3, [r7, #29]
 800110a:	7f7a      	ldrb	r2, [r7, #29]
 800110c:	7efb      	ldrb	r3, [r7, #27]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3bd      	bcc.n	800108e <OLED_DisplayChar+0xda>
 8001112:	e000      	b.n	8001116 <OLED_DisplayChar+0x162>
            continue;
 8001114:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001116:	7fbb      	ldrb	r3, [r7, #30]
 8001118:	3301      	adds	r3, #1
 800111a:	77bb      	strb	r3, [r7, #30]
 800111c:	7fba      	ldrb	r2, [r7, #30]
 800111e:	7f3b      	ldrb	r3, [r7, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	d391      	bcc.n	8001048 <OLED_DisplayChar+0x94>
 8001124:	e002      	b.n	800112c <OLED_DisplayChar+0x178>
        return;
 8001126:	bf00      	nop
 8001128:	e000      	b.n	800112c <OLED_DisplayChar+0x178>
            break;
 800112a:	bf00      	nop
                }
            }
        }
    }
}
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000384 	.word	0x20000384
 800113c:	0800c498 	.word	0x0800c498
 8001140:	2000038c 	.word	0x2000038c

08001144 <OLED_DisplayString>:
        }
    }
}

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	603a      	str	r2, [r7, #0]
 800114e:	80fb      	strh	r3, [r7, #6]
 8001150:	460b      	mov	r3, r1
 8001152:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8001158:	2306      	movs	r3, #6
 800115a:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 800115c:	2308      	movs	r3, #8
 800115e:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8001160:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001164:	2b3f      	cmp	r3, #63	@ 0x3f
 8001166:	dc34      	bgt.n	80011d2 <OLED_DisplayString+0x8e>
 8001168:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116c:	7b7b      	ldrb	r3, [r7, #13]
 800116e:	4413      	add	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	dd2e      	ble.n	80011d2 <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8001174:	e026      	b.n	80011c4 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	b29a      	uxth	r2, r3
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	b29b      	uxth	r3, r3
 800117e:	fb12 f303 	smulbb	r3, r2, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 800118c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001190:	2b7f      	cmp	r3, #127	@ 0x7f
 8001192:	dc20      	bgt.n	80011d6 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8001194:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	4413      	add	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	dc03      	bgt.n	80011a8 <OLED_DisplayString+0x64>
        {
            j++;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	3301      	adds	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
            continue;
 80011a6:	e00d      	b.n	80011c4 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fefb 	bl	8000fb4 <OLED_DisplayChar>
        j++;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1d2      	bne.n	8001176 <OLED_DisplayString+0x32>
 80011d0:	e002      	b.n	80011d8 <OLED_DisplayString+0x94>
        return;
 80011d2:	bf00      	nop
 80011d4:	e000      	b.n	80011d8 <OLED_DisplayString+0x94>
            break;
 80011d6:	bf00      	nop
    }
}
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <RGB_Init>:
#define RESET_PULSE_LEN 50 // Number of zero-value bytes to create the reset pulse

static uint16_t ws2812_buffer[WS2812_BUFFER_SIZE + RESET_PULSE_LEN];

void RGB_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
    // Initialize all LEDs to off
    for (int i = 0; i < NUM_LEDS; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	e009      	b.n	8001200 <RGB_Init+0x20>
    {
        RGB_SetColor(i, 0, 0, 0);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	b2d8      	uxtb	r0, r3
 80011f0:	2300      	movs	r3, #0
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	f000 f81d 	bl	8001234 <RGB_SetColor>
    for (int i = 0; i < NUM_LEDS; i++)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3301      	adds	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b03      	cmp	r3, #3
 8001204:	ddf2      	ble.n	80011ec <RGB_Init+0xc>
    }
    // Set reset pulse buffer to 0
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	e008      	b.n	800121e <RGB_Init+0x3e>
    {
        ws2812_buffer[WS2812_BUFFER_SIZE + i] = 0;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3360      	adds	r3, #96	@ 0x60
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <RGB_Init+0x50>)
 8001212:	2100      	movs	r1, #0
 8001214:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < RESET_PULSE_LEN; i++)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b31      	cmp	r3, #49	@ 0x31
 8001222:	ddf3      	ble.n	800120c <RGB_Init+0x2c>
    }
    RGB_Update();
 8001224:	f000 f84e 	bl	80012c4 <RGB_Update>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000b90 	.word	0x20000b90

08001234 <RGB_SetColor>:

// range: 0~255
// led_index: 0 to NUM_LEDS-1
void RGB_SetColor(uint8_t led_index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001234:	b490      	push	{r4, r7}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4623      	mov	r3, r4
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	4603      	mov	r3, r0
 8001248:	71bb      	strb	r3, [r7, #6]
 800124a:	460b      	mov	r3, r1
 800124c:	717b      	strb	r3, [r7, #5]
 800124e:	4613      	mov	r3, r2
 8001250:	713b      	strb	r3, [r7, #4]
    if (led_index >= NUM_LEDS)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d82d      	bhi.n	80012b4 <RGB_SetColor+0x80>
    {
        return;
    }

    uint32_t color = (green << 16) | (red << 8) | blue;
 8001258:	797b      	ldrb	r3, [r7, #5]
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	431a      	orrs	r2, r3
 8001262:	793b      	ldrb	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
    uint16_t *buffer_ptr = &ws2812_buffer[led_index * BITS_PER_LED];
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <RGB_SetColor+0x8c>)
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < BITS_PER_LED; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	e015      	b.n	80012ac <RGB_SetColor+0x78>
    {
        if ((color << i) & 0x800000)
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <RGB_SetColor+0x68>
        { // Check MSB of the 24-bit color
            *buffer_ptr++ = WS2812_HIGH_BIT;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1c9a      	adds	r2, r3, #2
 8001294:	617a      	str	r2, [r7, #20]
 8001296:	2288      	movs	r2, #136	@ 0x88
 8001298:	801a      	strh	r2, [r3, #0]
 800129a:	e004      	b.n	80012a6 <RGB_SetColor+0x72>
        }
        else
        {
            *buffer_ptr++ = WS2812_LOW_BIT;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1c9a      	adds	r2, r3, #2
 80012a0:	617a      	str	r2, [r7, #20]
 80012a2:	2244      	movs	r2, #68	@ 0x44
 80012a4:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < BITS_PER_LED; i++)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	3301      	adds	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b17      	cmp	r3, #23
 80012b0:	dde6      	ble.n	8001280 <RGB_SetColor+0x4c>
 80012b2:	e000      	b.n	80012b6 <RGB_SetColor+0x82>
        return;
 80012b4:	bf00      	nop
        }
    }
}
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc90      	pop	{r4, r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000b90 	.word	0x20000b90

080012c4 <RGB_Update>:

// Send the buffer to the LEDs
void RGB_Update(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)ws2812_buffer, sizeof(ws2812_buffer) / sizeof(uint16_t));
 80012c8:	2392      	movs	r3, #146	@ 0x92
 80012ca:	4a03      	ldr	r2, [pc, #12]	@ (80012d8 <RGB_Update+0x14>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4803      	ldr	r0, [pc, #12]	@ (80012dc <RGB_Update+0x18>)
 80012d0:	f005 fb2e 	bl	8006930 <HAL_TIM_PWM_Start_DMA>
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000b90 	.word	0x20000b90
 80012dc:	20000cb4 	.word	0x20000cb4

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_MspInit+0x44>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <HAL_MspInit+0x44>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_MspInit+0x44>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <HAL_MspInit+0x44>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6593      	str	r3, [r2, #88]	@ 0x58
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001316:	f004 fb25 	bl	8005964 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <NMI_Handler+0x4>

08001330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <MemManage_Handler+0x4>

08001340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <UsageFault_Handler+0x4>

08001350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137e:	f000 fa57 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <DMA1_Channel1_IRQHandler+0x10>)
 800138e:	f001 fdea 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000025c 	.word	0x2000025c

0800139c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <DMA1_Channel2_IRQHandler+0x10>)
 80013a2:	f001 fde0 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002bc 	.word	0x200002bc

080013b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <DMA1_Channel3_IRQHandler+0x10>)
 80013b6:	f001 fdd6 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000d00 	.word	0x20000d00

080013c4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <USB_LP_IRQHandler+0x10>)
 80013ca:	f002 fe22 	bl	8004012 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200012cc 	.word	0x200012cc

080013d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	@ 0x38
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142e:	4b2c      	ldr	r3, [pc, #176]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 8001430:	4a2c      	ldr	r2, [pc, #176]	@ (80014e4 <MX_TIM3_Init+0xe8>)
 8001432:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 8001442:	22d4      	movs	r2, #212	@ 0xd4
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001452:	4823      	ldr	r0, [pc, #140]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 8001454:	f005 f9b4 	bl	80067c0 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800145e:	f7ff fcda 	bl	8000e16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146c:	4619      	mov	r1, r3
 800146e:	481c      	ldr	r0, [pc, #112]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 8001470:	f005 fd8a 	bl	8006f88 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800147a:	f7ff fccc 	bl	8000e16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800147e:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 8001480:	f005 f9f5 	bl	800686e <HAL_TIM_PWM_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800148a:	f7ff fcc4 	bl	8000e16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4810      	ldr	r0, [pc, #64]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 800149e:	f006 fbb1 	bl	8007c04 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014a8:	f7ff fcb5 	bl	8000e16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ac:	2360      	movs	r3, #96	@ 0x60
 80014ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 80014c4:	f005 fc4c 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014ce:	f7ff fca2 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <MX_TIM3_Init+0xe4>)
 80014d4:	f000 f854 	bl	8001580 <HAL_TIM_MspPostInit>

}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000cb4 	.word	0x20000cb4
 80014e4:	40000400 	.word	0x40000400

080014e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <HAL_TIM_Base_MspInit+0x88>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d136      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <HAL_TIM_Base_MspInit+0x8c>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001574 <HAL_TIM_Base_MspInit+0x8c>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6593      	str	r3, [r2, #88]	@ 0x58
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_TIM_Base_MspInit+0x8c>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel3;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001514:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_TIM_Base_MspInit+0x94>)
 8001516:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 800151a:	223d      	movs	r2, #61	@ 0x3d
 800151c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001520:	2210      	movs	r2, #16
 8001522:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001536:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 800153a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800154c:	480a      	ldr	r0, [pc, #40]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 800154e:	f001 fbe7 	bl	8002d20 <HAL_DMA_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001558:	f7ff fc5d 	bl	8000e16 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <HAL_TIM_Base_MspInit+0x90>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40000400 	.word	0x40000400
 8001574:	40021000 	.word	0x40021000
 8001578:	20000d00 	.word	0x20000d00
 800157c:	40020030 	.word	0x40020030

08001580 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a11      	ldr	r2, [pc, #68]	@ (80015e4 <HAL_TIM_MspPostInit+0x64>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d11b      	bne.n	80015da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_TIM_MspPostInit+0x68>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_TIM_MspPostInit+0x68>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_TIM_MspPostInit+0x68>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RGB_PWM_Pin;
 80015ba:	2310      	movs	r3, #16
 80015bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_PWM_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <HAL_TIM_MspPostInit+0x6c>)
 80015d6:	f001 fe15 	bl	8003204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40000400 	.word	0x40000400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000400 	.word	0x48000400

080015f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <MX_USART2_UART_Init+0x94>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001638:	4811      	ldr	r0, [pc, #68]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800163a:	f006 fb65 	bl	8007d08 <HAL_UART_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001644:	f7ff fbe7 	bl	8000e16 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800164c:	f007 f8d0 	bl	80087f0 <HAL_UARTEx_SetTxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001656:	f7ff fbde 	bl	8000e16 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4808      	ldr	r0, [pc, #32]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800165e:	f007 f905 	bl	800886c <HAL_UARTEx_SetRxFifoThreshold>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001668:	f7ff fbd5 	bl	8000e16 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800166e:	f007 f886 	bl	800877e <HAL_UARTEx_DisableFifoMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001678:	f7ff fbcd 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000d60 	.word	0x20000d60
 8001684:	40004400 	.word	0x40004400

08001688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b09a      	sub	sp, #104	@ 0x68
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2244      	movs	r2, #68	@ 0x44
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00a fe93 	bl	800c3d4 <memset>
  if(uartHandle->Instance==USART2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001730 <HAL_UART_MspInit+0xa8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d136      	bne.n	8001726 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4618      	mov	r0, r3
 80016c6:	f004 fe8b 	bl	80063e0 <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d0:	f7ff fba1 	bl	8000e16 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <HAL_UART_MspInit+0xac>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	4a16      	ldr	r2, [pc, #88]	@ (8001734 <HAL_UART_MspInit+0xac>)
 80016da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016de:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <HAL_UART_MspInit+0xac>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_UART_MspInit+0xac>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_UART_MspInit+0xac>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_UART_MspInit+0xac>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001704:	230c      	movs	r3, #12
 8001706:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001714:	2307      	movs	r3, #7
 8001716:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001722:	f001 fd6f 	bl	8003204 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001726:	bf00      	nop
 8001728:	3768      	adds	r7, #104	@ 0x68
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004400 	.word	0x40004400
 8001734:	40021000 	.word	0x40021000

08001738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001738:	480d      	ldr	r0, [pc, #52]	@ (8001770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800173a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800173c:	f7ff fe4c 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <LoopForever+0x6>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <LoopForever+0xe>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	@ (8001784 <LoopForever+0x16>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f00a fe3d 	bl	800c3e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176a:	f7ff faeb 	bl	8000d44 <main>

0800176e <LoopForever>:

LoopForever:
    b LoopForever
 800176e:	e7fe      	b.n	800176e <LoopForever>
  ldr   r0, =_estack
 8001770:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800177c:	0800c728 	.word	0x0800c728
  ldr r2, =_sbss
 8001780:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001784:	200015bc 	.word	0x200015bc

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>

0800178a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f001 fa83 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f80e 	bl	80017bc <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e001      	b.n	80017b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ac:	f7ff fd98 	bl	80012e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b0:	79fb      	ldrb	r3, [r7, #7]

}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_InitTick+0x68>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d022      	beq.n	8001816 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_InitTick+0x6c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <HAL_InitTick+0x68>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fa8e 	bl	8002d06 <HAL_SYSTICK_Config>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10f      	bne.n	8001810 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	d809      	bhi.n	800180a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f6:	2200      	movs	r2, #0
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295
 80017fe:	f001 fa5a 	bl	8002cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <HAL_InitTick+0x70>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e007      	b.n	800181a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e004      	b.n	800181a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000000c 	.word	0x2000000c
 8001828:	20000004 	.word	0x20000004
 800182c:	20000008 	.word	0x20000008

08001830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_IncTick+0x1c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_IncTick+0x20>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4413      	add	r3, r2
 800183e:	4a03      	ldr	r2, [pc, #12]	@ (800184c <HAL_IncTick+0x1c>)
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	20000df4 	.word	0x20000df4
 8001850:	2000000c 	.word	0x2000000c

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000df4 	.word	0x20000df4

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d004      	beq.n	8001890 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_Delay+0x40>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001890:	bf00      	nop
 8001892:	f7ff ffdf 	bl	8001854 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d8f7      	bhi.n	8001892 <HAL_Delay+0x26>
  {
  }
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	609a      	str	r2, [r3, #8]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3360      	adds	r3, #96	@ 0x60
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <LL_ADC_SetOffset+0x44>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	4313      	orrs	r3, r2
 8001948:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	03fff000 	.word	0x03fff000

08001960 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3360      	adds	r3, #96	@ 0x60
 800196e:	461a      	mov	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3360      	adds	r3, #96	@ 0x60
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3360      	adds	r3, #96	@ 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3360      	adds	r3, #96	@ 0x60
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	615a      	str	r2, [r3, #20]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3330      	adds	r3, #48	@ 0x30
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	211f      	movs	r1, #31
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 011f 	and.w	r1, r3, #31
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aa0:	bf00      	nop
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3314      	adds	r3, #20
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	0e5b      	lsrs	r3, r3, #25
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0d1b      	lsrs	r3, r3, #20
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	2107      	movs	r1, #7
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0d1b      	lsrs	r3, r3, #20
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0318 	and.w	r3, r3, #24
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b28:	40d9      	lsrs	r1, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	431a      	orrs	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	0007ffff 	.word	0x0007ffff

08001b4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6093      	str	r3, [r2, #8]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bfc:	f043 0202 	orr.w	r2, r3, #2
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <LL_ADC_IsEnabled+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_ADC_IsEnabled+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_IsDisableOngoing+0x18>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_IsDisableOngoing+0x1a>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d101      	bne.n	8001c74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d101      	bne.n	8001c9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e167      	b.n	8001f92 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7fe fd35 	bl	8000740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff41 	bl	8001b70 <LL_ADC_IsDeepPowerDownEnabled>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff27 	bl	8001b4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff5c 	bl	8001bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d115      	bne.n	8001d3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff40 	bl	8001b98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d18:	4ba0      	ldr	r3, [pc, #640]	@ (8001f9c <HAL_ADC_Init+0x2f4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	4aa0      	ldr	r2, [pc, #640]	@ (8001fa0 <HAL_ADC_Init+0x2f8>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f9      	bne.n	8001d2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff3e 	bl	8001bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10d      	bne.n	8001d66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff76 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8001d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8100 	bne.w	8001f80 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 80fc 	bne.w	8001f80 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff37 	bl	8001c10 <LL_ADC_IsEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d111      	bne.n	8001dcc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001dac:	f7ff ff30 	bl	8001c10 <LL_ADC_IsEnabled>
 8001db0:	4604      	mov	r4, r0
 8001db2:	487c      	ldr	r0, [pc, #496]	@ (8001fa4 <HAL_ADC_Init+0x2fc>)
 8001db4:	f7ff ff2c 	bl	8001c10 <LL_ADC_IsEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4323      	orrs	r3, r4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4878      	ldr	r0, [pc, #480]	@ (8001fa8 <HAL_ADC_Init+0x300>)
 8001dc8:	f7ff fd72 	bl	80018b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7f5b      	ldrb	r3, [r3, #29]
 8001dd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ddc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001de2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	045b      	lsls	r3, r3, #17
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b60      	ldr	r3, [pc, #384]	@ (8001fac <HAL_ADC_Init+0x304>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff15 	bl	8001c82 <LL_ADC_INJ_IsConversionOngoing>
 8001e58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d16d      	bne.n	8001f3c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d16a      	bne.n	8001f3c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e6a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e82:	f023 0302 	bic.w	r3, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d017      	beq.n	8001ec8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ea6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001eb0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6911      	ldr	r1, [r2, #16]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001ec6:	e013      	b.n	8001ef0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ed6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d118      	bne.n	8001f2c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	e007      	b.n	8001f3c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10c      	bne.n	8001f5e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f023 010f 	bic.w	r1, r3, #15
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020f 	bic.w	r2, r2, #15
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f7e:	e007      	b.n	8001f90 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	053e2d63 	.word	0x053e2d63
 8001fa4:	50000100 	.word	0x50000100
 8001fa8:	50000300 	.word	0x50000300
 8001fac:	fff04007 	.word	0xfff04007

08001fb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b0b6      	sub	sp, #216	@ 0xd8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x22>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e3c8      	b.n	8002764 <HAL_ADC_ConfigChannel+0x7b4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fe3c 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 83ad 	bne.w	8002746 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f7ff fd2b 	bl	8001a54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe2a 	bl	8001c5c <LL_ADC_REG_IsConversionOngoing>
 8002008:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fe36 	bl	8001c82 <LL_ADC_INJ_IsConversionOngoing>
 8002016:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800201a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 81d9 	bne.w	80023d6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 81d4 	bne.w	80023d6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002036:	d10f      	bne.n	8002058 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	4619      	mov	r1, r3
 8002044:	f7ff fd32 	bl	8001aac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fcec 	bl	8001a2e <LL_ADC_SetSamplingTimeCommonConfig>
 8002056:	e00e      	b.n	8002076 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	461a      	mov	r2, r3
 8002066:	f7ff fd21 	bl	8001aac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fcdc 	bl	8001a2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d022      	beq.n	80020de <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020a8:	f7ff fc36 	bl	8001918 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff fc82 	bl	80019c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d102      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x124>
 80020ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x126>
 80020d4:	2300      	movs	r3, #0
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7ff fc8e 	bl	80019f8 <LL_ADC_SetOffsetSaturation>
 80020dc:	e17b      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fc3b 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <HAL_ADC_ConfigChannel+0x15a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fc30 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	e01e      	b.n	8002148 <HAL_ADC_ConfigChannel+0x198>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fc25 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800212c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002130:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e004      	b.n	8002146 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800213c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1b0>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	e018      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1e2>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800217c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e004      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002192:	429a      	cmp	r2, r3
 8002194:	d106      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fbf4 	bl	800198c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbd8 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x220>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fbcd 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 021f 	and.w	r2, r3, #31
 80021ce:	e01e      	b.n	800220e <HAL_ADC_ConfigChannel+0x25e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fbc2 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80021ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80021f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x276>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	e018      	b.n	8002258 <HAL_ADC_ConfigChannel+0x2a8>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800223a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800223e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002242:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e004      	b.n	8002258 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800224e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2101      	movs	r1, #1
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fb91 	bl	800198c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2102      	movs	r1, #2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fb75 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x2e6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2102      	movs	r1, #2
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fb6a 	bl	8001960 <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	e01e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x324>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2102      	movs	r1, #2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fb5f 	bl	8001960 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80022c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x33c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	e016      	b.n	800231a <HAL_ADC_ConfigChannel+0x36a>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80022fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb30 	bl	800198c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2103      	movs	r1, #3
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fb14 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x3a8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2103      	movs	r1, #3
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fb09 	bl	8001960 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	e017      	b.n	8002388 <HAL_ADC_ConfigChannel+0x3d8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2103      	movs	r1, #3
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fafe 	bl	8001960 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002370:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002372:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800237a:	2320      	movs	r3, #32
 800237c:	e003      	b.n	8002386 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800237e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x3f0>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	e011      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x414>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80023bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d106      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2103      	movs	r1, #3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fadb 	bl	800198c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc18 	bl	8001c10 <LL_ADC_IsEnabled>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 8140 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f7ff fb85 	bl	8001b04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a8f      	ldr	r2, [pc, #572]	@ (800263c <HAL_ADC_ConfigChannel+0x68c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f040 8131 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_ADC_ConfigChannel+0x47e>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0e9b      	lsrs	r3, r3, #26
 800241c:	3301      	adds	r3, #1
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2b09      	cmp	r3, #9
 8002424:	bf94      	ite	ls
 8002426:	2301      	movls	r3, #1
 8002428:	2300      	movhi	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	e019      	b.n	8002462 <HAL_ADC_ConfigChannel+0x4b2>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800243c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002440:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002446:	2320      	movs	r3, #32
 8002448:	e003      	b.n	8002452 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800244a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3301      	adds	r3, #1
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2b09      	cmp	r3, #9
 800245a:	bf94      	ite	ls
 800245c:	2301      	movls	r3, #1
 800245e:	2300      	movhi	r3, #0
 8002460:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	2b00      	cmp	r3, #0
 8002464:	d079      	beq.n	800255a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x4d2>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002480:	e015      	b.n	80024ae <HAL_ADC_ConfigChannel+0x4fe>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002492:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800249e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x51e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	e017      	b.n	80024fe <HAL_ADC_ConfigChannel+0x54e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80024dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80024e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80024ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x574>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	3301      	adds	r3, #1
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	051b      	lsls	r3, r3, #20
 8002522:	e018      	b.n	8002556 <HAL_ADC_ConfigChannel+0x5a6>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e003      	b.n	8002548 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002556:	430b      	orrs	r3, r1
 8002558:	e081      	b.n	800265e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x5c6>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0e9b      	lsrs	r3, r3, #26
 800256c:	3301      	adds	r3, #1
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002574:	e015      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x5f2>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e003      	b.n	800259a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	069b      	lsls	r3, r3, #26
 800259e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x612>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	0e9b      	lsrs	r3, r3, #26
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	e017      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x642>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	61fb      	str	r3, [r7, #28]
  return result;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e003      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	ea42 0103 	orr.w	r1, r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <HAL_ADC_ConfigChannel+0x66e>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	3301      	adds	r3, #1
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	3b1e      	subs	r3, #30
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800261c:	e01e      	b.n	800265c <HAL_ADC_ConfigChannel+0x6ac>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	613b      	str	r3, [r7, #16]
  return result;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e006      	b.n	8002648 <HAL_ADC_ConfigChannel+0x698>
 800263a:	bf00      	nop
 800263c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f003 021f 	and.w	r2, r3, #31
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	3b1e      	subs	r3, #30
 8002656:	051b      	lsls	r3, r3, #20
 8002658:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002662:	4619      	mov	r1, r3
 8002664:	f7ff fa22 	bl	8001aac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b3f      	ldr	r3, [pc, #252]	@ (800276c <HAL_ADC_ConfigChannel+0x7bc>)
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d071      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002674:	483e      	ldr	r0, [pc, #248]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 8002676:	f7ff f941 	bl	80018fc <LL_ADC_GetCommonPathInternalCh>
 800267a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3c      	ldr	r2, [pc, #240]	@ (8002774 <HAL_ADC_ConfigChannel+0x7c4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x6e2>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3a      	ldr	r2, [pc, #232]	@ (8002778 <HAL_ADC_ConfigChannel+0x7c8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d127      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d121      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a6:	d157      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026b0:	4619      	mov	r1, r3
 80026b2:	482f      	ldr	r0, [pc, #188]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 80026b4:	f7ff f90f 	bl	80018d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b8:	4b30      	ldr	r3, [pc, #192]	@ (800277c <HAL_ADC_ConfigChannel+0x7cc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	4a30      	ldr	r2, [pc, #192]	@ (8002780 <HAL_ADC_ConfigChannel+0x7d0>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026d2:	e002      	b.n	80026da <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f9      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e0:	e03a      	b.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a27      	ldr	r2, [pc, #156]	@ (8002784 <HAL_ADC_ConfigChannel+0x7d4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d113      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	@ (8002788 <HAL_ADC_ConfigChannel+0x7d8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02a      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270a:	4619      	mov	r1, r3
 800270c:	4818      	ldr	r0, [pc, #96]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 800270e:	f7ff f8e2 	bl	80018d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002712:	e021      	b.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <HAL_ADC_ConfigChannel+0x7dc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11c      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800271e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	@ (8002788 <HAL_ADC_ConfigChannel+0x7d8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d011      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002738:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800273c:	4619      	mov	r1, r3
 800273e:	480c      	ldr	r0, [pc, #48]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c0>)
 8002740:	f7ff f8c9 	bl	80018d6 <LL_ADC_SetCommonPathInternalCh>
 8002744:	e008      	b.n	8002758 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002760:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002764:	4618      	mov	r0, r3
 8002766:	37d8      	adds	r7, #216	@ 0xd8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	80080000 	.word	0x80080000
 8002770:	50000300 	.word	0x50000300
 8002774:	c3210000 	.word	0xc3210000
 8002778:	90c00010 	.word	0x90c00010
 800277c:	20000004 	.word	0x20000004
 8002780:	053e2d63 	.word	0x053e2d63
 8002784:	c7520000 	.word	0xc7520000
 8002788:	50000100 	.word	0x50000100
 800278c:	cb840000 	.word	0xcb840000

08002790 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fa4a 	bl	8001c36 <LL_ADC_IsDisableOngoing>
 80027a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fa31 	bl	8001c10 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d047      	beq.n	8002844 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d144      	bne.n	8002844 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030d 	and.w	r3, r3, #13
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10c      	bne.n	80027e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fa0b 	bl	8001be8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2203      	movs	r2, #3
 80027d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027da:	f7ff f83b 	bl	8001854 <HAL_GetTick>
 80027de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027e0:	e029      	b.n	8002836 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e023      	b.n	8002846 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027fe:	f7ff f829 	bl	8001854 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d914      	bls.n	8002836 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	f043 0210 	orr.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e007      	b.n	8002846 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1dc      	bne.n	80027fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <LL_ADC_IsEnabled>:
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <LL_ADC_IsEnabled+0x18>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_IsEnabled+0x1a>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_StartCalibration>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002886:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002890:	4313      	orrs	r3, r2
 8002892:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_IsCalibrationOnGoing>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028ba:	d101      	bne.n	80028c0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_REG_IsConversionOngoing>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d101      	bne.n	80028e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADCEx_Calibration_Start+0x1c>
 800290c:	2302      	movs	r3, #2
 800290e:	e04d      	b.n	80029ac <HAL_ADCEx_Calibration_Start+0xb8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff39 	bl	8002790 <ADC_Disable>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d136      	bne.n	8002996 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002930:	f023 0302 	bic.w	r3, r3, #2
 8002934:	f043 0202 	orr.w	r2, r3, #2
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff96 	bl	8002874 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002948:	e014      	b.n	8002974 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d90d      	bls.n	8002974 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	f023 0312 	bic.w	r3, r3, #18
 8002960:	f043 0210 	orr.w	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e01b      	b.n	80029ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff94 	bl	80028a6 <LL_ADC_IsCalibrationOnGoing>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e2      	bne.n	800294a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	f023 0303 	bic.w	r3, r3, #3
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002994:	e005      	b.n	80029a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f043 0210 	orr.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	0004de01 	.word	0x0004de01

080029b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b0a1      	sub	sp, #132	@ 0x84
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e08b      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029de:	2300      	movs	r3, #0
 80029e0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029e2:	2300      	movs	r3, #0
 80029e4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ee:	d102      	bne.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029f0:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	e001      	b.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e06a      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff57 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 8002a20:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff51 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d14c      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d149      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a38:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a3a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d028      	beq.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a56:	035b      	lsls	r3, r3, #13
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a60:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a64:	f7ff fef3 	bl	800284e <LL_ADC_IsEnabled>
 8002a68:	4604      	mov	r4, r0
 8002a6a:	4823      	ldr	r0, [pc, #140]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a6c:	f7ff feef 	bl	800284e <LL_ADC_IsEnabled>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4323      	orrs	r3, r4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d133      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a80:	f023 030f 	bic.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	6811      	ldr	r1, [r2, #0]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a92:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a94:	e024      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002aa6:	f7ff fed2 	bl	800284e <LL_ADC_IsEnabled>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4812      	ldr	r0, [pc, #72]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002aae:	f7ff fece 	bl	800284e <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4323      	orrs	r3, r4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d112      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ac2:	f023 030f 	bic.w	r3, r3, #15
 8002ac6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ac8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aca:	e009      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ade:	e000      	b.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3784      	adds	r7, #132	@ 0x84
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	50000100 	.word	0x50000100
 8002afc:	50000300 	.word	0x50000300

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	@ (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	@ (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	@ 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	@ 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f7ff ff8e 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff29 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc4:	f7ff ff40 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff ff90 	bl	8002bf4 <NVIC_EncodePriority>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff5f 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff33 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffa4 	bl	8002c5c <SysTick_Config>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e08d      	b.n	8002e4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b47      	ldr	r3, [pc, #284]	@ (8002e58 <HAL_DMA_Init+0x138>)
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d80f      	bhi.n	8002d5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b45      	ldr	r3, [pc, #276]	@ (8002e5c <HAL_DMA_Init+0x13c>)
 8002d46:	4413      	add	r3, r2
 8002d48:	4a45      	ldr	r2, [pc, #276]	@ (8002e60 <HAL_DMA_Init+0x140>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	009a      	lsls	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a42      	ldr	r2, [pc, #264]	@ (8002e64 <HAL_DMA_Init+0x144>)
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d5c:	e00e      	b.n	8002d7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_DMA_Init+0x148>)
 8002d66:	4413      	add	r3, r2
 8002d68:	4a3d      	ldr	r2, [pc, #244]	@ (8002e60 <HAL_DMA_Init+0x140>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	009a      	lsls	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a3c      	ldr	r2, [pc, #240]	@ (8002e6c <HAL_DMA_Init+0x14c>)
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9b6 	bl	8003140 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ddc:	d102      	bne.n	8002de4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002df8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d010      	beq.n	8002e24 <HAL_DMA_Init+0x104>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d80c      	bhi.n	8002e24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f9d6 	bl	80031bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	e008      	b.n	8002e36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40020407 	.word	0x40020407
 8002e5c:	bffdfff8 	.word	0xbffdfff8
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	40020000 	.word	0x40020000
 8002e68:	bffdfbf8 	.word	0xbffdfbf8
 8002e6c:	40020400 	.word	0x40020400

08002e70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_DMA_Start_IT+0x20>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e066      	b.n	8002f5e <HAL_DMA_Start_IT+0xee>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d155      	bne.n	8002f50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f8fb 	bl	80030c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 020e 	orr.w	r2, r2, #14
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e00f      	b.n	8002f08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 020a 	orr.w	r2, r2, #10
 8002f06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e005      	b.n	8002f5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2204      	movs	r2, #4
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d026      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x7a>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d021      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0204 	bic.w	r2, r2, #4
 8002fb8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d071      	beq.n	80030ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fde:	e06c      	b.n	80030ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2202      	movs	r2, #2
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02e      	beq.n	8003052 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d029      	beq.n	8003052 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020a 	bic.w	r2, r2, #10
 800301a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	2102      	movs	r1, #2
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d038      	beq.n	80030ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003050:	e033      	b.n	80030ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2208      	movs	r2, #8
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02a      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d025      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020e 	bic.w	r2, r2, #14
 800307e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
}
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f003 021f 	and.w	r2, r3, #31
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b10      	cmp	r3, #16
 8003110:	d108      	bne.n	8003124 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003122:	e007      	b.n	8003134 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003150:	429a      	cmp	r2, r3
 8003152:	d802      	bhi.n	800315a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003154:	4b15      	ldr	r3, [pc, #84]	@ (80031ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e001      	b.n	800315e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800315c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3b08      	subs	r3, #8
 800316a:	4a12      	ldr	r2, [pc, #72]	@ (80031b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800318a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2201      	movs	r2, #1
 8003194:	409a      	lsls	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40020407 	.word	0x40020407
 80031ac:	40020800 	.word	0x40020800
 80031b0:	40020820 	.word	0x40020820
 80031b4:	cccccccd 	.word	0xcccccccd
 80031b8:	40020880 	.word	0x40020880

080031bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a08      	ldr	r2, [pc, #32]	@ (8003200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031de:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2201      	movs	r2, #1
 80031ea:	409a      	lsls	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	1000823f 	.word	0x1000823f
 8003200:	40020940 	.word	0x40020940

08003204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003212:	e15a      	b.n	80034ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2101      	movs	r1, #1
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 814c 	beq.w	80034c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d005      	beq.n	8003244 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003240:	2b02      	cmp	r3, #2
 8003242:	d130      	bne.n	80032a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800327a:	2201      	movs	r2, #1
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0201 	and.w	r2, r3, #1
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d017      	beq.n	80032e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d123      	bne.n	8003336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	08da      	lsrs	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	08da      	lsrs	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3208      	adds	r2, #8
 8003330:	6939      	ldr	r1, [r7, #16]
 8003332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	2203      	movs	r2, #3
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0203 	and.w	r2, r3, #3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a6 	beq.w	80034c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003378:	4b5b      	ldr	r3, [pc, #364]	@ (80034e8 <HAL_GPIO_Init+0x2e4>)
 800337a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337c:	4a5a      	ldr	r2, [pc, #360]	@ (80034e8 <HAL_GPIO_Init+0x2e4>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6613      	str	r3, [r2, #96]	@ 0x60
 8003384:	4b58      	ldr	r3, [pc, #352]	@ (80034e8 <HAL_GPIO_Init+0x2e4>)
 8003386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003390:	4a56      	ldr	r2, [pc, #344]	@ (80034ec <HAL_GPIO_Init+0x2e8>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3302      	adds	r3, #2
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	220f      	movs	r2, #15
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033ba:	d01f      	beq.n	80033fc <HAL_GPIO_Init+0x1f8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a4c      	ldr	r2, [pc, #304]	@ (80034f0 <HAL_GPIO_Init+0x2ec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d019      	beq.n	80033f8 <HAL_GPIO_Init+0x1f4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a4b      	ldr	r2, [pc, #300]	@ (80034f4 <HAL_GPIO_Init+0x2f0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_GPIO_Init+0x1f0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a4a      	ldr	r2, [pc, #296]	@ (80034f8 <HAL_GPIO_Init+0x2f4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00d      	beq.n	80033f0 <HAL_GPIO_Init+0x1ec>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a49      	ldr	r2, [pc, #292]	@ (80034fc <HAL_GPIO_Init+0x2f8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x1e8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a48      	ldr	r2, [pc, #288]	@ (8003500 <HAL_GPIO_Init+0x2fc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_GPIO_Init+0x1e4>
 80033e4:	2305      	movs	r3, #5
 80033e6:	e00a      	b.n	80033fe <HAL_GPIO_Init+0x1fa>
 80033e8:	2306      	movs	r3, #6
 80033ea:	e008      	b.n	80033fe <HAL_GPIO_Init+0x1fa>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e006      	b.n	80033fe <HAL_GPIO_Init+0x1fa>
 80033f0:	2303      	movs	r3, #3
 80033f2:	e004      	b.n	80033fe <HAL_GPIO_Init+0x1fa>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e002      	b.n	80033fe <HAL_GPIO_Init+0x1fa>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_GPIO_Init+0x1fa>
 80033fc:	2300      	movs	r3, #0
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	f002 0203 	and.w	r2, r2, #3
 8003404:	0092      	lsls	r2, r2, #2
 8003406:	4093      	lsls	r3, r2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800340e:	4937      	ldr	r1, [pc, #220]	@ (80034ec <HAL_GPIO_Init+0x2e8>)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800341c:	4b39      	ldr	r3, [pc, #228]	@ (8003504 <HAL_GPIO_Init+0x300>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003440:	4a30      	ldr	r2, [pc, #192]	@ (8003504 <HAL_GPIO_Init+0x300>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003446:	4b2f      	ldr	r3, [pc, #188]	@ (8003504 <HAL_GPIO_Init+0x300>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43db      	mvns	r3, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800346a:	4a26      	ldr	r2, [pc, #152]	@ (8003504 <HAL_GPIO_Init+0x300>)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003470:	4b24      	ldr	r3, [pc, #144]	@ (8003504 <HAL_GPIO_Init+0x300>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	43db      	mvns	r3, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003494:	4a1b      	ldr	r2, [pc, #108]	@ (8003504 <HAL_GPIO_Init+0x300>)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800349a:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <HAL_GPIO_Init+0x300>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034be:	4a11      	ldr	r2, [pc, #68]	@ (8003504 <HAL_GPIO_Init+0x300>)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f ae9d 	bne.w	8003214 <HAL_GPIO_Init+0x10>
  }
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40010000 	.word	0x40010000
 80034f0:	48000400 	.word	0x48000400
 80034f4:	48000800 	.word	0x48000800
 80034f8:	48000c00 	.word	0x48000c00
 80034fc:	48001000 	.word	0x48001000
 8003500:	48001400 	.word	0x48001400
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	887b      	ldrh	r3, [r7, #2]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	e001      	b.n	800352a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
 8003544:	4613      	mov	r3, r2
 8003546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003548:	787b      	ldrb	r3, [r7, #1]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003554:	e002      	b.n	800355c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e08d      	b.n	8003696 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd facc 	bl	8000b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	@ 0x24
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	e006      	b.n	80035f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d108      	bne.n	800360a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	e007      	b.n	800361a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003618:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800362c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800363c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	461a      	mov	r2, r3
 80036ac:	460b      	mov	r3, r1
 80036ae:	817b      	strh	r3, [r7, #10]
 80036b0:	4613      	mov	r3, r2
 80036b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b20      	cmp	r3, #32
 80036be:	f040 80fd 	bne.w	80038bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_I2C_Master_Transmit+0x30>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0f6      	b.n	80038be <HAL_I2C_Master_Transmit+0x21e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036d8:	f7fe f8bc 	bl	8001854 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2319      	movs	r3, #25
 80036e4:	2201      	movs	r2, #1
 80036e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f914 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0e1      	b.n	80038be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2221      	movs	r2, #33	@ 0x21
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2210      	movs	r2, #16
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	893a      	ldrh	r2, [r7, #8]
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	2bff      	cmp	r3, #255	@ 0xff
 800372a:	d906      	bls.n	800373a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	22ff      	movs	r2, #255	@ 0xff
 8003730:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003732:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e007      	b.n	800374a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003744:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003748:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d024      	beq.n	800379c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	b2da      	uxtb	r2, r3
 800378c:	8979      	ldrh	r1, [r7, #10]
 800378e:	4b4e      	ldr	r3, [pc, #312]	@ (80038c8 <HAL_I2C_Master_Transmit+0x228>)
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fa83 	bl	8003ca0 <I2C_TransferConfig>
 800379a:	e066      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	4b48      	ldr	r3, [pc, #288]	@ (80038c8 <HAL_I2C_Master_Transmit+0x228>)
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa78 	bl	8003ca0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037b0:	e05b      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	6a39      	ldr	r1, [r7, #32]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f907 	bl	80039ca <I2C_WaitOnTXISFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07b      	b.n	80038be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d034      	beq.n	800386a <HAL_I2C_Master_Transmit+0x1ca>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	d130      	bne.n	800386a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2200      	movs	r2, #0
 8003810:	2180      	movs	r1, #128	@ 0x80
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f880 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e04d      	b.n	80038be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	2bff      	cmp	r3, #255	@ 0xff
 800382a:	d90e      	bls.n	800384a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	22ff      	movs	r2, #255	@ 0xff
 8003830:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003836:	b2da      	uxtb	r2, r3
 8003838:	8979      	ldrh	r1, [r7, #10]
 800383a:	2300      	movs	r3, #0
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fa2c 	bl	8003ca0 <I2C_TransferConfig>
 8003848:	e00f      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003858:	b2da      	uxtb	r2, r3
 800385a:	8979      	ldrh	r1, [r7, #10]
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa1b 	bl	8003ca0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d19e      	bne.n	80037b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	6a39      	ldr	r1, [r7, #32]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f8ed 	bl	8003a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e01a      	b.n	80038be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2220      	movs	r2, #32
 800388e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <HAL_I2C_Master_Transmit+0x22c>)
 800389c:	400b      	ands	r3, r1
 800389e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	80002000 	.word	0x80002000
 80038cc:	fe00e800 	.word	0xfe00e800

080038d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d103      	bne.n	80038ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d007      	beq.n	800390c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	619a      	str	r2, [r3, #24]
  }
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003928:	e03b      	b.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f8d6 	bl	8003ae0 <I2C_IsErrorOccurred>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e041      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d02d      	beq.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7fd ff85 	bl	8001854 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d122      	bne.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	429a      	cmp	r2, r3
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	429a      	cmp	r2, r3
 8003978:	d113      	bne.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d0b4      	beq.n	800392a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039d6:	e033      	b.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f87f 	bl	8003ae0 <I2C_IsErrorOccurred>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e031      	b.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d025      	beq.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7fd ff2e 	bl	8001854 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11a      	bne.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d013      	beq.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e007      	b.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d1c4      	bne.n	80039d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a64:	e02f      	b.n	8003ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f838 	bl	8003ae0 <I2C_IsErrorOccurred>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e02d      	b.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fd feeb 	bl	8001854 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11a      	bne.n	8003ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d013      	beq.n	8003ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e007      	b.n	8003ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d1c8      	bne.n	8003a66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	@ 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d068      	beq.n	8003bde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2210      	movs	r2, #16
 8003b12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b14:	e049      	b.n	8003baa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d045      	beq.n	8003baa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	f7fd fe99 	bl	8001854 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <I2C_IsErrorOccurred+0x54>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d13a      	bne.n	8003baa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b56:	d121      	bne.n	8003b9c <I2C_IsErrorOccurred+0xbc>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b5e:	d01d      	beq.n	8003b9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d01a      	beq.n	8003b9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b76:	f7fd fe6d 	bl	8001854 <HAL_GetTick>
 8003b7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b7c:	e00e      	b.n	8003b9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b7e:	f7fd fe69 	bl	8001854 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b19      	cmp	r3, #25
 8003b8a:	d907      	bls.n	8003b9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f043 0320 	orr.w	r3, r3, #32
 8003b92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b9a:	e006      	b.n	8003baa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d1e9      	bne.n	8003b7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d003      	beq.n	8003bc0 <I2C_IsErrorOccurred+0xe0>
 8003bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0aa      	beq.n	8003b16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f043 0308 	orr.w	r3, r3, #8
 8003c18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01c      	beq.n	8003c8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fe3b 	bl	80038d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <I2C_IsErrorOccurred+0x1bc>)
 8003c66:	400b      	ands	r3, r1
 8003c68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3728      	adds	r7, #40	@ 0x28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	817b      	strh	r3, [r7, #10]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb2:	897b      	ldrh	r3, [r7, #10]
 8003cb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cb8:	7a7b      	ldrb	r3, [r7, #9]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	0d5b      	lsrs	r3, r3, #21
 8003cda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003cde:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <I2C_TransferConfig+0x60>)
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	ea02 0103 	and.w	r1, r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	03ff63ff 	.word	0x03ff63ff

08003d04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d138      	bne.n	8003d8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e032      	b.n	8003d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	@ 0x24
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d139      	bne.n	8003e24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e033      	b.n	8003e26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2224      	movs	r2, #36	@ 0x24
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e000      	b.n	8003e26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
  }
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0c0      	b.n	8003fc6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f008 f811 	bl	800be80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2203      	movs	r2, #3
 8003e62:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f004 fda1 	bl	80089b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e03e      	b.n	8003ef4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e76:	7bfa      	ldrb	r2, [r7, #15]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3311      	adds	r3, #17
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	3310      	adds	r3, #16
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	3313      	adds	r3, #19
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3320      	adds	r3, #32
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3324      	adds	r3, #36	@ 0x24
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	440b      	add	r3, r1
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	791b      	ldrb	r3, [r3, #4]
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3bb      	bcc.n	8003e76 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	e044      	b.n	8003f8e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	440b      	add	r3, r1
 8003f54:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	440b      	add	r3, r1
 8003f6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	440b      	add	r3, r1
 8003f80:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	791b      	ldrb	r3, [r3, #4]
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3b5      	bcc.n	8003f04 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003fa4:	f004 fd20 	bl	80089e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7a9b      	ldrb	r3, [r3, #10]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 fbf6 	bl	80057b0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_Start+0x16>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e012      	b.n	800400a <HAL_PCD_Start+0x3c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f004 fcc7 	bl	8008984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f006 faa4 	bl	800a548 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f006 faa9 	bl	800a576 <USB_ReadInterrupts>
 8004024:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 faee 	bl	8004612 <PCD_EP_ISR_Handler>

    return;
 8004036:	e110      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004054:	b292      	uxth	r2, r2
 8004056:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f007 ffa1 	bl	800bfa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004060:	2100      	movs	r1, #0
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8fc 	bl	8004260 <HAL_PCD_SetAddress>

    return;
 8004068:	e0f7      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004086:	b292      	uxth	r2, r2
 8004088:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800408c:	e0e5      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00c      	beq.n	80040b2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040aa:	b292      	uxth	r2, r2
 80040ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80040b0:	e0d3      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d034      	beq.n	8004126 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0204 	bic.w	r2, r2, #4
 80040ce:	b292      	uxth	r2, r2
 80040d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0208 	bic.w	r2, r2, #8
 80040e6:	b292      	uxth	r2, r2
 80040e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040fe:	2100      	movs	r1, #0
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f001 fb7f 	bl	8005804 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f007 ff84 	bl	800c014 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800411e:	b292      	uxth	r2, r2
 8004120:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004124:	e099      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800412c:	2b00      	cmp	r3, #0
 800412e:	d027      	beq.n	8004180 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004138:	b29a      	uxth	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0208 	orr.w	r2, r2, #8
 8004142:	b292      	uxth	r2, r2
 8004144:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800415a:	b292      	uxth	r2, r2
 800415c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0204 	orr.w	r2, r2, #4
 8004172:	b292      	uxth	r2, r2
 8004174:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f007 ff31 	bl	800bfe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800417e:	e06c      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d040      	beq.n	800420c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800419c:	b292      	uxth	r2, r2
 800419e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d12b      	bne.n	8004204 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0204 	orr.w	r2, r2, #4
 80041be:	b292      	uxth	r2, r2
 80041c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0208 	orr.w	r2, r2, #8
 80041d6:	b292      	uxth	r2, r2
 80041d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80041fa:	2101      	movs	r1, #1
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f001 fb01 	bl	8005804 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004202:	e02a      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f007 feeb 	bl	800bfe0 <HAL_PCD_SuspendCallback>
    return;
 800420a:	e026      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00f      	beq.n	8004236 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004228:	b292      	uxth	r2, r2
 800422a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f007 fea9 	bl	800bf86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004234:	e011      	b.n	800425a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004252:	b292      	uxth	r2, r2
 8004254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004258:	bf00      	nop
  }
}
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_PCD_SetAddress+0x1a>
 8004276:	2302      	movs	r3, #2
 8004278:	e012      	b.n	80042a0 <HAL_PCD_SetAddress+0x40>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f006 f945 	bl	800a520 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	70fb      	strb	r3, [r7, #3]
 80042ba:	460b      	mov	r3, r1
 80042bc:	803b      	strh	r3, [r7, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da0e      	bge.n	80042ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 0207 	and.w	r2, r3, #7
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	3310      	adds	r3, #16
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	705a      	strb	r2, [r3, #1]
 80042ea:	e00e      	b.n	800430a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 0207 	and.w	r2, r3, #7
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004316:	883b      	ldrh	r3, [r7, #0]
 8004318:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	78ba      	ldrb	r2, [r7, #2]
 8004324:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004326:	78bb      	ldrb	r3, [r7, #2]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d102      	bne.n	8004332 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_PCD_EP_Open+0x98>
 800433c:	2302      	movs	r3, #2
 800433e:	e00e      	b.n	800435e <HAL_PCD_EP_Open+0xb6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68f9      	ldr	r1, [r7, #12]
 800434e:	4618      	mov	r0, r3
 8004350:	f004 fb68 	bl	8008a24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800435c:	7afb      	ldrb	r3, [r7, #11]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004372:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004376:	2b00      	cmp	r3, #0
 8004378:	da0e      	bge.n	8004398 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 0207 	and.w	r2, r3, #7
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	3310      	adds	r3, #16
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	705a      	strb	r2, [r3, #1]
 8004396:	e00e      	b.n	80043b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 0207 	and.w	r2, r3, #7
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_PCD_EP_Close+0x6a>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e00e      	b.n	80043ee <HAL_PCD_EP_Close+0x88>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68f9      	ldr	r1, [r7, #12]
 80043de:	4618      	mov	r0, r3
 80043e0:	f005 f808 	bl	80093f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	460b      	mov	r3, r1
 8004404:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004406:	7afb      	ldrb	r3, [r7, #11]
 8004408:	f003 0207 	and.w	r2, r3, #7
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2200      	movs	r2, #0
 8004434:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	b2da      	uxtb	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	4618      	mov	r0, r3
 800444a:	f005 f9c0 	bl	80097ce <USB_EPStartXfer>

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	460b      	mov	r3, r1
 8004466:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004468:	7afb      	ldrb	r3, [r7, #11]
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	3310      	adds	r3, #16
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2200      	movs	r2, #0
 800449c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2201      	movs	r2, #1
 80044a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6979      	ldr	r1, [r7, #20]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f005 f989 	bl	80097ce <USB_EPStartXfer>

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	7912      	ldrb	r2, [r2, #4]
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e03e      	b.n	8004562 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	da0e      	bge.n	800450a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	f003 0207 	and.w	r2, r3, #7
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	3310      	adds	r3, #16
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	4413      	add	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	705a      	strb	r2, [r3, #1]
 8004508:	e00c      	b.n	8004524 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4413      	add	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_PCD_EP_SetStall+0x7e>
 8004540:	2302      	movs	r3, #2
 8004542:	e00e      	b.n	8004562 <HAL_PCD_EP_SetStall+0x9c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	f005 feea 	bl	800a32c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	7912      	ldrb	r2, [r2, #4]
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e040      	b.n	800460a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800458c:	2b00      	cmp	r3, #0
 800458e:	da0e      	bge.n	80045ae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f003 0207 	and.w	r2, r3, #7
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	3310      	adds	r3, #16
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4413      	add	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	705a      	strb	r2, [r3, #1]
 80045ac:	e00e      	b.n	80045cc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	f003 0207 	and.w	r2, r3, #7
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_PCD_EP_ClrStall+0x82>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e00e      	b.n	800460a <HAL_PCD_EP_ClrStall+0xa0>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f005 fee7 	bl	800a3ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b092      	sub	sp, #72	@ 0x48
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800461a:	e333      	b.n	8004c84 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004624:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004626:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004632:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 8108 	bne.w	800484c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800463c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d14c      	bne.n	80046e0 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004656:	813b      	strh	r3, [r7, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	893b      	ldrh	r3, [r7, #8]
 800465e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3310      	adds	r3, #16
 800466e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004678:	b29b      	uxth	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4413      	add	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	4413      	add	r3, r2
 800468a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004696:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	441a      	add	r2, r3
 80046a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80046a6:	2100      	movs	r1, #0
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f007 fc52 	bl	800bf52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7b1b      	ldrb	r3, [r3, #12]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 82e5 	beq.w	8004c84 <PCD_EP_ISR_Handler+0x672>
 80046ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 82e0 	bne.w	8004c84 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7b1b      	ldrb	r3, [r3, #12]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	731a      	strb	r2, [r3, #12]
 80046de:	e2d1      	b.n	8004c84 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046e6:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80046f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d032      	beq.n	8004760 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	4413      	add	r3, r2
 8004714:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800471e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004720:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800472c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800472e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004732:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004734:	b29b      	uxth	r3, r3
 8004736:	f005 ff71 	bl	800a61c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29a      	uxth	r2, r3
 8004742:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004746:	4013      	ands	r3, r2
 8004748:	817b      	strh	r3, [r7, #10]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	897a      	ldrh	r2, [r7, #10]
 8004750:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004754:	b292      	uxth	r2, r2
 8004756:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f007 fbcd 	bl	800bef8 <HAL_PCD_SetupStageCallback>
 800475e:	e291      	b.n	8004c84 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004760:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004764:	2b00      	cmp	r3, #0
 8004766:	f280 828d 	bge.w	8004c84 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29a      	uxth	r2, r3
 8004772:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004776:	4013      	ands	r3, r2
 8004778:	81fb      	strh	r3, [r7, #14]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	89fa      	ldrh	r2, [r7, #14]
 8004780:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004784:	b292      	uxth	r2, r2
 8004786:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004790:	b29b      	uxth	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80047b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d019      	beq.n	80047ec <PCD_EP_ISR_Handler+0x1da>
 80047b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c6:	6959      	ldr	r1, [r3, #20]
 80047c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80047cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f005 ff23 	bl	800a61c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80047d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	441a      	add	r2, r3
 80047e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80047e4:	2100      	movs	r1, #0
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f007 fb98 	bl	800bf1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80047f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 8242 	bne.w	8004c84 <PCD_EP_ISR_Handler+0x672>
 8004800:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004802:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004806:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800480a:	f000 823b 	beq.w	8004c84 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481e:	81bb      	strh	r3, [r7, #12]
 8004820:	89bb      	ldrh	r3, [r7, #12]
 8004822:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004826:	81bb      	strh	r3, [r7, #12]
 8004828:	89bb      	ldrh	r3, [r7, #12]
 800482a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800482e:	81bb      	strh	r3, [r7, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	89bb      	ldrh	r3, [r7, #12]
 8004836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800483a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800483e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004846:	b29b      	uxth	r3, r3
 8004848:	8013      	strh	r3, [r2, #0]
 800484a:	e21b      	b.n	8004c84 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800485e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004862:	2b00      	cmp	r3, #0
 8004864:	f280 80f1 	bge.w	8004a4a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29a      	uxth	r2, r3
 800487a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800487e:	4013      	ands	r3, r2
 8004880:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004892:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004896:	b292      	uxth	r2, r2
 8004898:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800489a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80048b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b2:	7b1b      	ldrb	r3, [r3, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d123      	bne.n	8004900 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80048e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 808b 	beq.w	8004a00 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f0:	6959      	ldr	r1, [r3, #20]
 80048f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f4:	88da      	ldrh	r2, [r3, #6]
 80048f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048fa:	f005 fe8f 	bl	800a61c <USB_ReadPMA>
 80048fe:	e07f      	b.n	8004a00 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004902:	78db      	ldrb	r3, [r3, #3]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d109      	bne.n	800491c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004908:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800490a:	461a      	mov	r2, r3
 800490c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9c6 	bl	8004ca0 <HAL_PCD_EP_DB_Receive>
 8004914:	4603      	mov	r3, r0
 8004916:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800491a:	e071      	b.n	8004a00 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004936:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800494c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004954:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004958:	b29b      	uxth	r3, r3
 800495a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d022      	beq.n	80049bc <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800497e:	b29b      	uxth	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	4413      	add	r3, r2
 8004990:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800499a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800499e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02c      	beq.n	8004a00 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ac:	6959      	ldr	r1, [r3, #20]
 80049ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b0:	891a      	ldrh	r2, [r3, #8]
 80049b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049b6:	f005 fe31 	bl	800a61c <USB_ReadPMA>
 80049ba:	e021      	b.n	8004a00 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	4413      	add	r3, r2
 80049d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80049e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f2:	6959      	ldr	r1, [r3, #20]
 80049f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f6:	895a      	ldrh	r2, [r3, #10]
 80049f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049fc:	f005 fe0e 	bl	800a61c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a08:	441a      	add	r2, r3
 8004a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a16:	441a      	add	r2, r3
 8004a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <PCD_EP_ISR_Handler+0x41e>
 8004a24:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d206      	bcs.n	8004a3e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f007 fa70 	bl	800bf1c <HAL_PCD_DataOutStageCallback>
 8004a3c:	e005      	b.n	8004a4a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a44:	4618      	mov	r0, r3
 8004a46:	f004 fec2 	bl	80097ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004a4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8117 	beq.w	8004c84 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004a56:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	3310      	adds	r3, #16
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa4:	78db      	ldrb	r3, [r3, #3]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	f040 80a1 	bne.w	8004bee <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aae:	2200      	movs	r2, #0
 8004ab0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab4:	7b1b      	ldrb	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8092 	beq.w	8004be0 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004abc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d046      	beq.n	8004b54 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d126      	bne.n	8004b1c <PCD_EP_ISR_Handler+0x50a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00da      	lsls	r2, r3, #3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4413      	add	r3, r2
 8004af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	e061      	b.n	8004be0 <PCD_EP_ISR_Handler+0x5ce>
 8004b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d15d      	bne.n	8004be0 <PCD_EP_ISR_Handler+0x5ce>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	00da      	lsls	r2, r3, #3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	801a      	strh	r2, [r3, #0]
 8004b52:	e045      	b.n	8004be0 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d126      	bne.n	8004bb0 <PCD_EP_ISR_Handler+0x59e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	4413      	add	r3, r2
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	00da      	lsls	r2, r3, #3
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	4413      	add	r3, r2
 8004b84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	801a      	strh	r2, [r3, #0]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	e017      	b.n	8004be0 <PCD_EP_ISR_Handler+0x5ce>
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d113      	bne.n	8004be0 <PCD_EP_ISR_Handler+0x5ce>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	4413      	add	r3, r2
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	00da      	lsls	r2, r3, #3
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	2200      	movs	r2, #0
 8004bde:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f007 f9b3 	bl	800bf52 <HAL_PCD_DataInStageCallback>
 8004bec:	e04a      	b.n	8004c84 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004bee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d13f      	bne.n	8004c78 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	4413      	add	r3, r2
 8004c12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c1c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d906      	bls.n	8004c36 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8004c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2a:	699a      	ldr	r2, [r3, #24]
 8004c2c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c32:	619a      	str	r2, [r3, #24]
 8004c34:	e002      	b.n	8004c3c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c38:	2200      	movs	r2, #0
 8004c3a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f007 f981 	bl	800bf52 <HAL_PCD_DataInStageCallback>
 8004c50:	e018      	b.n	8004c84 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c58:	441a      	add	r2, r3
 8004c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c64:	441a      	add	r2, r3
 8004c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c68:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c70:	4618      	mov	r0, r3
 8004c72:	f004 fdac 	bl	80097ce <USB_EPStartXfer>
 8004c76:	e005      	b.n	8004c84 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f917 	bl	8004eb2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	b21b      	sxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f6ff acc3 	blt.w	800461c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3748      	adds	r7, #72	@ 0x48
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d07c      	beq.n	8004db2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cdc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	8b7b      	ldrh	r3, [r7, #26]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d306      	bcc.n	8004cf6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	8b7b      	ldrh	r3, [r7, #26]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	619a      	str	r2, [r3, #24]
 8004cf4:	e002      	b.n	8004cfc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d123      	bne.n	8004d4c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1e:	833b      	strh	r3, [r7, #24]
 8004d20:	8b3b      	ldrh	r3, [r7, #24]
 8004d22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d26:	833b      	strh	r3, [r7, #24]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	8b3b      	ldrh	r3, [r7, #24]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01f      	beq.n	8004d96 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d70:	82fb      	strh	r3, [r7, #22]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	8afb      	ldrh	r3, [r7, #22]
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d96:	8b7b      	ldrh	r3, [r7, #26]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8085 	beq.w	8004ea8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6959      	ldr	r1, [r3, #20]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	891a      	ldrh	r2, [r3, #8]
 8004daa:	8b7b      	ldrh	r3, [r7, #26]
 8004dac:	f005 fc36 	bl	800a61c <USB_ReadPMA>
 8004db0:	e07a      	b.n	8004ea8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	8b7b      	ldrh	r3, [r7, #26]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d306      	bcc.n	8004df0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	8b7b      	ldrh	r3, [r7, #26]
 8004de8:	1ad2      	subs	r2, r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	619a      	str	r2, [r3, #24]
 8004dee:	e002      	b.n	8004df6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d123      	bne.n	8004e46 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e18:	83fb      	strh	r3, [r7, #30]
 8004e1a:	8bfb      	ldrh	r3, [r7, #30]
 8004e1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e20:	83fb      	strh	r3, [r7, #30]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8bfb      	ldrh	r3, [r7, #30]
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11f      	bne.n	8004e90 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6a:	83bb      	strh	r3, [r7, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	8bbb      	ldrh	r3, [r7, #28]
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e90:	8b7b      	ldrh	r3, [r7, #26]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6959      	ldr	r1, [r3, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	895a      	ldrh	r2, [r3, #10]
 8004ea2:	8b7b      	ldrh	r3, [r7, #26]
 8004ea4:	f005 fbba 	bl	800a61c <USB_ReadPMA>
    }
  }

  return count;
 8004ea8:	8b7b      	ldrh	r3, [r7, #26]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b0a6      	sub	sp, #152	@ 0x98
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 81f7 	beq.w	80052ba <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ef0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d907      	bls.n	8004f10 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	699a      	ldr	r2, [r3, #24]
 8004f04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f08:	1ad2      	subs	r2, r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	619a      	str	r2, [r3, #24]
 8004f0e:	e002      	b.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 80e1 	bne.w	80050e2 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d126      	bne.n	8004f76 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	4413      	add	r3, r2
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	00da      	lsls	r2, r3, #3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	4413      	add	r3, r2
 8004f4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	e01a      	b.n	8004fac <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d116      	bne.n	8004fac <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	4413      	add	r3, r2
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	00da      	lsls	r2, r3, #3
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa8:	2200      	movs	r2, #0
 8004faa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d126      	bne.n	8005008 <HAL_PCD_EP_DB_Transmit+0x156>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	4413      	add	r3, r2
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00da      	lsls	r2, r3, #3
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005000:	b29a      	uxth	r2, r3
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e017      	b.n	8005038 <HAL_PCD_EP_DB_Transmit+0x186>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d113      	bne.n	8005038 <HAL_PCD_EP_DB_Transmit+0x186>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	4413      	add	r3, r2
 8005020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	00da      	lsls	r2, r3, #3
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	4413      	add	r3, r2
 800502c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	2200      	movs	r2, #0
 8005036:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d123      	bne.n	8005088 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505a:	837b      	strh	r3, [r7, #26]
 800505c:	8b7b      	ldrh	r3, [r7, #26]
 800505e:	f083 0320 	eor.w	r3, r3, #32
 8005062:	837b      	strh	r3, [r7, #26]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	8b7b      	ldrh	r3, [r7, #26]
 8005074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800507c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005084:	b29b      	uxth	r3, r3
 8005086:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f006 ff5f 	bl	800bf52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01f      	beq.n	80050de <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b8:	833b      	strh	r3, [r7, #24]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	441a      	add	r2, r3
 80050c8:	8b3b      	ldrh	r3, [r7, #24]
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e31f      	b.n	8005722 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d021      	beq.n	8005130 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005106:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	441a      	add	r2, r3
 8005118:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800511c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005120:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005124:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512c:	b29b      	uxth	r3, r3
 800512e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005136:	2b01      	cmp	r3, #1
 8005138:	f040 82ca 	bne.w	80056d0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005144:	441a      	add	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005152:	441a      	add	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d309      	bcc.n	8005178 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005170:	1ad2      	subs	r2, r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	621a      	str	r2, [r3, #32]
 8005176:	e015      	b.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d107      	bne.n	8005190 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005180:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005184:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800518e:	e009      	b.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2200      	movs	r2, #0
 80051a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d15f      	bne.n	800526c <HAL_PCD_EP_DB_Transmit+0x3ba>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c0:	4413      	add	r3, r2
 80051c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	00da      	lsls	r2, r3, #3
 80051ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <HAL_PCD_EP_DB_Transmit+0x34e>
 80051ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	e051      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005202:	2b3e      	cmp	r3, #62	@ 0x3e
 8005204:	d816      	bhi.n	8005234 <HAL_PCD_EP_DB_Transmit+0x382>
 8005206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	653b      	str	r3, [r7, #80]	@ 0x50
 800520c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_PCD_EP_DB_Transmit+0x36a>
 8005216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005218:	3301      	adds	r3, #1
 800521a:	653b      	str	r3, [r7, #80]	@ 0x50
 800521c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29a      	uxth	r2, r3
 8005222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	b29b      	uxth	r3, r3
 800522a:	4313      	orrs	r3, r2
 800522c:	b29a      	uxth	r2, r3
 800522e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e037      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	653b      	str	r3, [r7, #80]	@ 0x50
 800523a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <HAL_PCD_EP_DB_Transmit+0x398>
 8005244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005246:	3b01      	subs	r3, #1
 8005248:	653b      	str	r3, [r7, #80]	@ 0x50
 800524a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29a      	uxth	r2, r3
 8005250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005252:	b29b      	uxth	r3, r3
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	b29b      	uxth	r3, r3
 8005258:	4313      	orrs	r3, r2
 800525a:	b29b      	uxth	r3, r3
 800525c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005264:	b29a      	uxth	r2, r3
 8005266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e01b      	b.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d117      	bne.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005288:	4413      	add	r3, r2
 800528a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	00da      	lsls	r2, r3, #3
 8005292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005294:	4413      	add	r3, r2
 8005296:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800529a:	647b      	str	r3, [r7, #68]	@ 0x44
 800529c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6959      	ldr	r1, [r3, #20]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	891a      	ldrh	r2, [r3, #8]
 80052b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f005 f96f 	bl	800a596 <USB_WritePMA>
 80052b8:	e20a      	b.n	80056d0 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	4413      	add	r3, r2
 80052d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052de:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d307      	bcc.n	80052fe <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	619a      	str	r2, [r3, #24]
 80052fc:	e002      	b.n	8005304 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 80f6 	bne.w	80054fa <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	785b      	ldrb	r3, [r3, #1]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d126      	bne.n	8005364 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	677b      	str	r3, [r7, #116]	@ 0x74
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005324:	b29b      	uxth	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800532a:	4413      	add	r3, r2
 800532c:	677b      	str	r3, [r7, #116]	@ 0x74
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	00da      	lsls	r2, r3, #3
 8005334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005336:	4413      	add	r3, r2
 8005338:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800533c:	673b      	str	r3, [r7, #112]	@ 0x70
 800533e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005348:	b29a      	uxth	r2, r3
 800534a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535c:	b29a      	uxth	r2, r3
 800535e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e01a      	b.n	800539a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d116      	bne.n	800539a <HAL_PCD_EP_DB_Transmit+0x4e8>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800537a:	b29b      	uxth	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005380:	4413      	add	r3, r2
 8005382:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	00da      	lsls	r2, r3, #3
 800538a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800538c:	4413      	add	r3, r2
 800538e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005392:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005396:	2200      	movs	r2, #0
 8005398:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d12f      	bne.n	800540a <HAL_PCD_EP_DB_Transmit+0x558>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053c2:	4413      	add	r3, r2
 80053c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	00da      	lsls	r2, r3, #3
 80053ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005400:	b29a      	uxth	r2, r3
 8005402:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e01c      	b.n	8005444 <HAL_PCD_EP_DB_Transmit+0x592>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d118      	bne.n	8005444 <HAL_PCD_EP_DB_Transmit+0x592>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005422:	4413      	add	r3, r2
 8005424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	00da      	lsls	r2, r3, #3
 800542e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005432:	4413      	add	r3, r2
 8005434:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005438:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800543c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005440:	2200      	movs	r2, #0
 8005442:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	78db      	ldrb	r3, [r3, #3]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d127      	bne.n	800549c <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005466:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800546a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800546e:	f083 0320 	eor.w	r3, r3, #32
 8005472:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	441a      	add	r2, r3
 8005484:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f006 fd55 	bl	800bf52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d121      	bne.n	80054f6 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054cc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80054e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e113      	b.n	8005722 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d121      	bne.n	8005548 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800551a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	441a      	add	r2, r3
 8005530:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800553c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005544:	b29b      	uxth	r3, r3
 8005546:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800554e:	2b01      	cmp	r3, #1
 8005550:	f040 80be 	bne.w	80056d0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800555c:	441a      	add	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800556a:	441a      	add	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6a1a      	ldr	r2, [r3, #32]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d309      	bcc.n	8005590 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	6a1a      	ldr	r2, [r3, #32]
 8005586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	621a      	str	r2, [r3, #32]
 800558e:	e015      	b.n	80055bc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8005598:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800559c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80055a6:	e009      	b.n	80055bc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d15f      	bne.n	800568a <HAL_PCD_EP_DB_Transmit+0x7d8>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055d8:	b29b      	uxth	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055de:	4413      	add	r3, r2
 80055e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	00da      	lsls	r2, r3, #3
 80055e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ea:	4413      	add	r3, r2
 80055ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80055f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <HAL_PCD_EP_DB_Transmit+0x76c>
 8005608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005616:	b29a      	uxth	r2, r3
 8005618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e04e      	b.n	80056bc <HAL_PCD_EP_DB_Transmit+0x80a>
 800561e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005620:	2b3e      	cmp	r3, #62	@ 0x3e
 8005622:	d816      	bhi.n	8005652 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	663b      	str	r3, [r7, #96]	@ 0x60
 800562a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_PCD_EP_DB_Transmit+0x788>
 8005634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005636:	3301      	adds	r3, #1
 8005638:	663b      	str	r3, [r7, #96]	@ 0x60
 800563a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29a      	uxth	r2, r3
 8005640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005642:	b29b      	uxth	r3, r3
 8005644:	029b      	lsls	r3, r3, #10
 8005646:	b29b      	uxth	r3, r3
 8005648:	4313      	orrs	r3, r2
 800564a:	b29a      	uxth	r2, r3
 800564c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	e034      	b.n	80056bc <HAL_PCD_EP_DB_Transmit+0x80a>
 8005652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	663b      	str	r3, [r7, #96]	@ 0x60
 8005658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8005662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005664:	3b01      	subs	r3, #1
 8005666:	663b      	str	r3, [r7, #96]	@ 0x60
 8005668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29a      	uxth	r2, r3
 800566e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005670:	b29b      	uxth	r3, r3
 8005672:	029b      	lsls	r3, r3, #10
 8005674:	b29b      	uxth	r3, r3
 8005676:	4313      	orrs	r3, r2
 8005678:	b29b      	uxth	r3, r3
 800567a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005682:	b29a      	uxth	r2, r3
 8005684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e018      	b.n	80056bc <HAL_PCD_EP_DB_Transmit+0x80a>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d114      	bne.n	80056bc <HAL_PCD_EP_DB_Transmit+0x80a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056a0:	4413      	add	r3, r2
 80056a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	00da      	lsls	r2, r3, #3
 80056aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ac:	4413      	add	r3, r2
 80056ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6959      	ldr	r1, [r3, #20]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	895a      	ldrh	r2, [r3, #10]
 80056c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f004 ff63 	bl	800a596 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ea:	82fb      	strh	r3, [r7, #22]
 80056ec:	8afb      	ldrh	r3, [r7, #22]
 80056ee:	f083 0310 	eor.w	r3, r3, #16
 80056f2:	82fb      	strh	r3, [r7, #22]
 80056f4:	8afb      	ldrh	r3, [r7, #22]
 80056f6:	f083 0320 	eor.w	r3, r3, #32
 80056fa:	82fb      	strh	r3, [r7, #22]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	441a      	add	r2, r3
 800570a:	8afb      	ldrh	r3, [r7, #22]
 800570c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800571c:	b29b      	uxth	r3, r3
 800571e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3798      	adds	r7, #152	@ 0x98
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800572a:	b480      	push	{r7}
 800572c:	b087      	sub	sp, #28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	817b      	strh	r3, [r7, #10]
 8005738:	4613      	mov	r3, r2
 800573a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800573c:	897b      	ldrh	r3, [r7, #10]
 800573e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005748:	897b      	ldrh	r3, [r7, #10]
 800574a:	f003 0207 	and.w	r2, r3, #7
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	3310      	adds	r3, #16
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e009      	b.n	8005774 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005760:	897a      	ldrh	r2, [r7, #10]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	b29a      	uxth	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	80da      	strh	r2, [r3, #6]
 8005788:	e00b      	b.n	80057a2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2201      	movs	r2, #1
 800578e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	b29a      	uxth	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	b29a      	uxth	r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d141      	bne.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800582a:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005836:	d131      	bne.n	800589c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005838:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583e:	4a46      	ldr	r2, [pc, #280]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005848:	4b43      	ldr	r3, [pc, #268]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005850:	4a41      	ldr	r2, [pc, #260]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005856:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005858:	4b40      	ldr	r3, [pc, #256]	@ (800595c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2232      	movs	r2, #50	@ 0x32
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	4a3f      	ldr	r2, [pc, #252]	@ (8005960 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	0c9b      	lsrs	r3, r3, #18
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586e:	e002      	b.n	8005876 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3b01      	subs	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005876:	4b38      	ldr	r3, [pc, #224]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005882:	d102      	bne.n	800588a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f2      	bne.n	8005870 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800588a:	4b33      	ldr	r3, [pc, #204]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005896:	d158      	bne.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e057      	b.n	800594c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800589c:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058ac:	e04d      	b.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b4:	d141      	bne.n	800593a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058b6:	4b28      	ldr	r3, [pc, #160]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c2:	d131      	bne.n	8005928 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ca:	4a23      	ldr	r2, [pc, #140]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058d4:	4b20      	ldr	r3, [pc, #128]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2232      	movs	r2, #50	@ 0x32
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	0c9b      	lsrs	r3, r3, #18
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fa:	e002      	b.n	8005902 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3b01      	subs	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005902:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800590e:	d102      	bne.n	8005916 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f2      	bne.n	80058fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005916:	4b10      	ldr	r3, [pc, #64]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005922:	d112      	bne.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e011      	b.n	800594c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005928:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592e:	4a0a      	ldr	r2, [pc, #40]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005938:	e007      	b.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800593a:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005942:	4a05      	ldr	r2, [pc, #20]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005944:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005948:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	40007000 	.word	0x40007000
 800595c:	20000004 	.word	0x20000004
 8005960:	431bde83 	.word	0x431bde83

08005964 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005968:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4a04      	ldr	r2, [pc, #16]	@ (8005980 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800596e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005972:	6093      	str	r3, [r2, #8]
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40007000 	.word	0x40007000

08005984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e2fe      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d075      	beq.n	8005a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a2:	4b97      	ldr	r3, [pc, #604]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
 80059aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ac:	4b94      	ldr	r3, [pc, #592]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d102      	bne.n	80059c2 <HAL_RCC_OscConfig+0x3e>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d002      	beq.n	80059c8 <HAL_RCC_OscConfig+0x44>
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d10b      	bne.n	80059e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05b      	beq.n	8005a8c <HAL_RCC_OscConfig+0x108>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d157      	bne.n	8005a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e2d9      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e8:	d106      	bne.n	80059f8 <HAL_RCC_OscConfig+0x74>
 80059ea:	4b85      	ldr	r3, [pc, #532]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a84      	ldr	r2, [pc, #528]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e01d      	b.n	8005a34 <HAL_RCC_OscConfig+0xb0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x98>
 8005a02:	4b7f      	ldr	r3, [pc, #508]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a7e      	ldr	r2, [pc, #504]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a7b      	ldr	r2, [pc, #492]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCC_OscConfig+0xb0>
 8005a1c:	4b78      	ldr	r3, [pc, #480]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a77      	ldr	r2, [pc, #476]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	4b75      	ldr	r3, [pc, #468]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a74      	ldr	r2, [pc, #464]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d013      	beq.n	8005a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fb ff0a 	bl	8001854 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a44:	f7fb ff06 	bl	8001854 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	@ 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e29e      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a56:	4b6a      	ldr	r3, [pc, #424]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0xc0>
 8005a62:	e014      	b.n	8005a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fb fef6 	bl	8001854 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6c:	f7fb fef2 	bl	8001854 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	@ 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e28a      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a7e:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0xe8>
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d075      	beq.n	8005b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9a:	4b59      	ldr	r3, [pc, #356]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa4:	4b56      	ldr	r3, [pc, #344]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b0c      	cmp	r3, #12
 8005ab2:	d102      	bne.n	8005aba <HAL_RCC_OscConfig+0x136>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x13c>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d11f      	bne.n	8005b00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x154>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e25d      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b49      	ldr	r3, [pc, #292]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	4946      	ldr	r1, [pc, #280]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005aec:	4b45      	ldr	r3, [pc, #276]	@ (8005c04 <HAL_RCC_OscConfig+0x280>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fb fe63 	bl	80017bc <HAL_InitTick>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d043      	beq.n	8005b84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e249      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d023      	beq.n	8005b50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b08:	4b3d      	ldr	r3, [pc, #244]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fb fe9e 	bl	8001854 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1c:	f7fb fe9a 	bl	8001854 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e232      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b2e:	4b34      	ldr	r3, [pc, #208]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3a:	4b31      	ldr	r3, [pc, #196]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	492d      	ldr	r1, [pc, #180]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	604b      	str	r3, [r1, #4]
 8005b4e:	e01a      	b.n	8005b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b50:	4b2b      	ldr	r3, [pc, #172]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2a      	ldr	r2, [pc, #168]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fb fe7a 	bl	8001854 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b64:	f7fb fe76 	bl	8001854 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e20e      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b76:	4b22      	ldr	r3, [pc, #136]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x1e0>
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d041      	beq.n	8005c16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01c      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9a:	4b19      	ldr	r3, [pc, #100]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba0:	4a17      	ldr	r2, [pc, #92]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fb fe53 	bl	8001854 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb2:	f7fb fe4f 	bl	8001854 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e1e7      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0ef      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x22e>
 8005bd2:	e020      	b.n	8005c16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bda:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fb fe36 	bl	8001854 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bea:	e00d      	b.n	8005c08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bec:	f7fb fe32 	bl	8001854 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d906      	bls.n	8005c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1ca      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c08:	4b8c      	ldr	r3, [pc, #560]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1ea      	bne.n	8005bec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80a6 	beq.w	8005d70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c24:	2300      	movs	r3, #0
 8005c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c28:	4b84      	ldr	r3, [pc, #528]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_OscConfig+0x2b4>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x2b6>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	4a7e      	ldr	r2, [pc, #504]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c56:	2301      	movs	r3, #1
 8005c58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c5a:	4b79      	ldr	r3, [pc, #484]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d118      	bne.n	8005c98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c66:	4b76      	ldr	r3, [pc, #472]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a75      	ldr	r2, [pc, #468]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c72:	f7fb fdef 	bl	8001854 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7a:	f7fb fdeb 	bl	8001854 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e183      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d108      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x32e>
 8005ca0:	4b66      	ldr	r3, [pc, #408]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	4a65      	ldr	r2, [pc, #404]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cb0:	e024      	b.n	8005cfc <HAL_RCC_OscConfig+0x378>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d110      	bne.n	8005cdc <HAL_RCC_OscConfig+0x358>
 8005cba:	4b60      	ldr	r3, [pc, #384]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cc2:	f043 0304 	orr.w	r3, r3, #4
 8005cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cca:	4b5c      	ldr	r3, [pc, #368]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cda:	e00f      	b.n	8005cfc <HAL_RCC_OscConfig+0x378>
 8005cdc:	4b57      	ldr	r3, [pc, #348]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce2:	4a56      	ldr	r2, [pc, #344]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cec:	4b53      	ldr	r3, [pc, #332]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	4a52      	ldr	r2, [pc, #328]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fb fda6 	bl	8001854 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7fb fda2 	bl	8001854 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e138      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d22:	4b46      	ldr	r3, [pc, #280]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ed      	beq.n	8005d0c <HAL_RCC_OscConfig+0x388>
 8005d30:	e015      	b.n	8005d5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fb fd8f 	bl	8001854 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d38:	e00a      	b.n	8005d50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3a:	f7fb fd8b 	bl	8001854 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e121      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d50:	4b3a      	ldr	r3, [pc, #232]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ed      	bne.n	8005d3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d105      	bne.n	8005d70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d64:	4b35      	ldr	r3, [pc, #212]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	4a34      	ldr	r2, [pc, #208]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d03c      	beq.n	8005df6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01c      	beq.n	8005dbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d84:	4b2d      	ldr	r3, [pc, #180]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fb fd5e 	bl	8001854 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d9c:	f7fb fd5a 	bl	8001854 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0f2      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dae:	4b23      	ldr	r3, [pc, #140]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ef      	beq.n	8005d9c <HAL_RCC_OscConfig+0x418>
 8005dbc:	e01b      	b.n	8005df6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dce:	f7fb fd41 	bl	8001854 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dd6:	f7fb fd3d 	bl	8001854 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e0d5      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005de8:	4b14      	ldr	r3, [pc, #80]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ef      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80c9 	beq.w	8005f92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e00:	4b0e      	ldr	r3, [pc, #56]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b0c      	cmp	r3, #12
 8005e0a:	f000 8083 	beq.w	8005f14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d15e      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e16:	4b09      	ldr	r3, [pc, #36]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a08      	ldr	r2, [pc, #32]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005e1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e22:	f7fb fd17 	bl	8001854 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e28:	e00c      	b.n	8005e44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e2a:	f7fb fd13 	bl	8001854 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d905      	bls.n	8005e44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e0ab      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e44:	4b55      	ldr	r3, [pc, #340]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ec      	bne.n	8005e2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e50:	4b52      	ldr	r3, [pc, #328]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	4b52      	ldr	r3, [pc, #328]	@ (8005fa0 <HAL_RCC_OscConfig+0x61c>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6a11      	ldr	r1, [r2, #32]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0112      	lsls	r2, r2, #4
 8005e64:	4311      	orrs	r1, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e6a:	0212      	lsls	r2, r2, #8
 8005e6c:	4311      	orrs	r1, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e72:	0852      	lsrs	r2, r2, #1
 8005e74:	3a01      	subs	r2, #1
 8005e76:	0552      	lsls	r2, r2, #21
 8005e78:	4311      	orrs	r1, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e7e:	0852      	lsrs	r2, r2, #1
 8005e80:	3a01      	subs	r2, #1
 8005e82:	0652      	lsls	r2, r2, #25
 8005e84:	4311      	orrs	r1, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e8a:	06d2      	lsls	r2, r2, #27
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	4943      	ldr	r1, [pc, #268]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e94:	4b41      	ldr	r3, [pc, #260]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a40      	ldr	r2, [pc, #256]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fb fcd2 	bl	8001854 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb4:	f7fb fcce 	bl	8001854 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e066      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	4b35      	ldr	r3, [pc, #212]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x530>
 8005ed2:	e05e      	b.n	8005f92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed4:	4b31      	ldr	r3, [pc, #196]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fb fcb8 	bl	8001854 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fb fcb4 	bl	8001854 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e04c      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005efa:	4b28      	ldr	r3, [pc, #160]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f06:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	4924      	ldr	r1, [pc, #144]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005f0c:	4b25      	ldr	r3, [pc, #148]	@ (8005fa4 <HAL_RCC_OscConfig+0x620>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	60cb      	str	r3, [r1, #12]
 8005f12:	e03e      	b.n	8005f92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e039      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f20:	4b1e      	ldr	r3, [pc, #120]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0203 	and.w	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d12c      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d123      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d11b      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d113      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	3b01      	subs	r3, #1
 8005f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d109      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	3b01      	subs	r3, #1
 8005f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d001      	beq.n	8005f92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	019f800c 	.word	0x019f800c
 8005fa4:	feeefffc 	.word	0xfeeefffc

08005fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e11e      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b91      	ldr	r3, [pc, #580]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d910      	bls.n	8005ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fce:	4b8e      	ldr	r3, [pc, #568]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f023 020f 	bic.w	r2, r3, #15
 8005fd6:	498c      	ldr	r1, [pc, #560]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fde:	4b8a      	ldr	r3, [pc, #552]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d001      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e106      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d073      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b03      	cmp	r3, #3
 8006002:	d129      	bne.n	8006058 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006004:	4b81      	ldr	r3, [pc, #516]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0f4      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006014:	f000 f99e 	bl	8006354 <RCC_GetSysClockFreqFromPLLSource>
 8006018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4a7c      	ldr	r2, [pc, #496]	@ (8006210 <HAL_RCC_ClockConfig+0x268>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d93f      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006022:	4b7a      	ldr	r3, [pc, #488]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006036:	2b00      	cmp	r3, #0
 8006038:	d033      	beq.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800603e:	2b00      	cmp	r3, #0
 8006040:	d12f      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006042:	4b72      	ldr	r3, [pc, #456]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800604a:	4a70      	ldr	r2, [pc, #448]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 800604c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	e024      	b.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d107      	bne.n	8006070 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006060:	4b6a      	ldr	r3, [pc, #424]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0c6      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006070:	4b66      	ldr	r3, [pc, #408]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0be      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006080:	f000 f8ce 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 8006084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4a61      	ldr	r2, [pc, #388]	@ (8006210 <HAL_RCC_ClockConfig+0x268>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d909      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800608e:	4b5f      	ldr	r3, [pc, #380]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006096:	4a5d      	ldr	r2, [pc, #372]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800609e:	2380      	movs	r3, #128	@ 0x80
 80060a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060a2:	4b5a      	ldr	r3, [pc, #360]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f023 0203 	bic.w	r2, r3, #3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4957      	ldr	r1, [pc, #348]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b4:	f7fb fbce 	bl	8001854 <HAL_GetTick>
 80060b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ba:	e00a      	b.n	80060d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060bc:	f7fb fbca 	bl	8001854 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e095      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	4b4e      	ldr	r3, [pc, #312]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 020c 	and.w	r2, r3, #12
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d1eb      	bne.n	80060bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d023      	beq.n	8006138 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060fc:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4a42      	ldr	r2, [pc, #264]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006102:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006106:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006114:	4b3d      	ldr	r3, [pc, #244]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800611c:	4a3b      	ldr	r2, [pc, #236]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 800611e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006122:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006124:	4b39      	ldr	r3, [pc, #228]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4936      	ldr	r1, [pc, #216]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
 8006136:	e008      	b.n	800614a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b80      	cmp	r3, #128	@ 0x80
 800613c:	d105      	bne.n	800614a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800613e:	4b33      	ldr	r3, [pc, #204]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4a32      	ldr	r2, [pc, #200]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006144:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006148:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800614a:	4b2f      	ldr	r3, [pc, #188]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d21d      	bcs.n	8006194 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006158:	4b2b      	ldr	r3, [pc, #172]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f023 020f 	bic.w	r2, r3, #15
 8006160:	4929      	ldr	r1, [pc, #164]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	4313      	orrs	r3, r2
 8006166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006168:	f7fb fb74 	bl	8001854 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	e00a      	b.n	8006186 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006170:	f7fb fb70 	bl	8001854 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e03b      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b20      	ldr	r3, [pc, #128]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d1ed      	bne.n	8006170 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a0:	4b1a      	ldr	r3, [pc, #104]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4917      	ldr	r1, [pc, #92]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061be:	4b13      	ldr	r3, [pc, #76]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	490f      	ldr	r1, [pc, #60]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061d2:	f000 f825 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80061d6:	4602      	mov	r2, r0
 80061d8:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	490c      	ldr	r1, [pc, #48]	@ (8006214 <HAL_RCC_ClockConfig+0x26c>)
 80061e4:	5ccb      	ldrb	r3, [r1, r3]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006218 <HAL_RCC_ClockConfig+0x270>)
 80061f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061f2:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <HAL_RCC_ClockConfig+0x274>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fb fae0 	bl	80017bc <HAL_InitTick>
 80061fc:	4603      	mov	r3, r0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40022000 	.word	0x40022000
 800620c:	40021000 	.word	0x40021000
 8006210:	04c4b400 	.word	0x04c4b400
 8006214:	0800c6d8 	.word	0x0800c6d8
 8006218:	20000004 	.word	0x20000004
 800621c:	20000008 	.word	0x20000008

08006220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006226:	4b2c      	ldr	r3, [pc, #176]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b04      	cmp	r3, #4
 8006230:	d102      	bne.n	8006238 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006232:	4b2a      	ldr	r3, [pc, #168]	@ (80062dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	e047      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006238:	4b27      	ldr	r3, [pc, #156]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 030c 	and.w	r3, r3, #12
 8006240:	2b08      	cmp	r3, #8
 8006242:	d102      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006244:	4b26      	ldr	r3, [pc, #152]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	e03e      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800624a:	4b23      	ldr	r3, [pc, #140]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d136      	bne.n	80062c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006256:	4b20      	ldr	r3, [pc, #128]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006260:	4b1d      	ldr	r3, [pc, #116]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	3301      	adds	r3, #1
 800626c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d10c      	bne.n	800628e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006274:	4a1a      	ldr	r2, [pc, #104]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800627e:	68d2      	ldr	r2, [r2, #12]
 8006280:	0a12      	lsrs	r2, r2, #8
 8006282:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	617b      	str	r3, [r7, #20]
      break;
 800628c:	e00c      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800628e:	4a13      	ldr	r2, [pc, #76]	@ (80062dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	4a10      	ldr	r2, [pc, #64]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006298:	68d2      	ldr	r2, [r2, #12]
 800629a:	0a12      	lsrs	r2, r2, #8
 800629c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
      break;
 80062a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062a8:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	0e5b      	lsrs	r3, r3, #25
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	3301      	adds	r3, #1
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e001      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062c8:	693b      	ldr	r3, [r7, #16]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	007a1200 	.word	0x007a1200

080062e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e8:	4b03      	ldr	r3, [pc, #12]	@ (80062f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000004 	.word	0x20000004

080062fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006300:	f7ff fff0 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006304:	4602      	mov	r2, r0
 8006306:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	4904      	ldr	r1, [pc, #16]	@ (8006324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006312:	5ccb      	ldrb	r3, [r1, r3]
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800631c:	4618      	mov	r0, r3
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40021000 	.word	0x40021000
 8006324:	0800c6e8 	.word	0x0800c6e8

08006328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800632c:	f7ff ffda 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006330:	4602      	mov	r2, r0
 8006332:	4b06      	ldr	r3, [pc, #24]	@ (800634c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	0adb      	lsrs	r3, r3, #11
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	4904      	ldr	r1, [pc, #16]	@ (8006350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800633e:	5ccb      	ldrb	r3, [r1, r3]
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40021000 	.word	0x40021000
 8006350:	0800c6e8 	.word	0x0800c6e8

08006354 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800635a:	4b1e      	ldr	r3, [pc, #120]	@ (80063d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006364:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d10c      	bne.n	8006392 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006378:	4a17      	ldr	r2, [pc, #92]	@ (80063d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006380:	4a14      	ldr	r2, [pc, #80]	@ (80063d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006382:	68d2      	ldr	r2, [r2, #12]
 8006384:	0a12      	lsrs	r2, r2, #8
 8006386:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	617b      	str	r3, [r7, #20]
    break;
 8006390:	e00c      	b.n	80063ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006392:	4a12      	ldr	r2, [pc, #72]	@ (80063dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	fbb2 f3f3 	udiv	r3, r2, r3
 800639a:	4a0e      	ldr	r2, [pc, #56]	@ (80063d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800639c:	68d2      	ldr	r2, [r2, #12]
 800639e:	0a12      	lsrs	r2, r2, #8
 80063a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]
    break;
 80063aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063ac:	4b09      	ldr	r3, [pc, #36]	@ (80063d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	0e5b      	lsrs	r3, r3, #25
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	3301      	adds	r3, #1
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80063c6:	687b      	ldr	r3, [r7, #4]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40021000 	.word	0x40021000
 80063d8:	007a1200 	.word	0x007a1200
 80063dc:	00f42400 	.word	0x00f42400

080063e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063e8:	2300      	movs	r3, #0
 80063ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063ec:	2300      	movs	r3, #0
 80063ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8098 	beq.w	800652e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063fe:	2300      	movs	r3, #0
 8006400:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006402:	4b43      	ldr	r3, [pc, #268]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10d      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800640e:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	4a3f      	ldr	r2, [pc, #252]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006418:	6593      	str	r3, [r2, #88]	@ 0x58
 800641a:	4b3d      	ldr	r3, [pc, #244]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006422:	60bb      	str	r3, [r7, #8]
 8006424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006426:	2301      	movs	r3, #1
 8006428:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800642a:	4b3a      	ldr	r3, [pc, #232]	@ (8006514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a39      	ldr	r2, [pc, #228]	@ (8006514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006436:	f7fb fa0d 	bl	8001854 <HAL_GetTick>
 800643a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643c:	e009      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643e:	f7fb fa09 	bl	8001854 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d902      	bls.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	74fb      	strb	r3, [r7, #19]
        break;
 8006450:	e005      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006452:	4b30      	ldr	r3, [pc, #192]	@ (8006514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0ef      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800645e:	7cfb      	ldrb	r3, [r7, #19]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d159      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006464:	4b2a      	ldr	r3, [pc, #168]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800646e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01e      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	429a      	cmp	r2, r3
 800647e:	d019      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006480:	4b23      	ldr	r3, [pc, #140]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800648c:	4b20      	ldr	r3, [pc, #128]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	4a1f      	ldr	r2, [pc, #124]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800649c:	4b1c      	ldr	r3, [pc, #112]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064ac:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064be:	f7fb f9c9 	bl	8001854 <HAL_GetTick>
 80064c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c4:	e00b      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c6:	f7fb f9c5 	bl	8001854 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d902      	bls.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	74fb      	strb	r3, [r7, #19]
            break;
 80064dc:	e006      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064de:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ec      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064f2:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006500:	4903      	ldr	r1, [pc, #12]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006508:	e008      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	74bb      	strb	r3, [r7, #18]
 800650e:	e005      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006510:	40021000 	.word	0x40021000
 8006514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006518:	7cfb      	ldrb	r3, [r7, #19]
 800651a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800651c:	7c7b      	ldrb	r3, [r7, #17]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d105      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006522:	4ba6      	ldr	r3, [pc, #664]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006526:	4aa5      	ldr	r2, [pc, #660]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800652c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800653a:	4ba0      	ldr	r3, [pc, #640]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006540:	f023 0203 	bic.w	r2, r3, #3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	499c      	ldr	r1, [pc, #624]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800655c:	4b97      	ldr	r3, [pc, #604]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006562:	f023 020c 	bic.w	r2, r3, #12
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	4994      	ldr	r1, [pc, #592]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800657e:	4b8f      	ldr	r3, [pc, #572]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006584:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	498b      	ldr	r1, [pc, #556]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065a0:	4b86      	ldr	r3, [pc, #536]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	4983      	ldr	r1, [pc, #524]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065c2:	4b7e      	ldr	r3, [pc, #504]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	497a      	ldr	r1, [pc, #488]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065e4:	4b75      	ldr	r3, [pc, #468]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	4972      	ldr	r1, [pc, #456]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006606:	4b6d      	ldr	r3, [pc, #436]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	4969      	ldr	r1, [pc, #420]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006628:	4b64      	ldr	r3, [pc, #400]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	4961      	ldr	r1, [pc, #388]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800664a:	4b5c      	ldr	r3, [pc, #368]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006650:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	4958      	ldr	r1, [pc, #352]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d015      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800666c:	4b53      	ldr	r3, [pc, #332]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	4950      	ldr	r1, [pc, #320]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800668a:	d105      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800668c:	4b4b      	ldr	r3, [pc, #300]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4a4a      	ldr	r2, [pc, #296]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006696:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d015      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066a4:	4b45      	ldr	r3, [pc, #276]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	4942      	ldr	r1, [pc, #264]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066c2:	d105      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c4:	4b3d      	ldr	r3, [pc, #244]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4a3c      	ldr	r2, [pc, #240]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d015      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066dc:	4b37      	ldr	r3, [pc, #220]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	4934      	ldr	r1, [pc, #208]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066fa:	d105      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066fc:	4b2f      	ldr	r3, [pc, #188]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	4a2e      	ldr	r2, [pc, #184]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006706:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d015      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006714:	4b29      	ldr	r3, [pc, #164]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006722:	4926      	ldr	r1, [pc, #152]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006732:	d105      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006734:	4b21      	ldr	r3, [pc, #132]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a20      	ldr	r2, [pc, #128]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800673a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800673e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800674c:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675a:	4918      	ldr	r1, [pc, #96]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800676a:	d105      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800676c:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006776:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d015      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006784:	4b0d      	ldr	r3, [pc, #52]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006792:	490a      	ldr	r1, [pc, #40]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a2:	d105      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067a4:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4a04      	ldr	r2, [pc, #16]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000

080067c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e049      	b.n	8006866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fa fe7e 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 fdac 	bl	800735c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e049      	b.n	8006914 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f841 	bl	800691c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 fd55 	bl	800735c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <HAL_TIM_PWM_Start_DMA+0x2c>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e03c      	b.n	80069d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b04      	cmp	r3, #4
 8006960:	d109      	bne.n	8006976 <HAL_TIM_PWM_Start_DMA+0x46>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	e02f      	b.n	80069d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d109      	bne.n	8006990 <HAL_TIM_PWM_Start_DMA+0x60>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	e022      	b.n	80069d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b0c      	cmp	r3, #12
 8006994:	d109      	bne.n	80069aa <HAL_TIM_PWM_Start_DMA+0x7a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	bf0c      	ite	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	2300      	movne	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	e015      	b.n	80069d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d109      	bne.n	80069c4 <HAL_TIM_PWM_Start_DMA+0x94>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	bf0c      	ite	eq
 80069bc:	2301      	moveq	r3, #1
 80069be:	2300      	movne	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	e008      	b.n	80069d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
 80069dc:	e1a6      	b.n	8006d2c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	bf0c      	ite	eq
 80069f0:	2301      	moveq	r3, #1
 80069f2:	2300      	movne	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	e03c      	b.n	8006a72 <HAL_TIM_PWM_Start_DMA+0x142>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d109      	bne.n	8006a12 <HAL_TIM_PWM_Start_DMA+0xe2>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	e02f      	b.n	8006a72 <HAL_TIM_PWM_Start_DMA+0x142>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d109      	bne.n	8006a2c <HAL_TIM_PWM_Start_DMA+0xfc>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	bf0c      	ite	eq
 8006a24:	2301      	moveq	r3, #1
 8006a26:	2300      	movne	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	e022      	b.n	8006a72 <HAL_TIM_PWM_Start_DMA+0x142>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b0c      	cmp	r3, #12
 8006a30:	d109      	bne.n	8006a46 <HAL_TIM_PWM_Start_DMA+0x116>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	e015      	b.n	8006a72 <HAL_TIM_PWM_Start_DMA+0x142>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d109      	bne.n	8006a60 <HAL_TIM_PWM_Start_DMA+0x130>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	bf0c      	ite	eq
 8006a58:	2301      	moveq	r3, #1
 8006a5a:	2300      	movne	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	e008      	b.n	8006a72 <HAL_TIM_PWM_Start_DMA+0x142>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d034      	beq.n	8006ae0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_TIM_PWM_Start_DMA+0x152>
 8006a7c:	887b      	ldrh	r3, [r7, #2]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e152      	b.n	8006d2c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Start_DMA+0x166>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a94:	e026      	b.n	8006ae4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Start_DMA+0x176>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aa4:	e01e      	b.n	8006ae4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d104      	bne.n	8006ab6 <HAL_TIM_PWM_Start_DMA+0x186>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ab4:	e016      	b.n	8006ae4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b0c      	cmp	r3, #12
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Start_DMA+0x196>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ac4:	e00e      	b.n	8006ae4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ad4:	e006      	b.n	8006ae4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ade:	e001      	b.n	8006ae4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e123      	b.n	8006d2c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b0c      	cmp	r3, #12
 8006ae8:	f200 80ae 	bhi.w	8006c48 <HAL_TIM_PWM_Start_DMA+0x318>
 8006aec:	a201      	add	r2, pc, #4	@ (adr r2, 8006af4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b29 	.word	0x08006b29
 8006af8:	08006c49 	.word	0x08006c49
 8006afc:	08006c49 	.word	0x08006c49
 8006b00:	08006c49 	.word	0x08006c49
 8006b04:	08006b71 	.word	0x08006b71
 8006b08:	08006c49 	.word	0x08006c49
 8006b0c:	08006c49 	.word	0x08006c49
 8006b10:	08006c49 	.word	0x08006c49
 8006b14:	08006bb9 	.word	0x08006bb9
 8006b18:	08006c49 	.word	0x08006c49
 8006b1c:	08006c49 	.word	0x08006c49
 8006b20:	08006c49 	.word	0x08006c49
 8006b24:	08006c01 	.word	0x08006c01
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	4a81      	ldr	r2, [pc, #516]	@ (8006d34 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	4a80      	ldr	r2, [pc, #512]	@ (8006d38 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006b36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	4a7f      	ldr	r2, [pc, #508]	@ (8006d3c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006b3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3334      	adds	r3, #52	@ 0x34
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	887b      	ldrh	r3, [r7, #2]
 8006b50:	f7fc f98e 	bl	8002e70 <HAL_DMA_Start_IT>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e0e6      	b.n	8006d2c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b6c:	60da      	str	r2, [r3, #12]
      break;
 8006b6e:	e06e      	b.n	8006c4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b74:	4a6f      	ldr	r2, [pc, #444]	@ (8006d34 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8006d38 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006b7e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b84:	4a6d      	ldr	r2, [pc, #436]	@ (8006d3c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006b86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3338      	adds	r3, #56	@ 0x38
 8006b94:	461a      	mov	r2, r3
 8006b96:	887b      	ldrh	r3, [r7, #2]
 8006b98:	f7fc f96a 	bl	8002e70 <HAL_DMA_Start_IT>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e0c2      	b.n	8006d2c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bb4:	60da      	str	r2, [r3, #12]
      break;
 8006bb6:	e04a      	b.n	8006c4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8006d34 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	4a5c      	ldr	r2, [pc, #368]	@ (8006d38 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006bc6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	4a5b      	ldr	r2, [pc, #364]	@ (8006d3c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006bce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	333c      	adds	r3, #60	@ 0x3c
 8006bdc:	461a      	mov	r2, r3
 8006bde:	887b      	ldrh	r3, [r7, #2]
 8006be0:	f7fc f946 	bl	8002e70 <HAL_DMA_Start_IT>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e09e      	b.n	8006d2c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bfc:	60da      	str	r2, [r3, #12]
      break;
 8006bfe:	e026      	b.n	8006c4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c04:	4a4b      	ldr	r2, [pc, #300]	@ (8006d34 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006c06:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8006d38 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006c0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	4a49      	ldr	r2, [pc, #292]	@ (8006d3c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006c16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3340      	adds	r3, #64	@ 0x40
 8006c24:	461a      	mov	r2, r3
 8006c26:	887b      	ldrh	r3, [r7, #2]
 8006c28:	f7fc f922 	bl	8002e70 <HAL_DMA_Start_IT>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e07a      	b.n	8006d2c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c44:	60da      	str	r2, [r3, #12]
      break;
 8006c46:	e002      	b.n	8006c4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d16a      	bne.n	8006d2a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 ffab 	bl	8007bb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a36      	ldr	r2, [pc, #216]	@ (8006d40 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_TIM_PWM_Start_DMA+0x364>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a34      	ldr	r2, [pc, #208]	@ (8006d44 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_TIM_PWM_Start_DMA+0x364>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a33      	ldr	r2, [pc, #204]	@ (8006d48 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_TIM_PWM_Start_DMA+0x364>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a31      	ldr	r2, [pc, #196]	@ (8006d4c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_TIM_PWM_Start_DMA+0x364>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a30      	ldr	r2, [pc, #192]	@ (8006d50 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_PWM_Start_DMA+0x368>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <HAL_TIM_PWM_Start_DMA+0x36a>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a23      	ldr	r2, [pc, #140]	@ (8006d40 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc0:	d013      	beq.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a23      	ldr	r2, [pc, #140]	@ (8006d54 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a21      	ldr	r2, [pc, #132]	@ (8006d58 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1a      	ldr	r2, [pc, #104]	@ (8006d44 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a18      	ldr	r2, [pc, #96]	@ (8006d48 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d115      	bne.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d5c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	d015      	beq.n	8006d28 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d02:	d011      	beq.n	8006d28 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d14:	e008      	b.n	8006d28 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	e000      	b.n	8006d2a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d28:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	0800724b 	.word	0x0800724b
 8006d38:	080072f3 	.word	0x080072f3
 8006d3c:	080071b9 	.word	0x080071b9
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	40013400 	.word	0x40013400
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40014400 	.word	0x40014400
 8006d50:	40014800 	.word	0x40014800
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800
 8006d5c:	00010007 	.word	0x00010007

08006d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e0ff      	b.n	8006f7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b14      	cmp	r3, #20
 8006d8a:	f200 80f0 	bhi.w	8006f6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006de9 	.word	0x08006de9
 8006d98:	08006f6f 	.word	0x08006f6f
 8006d9c:	08006f6f 	.word	0x08006f6f
 8006da0:	08006f6f 	.word	0x08006f6f
 8006da4:	08006e29 	.word	0x08006e29
 8006da8:	08006f6f 	.word	0x08006f6f
 8006dac:	08006f6f 	.word	0x08006f6f
 8006db0:	08006f6f 	.word	0x08006f6f
 8006db4:	08006e6b 	.word	0x08006e6b
 8006db8:	08006f6f 	.word	0x08006f6f
 8006dbc:	08006f6f 	.word	0x08006f6f
 8006dc0:	08006f6f 	.word	0x08006f6f
 8006dc4:	08006eab 	.word	0x08006eab
 8006dc8:	08006f6f 	.word	0x08006f6f
 8006dcc:	08006f6f 	.word	0x08006f6f
 8006dd0:	08006f6f 	.word	0x08006f6f
 8006dd4:	08006eed 	.word	0x08006eed
 8006dd8:	08006f6f 	.word	0x08006f6f
 8006ddc:	08006f6f 	.word	0x08006f6f
 8006de0:	08006f6f 	.word	0x08006f6f
 8006de4:	08006f2d 	.word	0x08006f2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fb50 	bl	8007494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0208 	orr.w	r2, r2, #8
 8006e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6999      	ldr	r1, [r3, #24]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	619a      	str	r2, [r3, #24]
      break;
 8006e26:	e0a5      	b.n	8006f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fbc0 	bl	80075b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6999      	ldr	r1, [r3, #24]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	021a      	lsls	r2, r3, #8
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	619a      	str	r2, [r3, #24]
      break;
 8006e68:	e084      	b.n	8006f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fc29 	bl	80076c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0208 	orr.w	r2, r2, #8
 8006e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0204 	bic.w	r2, r2, #4
 8006e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69d9      	ldr	r1, [r3, #28]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	61da      	str	r2, [r3, #28]
      break;
 8006ea8:	e064      	b.n	8006f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fc91 	bl	80077d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69da      	ldr	r2, [r3, #28]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69d9      	ldr	r1, [r3, #28]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	021a      	lsls	r2, r3, #8
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	61da      	str	r2, [r3, #28]
      break;
 8006eea:	e043      	b.n	8006f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fcfa 	bl	80078ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0208 	orr.w	r2, r2, #8
 8006f06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0204 	bic.w	r2, r2, #4
 8006f16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006f2a:	e023      	b.n	8006f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fd3e 	bl	80079b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	021a      	lsls	r2, r3, #8
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006f6c:	e002      	b.n	8006f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
      break;
 8006f72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop

08006f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e0de      	b.n	8007162 <HAL_TIM_ConfigClockSource+0x1da>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a63      	ldr	r2, [pc, #396]	@ (800716c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	f000 80a9 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 8006fe4:	4a61      	ldr	r2, [pc, #388]	@ (800716c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	f200 80ae 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8006fec:	4a60      	ldr	r2, [pc, #384]	@ (8007170 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	f000 80a1 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8007170 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	f200 80a6 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8007174 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	f000 8099 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 8007004:	4a5b      	ldr	r2, [pc, #364]	@ (8007174 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007006:	4293      	cmp	r3, r2
 8007008:	f200 809e 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 800700c:	4a5a      	ldr	r2, [pc, #360]	@ (8007178 <HAL_TIM_ConfigClockSource+0x1f0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	f000 8091 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 8007014:	4a58      	ldr	r2, [pc, #352]	@ (8007178 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	f200 8096 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 800701c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007020:	f000 8089 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 8007024:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007028:	f200 808e 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 800702c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007030:	d03e      	beq.n	80070b0 <HAL_TIM_ConfigClockSource+0x128>
 8007032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007036:	f200 8087 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 800703a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800703e:	f000 8086 	beq.w	800714e <HAL_TIM_ConfigClockSource+0x1c6>
 8007042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007046:	d87f      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8007048:	2b70      	cmp	r3, #112	@ 0x70
 800704a:	d01a      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0xfa>
 800704c:	2b70      	cmp	r3, #112	@ 0x70
 800704e:	d87b      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8007050:	2b60      	cmp	r3, #96	@ 0x60
 8007052:	d050      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x16e>
 8007054:	2b60      	cmp	r3, #96	@ 0x60
 8007056:	d877      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8007058:	2b50      	cmp	r3, #80	@ 0x50
 800705a:	d03c      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x14e>
 800705c:	2b50      	cmp	r3, #80	@ 0x50
 800705e:	d873      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	d058      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x18e>
 8007064:	2b40      	cmp	r3, #64	@ 0x40
 8007066:	d86f      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8007068:	2b30      	cmp	r3, #48	@ 0x30
 800706a:	d064      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 800706c:	2b30      	cmp	r3, #48	@ 0x30
 800706e:	d86b      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8007070:	2b20      	cmp	r3, #32
 8007072:	d060      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 8007074:	2b20      	cmp	r3, #32
 8007076:	d867      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d05c      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 800707c:	2b10      	cmp	r3, #16
 800707e:	d05a      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1ae>
 8007080:	e062      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007092:	f000 fd71 	bl	8007b78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	609a      	str	r2, [r3, #8]
      break;
 80070ae:	e04f      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070c0:	f000 fd5a 	bl	8007b78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070d2:	609a      	str	r2, [r3, #8]
      break;
 80070d4:	e03c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e2:	461a      	mov	r2, r3
 80070e4:	f000 fccc 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2150      	movs	r1, #80	@ 0x50
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fd25 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80070f4:	e02c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007102:	461a      	mov	r2, r3
 8007104:	f000 fceb 	bl	8007ade <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2160      	movs	r1, #96	@ 0x60
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fd15 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 8007114:	e01c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007122:	461a      	mov	r2, r3
 8007124:	f000 fcac 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2140      	movs	r1, #64	@ 0x40
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fd05 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 8007134:	e00c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f000 fcfc 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 8007146:	e003      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
      break;
 800714c:	e000      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800714e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	00100070 	.word	0x00100070
 8007170:	00100040 	.word	0x00100040
 8007174:	00100030 	.word	0x00100030
 8007178:	00100020 	.word	0x00100020

0800717c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d107      	bne.n	80071e0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071de:	e02a      	b.n	8007236 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d107      	bne.n	80071fa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2202      	movs	r2, #2
 80071ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071f8:	e01d      	b.n	8007236 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d107      	bne.n	8007214 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2204      	movs	r2, #4
 8007208:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007212:	e010      	b.n	8007236 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d107      	bne.n	800722e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2208      	movs	r2, #8
 8007222:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800722c:	e003      	b.n	8007236 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff ffb4 	bl	80071a4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	771a      	strb	r2, [r3, #28]
}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007256:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d10b      	bne.n	800727a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2201      	movs	r2, #1
 8007266:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d136      	bne.n	80072de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007278:	e031      	b.n	80072de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d10b      	bne.n	800729c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2202      	movs	r2, #2
 8007288:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d125      	bne.n	80072de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800729a:	e020      	b.n	80072de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d10b      	bne.n	80072be <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2204      	movs	r2, #4
 80072aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d114      	bne.n	80072de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072bc:	e00f      	b.n	80072de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d10a      	bne.n	80072de <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2208      	movs	r2, #8
 80072cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d103      	bne.n	80072de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff ff4c 	bl	800717c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	771a      	strb	r2, [r3, #28]
}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d103      	bne.n	8007312 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	771a      	strb	r2, [r3, #28]
 8007310:	e019      	b.n	8007346 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	429a      	cmp	r2, r3
 800731a:	d103      	bne.n	8007324 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2202      	movs	r2, #2
 8007320:	771a      	strb	r2, [r3, #28]
 8007322:	e010      	b.n	8007346 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	429a      	cmp	r2, r3
 800732c:	d103      	bne.n	8007336 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2204      	movs	r2, #4
 8007332:	771a      	strb	r2, [r3, #28]
 8007334:	e007      	b.n	8007346 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d102      	bne.n	8007346 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2208      	movs	r2, #8
 8007344:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff ff22 	bl	8007190 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	771a      	strb	r2, [r3, #28]
}
 8007352:	bf00      	nop
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a42      	ldr	r2, [pc, #264]	@ (8007478 <TIM_Base_SetConfig+0x11c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00f      	beq.n	8007394 <TIM_Base_SetConfig+0x38>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737a:	d00b      	beq.n	8007394 <TIM_Base_SetConfig+0x38>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a3f      	ldr	r2, [pc, #252]	@ (800747c <TIM_Base_SetConfig+0x120>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d007      	beq.n	8007394 <TIM_Base_SetConfig+0x38>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a3e      	ldr	r2, [pc, #248]	@ (8007480 <TIM_Base_SetConfig+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_Base_SetConfig+0x38>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a3d      	ldr	r2, [pc, #244]	@ (8007484 <TIM_Base_SetConfig+0x128>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d108      	bne.n	80073a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800739a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a33      	ldr	r2, [pc, #204]	@ (8007478 <TIM_Base_SetConfig+0x11c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01b      	beq.n	80073e6 <TIM_Base_SetConfig+0x8a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b4:	d017      	beq.n	80073e6 <TIM_Base_SetConfig+0x8a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a30      	ldr	r2, [pc, #192]	@ (800747c <TIM_Base_SetConfig+0x120>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <TIM_Base_SetConfig+0x8a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2f      	ldr	r2, [pc, #188]	@ (8007480 <TIM_Base_SetConfig+0x124>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00f      	beq.n	80073e6 <TIM_Base_SetConfig+0x8a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007484 <TIM_Base_SetConfig+0x128>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00b      	beq.n	80073e6 <TIM_Base_SetConfig+0x8a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007488 <TIM_Base_SetConfig+0x12c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d007      	beq.n	80073e6 <TIM_Base_SetConfig+0x8a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2c      	ldr	r2, [pc, #176]	@ (800748c <TIM_Base_SetConfig+0x130>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_Base_SetConfig+0x8a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007490 <TIM_Base_SetConfig+0x134>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d108      	bne.n	80073f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a16      	ldr	r2, [pc, #88]	@ (8007478 <TIM_Base_SetConfig+0x11c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00f      	beq.n	8007444 <TIM_Base_SetConfig+0xe8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <TIM_Base_SetConfig+0x128>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00b      	beq.n	8007444 <TIM_Base_SetConfig+0xe8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a16      	ldr	r2, [pc, #88]	@ (8007488 <TIM_Base_SetConfig+0x12c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d007      	beq.n	8007444 <TIM_Base_SetConfig+0xe8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a15      	ldr	r2, [pc, #84]	@ (800748c <TIM_Base_SetConfig+0x130>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_Base_SetConfig+0xe8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a14      	ldr	r2, [pc, #80]	@ (8007490 <TIM_Base_SetConfig+0x134>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d103      	bne.n	800744c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b01      	cmp	r3, #1
 800745c:	d105      	bne.n	800746a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f023 0201 	bic.w	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]
  }
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40013400 	.word	0x40013400
 8007488:	40014000 	.word	0x40014000
 800748c:	40014400 	.word	0x40014400
 8007490:	40014800 	.word	0x40014800

08007494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f023 0201 	bic.w	r2, r3, #1
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f023 0302 	bic.w	r3, r3, #2
 80074e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a2c      	ldr	r2, [pc, #176]	@ (80075a0 <TIM_OC1_SetConfig+0x10c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00f      	beq.n	8007514 <TIM_OC1_SetConfig+0x80>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a2b      	ldr	r2, [pc, #172]	@ (80075a4 <TIM_OC1_SetConfig+0x110>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00b      	beq.n	8007514 <TIM_OC1_SetConfig+0x80>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a2a      	ldr	r2, [pc, #168]	@ (80075a8 <TIM_OC1_SetConfig+0x114>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d007      	beq.n	8007514 <TIM_OC1_SetConfig+0x80>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a29      	ldr	r2, [pc, #164]	@ (80075ac <TIM_OC1_SetConfig+0x118>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC1_SetConfig+0x80>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a28      	ldr	r2, [pc, #160]	@ (80075b0 <TIM_OC1_SetConfig+0x11c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d10c      	bne.n	800752e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0308 	bic.w	r3, r3, #8
 800751a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	4313      	orrs	r3, r2
 8007524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f023 0304 	bic.w	r3, r3, #4
 800752c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1b      	ldr	r2, [pc, #108]	@ (80075a0 <TIM_OC1_SetConfig+0x10c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00f      	beq.n	8007556 <TIM_OC1_SetConfig+0xc2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a1a      	ldr	r2, [pc, #104]	@ (80075a4 <TIM_OC1_SetConfig+0x110>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00b      	beq.n	8007556 <TIM_OC1_SetConfig+0xc2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a19      	ldr	r2, [pc, #100]	@ (80075a8 <TIM_OC1_SetConfig+0x114>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d007      	beq.n	8007556 <TIM_OC1_SetConfig+0xc2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a18      	ldr	r2, [pc, #96]	@ (80075ac <TIM_OC1_SetConfig+0x118>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d003      	beq.n	8007556 <TIM_OC1_SetConfig+0xc2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a17      	ldr	r2, [pc, #92]	@ (80075b0 <TIM_OC1_SetConfig+0x11c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d111      	bne.n	800757a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800755c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4313      	orrs	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40012c00 	.word	0x40012c00
 80075a4:	40013400 	.word	0x40013400
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800

080075b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	f023 0210 	bic.w	r2, r3, #16
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f023 0320 	bic.w	r3, r3, #32
 8007602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a28      	ldr	r2, [pc, #160]	@ (80076b4 <TIM_OC2_SetConfig+0x100>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d003      	beq.n	8007620 <TIM_OC2_SetConfig+0x6c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a27      	ldr	r2, [pc, #156]	@ (80076b8 <TIM_OC2_SetConfig+0x104>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10d      	bne.n	800763c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800763a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a1d      	ldr	r2, [pc, #116]	@ (80076b4 <TIM_OC2_SetConfig+0x100>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00f      	beq.n	8007664 <TIM_OC2_SetConfig+0xb0>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <TIM_OC2_SetConfig+0x104>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00b      	beq.n	8007664 <TIM_OC2_SetConfig+0xb0>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <TIM_OC2_SetConfig+0x108>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d007      	beq.n	8007664 <TIM_OC2_SetConfig+0xb0>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a1a      	ldr	r2, [pc, #104]	@ (80076c0 <TIM_OC2_SetConfig+0x10c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d003      	beq.n	8007664 <TIM_OC2_SetConfig+0xb0>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a19      	ldr	r2, [pc, #100]	@ (80076c4 <TIM_OC2_SetConfig+0x110>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d113      	bne.n	800768c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800766a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40013400 	.word	0x40013400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800

080076c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a27      	ldr	r2, [pc, #156]	@ (80077c4 <TIM_OC3_SetConfig+0xfc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <TIM_OC3_SetConfig+0x6a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a26      	ldr	r2, [pc, #152]	@ (80077c8 <TIM_OC3_SetConfig+0x100>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d10d      	bne.n	800774e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800774c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a1c      	ldr	r2, [pc, #112]	@ (80077c4 <TIM_OC3_SetConfig+0xfc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00f      	beq.n	8007776 <TIM_OC3_SetConfig+0xae>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a1b      	ldr	r2, [pc, #108]	@ (80077c8 <TIM_OC3_SetConfig+0x100>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00b      	beq.n	8007776 <TIM_OC3_SetConfig+0xae>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a1a      	ldr	r2, [pc, #104]	@ (80077cc <TIM_OC3_SetConfig+0x104>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d007      	beq.n	8007776 <TIM_OC3_SetConfig+0xae>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a19      	ldr	r2, [pc, #100]	@ (80077d0 <TIM_OC3_SetConfig+0x108>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d003      	beq.n	8007776 <TIM_OC3_SetConfig+0xae>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a18      	ldr	r2, [pc, #96]	@ (80077d4 <TIM_OC3_SetConfig+0x10c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d113      	bne.n	800779e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800777c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	621a      	str	r2, [r3, #32]
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40013400 	.word	0x40013400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800

080077d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800780a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a28      	ldr	r2, [pc, #160]	@ (80078d8 <TIM_OC4_SetConfig+0x100>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d003      	beq.n	8007844 <TIM_OC4_SetConfig+0x6c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a27      	ldr	r2, [pc, #156]	@ (80078dc <TIM_OC4_SetConfig+0x104>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d10d      	bne.n	8007860 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800784a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	031b      	lsls	r3, r3, #12
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800785e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a1d      	ldr	r2, [pc, #116]	@ (80078d8 <TIM_OC4_SetConfig+0x100>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00f      	beq.n	8007888 <TIM_OC4_SetConfig+0xb0>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a1c      	ldr	r2, [pc, #112]	@ (80078dc <TIM_OC4_SetConfig+0x104>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00b      	beq.n	8007888 <TIM_OC4_SetConfig+0xb0>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a1b      	ldr	r2, [pc, #108]	@ (80078e0 <TIM_OC4_SetConfig+0x108>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d007      	beq.n	8007888 <TIM_OC4_SetConfig+0xb0>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1a      	ldr	r2, [pc, #104]	@ (80078e4 <TIM_OC4_SetConfig+0x10c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d003      	beq.n	8007888 <TIM_OC4_SetConfig+0xb0>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a19      	ldr	r2, [pc, #100]	@ (80078e8 <TIM_OC4_SetConfig+0x110>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d113      	bne.n	80078b0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800788e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007896:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	019b      	lsls	r3, r3, #6
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40012c00 	.word	0x40012c00
 80078dc:	40013400 	.word	0x40013400
 80078e0:	40014000 	.word	0x40014000
 80078e4:	40014400 	.word	0x40014400
 80078e8:	40014800 	.word	0x40014800

080078ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800791a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007930:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a17      	ldr	r2, [pc, #92]	@ (80079a0 <TIM_OC5_SetConfig+0xb4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00f      	beq.n	8007966 <TIM_OC5_SetConfig+0x7a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a16      	ldr	r2, [pc, #88]	@ (80079a4 <TIM_OC5_SetConfig+0xb8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00b      	beq.n	8007966 <TIM_OC5_SetConfig+0x7a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a15      	ldr	r2, [pc, #84]	@ (80079a8 <TIM_OC5_SetConfig+0xbc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d007      	beq.n	8007966 <TIM_OC5_SetConfig+0x7a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a14      	ldr	r2, [pc, #80]	@ (80079ac <TIM_OC5_SetConfig+0xc0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d003      	beq.n	8007966 <TIM_OC5_SetConfig+0x7a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a13      	ldr	r2, [pc, #76]	@ (80079b0 <TIM_OC5_SetConfig+0xc4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d109      	bne.n	800797a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800796c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	621a      	str	r2, [r3, #32]
}
 8007994:	bf00      	nop
 8007996:	371c      	adds	r7, #28
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	40012c00 	.word	0x40012c00
 80079a4:	40013400 	.word	0x40013400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40014400 	.word	0x40014400
 80079b0:	40014800 	.word	0x40014800

080079b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	051b      	lsls	r3, r3, #20
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a18      	ldr	r2, [pc, #96]	@ (8007a6c <TIM_OC6_SetConfig+0xb8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00f      	beq.n	8007a30 <TIM_OC6_SetConfig+0x7c>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a17      	ldr	r2, [pc, #92]	@ (8007a70 <TIM_OC6_SetConfig+0xbc>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00b      	beq.n	8007a30 <TIM_OC6_SetConfig+0x7c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a16      	ldr	r2, [pc, #88]	@ (8007a74 <TIM_OC6_SetConfig+0xc0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_OC6_SetConfig+0x7c>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a15      	ldr	r2, [pc, #84]	@ (8007a78 <TIM_OC6_SetConfig+0xc4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC6_SetConfig+0x7c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a14      	ldr	r2, [pc, #80]	@ (8007a7c <TIM_OC6_SetConfig+0xc8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d109      	bne.n	8007a44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	029b      	lsls	r3, r3, #10
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	621a      	str	r2, [r3, #32]
}
 8007a5e:	bf00      	nop
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40013400 	.word	0x40013400
 8007a74:	40014000 	.word	0x40014000
 8007a78:	40014400 	.word	0x40014400
 8007a7c:	40014800 	.word	0x40014800

08007a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f023 030a 	bic.w	r3, r3, #10
 8007abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	f023 0210 	bic.w	r2, r3, #16
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	031b      	lsls	r3, r3, #12
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f043 0307 	orr.w	r3, r3, #7
 8007b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	609a      	str	r2, [r3, #8]
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	021a      	lsls	r2, r3, #8
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	609a      	str	r2, [r3, #8]
}
 8007bac:	bf00      	nop
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f003 031f 	and.w	r3, r3, #31
 8007bca:	2201      	movs	r2, #1
 8007bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a1a      	ldr	r2, [r3, #32]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	401a      	ands	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a1a      	ldr	r2, [r3, #32]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f003 031f 	and.w	r3, r3, #31
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	621a      	str	r2, [r3, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e065      	b.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a2c      	ldr	r2, [pc, #176]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d108      	bne.n	8007c62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d018      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c92:	d013      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00e      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a17      	ldr	r2, [pc, #92]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d009      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a12      	ldr	r2, [pc, #72]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a13      	ldr	r2, [pc, #76]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10c      	bne.n	8007cd6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40013400 	.word	0x40013400
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800
 8007d04:	40014000 	.word	0x40014000

08007d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e042      	b.n	8007da0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d106      	bne.n	8007d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7f9 fcab 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2224      	movs	r2, #36	@ 0x24
 8007d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 faf4 	bl	8008340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f825 	bl	8007da8 <UART_SetConfig>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e01b      	b.n	8007da0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689a      	ldr	r2, [r3, #8]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fb73 	bl	8008484 <UART_CheckIdleState>
 8007d9e:	4603      	mov	r3, r0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dac:	b08c      	sub	sp, #48	@ 0x30
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4bab      	ldr	r3, [pc, #684]	@ (8008084 <UART_SetConfig+0x2dc>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4aa0      	ldr	r2, [pc, #640]	@ (8008088 <UART_SetConfig+0x2e0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d004      	beq.n	8007e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e10:	4313      	orrs	r3, r2
 8007e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007e1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	6812      	ldr	r2, [r2, #0]
 8007e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	f023 010f 	bic.w	r1, r3, #15
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a91      	ldr	r2, [pc, #580]	@ (800808c <UART_SetConfig+0x2e4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d125      	bne.n	8007e98 <UART_SetConfig+0xf0>
 8007e4c:	4b90      	ldr	r3, [pc, #576]	@ (8008090 <UART_SetConfig+0x2e8>)
 8007e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d81a      	bhi.n	8007e90 <UART_SetConfig+0xe8>
 8007e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <UART_SetConfig+0xb8>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e71 	.word	0x08007e71
 8007e64:	08007e81 	.word	0x08007e81
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007e89 	.word	0x08007e89
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e76:	e0d6      	b.n	8008026 <UART_SetConfig+0x27e>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7e:	e0d2      	b.n	8008026 <UART_SetConfig+0x27e>
 8007e80:	2304      	movs	r3, #4
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e86:	e0ce      	b.n	8008026 <UART_SetConfig+0x27e>
 8007e88:	2308      	movs	r3, #8
 8007e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8e:	e0ca      	b.n	8008026 <UART_SetConfig+0x27e>
 8007e90:	2310      	movs	r3, #16
 8007e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e96:	e0c6      	b.n	8008026 <UART_SetConfig+0x27e>
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a7d      	ldr	r2, [pc, #500]	@ (8008094 <UART_SetConfig+0x2ec>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d138      	bne.n	8007f14 <UART_SetConfig+0x16c>
 8007ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8008090 <UART_SetConfig+0x2e8>)
 8007ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea8:	f003 030c 	and.w	r3, r3, #12
 8007eac:	2b0c      	cmp	r3, #12
 8007eae:	d82d      	bhi.n	8007f0c <UART_SetConfig+0x164>
 8007eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <UART_SetConfig+0x110>)
 8007eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb6:	bf00      	nop
 8007eb8:	08007eed 	.word	0x08007eed
 8007ebc:	08007f0d 	.word	0x08007f0d
 8007ec0:	08007f0d 	.word	0x08007f0d
 8007ec4:	08007f0d 	.word	0x08007f0d
 8007ec8:	08007efd 	.word	0x08007efd
 8007ecc:	08007f0d 	.word	0x08007f0d
 8007ed0:	08007f0d 	.word	0x08007f0d
 8007ed4:	08007f0d 	.word	0x08007f0d
 8007ed8:	08007ef5 	.word	0x08007ef5
 8007edc:	08007f0d 	.word	0x08007f0d
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f0d 	.word	0x08007f0d
 8007ee8:	08007f05 	.word	0x08007f05
 8007eec:	2300      	movs	r3, #0
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef2:	e098      	b.n	8008026 <UART_SetConfig+0x27e>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efa:	e094      	b.n	8008026 <UART_SetConfig+0x27e>
 8007efc:	2304      	movs	r3, #4
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f02:	e090      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f04:	2308      	movs	r3, #8
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0a:	e08c      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f0c:	2310      	movs	r3, #16
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f12:	e088      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a5f      	ldr	r2, [pc, #380]	@ (8008098 <UART_SetConfig+0x2f0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d125      	bne.n	8007f6a <UART_SetConfig+0x1c2>
 8007f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8008090 <UART_SetConfig+0x2e8>)
 8007f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f28:	2b30      	cmp	r3, #48	@ 0x30
 8007f2a:	d016      	beq.n	8007f5a <UART_SetConfig+0x1b2>
 8007f2c:	2b30      	cmp	r3, #48	@ 0x30
 8007f2e:	d818      	bhi.n	8007f62 <UART_SetConfig+0x1ba>
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d00a      	beq.n	8007f4a <UART_SetConfig+0x1a2>
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d814      	bhi.n	8007f62 <UART_SetConfig+0x1ba>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <UART_SetConfig+0x19a>
 8007f3c:	2b10      	cmp	r3, #16
 8007f3e:	d008      	beq.n	8007f52 <UART_SetConfig+0x1aa>
 8007f40:	e00f      	b.n	8007f62 <UART_SetConfig+0x1ba>
 8007f42:	2300      	movs	r3, #0
 8007f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f48:	e06d      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f50:	e069      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f52:	2304      	movs	r3, #4
 8007f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f58:	e065      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f60:	e061      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f62:	2310      	movs	r3, #16
 8007f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f68:	e05d      	b.n	8008026 <UART_SetConfig+0x27e>
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800809c <UART_SetConfig+0x2f4>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d125      	bne.n	8007fc0 <UART_SetConfig+0x218>
 8007f74:	4b46      	ldr	r3, [pc, #280]	@ (8008090 <UART_SetConfig+0x2e8>)
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f80:	d016      	beq.n	8007fb0 <UART_SetConfig+0x208>
 8007f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f84:	d818      	bhi.n	8007fb8 <UART_SetConfig+0x210>
 8007f86:	2b80      	cmp	r3, #128	@ 0x80
 8007f88:	d00a      	beq.n	8007fa0 <UART_SetConfig+0x1f8>
 8007f8a:	2b80      	cmp	r3, #128	@ 0x80
 8007f8c:	d814      	bhi.n	8007fb8 <UART_SetConfig+0x210>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <UART_SetConfig+0x1f0>
 8007f92:	2b40      	cmp	r3, #64	@ 0x40
 8007f94:	d008      	beq.n	8007fa8 <UART_SetConfig+0x200>
 8007f96:	e00f      	b.n	8007fb8 <UART_SetConfig+0x210>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9e:	e042      	b.n	8008026 <UART_SetConfig+0x27e>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e03e      	b.n	8008026 <UART_SetConfig+0x27e>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fae:	e03a      	b.n	8008026 <UART_SetConfig+0x27e>
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb6:	e036      	b.n	8008026 <UART_SetConfig+0x27e>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fbe:	e032      	b.n	8008026 <UART_SetConfig+0x27e>
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a30      	ldr	r2, [pc, #192]	@ (8008088 <UART_SetConfig+0x2e0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d12a      	bne.n	8008020 <UART_SetConfig+0x278>
 8007fca:	4b31      	ldr	r3, [pc, #196]	@ (8008090 <UART_SetConfig+0x2e8>)
 8007fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fd8:	d01a      	beq.n	8008010 <UART_SetConfig+0x268>
 8007fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fde:	d81b      	bhi.n	8008018 <UART_SetConfig+0x270>
 8007fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fe4:	d00c      	beq.n	8008000 <UART_SetConfig+0x258>
 8007fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fea:	d815      	bhi.n	8008018 <UART_SetConfig+0x270>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <UART_SetConfig+0x250>
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ff4:	d008      	beq.n	8008008 <UART_SetConfig+0x260>
 8007ff6:	e00f      	b.n	8008018 <UART_SetConfig+0x270>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e012      	b.n	8008026 <UART_SetConfig+0x27e>
 8008000:	2302      	movs	r3, #2
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e00e      	b.n	8008026 <UART_SetConfig+0x27e>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e00a      	b.n	8008026 <UART_SetConfig+0x27e>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e006      	b.n	8008026 <UART_SetConfig+0x27e>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e002      	b.n	8008026 <UART_SetConfig+0x27e>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a17      	ldr	r2, [pc, #92]	@ (8008088 <UART_SetConfig+0x2e0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	f040 80a8 	bne.w	8008182 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008032:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008036:	2b08      	cmp	r3, #8
 8008038:	d834      	bhi.n	80080a4 <UART_SetConfig+0x2fc>
 800803a:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <UART_SetConfig+0x298>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008065 	.word	0x08008065
 8008044:	080080a5 	.word	0x080080a5
 8008048:	0800806d 	.word	0x0800806d
 800804c:	080080a5 	.word	0x080080a5
 8008050:	08008073 	.word	0x08008073
 8008054:	080080a5 	.word	0x080080a5
 8008058:	080080a5 	.word	0x080080a5
 800805c:	080080a5 	.word	0x080080a5
 8008060:	0800807b 	.word	0x0800807b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008064:	f7fe f94a 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 8008068:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800806a:	e021      	b.n	80080b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800806c:	4b0c      	ldr	r3, [pc, #48]	@ (80080a0 <UART_SetConfig+0x2f8>)
 800806e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008070:	e01e      	b.n	80080b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008072:	f7fe f8d5 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 8008076:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008078:	e01a      	b.n	80080b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800807e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008080:	e016      	b.n	80080b0 <UART_SetConfig+0x308>
 8008082:	bf00      	nop
 8008084:	cfff69f3 	.word	0xcfff69f3
 8008088:	40008000 	.word	0x40008000
 800808c:	40013800 	.word	0x40013800
 8008090:	40021000 	.word	0x40021000
 8008094:	40004400 	.word	0x40004400
 8008098:	40004800 	.word	0x40004800
 800809c:	40004c00 	.word	0x40004c00
 80080a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 812a 	beq.w	800830c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080bc:	4a9e      	ldr	r2, [pc, #632]	@ (8008338 <UART_SetConfig+0x590>)
 80080be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	4613      	mov	r3, r2
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	4413      	add	r3, r2
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d305      	bcc.n	80080e8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d903      	bls.n	80080f0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080ee:	e10d      	b.n	800830c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	2200      	movs	r2, #0
 80080f4:	60bb      	str	r3, [r7, #8]
 80080f6:	60fa      	str	r2, [r7, #12]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fc:	4a8e      	ldr	r2, [pc, #568]	@ (8008338 <UART_SetConfig+0x590>)
 80080fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008102:	b29b      	uxth	r3, r3
 8008104:	2200      	movs	r2, #0
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008112:	f7f8 f881 	bl	8000218 <__aeabi_uldivmod>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4610      	mov	r0, r2
 800811c:	4619      	mov	r1, r3
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	020b      	lsls	r3, r1, #8
 8008128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800812c:	0202      	lsls	r2, r0, #8
 800812e:	6979      	ldr	r1, [r7, #20]
 8008130:	6849      	ldr	r1, [r1, #4]
 8008132:	0849      	lsrs	r1, r1, #1
 8008134:	2000      	movs	r0, #0
 8008136:	460c      	mov	r4, r1
 8008138:	4605      	mov	r5, r0
 800813a:	eb12 0804 	adds.w	r8, r2, r4
 800813e:	eb43 0905 	adc.w	r9, r3, r5
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	469a      	mov	sl, r3
 800814a:	4693      	mov	fp, r2
 800814c:	4652      	mov	r2, sl
 800814e:	465b      	mov	r3, fp
 8008150:	4640      	mov	r0, r8
 8008152:	4649      	mov	r1, r9
 8008154:	f7f8 f860 	bl	8000218 <__aeabi_uldivmod>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4613      	mov	r3, r2
 800815e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008166:	d308      	bcc.n	800817a <UART_SetConfig+0x3d2>
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800816e:	d204      	bcs.n	800817a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6a3a      	ldr	r2, [r7, #32]
 8008176:	60da      	str	r2, [r3, #12]
 8008178:	e0c8      	b.n	800830c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008180:	e0c4      	b.n	800830c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800818a:	d167      	bne.n	800825c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800818c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008190:	2b08      	cmp	r3, #8
 8008192:	d828      	bhi.n	80081e6 <UART_SetConfig+0x43e>
 8008194:	a201      	add	r2, pc, #4	@ (adr r2, 800819c <UART_SetConfig+0x3f4>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081c9 	.word	0x080081c9
 80081a4:	080081d1 	.word	0x080081d1
 80081a8:	080081e7 	.word	0x080081e7
 80081ac:	080081d7 	.word	0x080081d7
 80081b0:	080081e7 	.word	0x080081e7
 80081b4:	080081e7 	.word	0x080081e7
 80081b8:	080081e7 	.word	0x080081e7
 80081bc:	080081df 	.word	0x080081df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c0:	f7fe f89c 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 80081c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081c6:	e014      	b.n	80081f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081c8:	f7fe f8ae 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 80081cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ce:	e010      	b.n	80081f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d0:	4b5a      	ldr	r3, [pc, #360]	@ (800833c <UART_SetConfig+0x594>)
 80081d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081d4:	e00d      	b.n	80081f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081d6:	f7fe f823 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80081da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081dc:	e009      	b.n	80081f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081e4:	e005      	b.n	80081f2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8089 	beq.w	800830c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008338 <UART_SetConfig+0x590>)
 8008200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008204:	461a      	mov	r2, r3
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	fbb3 f3f2 	udiv	r3, r3, r2
 800820c:	005a      	lsls	r2, r3, #1
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	441a      	add	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	fbb2 f3f3 	udiv	r3, r2, r3
 800821e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	2b0f      	cmp	r3, #15
 8008224:	d916      	bls.n	8008254 <UART_SetConfig+0x4ac>
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800822c:	d212      	bcs.n	8008254 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f023 030f 	bic.w	r3, r3, #15
 8008236:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	b29b      	uxth	r3, r3
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	b29a      	uxth	r2, r3
 8008244:	8bfb      	ldrh	r3, [r7, #30]
 8008246:	4313      	orrs	r3, r2
 8008248:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	8bfa      	ldrh	r2, [r7, #30]
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	e05b      	b.n	800830c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800825a:	e057      	b.n	800830c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800825c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008260:	2b08      	cmp	r3, #8
 8008262:	d828      	bhi.n	80082b6 <UART_SetConfig+0x50e>
 8008264:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <UART_SetConfig+0x4c4>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	08008291 	.word	0x08008291
 8008270:	08008299 	.word	0x08008299
 8008274:	080082a1 	.word	0x080082a1
 8008278:	080082b7 	.word	0x080082b7
 800827c:	080082a7 	.word	0x080082a7
 8008280:	080082b7 	.word	0x080082b7
 8008284:	080082b7 	.word	0x080082b7
 8008288:	080082b7 	.word	0x080082b7
 800828c:	080082af 	.word	0x080082af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008290:	f7fe f834 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 8008294:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008296:	e014      	b.n	80082c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008298:	f7fe f846 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 800829c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800829e:	e010      	b.n	80082c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a0:	4b26      	ldr	r3, [pc, #152]	@ (800833c <UART_SetConfig+0x594>)
 80082a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082a4:	e00d      	b.n	80082c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082a6:	f7fd ffbb 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80082aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ac:	e009      	b.n	80082c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082b4:	e005      	b.n	80082c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082c0:	bf00      	nop
    }

    if (pclk != 0U)
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d021      	beq.n	800830c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008338 <UART_SetConfig+0x590>)
 80082ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	441a      	add	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	2b0f      	cmp	r3, #15
 80082f0:	d909      	bls.n	8008306 <UART_SetConfig+0x55e>
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082f8:	d205      	bcs.n	8008306 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60da      	str	r2, [r3, #12]
 8008304:	e002      	b.n	800830c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2201      	movs	r2, #1
 8008310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2201      	movs	r2, #1
 8008318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2200      	movs	r2, #0
 8008320:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2200      	movs	r2, #0
 8008326:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008328:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800832c:	4618      	mov	r0, r3
 800832e:	3730      	adds	r7, #48	@ 0x30
 8008330:	46bd      	mov	sp, r7
 8008332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008336:	bf00      	nop
 8008338:	0800c6f0 	.word	0x0800c6f0
 800833c:	00f42400 	.word	0x00f42400

08008340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01a      	beq.n	8008456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800843e:	d10a      	bne.n	8008456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	605a      	str	r2, [r3, #4]
  }
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b098      	sub	sp, #96	@ 0x60
 8008488:	af02      	add	r7, sp, #8
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008494:	f7f9 f9de 	bl	8001854 <HAL_GetTick>
 8008498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d12f      	bne.n	8008508 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084b0:	2200      	movs	r2, #0
 80084b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f88e 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d022      	beq.n	8008508 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e6      	bne.n	80084c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e063      	b.n	80085d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b04      	cmp	r3, #4
 8008514:	d149      	bne.n	80085aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008516:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800851e:	2200      	movs	r2, #0
 8008520:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f857 	bl	80085d8 <UART_WaitOnFlagUntilTimeout>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d03c      	beq.n	80085aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	623b      	str	r3, [r7, #32]
   return(result);
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800854e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008550:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e6      	bne.n	8008530 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	60fb      	str	r3, [r7, #12]
   return(result);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f023 0301 	bic.w	r3, r3, #1
 8008578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3308      	adds	r3, #8
 8008580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008582:	61fa      	str	r2, [r7, #28]
 8008584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	69b9      	ldr	r1, [r7, #24]
 8008588:	69fa      	ldr	r2, [r7, #28]
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	617b      	str	r3, [r7, #20]
   return(result);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e5      	bne.n	8008562 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e012      	b.n	80085d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3758      	adds	r7, #88	@ 0x58
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e8:	e04f      	b.n	800868a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d04b      	beq.n	800868a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f2:	f7f9 f92f 	bl	8001854 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d302      	bcc.n	8008608 <UART_WaitOnFlagUntilTimeout+0x30>
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e04e      	b.n	80086aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	d037      	beq.n	800868a <UART_WaitOnFlagUntilTimeout+0xb2>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b80      	cmp	r3, #128	@ 0x80
 800861e:	d034      	beq.n	800868a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b40      	cmp	r3, #64	@ 0x40
 8008624:	d031      	beq.n	800868a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b08      	cmp	r3, #8
 8008632:	d110      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2208      	movs	r2, #8
 800863a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f838 	bl	80086b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2208      	movs	r2, #8
 8008646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e029      	b.n	80086aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008664:	d111      	bne.n	800868a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800866e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f81e 	bl	80086b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e00f      	b.n	80086aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4013      	ands	r3, r2
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	429a      	cmp	r2, r3
 8008698:	bf0c      	ite	eq
 800869a:	2301      	moveq	r3, #1
 800869c:	2300      	movne	r3, #0
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d0a0      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b095      	sub	sp, #84	@ 0x54
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80086da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3308      	adds	r3, #8
 80086f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008702:	f023 0301 	bic.w	r3, r3, #1
 8008706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3308      	adds	r3, #8
 800870e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e3      	bne.n	80086ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008728:	2b01      	cmp	r3, #1
 800872a:	d118      	bne.n	800875e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	60bb      	str	r3, [r7, #8]
   return(result);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f023 0310 	bic.w	r3, r3, #16
 8008740:	647b      	str	r3, [r7, #68]	@ 0x44
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800874a:	61bb      	str	r3, [r7, #24]
 800874c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6979      	ldr	r1, [r7, #20]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	613b      	str	r3, [r7, #16]
   return(result);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e6      	bne.n	800872c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2220      	movs	r2, #32
 8008762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008772:	bf00      	nop
 8008774:	3754      	adds	r7, #84	@ 0x54
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800878c:	2b01      	cmp	r3, #1
 800878e:	d101      	bne.n	8008794 <HAL_UARTEx_DisableFifoMode+0x16>
 8008790:	2302      	movs	r3, #2
 8008792:	e027      	b.n	80087e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2224      	movs	r2, #36	@ 0x24
 80087a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008804:	2302      	movs	r3, #2
 8008806:	e02d      	b.n	8008864 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2224      	movs	r2, #36	@ 0x24
 8008814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0201 	bic.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f84f 	bl	80088e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008880:	2302      	movs	r3, #2
 8008882:	e02d      	b.n	80088e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2224      	movs	r2, #36	@ 0x24
 8008890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0201 	bic.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f811 	bl	80088e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d108      	bne.n	800890a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008908:	e031      	b.n	800896e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800890a:	2308      	movs	r3, #8
 800890c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800890e:	2308      	movs	r3, #8
 8008910:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	0e5b      	lsrs	r3, r3, #25
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	0f5b      	lsrs	r3, r3, #29
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	7b3a      	ldrb	r2, [r7, #12]
 8008936:	4911      	ldr	r1, [pc, #68]	@ (800897c <UARTEx_SetNbDataToProcess+0x94>)
 8008938:	5c8a      	ldrb	r2, [r1, r2]
 800893a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800893e:	7b3a      	ldrb	r2, [r7, #12]
 8008940:	490f      	ldr	r1, [pc, #60]	@ (8008980 <UARTEx_SetNbDataToProcess+0x98>)
 8008942:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008944:	fb93 f3f2 	sdiv	r3, r3, r2
 8008948:	b29a      	uxth	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	7b7a      	ldrb	r2, [r7, #13]
 8008954:	4909      	ldr	r1, [pc, #36]	@ (800897c <UARTEx_SetNbDataToProcess+0x94>)
 8008956:	5c8a      	ldrb	r2, [r1, r2]
 8008958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800895c:	7b7a      	ldrb	r2, [r7, #13]
 800895e:	4908      	ldr	r1, [pc, #32]	@ (8008980 <UARTEx_SetNbDataToProcess+0x98>)
 8008960:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008962:	fb93 f3f2 	sdiv	r3, r3, r2
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800896e:	bf00      	nop
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	0800c708 	.word	0x0800c708
 8008980:	0800c710 	.word	0x0800c710

08008984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008994:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008998:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b085      	sub	sp, #20
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089ba:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80089be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	43db      	mvns	r3, r3
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	4013      	ands	r3, r2
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	1d3b      	adds	r3, r7, #4
 80089f2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b0a7      	sub	sp, #156	@ 0x9c
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	78db      	ldrb	r3, [r3, #3]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d81f      	bhi.n	8008a96 <USB_ActivateEndpoint+0x72>
 8008a56:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <USB_ActivateEndpoint+0x38>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a89 	.word	0x08008a89
 8008a64:	08008a9f 	.word	0x08008a9f
 8008a68:	08008a7b 	.word	0x08008a7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a6c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a74:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008a78:	e012      	b.n	8008aa0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a7a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a7e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008a82:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008a86:	e00b      	b.n	8008aa0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a88:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a90:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008a94:	e004      	b.n	8008aa0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8008a9c:	e000      	b.n	8008aa0 <USB_ActivateEndpoint+0x7c>
      break;
 8008a9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ada:	b21a      	sxth	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	b21b      	sxth	r3, r3
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	b21b      	sxth	r3, r3
 8008ae6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	441a      	add	r2, r3
 8008af4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	7b1b      	ldrb	r3, [r3, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f040 8180 	bne.w	8008e16 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 8084 	beq.w	8008c28 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	4413      	add	r3, r2
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	00da      	lsls	r2, r3, #3
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	88db      	ldrh	r3, [r3, #6]
 8008b48:	085b      	lsrs	r3, r3, #1
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	827b      	strh	r3, [r7, #18]
 8008b62:	8a7b      	ldrh	r3, [r7, #18]
 8008b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01b      	beq.n	8008ba4 <USB_ActivateEndpoint+0x180>
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b82:	823b      	strh	r3, [r7, #16]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	8a3b      	ldrh	r3, [r7, #16]
 8008b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	78db      	ldrb	r3, [r3, #3]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d020      	beq.n	8008bee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bc2:	81bb      	strh	r3, [r7, #12]
 8008bc4:	89bb      	ldrh	r3, [r7, #12]
 8008bc6:	f083 0320 	eor.w	r3, r3, #32
 8008bca:	81bb      	strh	r3, [r7, #12]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	441a      	add	r2, r3
 8008bd6:	89bb      	ldrh	r3, [r7, #12]
 8008bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	8013      	strh	r3, [r2, #0]
 8008bec:	e3f9      	b.n	80093e2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c04:	81fb      	strh	r3, [r7, #14]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	441a      	add	r2, r3
 8008c10:	89fb      	ldrh	r3, [r7, #14]
 8008c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	8013      	strh	r3, [r2, #0]
 8008c26:	e3dc      	b.n	80093e2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	4413      	add	r3, r2
 8008c3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	00da      	lsls	r2, r3, #3
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	4413      	add	r3, r2
 8008c46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	88db      	ldrh	r3, [r3, #6]
 8008c50:	085b      	lsrs	r3, r3, #1
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	4413      	add	r3, r2
 8008c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	00da      	lsls	r2, r3, #3
 8008c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	801a      	strh	r2, [r3, #0]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <USB_ActivateEndpoint+0x28a>
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	801a      	strh	r2, [r3, #0]
 8008cac:	e041      	b.n	8008d32 <USB_ActivateEndpoint+0x30e>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cb4:	d81c      	bhi.n	8008cf0 <USB_ActivateEndpoint+0x2cc>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	085b      	lsrs	r3, r3, #1
 8008cbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <USB_ActivateEndpoint+0x2b2>
 8008ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	029b      	lsls	r3, r3, #10
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	e020      	b.n	8008d32 <USB_ActivateEndpoint+0x30e>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	095b      	lsrs	r3, r3, #5
 8008cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <USB_ActivateEndpoint+0x2ec>
 8008d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	029b      	lsls	r3, r3, #10
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4313      	orrs	r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008d40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01b      	beq.n	8008d82 <USB_ActivateEndpoint+0x35e>
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d60:	843b      	strh	r3, [r7, #32]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	441a      	add	r2, r3
 8008d6c:	8c3b      	ldrh	r3, [r7, #32]
 8008d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d124      	bne.n	8008dd4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da0:	83bb      	strh	r3, [r7, #28]
 8008da2:	8bbb      	ldrh	r3, [r7, #28]
 8008da4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008da8:	83bb      	strh	r3, [r7, #28]
 8008daa:	8bbb      	ldrh	r3, [r7, #28]
 8008dac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008db0:	83bb      	strh	r3, [r7, #28]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	441a      	add	r2, r3
 8008dbc:	8bbb      	ldrh	r3, [r7, #28]
 8008dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	8013      	strh	r3, [r2, #0]
 8008dd2:	e306      	b.n	80093e2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dea:	83fb      	strh	r3, [r7, #30]
 8008dec:	8bfb      	ldrh	r3, [r7, #30]
 8008dee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008df2:	83fb      	strh	r3, [r7, #30]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	441a      	add	r2, r3
 8008dfe:	8bfb      	ldrh	r3, [r7, #30]
 8008e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8013      	strh	r3, [r2, #0]
 8008e14:	e2e5      	b.n	80093e2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	78db      	ldrb	r3, [r3, #3]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d11e      	bne.n	8008e5c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e34:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8013      	strh	r3, [r2, #0]
 8008e5a:	e01d      	b.n	8008e98 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e72:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	441a      	add	r2, r3
 8008e80:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ea8:	4413      	add	r3, r2
 8008eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	00da      	lsls	r2, r3, #3
 8008eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008eba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	891b      	ldrh	r3, [r3, #8]
 8008ec0:	085b      	lsrs	r3, r3, #1
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008edc:	4413      	add	r3, r2
 8008ede:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	00da      	lsls	r2, r3, #3
 8008ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ee8:	4413      	add	r3, r2
 8008eea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008eee:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	895b      	ldrh	r3, [r3, #10]
 8008ef4:	085b      	lsrs	r3, r3, #1
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008efe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f040 81af 	bne.w	8009268 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008f1a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01d      	beq.n	8008f62 <USB_ActivateEndpoint+0x53e>
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	441a      	add	r2, r3
 8008f4a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008f72:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d01d      	beq.n	8008fba <USB_ActivateEndpoint+0x596>
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f94:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	441a      	add	r2, r3
 8008fa2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d16b      	bne.n	800909a <USB_ActivateEndpoint+0x676>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd2:	4413      	add	r3, r2
 8008fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	00da      	lsls	r2, r3, #3
 8008fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fde:	4413      	add	r3, r2
 8008fe0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <USB_ActivateEndpoint+0x5f0>
 8008ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	b29b      	uxth	r3, r3
 8009004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800900c:	b29a      	uxth	r2, r3
 800900e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009010:	801a      	strh	r2, [r3, #0]
 8009012:	e05d      	b.n	80090d0 <USB_ActivateEndpoint+0x6ac>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	2b3e      	cmp	r3, #62	@ 0x3e
 800901a:	d81c      	bhi.n	8009056 <USB_ActivateEndpoint+0x632>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	085b      	lsrs	r3, r3, #1
 8009022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <USB_ActivateEndpoint+0x618>
 8009032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009036:	3301      	adds	r3, #1
 8009038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800903c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29a      	uxth	r2, r3
 8009042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009046:	b29b      	uxth	r3, r3
 8009048:	029b      	lsls	r3, r3, #10
 800904a:	b29b      	uxth	r3, r3
 800904c:	4313      	orrs	r3, r2
 800904e:	b29a      	uxth	r2, r3
 8009050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	e03c      	b.n	80090d0 <USB_ActivateEndpoint+0x6ac>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	095b      	lsrs	r3, r3, #5
 800905c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	f003 031f 	and.w	r3, r3, #31
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <USB_ActivateEndpoint+0x652>
 800906c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009070:	3b01      	subs	r3, #1
 8009072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29a      	uxth	r2, r3
 800907c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009080:	b29b      	uxth	r3, r3
 8009082:	029b      	lsls	r3, r3, #10
 8009084:	b29b      	uxth	r3, r3
 8009086:	4313      	orrs	r3, r2
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009092:	b29a      	uxth	r2, r3
 8009094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009096:	801a      	strh	r2, [r3, #0]
 8009098:	e01a      	b.n	80090d0 <USB_ActivateEndpoint+0x6ac>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d116      	bne.n	80090d0 <USB_ActivateEndpoint+0x6ac>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090b2:	4413      	add	r3, r2
 80090b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	00da      	lsls	r2, r3, #3
 80090bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090be:	4413      	add	r3, r2
 80090c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d16b      	bne.n	80091b4 <USB_ActivateEndpoint+0x790>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ec:	4413      	add	r3, r2
 80090ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	00da      	lsls	r2, r3, #3
 80090f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f8:	4413      	add	r3, r2
 80090fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b29b      	uxth	r3, r3
 8009106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800910a:	b29a      	uxth	r2, r3
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	801a      	strh	r2, [r3, #0]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <USB_ActivateEndpoint+0x70a>
 8009118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29b      	uxth	r3, r3
 800911e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009126:	b29a      	uxth	r2, r3
 8009128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912a:	801a      	strh	r2, [r3, #0]
 800912c:	e05b      	b.n	80091e6 <USB_ActivateEndpoint+0x7c2>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b3e      	cmp	r3, #62	@ 0x3e
 8009134:	d81c      	bhi.n	8009170 <USB_ActivateEndpoint+0x74c>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <USB_ActivateEndpoint+0x732>
 800914c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009150:	3301      	adds	r3, #1
 8009152:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29a      	uxth	r2, r3
 800915c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009160:	b29b      	uxth	r3, r3
 8009162:	029b      	lsls	r3, r3, #10
 8009164:	b29b      	uxth	r3, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	b29a      	uxth	r2, r3
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	801a      	strh	r2, [r3, #0]
 800916e:	e03a      	b.n	80091e6 <USB_ActivateEndpoint+0x7c2>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	095b      	lsrs	r3, r3, #5
 8009176:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	f003 031f 	and.w	r3, r3, #31
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <USB_ActivateEndpoint+0x76c>
 8009186:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800918a:	3b01      	subs	r3, #1
 800918c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29a      	uxth	r2, r3
 8009196:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800919a:	b29b      	uxth	r3, r3
 800919c:	029b      	lsls	r3, r3, #10
 800919e:	b29b      	uxth	r3, r3
 80091a0:	4313      	orrs	r3, r2
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	e018      	b.n	80091e6 <USB_ActivateEndpoint+0x7c2>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d114      	bne.n	80091e6 <USB_ActivateEndpoint+0x7c2>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	461a      	mov	r2, r3
 80091c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091c8:	4413      	add	r3, r2
 80091ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	00da      	lsls	r2, r3, #3
 80091d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091d4:	4413      	add	r3, r2
 80091d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091da:	643b      	str	r3, [r7, #64]	@ 0x40
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80091fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009200:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009204:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009206:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009208:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800920c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	441a      	add	r2, r3
 8009218:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800921a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800921e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922a:	b29b      	uxth	r3, r3
 800922c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29b      	uxth	r3, r3
 800923c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009244:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	441a      	add	r2, r3
 8009250:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800925a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800925e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009262:	b29b      	uxth	r3, r3
 8009264:	8013      	strh	r3, [r2, #0]
 8009266:	e0bc      	b.n	80093e2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009278:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800927c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01d      	beq.n	80092c0 <USB_ActivateEndpoint+0x89c>
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800929a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	441a      	add	r2, r3
 80092a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80092ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092bc:	b29b      	uxth	r3, r3
 80092be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80092d0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80092d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01d      	beq.n	8009318 <USB_ActivateEndpoint+0x8f4>
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	441a      	add	r2, r3
 8009300:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800930c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009310:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009314:	b29b      	uxth	r3, r3
 8009316:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	78db      	ldrb	r3, [r3, #3]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d024      	beq.n	800936a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009336:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800933a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800933e:	f083 0320 	eor.w	r3, r3, #32
 8009342:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	441a      	add	r2, r3
 8009350:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800935c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009364:	b29b      	uxth	r3, r3
 8009366:	8013      	strh	r3, [r2, #0]
 8009368:	e01d      	b.n	80093a6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	b29b      	uxth	r3, r3
 8009378:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800937c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009380:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800939a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800939e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093bc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	441a      	add	r2, r3
 80093ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80093ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093de:	b29b      	uxth	r3, r3
 80093e0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80093e2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	379c      	adds	r7, #156	@ 0x9c
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop

080093f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b08d      	sub	sp, #52	@ 0x34
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	7b1b      	ldrb	r3, [r3, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f040 808e 	bne.w	8009524 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	785b      	ldrb	r3, [r3, #1]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d044      	beq.n	800949a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	81bb      	strh	r3, [r7, #12]
 800941e:	89bb      	ldrh	r3, [r7, #12]
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01b      	beq.n	8009460 <USB_DeactivateEndpoint+0x6c>
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800943a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943e:	817b      	strh	r3, [r7, #10]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	441a      	add	r2, r3
 800944a:	897b      	ldrh	r3, [r7, #10]
 800944c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009458:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800945c:	b29b      	uxth	r3, r3
 800945e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009476:	813b      	strh	r3, [r7, #8]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	441a      	add	r2, r3
 8009482:	893b      	ldrh	r3, [r7, #8]
 8009484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800948c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009494:	b29b      	uxth	r3, r3
 8009496:	8013      	strh	r3, [r2, #0]
 8009498:	e192      	b.n	80097c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	827b      	strh	r3, [r7, #18]
 80094a8:	8a7b      	ldrh	r3, [r7, #18]
 80094aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d01b      	beq.n	80094ea <USB_DeactivateEndpoint+0xf6>
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c8:	823b      	strh	r3, [r7, #16]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	441a      	add	r2, r3
 80094d4:	8a3b      	ldrh	r3, [r7, #16]
 80094d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009500:	81fb      	strh	r3, [r7, #14]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	441a      	add	r2, r3
 800950c:	89fb      	ldrh	r3, [r7, #14]
 800950e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800951a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800951e:	b29b      	uxth	r3, r3
 8009520:	8013      	strh	r3, [r2, #0]
 8009522:	e14d      	b.n	80097c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	2b00      	cmp	r3, #0
 800952a:	f040 80a5 	bne.w	8009678 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	843b      	strh	r3, [r7, #32]
 800953c:	8c3b      	ldrh	r3, [r7, #32]
 800953e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d01b      	beq.n	800957e <USB_DeactivateEndpoint+0x18a>
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955c:	83fb      	strh	r3, [r7, #30]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	441a      	add	r2, r3
 8009568:	8bfb      	ldrh	r3, [r7, #30]
 800956a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800956e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957a:	b29b      	uxth	r3, r3
 800957c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	83bb      	strh	r3, [r7, #28]
 800958c:	8bbb      	ldrh	r3, [r7, #28]
 800958e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009592:	2b00      	cmp	r3, #0
 8009594:	d01b      	beq.n	80095ce <USB_DeactivateEndpoint+0x1da>
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ac:	837b      	strh	r3, [r7, #26]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	441a      	add	r2, r3
 80095b8:	8b7b      	ldrh	r3, [r7, #26]
 80095ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e4:	833b      	strh	r3, [r7, #24]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	441a      	add	r2, r3
 80095f0:	8b3b      	ldrh	r3, [r7, #24]
 80095f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009602:	b29b      	uxth	r3, r3
 8009604:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	b29b      	uxth	r3, r3
 8009614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800961c:	82fb      	strh	r3, [r7, #22]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	441a      	add	r2, r3
 8009628:	8afb      	ldrh	r3, [r7, #22]
 800962a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800962e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800963a:	b29b      	uxth	r3, r3
 800963c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	b29b      	uxth	r3, r3
 800964c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009654:	82bb      	strh	r3, [r7, #20]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	441a      	add	r2, r3
 8009660:	8abb      	ldrh	r3, [r7, #20]
 8009662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800966a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800966e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009672:	b29b      	uxth	r3, r3
 8009674:	8013      	strh	r3, [r2, #0]
 8009676:	e0a3      	b.n	80097c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009686:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01b      	beq.n	80096c8 <USB_DeactivateEndpoint+0x2d4>
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	b29b      	uxth	r3, r3
 800969e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	441a      	add	r2, r3
 80096b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80096b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80096c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80096d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80096d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01b      	beq.n	8009718 <USB_DeactivateEndpoint+0x324>
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	441a      	add	r2, r3
 8009702:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800970c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009710:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009714:	b29b      	uxth	r3, r3
 8009716:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	b29b      	uxth	r3, r3
 8009726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800972a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800972e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	441a      	add	r2, r3
 800973a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800973c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800974c:	b29b      	uxth	r3, r3
 800974e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	b29b      	uxth	r3, r3
 800975e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009766:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	441a      	add	r2, r3
 8009772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800977c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009784:	b29b      	uxth	r3, r3
 8009786:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800979a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800979e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	441a      	add	r2, r3
 80097aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097bc:	b29b      	uxth	r3, r3
 80097be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3734      	adds	r7, #52	@ 0x34
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b0ac      	sub	sp, #176	@ 0xb0
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	785b      	ldrb	r3, [r3, #1]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	f040 84ca 	bne.w	800a176 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	699a      	ldr	r2, [r3, #24]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d904      	bls.n	80097f8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097f6:	e003      	b.n	8009800 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	7b1b      	ldrb	r3, [r3, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d122      	bne.n	800984e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	6959      	ldr	r1, [r3, #20]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	88da      	ldrh	r2, [r3, #6]
 8009810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009814:	b29b      	uxth	r3, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 febd 	bl	800a596 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009826:	b29b      	uxth	r3, r3
 8009828:	461a      	mov	r2, r3
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	4413      	add	r3, r2
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	00da      	lsls	r2, r3, #3
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	4413      	add	r3, r2
 800983a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009844:	b29a      	uxth	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	801a      	strh	r2, [r3, #0]
 800984a:	f000 bc6f 	b.w	800a12c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	78db      	ldrb	r3, [r3, #3]
 8009852:	2b02      	cmp	r3, #2
 8009854:	f040 831e 	bne.w	8009e94 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	6a1a      	ldr	r2, [r3, #32]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	429a      	cmp	r2, r3
 8009862:	f240 82cf 	bls.w	8009e04 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	b29b      	uxth	r3, r3
 8009874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800987c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	441a      	add	r2, r3
 800988a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800988e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009896:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800989a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800989e:	b29b      	uxth	r3, r3
 80098a0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6a1a      	ldr	r2, [r3, #32]
 80098a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098aa:	1ad2      	subs	r2, r2, r3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 814f 	beq.w	8009b66 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d16b      	bne.n	80099ac <USB_EPStartXfer+0x1de>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098de:	b29b      	uxth	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e4:	4413      	add	r3, r2
 80098e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	00da      	lsls	r2, r3, #3
 80098ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f0:	4413      	add	r3, r2
 80098f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009902:	b29a      	uxth	r2, r3
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <USB_EPStartXfer+0x158>
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800991a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800991e:	b29a      	uxth	r2, r3
 8009920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	e05b      	b.n	80099de <USB_EPStartXfer+0x210>
 8009926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800992a:	2b3e      	cmp	r3, #62	@ 0x3e
 800992c:	d81c      	bhi.n	8009968 <USB_EPStartXfer+0x19a>
 800992e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009932:	085b      	lsrs	r3, r3, #1
 8009934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <USB_EPStartXfer+0x180>
 8009944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009948:	3301      	adds	r3, #1
 800994a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29a      	uxth	r2, r3
 8009954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009958:	b29b      	uxth	r3, r3
 800995a:	029b      	lsls	r3, r3, #10
 800995c:	b29b      	uxth	r3, r3
 800995e:	4313      	orrs	r3, r2
 8009960:	b29a      	uxth	r2, r3
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	801a      	strh	r2, [r3, #0]
 8009966:	e03a      	b.n	80099de <USB_EPStartXfer+0x210>
 8009968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800996c:	095b      	lsrs	r3, r3, #5
 800996e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009976:	f003 031f 	and.w	r3, r3, #31
 800997a:	2b00      	cmp	r3, #0
 800997c:	d104      	bne.n	8009988 <USB_EPStartXfer+0x1ba>
 800997e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009982:	3b01      	subs	r3, #1
 8009984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29a      	uxth	r2, r3
 800998e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009992:	b29b      	uxth	r3, r3
 8009994:	029b      	lsls	r3, r3, #10
 8009996:	b29b      	uxth	r3, r3
 8009998:	4313      	orrs	r3, r2
 800999a:	b29b      	uxth	r3, r3
 800999c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	e018      	b.n	80099de <USB_EPStartXfer+0x210>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d114      	bne.n	80099de <USB_EPStartXfer+0x210>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	4413      	add	r3, r2
 80099c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	00da      	lsls	r2, r3, #3
 80099ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099cc:	4413      	add	r3, r2
 80099ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099d8:	b29a      	uxth	r2, r3
 80099da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	895b      	ldrh	r3, [r3, #10]
 80099e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	6959      	ldr	r1, [r3, #20]
 80099ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fdce 	bl	800a596 <USB_WritePMA>
            ep->xfer_buff += len;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	695a      	ldr	r2, [r3, #20]
 80099fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a02:	441a      	add	r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	6a1a      	ldr	r2, [r3, #32]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d907      	bls.n	8009a24 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6a1a      	ldr	r2, [r3, #32]
 8009a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a1c:	1ad2      	subs	r2, r2, r3
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	621a      	str	r2, [r3, #32]
 8009a22:	e006      	b.n	8009a32 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d16b      	bne.n	8009b12 <USB_EPStartXfer+0x344>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	61bb      	str	r3, [r7, #24]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	461a      	mov	r2, r3
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	61bb      	str	r3, [r7, #24]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	00da      	lsls	r2, r3, #3
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	4413      	add	r3, r2
 8009a58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	801a      	strh	r2, [r3, #0]
 8009a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <USB_EPStartXfer+0x2be>
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	801a      	strh	r2, [r3, #0]
 8009a8a:	e05d      	b.n	8009b48 <USB_EPStartXfer+0x37a>
 8009a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a90:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a92:	d81c      	bhi.n	8009ace <USB_EPStartXfer+0x300>
 8009a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <USB_EPStartXfer+0x2e6>
 8009aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009aae:	3301      	adds	r3, #1
 8009ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	029b      	lsls	r3, r3, #10
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	801a      	strh	r2, [r3, #0]
 8009acc:	e03c      	b.n	8009b48 <USB_EPStartXfer+0x37a>
 8009ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ad2:	095b      	lsrs	r3, r3, #5
 8009ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009adc:	f003 031f 	and.w	r3, r3, #31
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <USB_EPStartXfer+0x320>
 8009ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	029b      	lsls	r3, r3, #10
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	4313      	orrs	r3, r2
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	801a      	strh	r2, [r3, #0]
 8009b10:	e01a      	b.n	8009b48 <USB_EPStartXfer+0x37a>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d116      	bne.n	8009b48 <USB_EPStartXfer+0x37a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	623b      	str	r3, [r7, #32]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	461a      	mov	r2, r3
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	623b      	str	r3, [r7, #32]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	00da      	lsls	r2, r3, #3
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	4413      	add	r3, r2
 8009b38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b3c:	61fb      	str	r3, [r7, #28]
 8009b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	891b      	ldrh	r3, [r3, #8]
 8009b4c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	6959      	ldr	r1, [r3, #20]
 8009b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fd19 	bl	800a596 <USB_WritePMA>
 8009b64:	e2e2      	b.n	800a12c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	785b      	ldrb	r3, [r3, #1]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d16b      	bne.n	8009c46 <USB_EPStartXfer+0x478>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b7e:	4413      	add	r3, r2
 8009b80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	00da      	lsls	r2, r3, #3
 8009b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba0:	801a      	strh	r2, [r3, #0]
 8009ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10a      	bne.n	8009bc0 <USB_EPStartXfer+0x3f2>
 8009baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bbc:	801a      	strh	r2, [r3, #0]
 8009bbe:	e05d      	b.n	8009c7c <USB_EPStartXfer+0x4ae>
 8009bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bc6:	d81c      	bhi.n	8009c02 <USB_EPStartXfer+0x434>
 8009bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bcc:	085b      	lsrs	r3, r3, #1
 8009bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d004      	beq.n	8009be8 <USB_EPStartXfer+0x41a>
 8009bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009be2:	3301      	adds	r3, #1
 8009be4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	029b      	lsls	r3, r3, #10
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bfe:	801a      	strh	r2, [r3, #0]
 8009c00:	e03c      	b.n	8009c7c <USB_EPStartXfer+0x4ae>
 8009c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c06:	095b      	lsrs	r3, r3, #5
 8009c08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c10:	f003 031f 	and.w	r3, r3, #31
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d104      	bne.n	8009c22 <USB_EPStartXfer+0x454>
 8009c18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	029b      	lsls	r3, r3, #10
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4313      	orrs	r3, r2
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c42:	801a      	strh	r2, [r3, #0]
 8009c44:	e01a      	b.n	8009c7c <USB_EPStartXfer+0x4ae>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d116      	bne.n	8009c7c <USB_EPStartXfer+0x4ae>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c5e:	4413      	add	r3, r2
 8009c60:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	00da      	lsls	r2, r3, #3
 8009c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	6959      	ldr	r1, [r3, #20]
 8009c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fc7f 	bl	800a596 <USB_WritePMA>
            ep->xfer_buff += len;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	695a      	ldr	r2, [r3, #20]
 8009c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ca0:	441a      	add	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6a1a      	ldr	r2, [r3, #32]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d907      	bls.n	8009cc2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	6a1a      	ldr	r2, [r3, #32]
 8009cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cba:	1ad2      	subs	r2, r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	621a      	str	r2, [r3, #32]
 8009cc0:	e006      	b.n	8009cd0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	785b      	ldrb	r3, [r3, #1]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d16b      	bne.n	8009db4 <USB_EPStartXfer+0x5e6>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cec:	4413      	add	r3, r2
 8009cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	00da      	lsls	r2, r3, #3
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <USB_EPStartXfer+0x560>
 8009d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	e05b      	b.n	8009de6 <USB_EPStartXfer+0x618>
 8009d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d32:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d34:	d81c      	bhi.n	8009d70 <USB_EPStartXfer+0x5a2>
 8009d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d3a:	085b      	lsrs	r3, r3, #1
 8009d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <USB_EPStartXfer+0x588>
 8009d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d50:	3301      	adds	r3, #1
 8009d52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	029b      	lsls	r3, r3, #10
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	4313      	orrs	r3, r2
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	e03a      	b.n	8009de6 <USB_EPStartXfer+0x618>
 8009d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d74:	095b      	lsrs	r3, r3, #5
 8009d76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d7e:	f003 031f 	and.w	r3, r3, #31
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d104      	bne.n	8009d90 <USB_EPStartXfer+0x5c2>
 8009d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	029b      	lsls	r3, r3, #10
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	4313      	orrs	r3, r2
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009db0:	801a      	strh	r2, [r3, #0]
 8009db2:	e018      	b.n	8009de6 <USB_EPStartXfer+0x618>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d114      	bne.n	8009de6 <USB_EPStartXfer+0x618>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dc8:	4413      	add	r3, r2
 8009dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	00da      	lsls	r2, r3, #3
 8009dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	895b      	ldrh	r3, [r3, #10]
 8009dea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	6959      	ldr	r1, [r3, #20]
 8009df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fbca 	bl	800a596 <USB_WritePMA>
 8009e02:	e193      	b.n	800a12c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e22:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	441a      	add	r2, r3
 8009e30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009e34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e58:	4413      	add	r3, r2
 8009e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	00da      	lsls	r2, r3, #3
 8009e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e64:	4413      	add	r3, r2
 8009e66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	891b      	ldrh	r3, [r3, #8]
 8009e7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	6959      	ldr	r1, [r3, #20]
 8009e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fb82 	bl	800a596 <USB_WritePMA>
 8009e92:	e14b      	b.n	800a12c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	6a1a      	ldr	r2, [r3, #32]
 8009e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e9c:	1ad2      	subs	r2, r2, r3
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 809a 	beq.w	8009fee <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d16b      	bne.n	8009f9e <USB_EPStartXfer+0x7d0>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ed6:	4413      	add	r3, r2
 8009ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	00da      	lsls	r2, r3, #3
 8009ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ee8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009eea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10a      	bne.n	8009f18 <USB_EPStartXfer+0x74a>
 8009f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	e05b      	b.n	8009fd0 <USB_EPStartXfer+0x802>
 8009f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f1e:	d81c      	bhi.n	8009f5a <USB_EPStartXfer+0x78c>
 8009f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <USB_EPStartXfer+0x772>
 8009f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f56:	801a      	strh	r2, [r3, #0]
 8009f58:	e03a      	b.n	8009fd0 <USB_EPStartXfer+0x802>
 8009f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f68:	f003 031f 	and.w	r3, r3, #31
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <USB_EPStartXfer+0x7ac>
 8009f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f74:	3b01      	subs	r3, #1
 8009f76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	029b      	lsls	r3, r3, #10
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	e018      	b.n	8009fd0 <USB_EPStartXfer+0x802>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d114      	bne.n	8009fd0 <USB_EPStartXfer+0x802>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fb2:	4413      	add	r3, r2
 8009fb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	00da      	lsls	r2, r3, #3
 8009fbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	895b      	ldrh	r3, [r3, #10]
 8009fd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	6959      	ldr	r1, [r3, #20]
 8009fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fad5 	bl	800a596 <USB_WritePMA>
 8009fec:	e09e      	b.n	800a12c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	785b      	ldrb	r3, [r3, #1]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d16b      	bne.n	800a0ce <USB_EPStartXfer+0x900>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a000:	b29b      	uxth	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a006:	4413      	add	r3, r2
 800a008:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	00da      	lsls	r2, r3, #3
 800a010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a012:	4413      	add	r3, r2
 800a014:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a01a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a024:	b29a      	uxth	r2, r3
 800a026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a028:	801a      	strh	r2, [r3, #0]
 800a02a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <USB_EPStartXfer+0x87a>
 800a032:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a040:	b29a      	uxth	r2, r3
 800a042:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	e063      	b.n	800a110 <USB_EPStartXfer+0x942>
 800a048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a04c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a04e:	d81c      	bhi.n	800a08a <USB_EPStartXfer+0x8bc>
 800a050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a05a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <USB_EPStartXfer+0x8a2>
 800a066:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a06a:	3301      	adds	r3, #1
 800a06c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	b29a      	uxth	r2, r3
 800a076:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	029b      	lsls	r3, r3, #10
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4313      	orrs	r3, r2
 800a082:	b29a      	uxth	r2, r3
 800a084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a086:	801a      	strh	r2, [r3, #0]
 800a088:	e042      	b.n	800a110 <USB_EPStartXfer+0x942>
 800a08a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a08e:	095b      	lsrs	r3, r3, #5
 800a090:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a098:	f003 031f 	and.w	r3, r3, #31
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d104      	bne.n	800a0aa <USB_EPStartXfer+0x8dc>
 800a0a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a0aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	029b      	lsls	r3, r3, #10
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0ca:	801a      	strh	r2, [r3, #0]
 800a0cc:	e020      	b.n	800a110 <USB_EPStartXfer+0x942>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	785b      	ldrb	r3, [r3, #1]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d11c      	bne.n	800a110 <USB_EPStartXfer+0x942>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	00da      	lsls	r2, r3, #3
 800a0f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a108:	b29a      	uxth	r2, r3
 800a10a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a10e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	891b      	ldrh	r3, [r3, #8]
 800a114:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	6959      	ldr	r1, [r3, #20]
 800a11c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a120:	b29b      	uxth	r3, r3
 800a122:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa35 	bl	800a596 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	881b      	ldrh	r3, [r3, #0]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a13e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a142:	817b      	strh	r3, [r7, #10]
 800a144:	897b      	ldrh	r3, [r7, #10]
 800a146:	f083 0310 	eor.w	r3, r3, #16
 800a14a:	817b      	strh	r3, [r7, #10]
 800a14c:	897b      	ldrh	r3, [r7, #10]
 800a14e:	f083 0320 	eor.w	r3, r3, #32
 800a152:	817b      	strh	r3, [r7, #10]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	441a      	add	r2, r3
 800a15e:	897b      	ldrh	r3, [r7, #10]
 800a160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a16c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a170:	b29b      	uxth	r3, r3
 800a172:	8013      	strh	r3, [r2, #0]
 800a174:	e0d5      	b.n	800a322 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	7b1b      	ldrb	r3, [r3, #12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d156      	bne.n	800a22c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d122      	bne.n	800a1cc <USB_EPStartXfer+0x9fe>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	78db      	ldrb	r3, [r3, #3]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d11e      	bne.n	800a1cc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1a4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	441a      	add	r2, r3
 800a1b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a1b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1be:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	8013      	strh	r3, [r2, #0]
 800a1ca:	e01d      	b.n	800a208 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a1de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1e2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	441a      	add	r2, r3
 800a1f0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a1f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a204:	b29b      	uxth	r3, r3
 800a206:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	699a      	ldr	r2, [r3, #24]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	429a      	cmp	r2, r3
 800a212:	d907      	bls.n	800a224 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	1ad2      	subs	r2, r2, r3
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	619a      	str	r2, [r3, #24]
 800a222:	e054      	b.n	800a2ce <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2200      	movs	r2, #0
 800a228:	619a      	str	r2, [r3, #24]
 800a22a:	e050      	b.n	800a2ce <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	78db      	ldrb	r3, [r3, #3]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d142      	bne.n	800a2ba <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d048      	beq.n	800a2ce <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a24c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d005      	beq.n	800a264 <USB_EPStartXfer+0xa96>
 800a258:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10b      	bne.n	800a27c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a264:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d12e      	bne.n	800a2ce <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a270:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d128      	bne.n	800a2ce <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a292:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	441a      	add	r2, r3
 800a2a0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a2a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	8013      	strh	r3, [r2, #0]
 800a2b8:	e009      	b.n	800a2ce <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	78db      	ldrb	r3, [r3, #3]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d103      	bne.n	800a2ca <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	619a      	str	r2, [r3, #24]
 800a2c8:	e001      	b.n	800a2ce <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e02a      	b.n	800a324 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a2e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a2ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a2f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a2f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a2f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a2fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	441a      	add	r2, r3
 800a30a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a30e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a31e:	b29b      	uxth	r3, r3
 800a320:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	37b0      	adds	r7, #176	@ 0xb0
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d020      	beq.n	800a380 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a354:	81bb      	strh	r3, [r7, #12]
 800a356:	89bb      	ldrh	r3, [r7, #12]
 800a358:	f083 0310 	eor.w	r3, r3, #16
 800a35c:	81bb      	strh	r3, [r7, #12]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	441a      	add	r2, r3
 800a368:	89bb      	ldrh	r3, [r7, #12]
 800a36a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a36e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	8013      	strh	r3, [r2, #0]
 800a37e:	e01f      	b.n	800a3c0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a396:	81fb      	strh	r3, [r7, #14]
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a39e:	81fb      	strh	r3, [r7, #14]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	441a      	add	r2, r3
 800a3aa:	89fb      	ldrh	r3, [r7, #14]
 800a3ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b087      	sub	sp, #28
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	785b      	ldrb	r3, [r3, #1]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d04c      	beq.n	800a47a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	823b      	strh	r3, [r7, #16]
 800a3ee:	8a3b      	ldrh	r3, [r7, #16]
 800a3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01b      	beq.n	800a430 <USB_EPClearStall+0x62>
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	b29b      	uxth	r3, r3
 800a406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a40a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a40e:	81fb      	strh	r3, [r7, #14]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	441a      	add	r2, r3
 800a41a:	89fb      	ldrh	r3, [r7, #14]
 800a41c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a428:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	78db      	ldrb	r3, [r3, #3]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d06c      	beq.n	800a512 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a44a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a44e:	81bb      	strh	r3, [r7, #12]
 800a450:	89bb      	ldrh	r3, [r7, #12]
 800a452:	f083 0320 	eor.w	r3, r3, #32
 800a456:	81bb      	strh	r3, [r7, #12]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	441a      	add	r2, r3
 800a462:	89bb      	ldrh	r3, [r7, #12]
 800a464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a46c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a474:	b29b      	uxth	r3, r3
 800a476:	8013      	strh	r3, [r2, #0]
 800a478:	e04b      	b.n	800a512 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	82fb      	strh	r3, [r7, #22]
 800a488:	8afb      	ldrh	r3, [r7, #22]
 800a48a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01b      	beq.n	800a4ca <USB_EPClearStall+0xfc>
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4a8:	82bb      	strh	r3, [r7, #20]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	441a      	add	r2, r3
 800a4b4:	8abb      	ldrh	r3, [r7, #20]
 800a4b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4e0:	827b      	strh	r3, [r7, #18]
 800a4e2:	8a7b      	ldrh	r3, [r7, #18]
 800a4e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a4e8:	827b      	strh	r3, [r7, #18]
 800a4ea:	8a7b      	ldrh	r3, [r7, #18]
 800a4ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a4f0:	827b      	strh	r3, [r7, #18]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	441a      	add	r2, r3
 800a4fc:	8a7b      	ldrh	r3, [r7, #18]
 800a4fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a50e:	b29b      	uxth	r3, r3
 800a510:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d103      	bne.n	800a53a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2280      	movs	r2, #128	@ 0x80
 800a536:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a556:	b29b      	uxth	r3, r3
 800a558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a55c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a560:	b29a      	uxth	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a576:	b480      	push	{r7}
 800a578:	b085      	sub	sp, #20
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a584:	b29b      	uxth	r3, r3
 800a586:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a588:	68fb      	ldr	r3, [r7, #12]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a596:	b480      	push	{r7}
 800a598:	b08b      	sub	sp, #44	@ 0x2c
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	80fb      	strh	r3, [r7, #6]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a5ac:	88bb      	ldrh	r3, [r7, #4]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	085b      	lsrs	r3, r3, #1
 800a5b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5bc:	88fa      	ldrh	r2, [r7, #6]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5cc:	e01c      	b.n	800a608 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	b21b      	sxth	r3, r3
 800a5dc:	021b      	lsls	r3, r3, #8
 800a5de:	b21a      	sxth	r2, r3
 800a5e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	8a7a      	ldrh	r2, [r7, #18]
 800a5ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	3302      	adds	r3, #2
 800a5f4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	3301      	adds	r3, #1
 800a600:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	3b01      	subs	r3, #1
 800a606:	627b      	str	r3, [r7, #36]	@ 0x24
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1df      	bne.n	800a5ce <USB_WritePMA+0x38>
  }
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	372c      	adds	r7, #44	@ 0x2c
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b08b      	sub	sp, #44	@ 0x2c
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4611      	mov	r1, r2
 800a628:	461a      	mov	r2, r3
 800a62a:	460b      	mov	r3, r1
 800a62c:	80fb      	strh	r3, [r7, #6]
 800a62e:	4613      	mov	r3, r2
 800a630:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a632:	88bb      	ldrh	r3, [r7, #4]
 800a634:	085b      	lsrs	r3, r3, #1
 800a636:	b29b      	uxth	r3, r3
 800a638:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a642:	88fa      	ldrh	r2, [r7, #6]
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a64c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	627b      	str	r3, [r7, #36]	@ 0x24
 800a652:	e018      	b.n	800a686 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	3302      	adds	r3, #2
 800a660:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	b2da      	uxtb	r2, r3
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	3301      	adds	r3, #1
 800a66e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	b2da      	uxtb	r2, r3
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	3301      	adds	r3, #1
 800a67e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	3b01      	subs	r3, #1
 800a684:	627b      	str	r3, [r7, #36]	@ 0x24
 800a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e3      	bne.n	800a654 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a68c:	88bb      	ldrh	r3, [r7, #4]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	b29b      	uxth	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	701a      	strb	r2, [r3, #0]
  }
}
 800a6a8:	bf00      	nop
 800a6aa:	372c      	adds	r7, #44	@ 0x2c
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a6c0:	2010      	movs	r0, #16
 800a6c2:	f001 fe3d 	bl	800c340 <USBD_static_malloc>
 800a6c6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d105      	bne.n	800a6da <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e01b      	b.n	800a712 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	7c1b      	ldrb	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d103      	bne.n	800a6f2 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2207      	movs	r2, #7
 800a6ee:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800a6f0:	e002      	b.n	800a6f8 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	2203      	movs	r2, #3
 800a6fc:	2181      	movs	r1, #129	@ 0x81
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 fd0d 	bl	800c11e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a726:	2181      	movs	r1, #129	@ 0x81
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f001 fd1e 	bl	800c16a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a740:	2b00      	cmp	r3, #0
 800a742:	d009      	beq.n	800a758 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 fe06 	bl	800c35c <USBD_static_free>
    pdev->pClassData = NULL;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a774:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a784:	2303      	movs	r3, #3
 800a786:	e0e8      	b.n	800a95a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a790:	2b00      	cmp	r3, #0
 800a792:	d046      	beq.n	800a822 <USBD_HID_Setup+0xbe>
 800a794:	2b20      	cmp	r3, #32
 800a796:	f040 80d8 	bne.w	800a94a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	3b02      	subs	r3, #2
 800a7a0:	2b09      	cmp	r3, #9
 800a7a2:	d836      	bhi.n	800a812 <USBD_HID_Setup+0xae>
 800a7a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7ac <USBD_HID_Setup+0x48>)
 800a7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7aa:	bf00      	nop
 800a7ac:	0800a803 	.word	0x0800a803
 800a7b0:	0800a7e3 	.word	0x0800a7e3
 800a7b4:	0800a813 	.word	0x0800a813
 800a7b8:	0800a813 	.word	0x0800a813
 800a7bc:	0800a813 	.word	0x0800a813
 800a7c0:	0800a813 	.word	0x0800a813
 800a7c4:	0800a813 	.word	0x0800a813
 800a7c8:	0800a813 	.word	0x0800a813
 800a7cc:	0800a7f1 	.word	0x0800a7f1
 800a7d0:	0800a7d5 	.word	0x0800a7d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	885b      	ldrh	r3, [r3, #2]
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	601a      	str	r2, [r3, #0]
          break;
 800a7e0:	e01e      	b.n	800a820 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 f9b0 	bl	800bb4e <USBD_CtlSendData>
          break;
 800a7ee:	e017      	b.n	800a820 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	885b      	ldrh	r3, [r3, #2]
 800a7f4:	0a1b      	lsrs	r3, r3, #8
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	605a      	str	r2, [r3, #4]
          break;
 800a800:	e00e      	b.n	800a820 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3304      	adds	r3, #4
 800a806:	2201      	movs	r2, #1
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 f99f 	bl	800bb4e <USBD_CtlSendData>
          break;
 800a810:	e006      	b.n	800a820 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 f929 	bl	800ba6c <USBD_CtlError>
          ret = USBD_FAIL;
 800a81a:	2303      	movs	r3, #3
 800a81c:	75fb      	strb	r3, [r7, #23]
          break;
 800a81e:	bf00      	nop
      }
      break;
 800a820:	e09a      	b.n	800a958 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	2b0b      	cmp	r3, #11
 800a828:	f200 8086 	bhi.w	800a938 <USBD_HID_Setup+0x1d4>
 800a82c:	a201      	add	r2, pc, #4	@ (adr r2, 800a834 <USBD_HID_Setup+0xd0>)
 800a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a832:	bf00      	nop
 800a834:	0800a865 	.word	0x0800a865
 800a838:	0800a947 	.word	0x0800a947
 800a83c:	0800a939 	.word	0x0800a939
 800a840:	0800a939 	.word	0x0800a939
 800a844:	0800a939 	.word	0x0800a939
 800a848:	0800a939 	.word	0x0800a939
 800a84c:	0800a88f 	.word	0x0800a88f
 800a850:	0800a939 	.word	0x0800a939
 800a854:	0800a939 	.word	0x0800a939
 800a858:	0800a939 	.word	0x0800a939
 800a85c:	0800a8e7 	.word	0x0800a8e7
 800a860:	0800a911 	.word	0x0800a911
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d107      	bne.n	800a880 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a870:	f107 030a 	add.w	r3, r7, #10
 800a874:	2202      	movs	r2, #2
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 f968 	bl	800bb4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a87e:	e063      	b.n	800a948 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f8f2 	bl	800ba6c <USBD_CtlError>
            ret = USBD_FAIL;
 800a888:	2303      	movs	r3, #3
 800a88a:	75fb      	strb	r3, [r7, #23]
          break;
 800a88c:	e05c      	b.n	800a948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	885b      	ldrh	r3, [r3, #2]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	b29b      	uxth	r3, r3
 800a896:	2b22      	cmp	r3, #34	@ 0x22
 800a898:	d108      	bne.n	800a8ac <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	88db      	ldrh	r3, [r3, #6]
 800a89e:	2b4a      	cmp	r3, #74	@ 0x4a
 800a8a0:	bf28      	it	cs
 800a8a2:	234a      	movcs	r3, #74	@ 0x4a
 800a8a4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a8a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a964 <USBD_HID_Setup+0x200>)
 800a8a8:	613b      	str	r3, [r7, #16]
 800a8aa:	e015      	b.n	800a8d8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	885b      	ldrh	r3, [r3, #2]
 800a8b0:	0a1b      	lsrs	r3, r3, #8
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	2b21      	cmp	r3, #33	@ 0x21
 800a8b6:	d108      	bne.n	800a8ca <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800a8b8:	4b2b      	ldr	r3, [pc, #172]	@ (800a968 <USBD_HID_Setup+0x204>)
 800a8ba:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	88db      	ldrh	r3, [r3, #6]
 800a8c0:	2b09      	cmp	r3, #9
 800a8c2:	bf28      	it	cs
 800a8c4:	2309      	movcs	r3, #9
 800a8c6:	82bb      	strh	r3, [r7, #20]
 800a8c8:	e006      	b.n	800a8d8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 f8cd 	bl	800ba6c <USBD_CtlError>
            ret = USBD_FAIL;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	75fb      	strb	r3, [r7, #23]
            break;
 800a8d6:	e037      	b.n	800a948 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8d8:	8abb      	ldrh	r3, [r7, #20]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	6939      	ldr	r1, [r7, #16]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f001 f935 	bl	800bb4e <USBD_CtlSendData>
          break;
 800a8e4:	e030      	b.n	800a948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d107      	bne.n	800a902 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f001 f927 	bl	800bb4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a900:	e022      	b.n	800a948 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f001 f8b1 	bl	800ba6c <USBD_CtlError>
            ret = USBD_FAIL;
 800a90a:	2303      	movs	r3, #3
 800a90c:	75fb      	strb	r3, [r7, #23]
          break;
 800a90e:	e01b      	b.n	800a948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b03      	cmp	r3, #3
 800a91a:	d106      	bne.n	800a92a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	885b      	ldrh	r3, [r3, #2]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	461a      	mov	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a928:	e00e      	b.n	800a948 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 f89d 	bl	800ba6c <USBD_CtlError>
            ret = USBD_FAIL;
 800a932:	2303      	movs	r3, #3
 800a934:	75fb      	strb	r3, [r7, #23]
          break;
 800a936:	e007      	b.n	800a948 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f001 f896 	bl	800ba6c <USBD_CtlError>
          ret = USBD_FAIL;
 800a940:	2303      	movs	r3, #3
 800a942:	75fb      	strb	r3, [r7, #23]
          break;
 800a944:	e000      	b.n	800a948 <USBD_HID_Setup+0x1e4>
          break;
 800a946:	bf00      	nop
      }
      break;
 800a948:	e006      	b.n	800a958 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 f88d 	bl	800ba6c <USBD_CtlError>
      ret = USBD_FAIL;
 800a952:	2303      	movs	r3, #3
 800a954:	75fb      	strb	r3, [r7, #23]
      break;
 800a956:	bf00      	nop
  }

  return (uint8_t)ret;
 800a958:	7dfb      	ldrb	r3, [r7, #23]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	200000cc 	.word	0x200000cc
 800a968:	200000b4 	.word	0x200000b4

0800a96c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a980:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800a988:	2303      	movs	r3, #3
 800a98a:	e013      	b.n	800a9b4 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b03      	cmp	r3, #3
 800a996:	d10c      	bne.n	800a9b2 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	7b1b      	ldrb	r3, [r3, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d108      	bne.n	800a9b2 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800a9a6:	88fb      	ldrh	r3, [r7, #6]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	2181      	movs	r1, #129	@ 0x81
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f001 fc84 	bl	800c2ba <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2222      	movs	r2, #34	@ 0x22
 800a9c8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800a9ca:	4b03      	ldr	r3, [pc, #12]	@ (800a9d8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	20000048 	.word	0x20000048

0800a9dc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2222      	movs	r2, #34	@ 0x22
 800a9e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800a9ea:	4b03      	ldr	r3, [pc, #12]	@ (800a9f8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	2000006c 	.word	0x2000006c

0800a9fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2222      	movs	r2, #34	@ 0x22
 800aa08:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800aa0a:	4b03      	ldr	r3, [pc, #12]	@ (800aa18 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	20000090 	.word	0x20000090

0800aa1c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa2e:	2200      	movs	r2, #0
 800aa30:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	220a      	movs	r2, #10
 800aa4c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800aa4e:	4b03      	ldr	r3, [pc, #12]	@ (800aa5c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	200000c0 	.word	0x200000c0

0800aa60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e01f      	b.n	800aab8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	79fa      	ldrb	r2, [r7, #7]
 800aaaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f001 facd 	bl	800c04c <USBD_LL_Init>
 800aab2:	4603      	mov	r3, r0
 800aab4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e016      	b.n	800ab06 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00b      	beq.n	800ab04 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf4:	f107 020e 	add.w	r2, r7, #14
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	4602      	mov	r2, r0
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 fae6 	bl	800c0e8 <USBD_LL_Start>
 800ab1c:	4603      	mov	r3, r0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	78fa      	ldrb	r2, [r7, #3]
 800ab60:	4611      	mov	r1, r2
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	78fa      	ldrb	r2, [r7, #3]
 800ab94:	4611      	mov	r1, r2
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
  }

  return USBD_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 ff1e 	bl	800b9f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800abca:	461a      	mov	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800abd8:	f003 031f 	and.w	r3, r3, #31
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d01a      	beq.n	800ac16 <USBD_LL_SetupStage+0x72>
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d822      	bhi.n	800ac2a <USBD_LL_SetupStage+0x86>
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <USBD_LL_SetupStage+0x4a>
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d00a      	beq.n	800ac02 <USBD_LL_SetupStage+0x5e>
 800abec:	e01d      	b.n	800ac2a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abf4:	4619      	mov	r1, r3
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f9f0 	bl	800afdc <USBD_StdDevReq>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ac00:	e020      	b.n	800ac44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa54 	bl	800b0b8 <USBD_StdItfReq>
 800ac10:	4603      	mov	r3, r0
 800ac12:	73fb      	strb	r3, [r7, #15]
      break;
 800ac14:	e016      	b.n	800ac44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fa93 	bl	800b14a <USBD_StdEPReq>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]
      break;
 800ac28:	e00c      	b.n	800ac44 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 fab5 	bl	800c1a8 <USBD_LL_StallEP>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
      break;
 800ac42:	bf00      	nop
  }

  return ret;
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b086      	sub	sp, #24
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	460b      	mov	r3, r1
 800ac58:	607a      	str	r2, [r7, #4]
 800ac5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac5c:	7afb      	ldrb	r3, [r7, #11]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d138      	bne.n	800acd4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ac68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac70:	2b03      	cmp	r3, #3
 800ac72:	d14a      	bne.n	800ad0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d913      	bls.n	800aca8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	1ad2      	subs	r2, r2, r3
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	68da      	ldr	r2, [r3, #12]
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	4293      	cmp	r3, r2
 800ac98:	bf28      	it	cs
 800ac9a:	4613      	movcs	r3, r2
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 ff80 	bl	800bba6 <USBD_CtlContinueRx>
 800aca6:	e030      	b.n	800ad0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d10b      	bne.n	800accc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d005      	beq.n	800accc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 ff7b 	bl	800bbc8 <USBD_CtlSendStatus>
 800acd2:	e01a      	b.n	800ad0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b03      	cmp	r3, #3
 800acde:	d114      	bne.n	800ad0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00e      	beq.n	800ad0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	7afa      	ldrb	r2, [r7, #11]
 800acf6:	4611      	mov	r1, r2
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	4798      	blx	r3
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	e000      	b.n	800ad0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad22:	7afb      	ldrb	r3, [r7, #11]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d16b      	bne.n	800ae00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3314      	adds	r3, #20
 800ad2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d156      	bne.n	800ade6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d914      	bls.n	800ad6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	689a      	ldr	r2, [r3, #8]
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	1ad2      	subs	r2, r2, r3
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	461a      	mov	r2, r3
 800ad58:	6879      	ldr	r1, [r7, #4]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 ff12 	bl	800bb84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad60:	2300      	movs	r3, #0
 800ad62:	2200      	movs	r2, #0
 800ad64:	2100      	movs	r1, #0
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f001 fac8 	bl	800c2fc <USBD_LL_PrepareReceive>
 800ad6c:	e03b      	b.n	800ade6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d11c      	bne.n	800adb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d316      	bcc.n	800adb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d20f      	bcs.n	800adb4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad94:	2200      	movs	r2, #0
 800ad96:	2100      	movs	r1, #0
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 fef3 	bl	800bb84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ada6:	2300      	movs	r3, #0
 800ada8:	2200      	movs	r2, #0
 800adaa:	2100      	movs	r1, #0
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f001 faa5 	bl	800c2fc <USBD_LL_PrepareReceive>
 800adb2:	e018      	b.n	800ade6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b03      	cmp	r3, #3
 800adbe:	d10b      	bne.n	800add8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800add8:	2180      	movs	r1, #128	@ 0x80
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f001 f9e4 	bl	800c1a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 ff04 	bl	800bbee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800adec:	2b01      	cmp	r3, #1
 800adee:	d122      	bne.n	800ae36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f7ff fe98 	bl	800ab26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800adfe:	e01a      	b.n	800ae36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d114      	bne.n	800ae36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00e      	beq.n	800ae36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	7afa      	ldrb	r2, [r7, #11]
 800ae22:	4611      	mov	r1, r2
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	4798      	blx	r3
 800ae28:	4603      	mov	r3, r0
 800ae2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	e000      	b.n	800ae38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e02f      	b.n	800aed4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00f      	beq.n	800ae9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d009      	beq.n	800ae9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	6852      	ldr	r2, [r2, #4]
 800ae96:	b2d2      	uxtb	r2, r2
 800ae98:	4611      	mov	r1, r2
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae9e:	2340      	movs	r3, #64	@ 0x40
 800aea0:	2200      	movs	r2, #0
 800aea2:	2100      	movs	r1, #0
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 f93a 	bl	800c11e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2240      	movs	r2, #64	@ 0x40
 800aeb6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aeba:	2340      	movs	r3, #64	@ 0x40
 800aebc:	2200      	movs	r2, #0
 800aebe:	2180      	movs	r1, #128	@ 0x80
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 f92c 	bl	800c11e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2240      	movs	r2, #64	@ 0x40
 800aed0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	78fa      	ldrb	r2, [r7, #3]
 800aeec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2204      	movs	r2, #4
 800af16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d106      	bne.n	800af4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800af42:	b2da      	uxtb	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e012      	b.n	800af94 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b03      	cmp	r3, #3
 800af78:	d10b      	bne.n	800af92 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	3301      	adds	r3, #1
 800afb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800afba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	b21a      	sxth	r2, r3
 800afc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	b21b      	sxth	r3, r3
 800afca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800afcc:	89fb      	ldrh	r3, [r7, #14]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aff2:	2b40      	cmp	r3, #64	@ 0x40
 800aff4:	d005      	beq.n	800b002 <USBD_StdDevReq+0x26>
 800aff6:	2b40      	cmp	r3, #64	@ 0x40
 800aff8:	d853      	bhi.n	800b0a2 <USBD_StdDevReq+0xc6>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00b      	beq.n	800b016 <USBD_StdDevReq+0x3a>
 800affe:	2b20      	cmp	r3, #32
 800b000:	d14f      	bne.n	800b0a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	4798      	blx	r3
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
      break;
 800b014:	e04a      	b.n	800b0ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	785b      	ldrb	r3, [r3, #1]
 800b01a:	2b09      	cmp	r3, #9
 800b01c:	d83b      	bhi.n	800b096 <USBD_StdDevReq+0xba>
 800b01e:	a201      	add	r2, pc, #4	@ (adr r2, 800b024 <USBD_StdDevReq+0x48>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b079 	.word	0x0800b079
 800b028:	0800b08d 	.word	0x0800b08d
 800b02c:	0800b097 	.word	0x0800b097
 800b030:	0800b083 	.word	0x0800b083
 800b034:	0800b097 	.word	0x0800b097
 800b038:	0800b057 	.word	0x0800b057
 800b03c:	0800b04d 	.word	0x0800b04d
 800b040:	0800b097 	.word	0x0800b097
 800b044:	0800b06f 	.word	0x0800b06f
 800b048:	0800b061 	.word	0x0800b061
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f9de 	bl	800b410 <USBD_GetDescriptor>
          break;
 800b054:	e024      	b.n	800b0a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fb43 	bl	800b6e4 <USBD_SetAddress>
          break;
 800b05e:	e01f      	b.n	800b0a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fb82 	bl	800b76c <USBD_SetConfig>
 800b068:	4603      	mov	r3, r0
 800b06a:	73fb      	strb	r3, [r7, #15]
          break;
 800b06c:	e018      	b.n	800b0a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fc21 	bl	800b8b8 <USBD_GetConfig>
          break;
 800b076:	e013      	b.n	800b0a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fc52 	bl	800b924 <USBD_GetStatus>
          break;
 800b080:	e00e      	b.n	800b0a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fc81 	bl	800b98c <USBD_SetFeature>
          break;
 800b08a:	e009      	b.n	800b0a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fc90 	bl	800b9b4 <USBD_ClrFeature>
          break;
 800b094:	e004      	b.n	800b0a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fce7 	bl	800ba6c <USBD_CtlError>
          break;
 800b09e:	bf00      	nop
      }
      break;
 800b0a0:	e004      	b.n	800b0ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fce1 	bl	800ba6c <USBD_CtlError>
      break;
 800b0aa:	bf00      	nop
  }

  return ret;
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop

0800b0b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0ce:	2b40      	cmp	r3, #64	@ 0x40
 800b0d0:	d005      	beq.n	800b0de <USBD_StdItfReq+0x26>
 800b0d2:	2b40      	cmp	r3, #64	@ 0x40
 800b0d4:	d82f      	bhi.n	800b136 <USBD_StdItfReq+0x7e>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <USBD_StdItfReq+0x26>
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d12b      	bne.n	800b136 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d81d      	bhi.n	800b128 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	889b      	ldrh	r3, [r3, #4]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d813      	bhi.n	800b11e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	4798      	blx	r3
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	88db      	ldrh	r3, [r3, #6]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d110      	bne.n	800b132 <USBD_StdItfReq+0x7a>
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10d      	bne.n	800b132 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fd56 	bl	800bbc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b11c:	e009      	b.n	800b132 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fca3 	bl	800ba6c <USBD_CtlError>
          break;
 800b126:	e004      	b.n	800b132 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fc9e 	bl	800ba6c <USBD_CtlError>
          break;
 800b130:	e000      	b.n	800b134 <USBD_StdItfReq+0x7c>
          break;
 800b132:	bf00      	nop
      }
      break;
 800b134:	e004      	b.n	800b140 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fc97 	bl	800ba6c <USBD_CtlError>
      break;
 800b13e:	bf00      	nop
  }

  return ret;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	889b      	ldrh	r3, [r3, #4]
 800b15c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b166:	2b40      	cmp	r3, #64	@ 0x40
 800b168:	d007      	beq.n	800b17a <USBD_StdEPReq+0x30>
 800b16a:	2b40      	cmp	r3, #64	@ 0x40
 800b16c:	f200 8145 	bhi.w	800b3fa <USBD_StdEPReq+0x2b0>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00c      	beq.n	800b18e <USBD_StdEPReq+0x44>
 800b174:	2b20      	cmp	r3, #32
 800b176:	f040 8140 	bne.w	800b3fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
 800b188:	4603      	mov	r3, r0
 800b18a:	73fb      	strb	r3, [r7, #15]
      break;
 800b18c:	e13a      	b.n	800b404 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	785b      	ldrb	r3, [r3, #1]
 800b192:	2b03      	cmp	r3, #3
 800b194:	d007      	beq.n	800b1a6 <USBD_StdEPReq+0x5c>
 800b196:	2b03      	cmp	r3, #3
 800b198:	f300 8129 	bgt.w	800b3ee <USBD_StdEPReq+0x2a4>
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d07f      	beq.n	800b2a0 <USBD_StdEPReq+0x156>
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d03c      	beq.n	800b21e <USBD_StdEPReq+0xd4>
 800b1a4:	e123      	b.n	800b3ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d002      	beq.n	800b1b8 <USBD_StdEPReq+0x6e>
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d016      	beq.n	800b1e4 <USBD_StdEPReq+0x9a>
 800b1b6:	e02c      	b.n	800b212 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00d      	beq.n	800b1da <USBD_StdEPReq+0x90>
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	2b80      	cmp	r3, #128	@ 0x80
 800b1c2:	d00a      	beq.n	800b1da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 ffed 	bl	800c1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1ce:	2180      	movs	r1, #128	@ 0x80
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 ffe9 	bl	800c1a8 <USBD_LL_StallEP>
 800b1d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1d8:	e020      	b.n	800b21c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fc45 	bl	800ba6c <USBD_CtlError>
              break;
 800b1e2:	e01b      	b.n	800b21c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	885b      	ldrh	r3, [r3, #2]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10e      	bne.n	800b20a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00b      	beq.n	800b20a <USBD_StdEPReq+0xc0>
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	2b80      	cmp	r3, #128	@ 0x80
 800b1f6:	d008      	beq.n	800b20a <USBD_StdEPReq+0xc0>
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	88db      	ldrh	r3, [r3, #6]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d104      	bne.n	800b20a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 ffcf 	bl	800c1a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fcdc 	bl	800bbc8 <USBD_CtlSendStatus>

              break;
 800b210:	e004      	b.n	800b21c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fc29 	bl	800ba6c <USBD_CtlError>
              break;
 800b21a:	bf00      	nop
          }
          break;
 800b21c:	e0ec      	b.n	800b3f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b02      	cmp	r3, #2
 800b228:	d002      	beq.n	800b230 <USBD_StdEPReq+0xe6>
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	d016      	beq.n	800b25c <USBD_StdEPReq+0x112>
 800b22e:	e030      	b.n	800b292 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b230:	7bbb      	ldrb	r3, [r7, #14]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00d      	beq.n	800b252 <USBD_StdEPReq+0x108>
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	2b80      	cmp	r3, #128	@ 0x80
 800b23a:	d00a      	beq.n	800b252 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 ffb1 	bl	800c1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b246:	2180      	movs	r1, #128	@ 0x80
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 ffad 	bl	800c1a8 <USBD_LL_StallEP>
 800b24e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b250:	e025      	b.n	800b29e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fc09 	bl	800ba6c <USBD_CtlError>
              break;
 800b25a:	e020      	b.n	800b29e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	885b      	ldrh	r3, [r3, #2]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11b      	bne.n	800b29c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d004      	beq.n	800b278 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 ffb7 	bl	800c1e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fca5 	bl	800bbc8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	4798      	blx	r3
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b290:	e004      	b.n	800b29c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fbe9 	bl	800ba6c <USBD_CtlError>
              break;
 800b29a:	e000      	b.n	800b29e <USBD_StdEPReq+0x154>
              break;
 800b29c:	bf00      	nop
          }
          break;
 800b29e:	e0ab      	b.n	800b3f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d002      	beq.n	800b2b2 <USBD_StdEPReq+0x168>
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d032      	beq.n	800b316 <USBD_StdEPReq+0x1cc>
 800b2b0:	e097      	b.n	800b3e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d007      	beq.n	800b2c8 <USBD_StdEPReq+0x17e>
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	2b80      	cmp	r3, #128	@ 0x80
 800b2bc:	d004      	beq.n	800b2c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fbd3 	bl	800ba6c <USBD_CtlError>
                break;
 800b2c6:	e091      	b.n	800b3ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	da0b      	bge.n	800b2e8 <USBD_StdEPReq+0x19e>
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	3310      	adds	r3, #16
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	e00b      	b.n	800b300 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2e8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	3304      	adds	r3, #4
 800b300:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2202      	movs	r2, #2
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fc1d 	bl	800bb4e <USBD_CtlSendData>
              break;
 800b314:	e06a      	b.n	800b3ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	da11      	bge.n	800b342 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	f003 020f 	and.w	r2, r3, #15
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	440b      	add	r3, r1
 800b330:	3324      	adds	r3, #36	@ 0x24
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d117      	bne.n	800b368 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fb96 	bl	800ba6c <USBD_CtlError>
                  break;
 800b340:	e054      	b.n	800b3ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	f003 020f 	and.w	r2, r3, #15
 800b348:	6879      	ldr	r1, [r7, #4]
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	440b      	add	r3, r1
 800b354:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d104      	bne.n	800b368 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fb83 	bl	800ba6c <USBD_CtlError>
                  break;
 800b366:	e041      	b.n	800b3ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	da0b      	bge.n	800b388 <USBD_StdEPReq+0x23e>
 800b370:	7bbb      	ldrb	r3, [r7, #14]
 800b372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	3310      	adds	r3, #16
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	4413      	add	r3, r2
 800b384:	3304      	adds	r3, #4
 800b386:	e00b      	b.n	800b3a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	4413      	add	r3, r2
 800b39e:	3304      	adds	r3, #4
 800b3a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3a2:	7bbb      	ldrb	r3, [r7, #14]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <USBD_StdEPReq+0x264>
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	2b80      	cmp	r3, #128	@ 0x80
 800b3ac:	d103      	bne.n	800b3b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	e00e      	b.n	800b3d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3b6:	7bbb      	ldrb	r3, [r7, #14]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 ff32 	bl	800c224 <USBD_LL_IsStallEP>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	e002      	b.n	800b3d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fbb7 	bl	800bb4e <USBD_CtlSendData>
              break;
 800b3e0:	e004      	b.n	800b3ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fb41 	bl	800ba6c <USBD_CtlError>
              break;
 800b3ea:	bf00      	nop
          }
          break;
 800b3ec:	e004      	b.n	800b3f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fb3b 	bl	800ba6c <USBD_CtlError>
          break;
 800b3f6:	bf00      	nop
      }
      break;
 800b3f8:	e004      	b.n	800b404 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fb35 	bl	800ba6c <USBD_CtlError>
      break;
 800b402:	bf00      	nop
  }

  return ret;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b41a:	2300      	movs	r3, #0
 800b41c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b422:	2300      	movs	r3, #0
 800b424:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	885b      	ldrh	r3, [r3, #2]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	3b01      	subs	r3, #1
 800b430:	2b06      	cmp	r3, #6
 800b432:	f200 8128 	bhi.w	800b686 <USBD_GetDescriptor+0x276>
 800b436:	a201      	add	r2, pc, #4	@ (adr r2, 800b43c <USBD_GetDescriptor+0x2c>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b459 	.word	0x0800b459
 800b440:	0800b471 	.word	0x0800b471
 800b444:	0800b4b1 	.word	0x0800b4b1
 800b448:	0800b687 	.word	0x0800b687
 800b44c:	0800b687 	.word	0x0800b687
 800b450:	0800b627 	.word	0x0800b627
 800b454:	0800b653 	.word	0x0800b653
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	7c12      	ldrb	r2, [r2, #16]
 800b464:	f107 0108 	add.w	r1, r7, #8
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
 800b46c:	60f8      	str	r0, [r7, #12]
      break;
 800b46e:	e112      	b.n	800b696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	7c1b      	ldrb	r3, [r3, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10d      	bne.n	800b494 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b480:	f107 0208 	add.w	r2, r7, #8
 800b484:	4610      	mov	r0, r2
 800b486:	4798      	blx	r3
 800b488:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3301      	adds	r3, #1
 800b48e:	2202      	movs	r2, #2
 800b490:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b492:	e100      	b.n	800b696 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49c:	f107 0208 	add.w	r2, r7, #8
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4798      	blx	r3
 800b4a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	701a      	strb	r2, [r3, #0]
      break;
 800b4ae:	e0f2      	b.n	800b696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	885b      	ldrh	r3, [r3, #2]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	f200 80ac 	bhi.w	800b614 <USBD_GetDescriptor+0x204>
 800b4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c4 <USBD_GetDescriptor+0xb4>)
 800b4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c2:	bf00      	nop
 800b4c4:	0800b4dd 	.word	0x0800b4dd
 800b4c8:	0800b511 	.word	0x0800b511
 800b4cc:	0800b545 	.word	0x0800b545
 800b4d0:	0800b579 	.word	0x0800b579
 800b4d4:	0800b5ad 	.word	0x0800b5ad
 800b4d8:	0800b5e1 	.word	0x0800b5e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00b      	beq.n	800b500 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	7c12      	ldrb	r2, [r2, #16]
 800b4f4:	f107 0108 	add.w	r1, r7, #8
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4fe:	e091      	b.n	800b624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fab2 	bl	800ba6c <USBD_CtlError>
            err++;
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	3301      	adds	r3, #1
 800b50c:	72fb      	strb	r3, [r7, #11]
          break;
 800b50e:	e089      	b.n	800b624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	7c12      	ldrb	r2, [r2, #16]
 800b528:	f107 0108 	add.w	r1, r7, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b532:	e077      	b.n	800b624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fa98 	bl	800ba6c <USBD_CtlError>
            err++;
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	3301      	adds	r3, #1
 800b540:	72fb      	strb	r3, [r7, #11]
          break;
 800b542:	e06f      	b.n	800b624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00b      	beq.n	800b568 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	7c12      	ldrb	r2, [r2, #16]
 800b55c:	f107 0108 	add.w	r1, r7, #8
 800b560:	4610      	mov	r0, r2
 800b562:	4798      	blx	r3
 800b564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b566:	e05d      	b.n	800b624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa7e 	bl	800ba6c <USBD_CtlError>
            err++;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	3301      	adds	r3, #1
 800b574:	72fb      	strb	r3, [r7, #11]
          break;
 800b576:	e055      	b.n	800b624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00b      	beq.n	800b59c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	7c12      	ldrb	r2, [r2, #16]
 800b590:	f107 0108 	add.w	r1, r7, #8
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
 800b598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b59a:	e043      	b.n	800b624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa64 	bl	800ba6c <USBD_CtlError>
            err++;
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5aa:	e03b      	b.n	800b624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00b      	beq.n	800b5d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	7c12      	ldrb	r2, [r2, #16]
 800b5c4:	f107 0108 	add.w	r1, r7, #8
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	4798      	blx	r3
 800b5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ce:	e029      	b.n	800b624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fa4a 	bl	800ba6c <USBD_CtlError>
            err++;
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b5de:	e021      	b.n	800b624 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00b      	beq.n	800b604 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	7c12      	ldrb	r2, [r2, #16]
 800b5f8:	f107 0108 	add.w	r1, r7, #8
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4798      	blx	r3
 800b600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b602:	e00f      	b.n	800b624 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa30 	bl	800ba6c <USBD_CtlError>
            err++;
 800b60c:	7afb      	ldrb	r3, [r7, #11]
 800b60e:	3301      	adds	r3, #1
 800b610:	72fb      	strb	r3, [r7, #11]
          break;
 800b612:	e007      	b.n	800b624 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa28 	bl	800ba6c <USBD_CtlError>
          err++;
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	3301      	adds	r3, #1
 800b620:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b622:	bf00      	nop
      }
      break;
 800b624:	e037      	b.n	800b696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	7c1b      	ldrb	r3, [r3, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d109      	bne.n	800b642 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b636:	f107 0208 	add.w	r2, r7, #8
 800b63a:	4610      	mov	r0, r2
 800b63c:	4798      	blx	r3
 800b63e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b640:	e029      	b.n	800b696 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fa11 	bl	800ba6c <USBD_CtlError>
        err++;
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	3301      	adds	r3, #1
 800b64e:	72fb      	strb	r3, [r7, #11]
      break;
 800b650:	e021      	b.n	800b696 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	7c1b      	ldrb	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10d      	bne.n	800b676 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b662:	f107 0208 	add.w	r2, r7, #8
 800b666:	4610      	mov	r0, r2
 800b668:	4798      	blx	r3
 800b66a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	3301      	adds	r3, #1
 800b670:	2207      	movs	r2, #7
 800b672:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b674:	e00f      	b.n	800b696 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f9f7 	bl	800ba6c <USBD_CtlError>
        err++;
 800b67e:	7afb      	ldrb	r3, [r7, #11]
 800b680:	3301      	adds	r3, #1
 800b682:	72fb      	strb	r3, [r7, #11]
      break;
 800b684:	e007      	b.n	800b696 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f9ef 	bl	800ba6c <USBD_CtlError>
      err++;
 800b68e:	7afb      	ldrb	r3, [r7, #11]
 800b690:	3301      	adds	r3, #1
 800b692:	72fb      	strb	r3, [r7, #11]
      break;
 800b694:	bf00      	nop
  }

  if (err != 0U)
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d11e      	bne.n	800b6da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	88db      	ldrh	r3, [r3, #6]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d016      	beq.n	800b6d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b6a4:	893b      	ldrh	r3, [r7, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00e      	beq.n	800b6c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	88da      	ldrh	r2, [r3, #6]
 800b6ae:	893b      	ldrh	r3, [r7, #8]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bf28      	it	cs
 800b6b4:	4613      	movcs	r3, r2
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6ba:	893b      	ldrh	r3, [r7, #8]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	68f9      	ldr	r1, [r7, #12]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fa44 	bl	800bb4e <USBD_CtlSendData>
 800b6c6:	e009      	b.n	800b6dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f9ce 	bl	800ba6c <USBD_CtlError>
 800b6d0:	e004      	b.n	800b6dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fa78 	bl	800bbc8 <USBD_CtlSendStatus>
 800b6d8:	e000      	b.n	800b6dc <USBD_GetDescriptor+0x2cc>
    return;
 800b6da:	bf00      	nop
  }
}
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop

0800b6e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	889b      	ldrh	r3, [r3, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d131      	bne.n	800b75a <USBD_SetAddress+0x76>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	88db      	ldrh	r3, [r3, #6]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d12d      	bne.n	800b75a <USBD_SetAddress+0x76>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	885b      	ldrh	r3, [r3, #2]
 800b702:	2b7f      	cmp	r3, #127	@ 0x7f
 800b704:	d829      	bhi.n	800b75a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	885b      	ldrh	r3, [r3, #2]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b710:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d104      	bne.n	800b728 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f9a3 	bl	800ba6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b726:	e01d      	b.n	800b764 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7bfa      	ldrb	r2, [r7, #15]
 800b72c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fda1 	bl	800c27c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa44 	bl	800bbc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d004      	beq.n	800b750 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2202      	movs	r2, #2
 800b74a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b74e:	e009      	b.n	800b764 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b758:	e004      	b.n	800b764 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f985 	bl	800ba6c <USBD_CtlError>
  }
}
 800b762:	bf00      	nop
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	885b      	ldrh	r3, [r3, #2]
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	4b4c      	ldr	r3, [pc, #304]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b782:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b784:	4b4b      	ldr	r3, [pc, #300]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d905      	bls.n	800b798 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f96c 	bl	800ba6c <USBD_CtlError>
    return USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	e088      	b.n	800b8aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d002      	beq.n	800b7aa <USBD_SetConfig+0x3e>
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d025      	beq.n	800b7f4 <USBD_SetConfig+0x88>
 800b7a8:	e071      	b.n	800b88e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7aa:	4b42      	ldr	r3, [pc, #264]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01c      	beq.n	800b7ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b7b2:	4b40      	ldr	r3, [pc, #256]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7bc:	4b3d      	ldr	r3, [pc, #244]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff f9ba 	bl	800ab3c <USBD_SetClassConfig>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d004      	beq.n	800b7dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f949 	bl	800ba6c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7da:	e065      	b.n	800b8a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f9f3 	bl	800bbc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2203      	movs	r2, #3
 800b7e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b7ea:	e05d      	b.n	800b8a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f9eb 	bl	800bbc8 <USBD_CtlSendStatus>
      break;
 800b7f2:	e059      	b.n	800b8a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b7f4:	4b2f      	ldr	r3, [pc, #188]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d112      	bne.n	800b822 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2202      	movs	r2, #2
 800b800:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b804:	4b2b      	ldr	r3, [pc, #172]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b80e:	4b29      	ldr	r3, [pc, #164]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff f9ad 	bl	800ab74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f9d4 	bl	800bbc8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b820:	e042      	b.n	800b8a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b822:	4b24      	ldr	r3, [pc, #144]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d02a      	beq.n	800b886 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff f99b 	bl	800ab74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b83e:	4b1d      	ldr	r3, [pc, #116]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b848:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff f974 	bl	800ab3c <USBD_SetClassConfig>
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00f      	beq.n	800b87e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f903 	bl	800ba6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff f980 	bl	800ab74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2202      	movs	r2, #2
 800b878:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b87c:	e014      	b.n	800b8a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f9a2 	bl	800bbc8 <USBD_CtlSendStatus>
      break;
 800b884:	e010      	b.n	800b8a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f99e 	bl	800bbc8 <USBD_CtlSendStatus>
      break;
 800b88c:	e00c      	b.n	800b8a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f8eb 	bl	800ba6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b896:	4b07      	ldr	r3, [pc, #28]	@ (800b8b4 <USBD_SetConfig+0x148>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	4619      	mov	r1, r3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff f969 	bl	800ab74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a6:	bf00      	nop
  }

  return ret;
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000df8 	.word	0x20000df8

0800b8b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	88db      	ldrh	r3, [r3, #6]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d004      	beq.n	800b8d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f8cd 	bl	800ba6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8d2:	e023      	b.n	800b91c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	dc02      	bgt.n	800b8e6 <USBD_GetConfig+0x2e>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dc03      	bgt.n	800b8ec <USBD_GetConfig+0x34>
 800b8e4:	e015      	b.n	800b912 <USBD_GetConfig+0x5a>
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d00b      	beq.n	800b902 <USBD_GetConfig+0x4a>
 800b8ea:	e012      	b.n	800b912 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f927 	bl	800bb4e <USBD_CtlSendData>
        break;
 800b900:	e00c      	b.n	800b91c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3304      	adds	r3, #4
 800b906:	2201      	movs	r2, #1
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f91f 	bl	800bb4e <USBD_CtlSendData>
        break;
 800b910:	e004      	b.n	800b91c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f8a9 	bl	800ba6c <USBD_CtlError>
        break;
 800b91a:	bf00      	nop
}
 800b91c:	bf00      	nop
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b934:	b2db      	uxtb	r3, r3
 800b936:	3b01      	subs	r3, #1
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d81e      	bhi.n	800b97a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	88db      	ldrh	r3, [r3, #6]
 800b940:	2b02      	cmp	r3, #2
 800b942:	d004      	beq.n	800b94e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f890 	bl	800ba6c <USBD_CtlError>
        break;
 800b94c:	e01a      	b.n	800b984 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	f043 0202 	orr.w	r2, r3, #2
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	330c      	adds	r3, #12
 800b96e:	2202      	movs	r2, #2
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f8eb 	bl	800bb4e <USBD_CtlSendData>
      break;
 800b978:	e004      	b.n	800b984 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f875 	bl	800ba6c <USBD_CtlError>
      break;
 800b982:	bf00      	nop
  }
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	885b      	ldrh	r3, [r3, #2]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d106      	bne.n	800b9ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f90e 	bl	800bbc8 <USBD_CtlSendStatus>
  }
}
 800b9ac:	bf00      	nop
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d80b      	bhi.n	800b9e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	885b      	ldrh	r3, [r3, #2]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d10c      	bne.n	800b9ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f8f3 	bl	800bbc8 <USBD_CtlSendStatus>
      }
      break;
 800b9e2:	e004      	b.n	800b9ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f840 	bl	800ba6c <USBD_CtlError>
      break;
 800b9ec:	e000      	b.n	800b9f0 <USBD_ClrFeature+0x3c>
      break;
 800b9ee:	bf00      	nop
  }
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	781a      	ldrb	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3301      	adds	r3, #1
 800ba12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	781a      	ldrb	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff faba 	bl	800af9c <SWAPBYTE>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f7ff faad 	bl	800af9c <SWAPBYTE>
 800ba42:	4603      	mov	r3, r0
 800ba44:	461a      	mov	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	3301      	adds	r3, #1
 800ba54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7ff faa0 	bl	800af9c <SWAPBYTE>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	80da      	strh	r2, [r3, #6]
}
 800ba64:	bf00      	nop
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba76:	2180      	movs	r1, #128	@ 0x80
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fb95 	bl	800c1a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba7e:	2100      	movs	r1, #0
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fb91 	bl	800c1a8 <USBD_LL_StallEP>
}
 800ba86:	bf00      	nop
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b086      	sub	sp, #24
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	60f8      	str	r0, [r7, #12]
 800ba96:	60b9      	str	r1, [r7, #8]
 800ba98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d036      	beq.n	800bb12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800baa8:	6938      	ldr	r0, [r7, #16]
 800baaa:	f000 f836 	bl	800bb1a <USBD_GetLen>
 800baae:	4603      	mov	r3, r0
 800bab0:	3301      	adds	r3, #1
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	4413      	add	r3, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	7812      	ldrb	r2, [r2, #0]
 800bac6:	701a      	strb	r2, [r3, #0]
  idx++;
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	3301      	adds	r3, #1
 800bacc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	4413      	add	r3, r2
 800bad4:	2203      	movs	r2, #3
 800bad6:	701a      	strb	r2, [r3, #0]
  idx++;
 800bad8:	7dfb      	ldrb	r3, [r7, #23]
 800bada:	3301      	adds	r3, #1
 800badc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bade:	e013      	b.n	800bb08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bae0:	7dfb      	ldrb	r3, [r7, #23]
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	4413      	add	r3, r2
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	7812      	ldrb	r2, [r2, #0]
 800baea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	3301      	adds	r3, #1
 800baf0:	613b      	str	r3, [r7, #16]
    idx++;
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
 800baf4:	3301      	adds	r3, #1
 800baf6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	2200      	movs	r2, #0
 800bb00:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	3301      	adds	r3, #1
 800bb06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1e7      	bne.n	800bae0 <USBD_GetString+0x52>
 800bb10:	e000      	b.n	800bb14 <USBD_GetString+0x86>
    return;
 800bb12:	bf00      	nop
  }
}
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb2a:	e005      	b.n	800bb38 <USBD_GetLen+0x1e>
  {
    len++;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	3301      	adds	r3, #1
 800bb36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1f5      	bne.n	800bb2c <USBD_GetLen+0x12>
  }

  return len;
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	60b9      	str	r1, [r7, #8]
 800bb58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	2100      	movs	r1, #0
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 fba0 	bl	800c2ba <USBD_LL_Transmit>

  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	2100      	movs	r1, #0
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f000 fb8f 	bl	800c2ba <USBD_LL_Transmit>

  return USBD_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	60f8      	str	r0, [r7, #12]
 800bbae:	60b9      	str	r1, [r7, #8]
 800bbb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 fb9f 	bl	800c2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fb6b 	bl	800c2ba <USBD_LL_Transmit>

  return USBD_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2205      	movs	r2, #5
 800bbfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2200      	movs	r2, #0
 800bc02:	2100      	movs	r1, #0
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fb79 	bl	800c2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800bc18:	2200      	movs	r2, #0
 800bc1a:	490e      	ldr	r1, [pc, #56]	@ (800bc54 <MX_USB_Device_Init+0x40>)
 800bc1c:	480e      	ldr	r0, [pc, #56]	@ (800bc58 <MX_USB_Device_Init+0x44>)
 800bc1e:	f7fe ff1f 	bl	800aa60 <USBD_Init>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bc28:	f7f5 f8f5 	bl	8000e16 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800bc2c:	490b      	ldr	r1, [pc, #44]	@ (800bc5c <MX_USB_Device_Init+0x48>)
 800bc2e:	480a      	ldr	r0, [pc, #40]	@ (800bc58 <MX_USB_Device_Init+0x44>)
 800bc30:	f7fe ff46 	bl	800aac0 <USBD_RegisterClass>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bc3a:	f7f5 f8ec 	bl	8000e16 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bc3e:	4806      	ldr	r0, [pc, #24]	@ (800bc58 <MX_USB_Device_Init+0x44>)
 800bc40:	f7fe ff65 	bl	800ab0e <USBD_Start>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800bc4a:	f7f5 f8e4 	bl	8000e16 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bc4e:	bf00      	nop
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	20000118 	.word	0x20000118
 800bc58:	20000dfc 	.word	0x20000dfc
 800bc5c:	20000010 	.word	0x20000010

0800bc60 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	6039      	str	r1, [r7, #0]
 800bc6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2212      	movs	r2, #18
 800bc70:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800bc72:	4b03      	ldr	r3, [pc, #12]	@ (800bc80 <USBD_HID_DeviceDescriptor+0x20>)
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	20000134 	.word	0x20000134

0800bc84 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	2204      	movs	r2, #4
 800bc94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc96:	4b03      	ldr	r3, [pc, #12]	@ (800bca4 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	20000148 	.word	0x20000148

0800bca8 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	6039      	str	r1, [r7, #0]
 800bcb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	4907      	ldr	r1, [pc, #28]	@ (800bcdc <USBD_HID_ProductStrDescriptor+0x34>)
 800bcbe:	4808      	ldr	r0, [pc, #32]	@ (800bce0 <USBD_HID_ProductStrDescriptor+0x38>)
 800bcc0:	f7ff fee5 	bl	800ba8e <USBD_GetString>
 800bcc4:	e004      	b.n	800bcd0 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	4904      	ldr	r1, [pc, #16]	@ (800bcdc <USBD_HID_ProductStrDescriptor+0x34>)
 800bcca:	4805      	ldr	r0, [pc, #20]	@ (800bce0 <USBD_HID_ProductStrDescriptor+0x38>)
 800bccc:	f7ff fedf 	bl	800ba8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd0:	4b02      	ldr	r3, [pc, #8]	@ (800bcdc <USBD_HID_ProductStrDescriptor+0x34>)
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	200010cc 	.word	0x200010cc
 800bce0:	0800c450 	.word	0x0800c450

0800bce4 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	4904      	ldr	r1, [pc, #16]	@ (800bd04 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800bcf4:	4804      	ldr	r0, [pc, #16]	@ (800bd08 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800bcf6:	f7ff feca 	bl	800ba8e <USBD_GetString>
  return USBD_StrDesc;
 800bcfa:	4b02      	ldr	r3, [pc, #8]	@ (800bd04 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	200010cc 	.word	0x200010cc
 800bd08:	0800c468 	.word	0x0800c468

0800bd0c <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	6039      	str	r1, [r7, #0]
 800bd16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	221a      	movs	r2, #26
 800bd1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd1e:	f000 f843 	bl	800bda8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bd22:	4b02      	ldr	r3, [pc, #8]	@ (800bd2c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	2000014c 	.word	0x2000014c

0800bd30 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d105      	bne.n	800bd4e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4907      	ldr	r1, [pc, #28]	@ (800bd64 <USBD_HID_ConfigStrDescriptor+0x34>)
 800bd46:	4808      	ldr	r0, [pc, #32]	@ (800bd68 <USBD_HID_ConfigStrDescriptor+0x38>)
 800bd48:	f7ff fea1 	bl	800ba8e <USBD_GetString>
 800bd4c:	e004      	b.n	800bd58 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	4904      	ldr	r1, [pc, #16]	@ (800bd64 <USBD_HID_ConfigStrDescriptor+0x34>)
 800bd52:	4805      	ldr	r0, [pc, #20]	@ (800bd68 <USBD_HID_ConfigStrDescriptor+0x38>)
 800bd54:	f7ff fe9b 	bl	800ba8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd58:	4b02      	ldr	r3, [pc, #8]	@ (800bd64 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200010cc 	.word	0x200010cc
 800bd68:	0800c47c 	.word	0x0800c47c

0800bd6c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d105      	bne.n	800bd8a <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4907      	ldr	r1, [pc, #28]	@ (800bda0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800bd82:	4808      	ldr	r0, [pc, #32]	@ (800bda4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800bd84:	f7ff fe83 	bl	800ba8e <USBD_GetString>
 800bd88:	e004      	b.n	800bd94 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4904      	ldr	r1, [pc, #16]	@ (800bda0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800bd8e:	4805      	ldr	r0, [pc, #20]	@ (800bda4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800bd90:	f7ff fe7d 	bl	800ba8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd94:	4b02      	ldr	r3, [pc, #8]	@ (800bda0 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	200010cc 	.word	0x200010cc
 800bda4:	0800c488 	.word	0x0800c488

0800bda8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdae:	4b0f      	ldr	r3, [pc, #60]	@ (800bdec <Get_SerialNum+0x44>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf0 <Get_SerialNum+0x48>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdba:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf4 <Get_SerialNum+0x4c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d009      	beq.n	800bde2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdce:	2208      	movs	r2, #8
 800bdd0:	4909      	ldr	r1, [pc, #36]	@ (800bdf8 <Get_SerialNum+0x50>)
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 f814 	bl	800be00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdd8:	2204      	movs	r2, #4
 800bdda:	4908      	ldr	r1, [pc, #32]	@ (800bdfc <Get_SerialNum+0x54>)
 800bddc:	68b8      	ldr	r0, [r7, #8]
 800bdde:	f000 f80f 	bl	800be00 <IntToUnicode>
  }
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	1fff7590 	.word	0x1fff7590
 800bdf0:	1fff7594 	.word	0x1fff7594
 800bdf4:	1fff7598 	.word	0x1fff7598
 800bdf8:	2000014e 	.word	0x2000014e
 800bdfc:	2000015e 	.word	0x2000015e

0800be00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	4613      	mov	r3, r2
 800be0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]
 800be16:	e027      	b.n	800be68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	0f1b      	lsrs	r3, r3, #28
 800be1c:	2b09      	cmp	r3, #9
 800be1e:	d80b      	bhi.n	800be38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	0f1b      	lsrs	r3, r3, #28
 800be24:	b2da      	uxtb	r2, r3
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	4619      	mov	r1, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	440b      	add	r3, r1
 800be30:	3230      	adds	r2, #48	@ 0x30
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	e00a      	b.n	800be4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	0f1b      	lsrs	r3, r3, #28
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	4619      	mov	r1, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	440b      	add	r3, r1
 800be48:	3237      	adds	r2, #55	@ 0x37
 800be4a:	b2d2      	uxtb	r2, r2
 800be4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	3301      	adds	r3, #1
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	4413      	add	r3, r2
 800be5e:	2200      	movs	r2, #0
 800be60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	3301      	adds	r3, #1
 800be66:	75fb      	strb	r3, [r7, #23]
 800be68:	7dfa      	ldrb	r2, [r7, #23]
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3d3      	bcc.n	800be18 <IntToUnicode+0x18>
  }
}
 800be70:	bf00      	nop
 800be72:	bf00      	nop
 800be74:	371c      	adds	r7, #28
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
	...

0800be80 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b094      	sub	sp, #80	@ 0x50
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800be88:	f107 030c 	add.w	r3, r7, #12
 800be8c:	2244      	movs	r2, #68	@ 0x44
 800be8e:	2100      	movs	r1, #0
 800be90:	4618      	mov	r0, r3
 800be92:	f000 fa9f 	bl	800c3d4 <memset>
  if(pcdHandle->Instance==USB)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a15      	ldr	r2, [pc, #84]	@ (800bef0 <HAL_PCD_MspInit+0x70>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d122      	bne.n	800bee6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bea0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bea4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bea6:	2300      	movs	r3, #0
 800bea8:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fa fa96 	bl	80063e0 <HAL_RCCEx_PeriphCLKConfig>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d001      	beq.n	800bebe <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800beba:	f7f4 ffac 	bl	8000e16 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bebe:	4b0d      	ldr	r3, [pc, #52]	@ (800bef4 <HAL_PCD_MspInit+0x74>)
 800bec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bec2:	4a0c      	ldr	r2, [pc, #48]	@ (800bef4 <HAL_PCD_MspInit+0x74>)
 800bec4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bec8:	6593      	str	r3, [r2, #88]	@ 0x58
 800beca:	4b0a      	ldr	r3, [pc, #40]	@ (800bef4 <HAL_PCD_MspInit+0x74>)
 800becc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bed2:	60bb      	str	r3, [r7, #8]
 800bed4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bed6:	2200      	movs	r2, #0
 800bed8:	2100      	movs	r1, #0
 800beda:	2014      	movs	r0, #20
 800bedc:	f7f6 feeb 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bee0:	2014      	movs	r0, #20
 800bee2:	f7f6 ff02 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bee6:	bf00      	nop
 800bee8:	3750      	adds	r7, #80	@ 0x50
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	40005c00 	.word	0x40005c00
 800bef4:	40021000 	.word	0x40021000

0800bef8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	f7fe fe48 	bl	800aba4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	460b      	mov	r3, r1
 800bf26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bf2e:	78fa      	ldrb	r2, [r7, #3]
 800bf30:	6879      	ldr	r1, [r7, #4]
 800bf32:	4613      	mov	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4413      	add	r3, r2
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	440b      	add	r3, r1
 800bf3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	78fb      	ldrb	r3, [r7, #3]
 800bf44:	4619      	mov	r1, r3
 800bf46:	f7fe fe82 	bl	800ac4e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bf4a:	bf00      	nop
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bf64:	78fa      	ldrb	r2, [r7, #3]
 800bf66:	6879      	ldr	r1, [r7, #4]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	440b      	add	r3, r1
 800bf72:	3324      	adds	r3, #36	@ 0x24
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	78fb      	ldrb	r3, [r7, #3]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	f7fe fecb 	bl	800ad14 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fe ffdf 	bl	800af58 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bf9a:	bf00      	nop
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	795b      	ldrb	r3, [r3, #5]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d001      	beq.n	800bfba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bfb6:	f7f4 ff2e 	bl	8000e16 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bfc0:	7bfa      	ldrb	r2, [r7, #15]
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe ff89 	bl	800aedc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe ff35 	bl	800ae40 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe ff84 	bl	800aefc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7a5b      	ldrb	r3, [r3, #9]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bffc:	4b04      	ldr	r3, [pc, #16]	@ (800c010 <HAL_PCD_SuspendCallback+0x30>)
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	4a03      	ldr	r2, [pc, #12]	@ (800c010 <HAL_PCD_SuspendCallback+0x30>)
 800c002:	f043 0306 	orr.w	r3, r3, #6
 800c006:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	e000ed00 	.word	0xe000ed00

0800c014 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7a5b      	ldrb	r3, [r3, #9]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c024:	4b08      	ldr	r3, [pc, #32]	@ (800c048 <HAL_PCD_ResumeCallback+0x34>)
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	4a07      	ldr	r2, [pc, #28]	@ (800c048 <HAL_PCD_ResumeCallback+0x34>)
 800c02a:	f023 0306 	bic.w	r3, r3, #6
 800c02e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c030:	f000 f99e 	bl	800c370 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe ff74 	bl	800af28 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed00 	.word	0xe000ed00

0800c04c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c054:	4a22      	ldr	r2, [pc, #136]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a20      	ldr	r2, [pc, #128]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c060:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c064:	4b1e      	ldr	r3, [pc, #120]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c066:	4a1f      	ldr	r2, [pc, #124]	@ (800c0e4 <USBD_LL_Init+0x98>)
 800c068:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c06a:	4b1d      	ldr	r3, [pc, #116]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c06c:	2208      	movs	r2, #8
 800c06e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c070:	4b1b      	ldr	r3, [pc, #108]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c072:	2202      	movs	r2, #2
 800c074:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c076:	4b1a      	ldr	r3, [pc, #104]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c078:	2202      	movs	r2, #2
 800c07a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c07c:	4b18      	ldr	r3, [pc, #96]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c07e:	2200      	movs	r2, #0
 800c080:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c082:	4b17      	ldr	r3, [pc, #92]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c084:	2200      	movs	r2, #0
 800c086:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c088:	4b15      	ldr	r3, [pc, #84]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c08e:	4b14      	ldr	r3, [pc, #80]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c090:	2200      	movs	r2, #0
 800c092:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c094:	4812      	ldr	r0, [pc, #72]	@ (800c0e0 <USBD_LL_Init+0x94>)
 800c096:	f7f7 fecc 	bl	8003e32 <HAL_PCD_Init>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c0a0:	f7f4 feb9 	bl	8000e16 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c0aa:	2318      	movs	r3, #24
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	f7f9 fb3b 	bl	800572a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c0ba:	2358      	movs	r3, #88	@ 0x58
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2180      	movs	r1, #128	@ 0x80
 800c0c0:	f7f9 fb33 	bl	800572a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c0ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	2181      	movs	r1, #129	@ 0x81
 800c0d2:	f7f9 fb2a 	bl	800572a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	200012cc 	.word	0x200012cc
 800c0e4:	40005c00 	.word	0x40005c00

0800c0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7f7 ff65 	bl	8003fce <HAL_PCD_Start>
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 f936 	bl	800c37c <USBD_Get_USB_Status>
 800c110:	4603      	mov	r3, r0
 800c112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c114:	7bbb      	ldrb	r3, [r7, #14]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	4608      	mov	r0, r1
 800c128:	4611      	mov	r1, r2
 800c12a:	461a      	mov	r2, r3
 800c12c:	4603      	mov	r3, r0
 800c12e:	70fb      	strb	r3, [r7, #3]
 800c130:	460b      	mov	r3, r1
 800c132:	70bb      	strb	r3, [r7, #2]
 800c134:	4613      	mov	r3, r2
 800c136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c146:	78bb      	ldrb	r3, [r7, #2]
 800c148:	883a      	ldrh	r2, [r7, #0]
 800c14a:	78f9      	ldrb	r1, [r7, #3]
 800c14c:	f7f8 f8ac 	bl	80042a8 <HAL_PCD_EP_Open>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 f910 	bl	800c37c <USBD_Get_USB_Status>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c160:	7bbb      	ldrb	r3, [r7, #14]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b084      	sub	sp, #16
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	460b      	mov	r3, r1
 800c174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c184:	78fa      	ldrb	r2, [r7, #3]
 800c186:	4611      	mov	r1, r2
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f8 f8ec 	bl	8004366 <HAL_PCD_EP_Close>
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	4618      	mov	r0, r3
 800c196:	f000 f8f1 	bl	800c37c <USBD_Get_USB_Status>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c1c2:	78fa      	ldrb	r2, [r7, #3]
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7f8 f97d 	bl	80044c6 <HAL_PCD_EP_SetStall>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 f8d2 	bl	800c37c <USBD_Get_USB_Status>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b084      	sub	sp, #16
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c200:	78fa      	ldrb	r2, [r7, #3]
 800c202:	4611      	mov	r1, r2
 800c204:	4618      	mov	r0, r3
 800c206:	f7f8 f9b0 	bl	800456a <HAL_PCD_EP_ClrStall>
 800c20a:	4603      	mov	r3, r0
 800c20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f8b3 	bl	800c37c <USBD_Get_USB_Status>
 800c216:	4603      	mov	r3, r0
 800c218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	da0b      	bge.n	800c258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c246:	68f9      	ldr	r1, [r7, #12]
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	440b      	add	r3, r1
 800c252:	3312      	adds	r3, #18
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	e00b      	b.n	800c270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c258:	78fb      	ldrb	r3, [r7, #3]
 800c25a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c25e:	68f9      	ldr	r1, [r7, #12]
 800c260:	4613      	mov	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4413      	add	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	440b      	add	r3, r1
 800c26a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c296:	78fa      	ldrb	r2, [r7, #3]
 800c298:	4611      	mov	r1, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f7 ffe0 	bl	8004260 <HAL_PCD_SetAddress>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 f868 	bl	800c37c <USBD_Get_USB_Status>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b086      	sub	sp, #24
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	60f8      	str	r0, [r7, #12]
 800c2c2:	607a      	str	r2, [r7, #4]
 800c2c4:	603b      	str	r3, [r7, #0]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c2d8:	7af9      	ldrb	r1, [r7, #11]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	f7f8 f8bb 	bl	8004458 <HAL_PCD_EP_Transmit>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 f847 	bl	800c37c <USBD_Get_USB_Status>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	607a      	str	r2, [r7, #4]
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	460b      	mov	r3, r1
 800c30a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c31a:	7af9      	ldrb	r1, [r7, #11]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	f7f8 f869 	bl	80043f6 <HAL_PCD_EP_Receive>
 800c324:	4603      	mov	r3, r0
 800c326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 f826 	bl	800c37c <USBD_Get_USB_Status>
 800c330:	4603      	mov	r3, r0
 800c332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c334:	7dbb      	ldrb	r3, [r7, #22]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c348:	4b03      	ldr	r3, [pc, #12]	@ (800c358 <USBD_static_malloc+0x18>)
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	200015a8 	.word	0x200015a8

0800c35c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]

}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c374:	f7f4 fd04 	bl	8000d80 <SystemClock_Config>
}
 800c378:	bf00      	nop
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d817      	bhi.n	800c3c0 <USBD_Get_USB_Status+0x44>
 800c390:	a201      	add	r2, pc, #4	@ (adr r2, 800c398 <USBD_Get_USB_Status+0x1c>)
 800c392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c396:	bf00      	nop
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3af 	.word	0x0800c3af
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c3bb 	.word	0x0800c3bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ac:	e00b      	b.n	800c3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b2:	e008      	b.n	800c3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b8:	e005      	b.n	800c3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3be:	e002      	b.n	800c3c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c4:	bf00      	nop
  }
  return usb_status;
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <memset>:
 800c3d4:	4402      	add	r2, r0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d100      	bne.n	800c3de <memset+0xa>
 800c3dc:	4770      	bx	lr
 800c3de:	f803 1b01 	strb.w	r1, [r3], #1
 800c3e2:	e7f9      	b.n	800c3d8 <memset+0x4>

0800c3e4 <__libc_init_array>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800c41c <__libc_init_array+0x38>)
 800c3e8:	4c0d      	ldr	r4, [pc, #52]	@ (800c420 <__libc_init_array+0x3c>)
 800c3ea:	1b64      	subs	r4, r4, r5
 800c3ec:	10a4      	asrs	r4, r4, #2
 800c3ee:	2600      	movs	r6, #0
 800c3f0:	42a6      	cmp	r6, r4
 800c3f2:	d109      	bne.n	800c408 <__libc_init_array+0x24>
 800c3f4:	4d0b      	ldr	r5, [pc, #44]	@ (800c424 <__libc_init_array+0x40>)
 800c3f6:	4c0c      	ldr	r4, [pc, #48]	@ (800c428 <__libc_init_array+0x44>)
 800c3f8:	f000 f818 	bl	800c42c <_init>
 800c3fc:	1b64      	subs	r4, r4, r5
 800c3fe:	10a4      	asrs	r4, r4, #2
 800c400:	2600      	movs	r6, #0
 800c402:	42a6      	cmp	r6, r4
 800c404:	d105      	bne.n	800c412 <__libc_init_array+0x2e>
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	f855 3b04 	ldr.w	r3, [r5], #4
 800c40c:	4798      	blx	r3
 800c40e:	3601      	adds	r6, #1
 800c410:	e7ee      	b.n	800c3f0 <__libc_init_array+0xc>
 800c412:	f855 3b04 	ldr.w	r3, [r5], #4
 800c416:	4798      	blx	r3
 800c418:	3601      	adds	r6, #1
 800c41a:	e7f2      	b.n	800c402 <__libc_init_array+0x1e>
 800c41c:	0800c720 	.word	0x0800c720
 800c420:	0800c720 	.word	0x0800c720
 800c424:	0800c720 	.word	0x0800c720
 800c428:	0800c724 	.word	0x0800c724

0800c42c <_init>:
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42e:	bf00      	nop
 800c430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c432:	bc08      	pop	{r3}
 800c434:	469e      	mov	lr, r3
 800c436:	4770      	bx	lr

0800c438 <_fini>:
 800c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43a:	bf00      	nop
 800c43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c43e:	bc08      	pop	{r3}
 800c440:	469e      	mov	lr, r3
 800c442:	4770      	bx	lr
